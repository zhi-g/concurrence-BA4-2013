
concurrence.elf:     file format elf32-littlenios2
concurrence.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x0000de9c memsz 0x0000de9c flags r-x
    LOAD off    0x00010030 vaddr 0x0000e030 paddr 0x0000fa90 align 2**12
         filesz 0x00001a60 memsz 0x00001a60 flags rw-
    LOAD off    0x000124f0 vaddr 0x000114f0 paddr 0x000114f0 align 2**12
         filesz 0x00000000 memsz 0x000007c0 flags rw-
    LOAD off    0x00012000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00012000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000da74  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000428  0000dc08  0000dc08  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a60  0000e030  0000fa90  00010030  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007c0  000114f0  000114f0  000124f0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  00012048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000163e  00000000  00000000  00012d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000247f9  00000000  00000000  000143be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007f2f  00000000  00000000  00038bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000147ec  00000000  00000000  00040ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001bb8  00000000  00000000  000552d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002244  00000000  00000000  00056e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c25c  00000000  00000000  000590d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0006532c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00065350  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069153  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00069156  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069162  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069163  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00069164  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00069168  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006916c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00069170  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006917b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00069186  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00069191  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00069199  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  000691c4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
0000dc08 l    d  .rodata	00000000 .rodata
0000e030 l    d  .rwdata	00000000 .rwdata
000114f0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 applicationEtape1.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 system_m.c
00000000 l    df *ABS*	00000000 kernel.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001874 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000e030 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002410 l     F .text	00000058 __sprint_r
0000dd62 l     O .rodata	00000010 blanks.3452
0000dd52 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00004474 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00004628 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006024 l     F .text	00000058 std
00006130 l     F .text	00000008 __fp_lock
00006138 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000fa64 l     O .rwdata	00000004 charset
0000dd94 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000dedc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009a74 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b2c8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b328 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b354 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b488 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b768 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b848 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b9a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000bbd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000fa84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000be6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e9ec l     O .rwdata	00001060 jtag_uart_0
0000bf5c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c19c l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c3c4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ca40 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000cd64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d188 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d2c4 l     F .text	000000dc alt_file_locked
0000d528 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000ddc g     F .text	00000144 addLast
00007600 g     F .text	00000094 _mprec_log10
000076ec g     F .text	00000088 __any_on
00008d88 g     F .text	00000070 _isatty_r
0000deb4 g     O .rodata	00000028 __mprec_tinytens
0000ba04 g     F .text	0000006c alt_main
00002278 g     F .text	000000a0 _puts_r
00011a20 g     O .bss	00000100 alt_irq
00008df8 g     F .text	00000078 _lseek_r
0000176c g       .text	00000000 _transfer
00000d4c g     F .text	0000004c transfer
00000678 g     F .text	00000084 consommateur1
0000fa90 g       *ABS*	00000000 __flash_rwdata_start
0000a594 g     F .text	00000088 __eqdf2
00001238 g     F .text	000000d8 creerVerrou
00011cb0 g       *ABS*	00000000 __alt_heap_start
00002200 g     F .text	00000044 printf
00008854 g     F .text	00000068 __sseek
0000608c g     F .text	000000a4 __sinit
00006d64 g     F .text	00000084 _setlocale_r
0000618c g     F .text	00000068 __sfmoreglue
0000ba90 g     F .text	00000020 __malloc_unlock
0000707c g     F .text	000000e0 memmove
000115b4 g     O .bss	0000000c tampon
0000617c g     F .text	00000010 _cleanup
00007774 g     F .text	000000bc _Balloc
0000a6a4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
000114f8 g     O .bss	00000004 edge_capture
00000000 g       *ABS*	00000000 __flash_exceptions_start
00008d14 g     F .text	00000074 _fstat_r
00000be8 g     F .text	00000060 init_button
0001151c g     O .bss	00000004 errno
00011534 g     O .bss	00000004 alt_argv
00011500 g     O .bss	00000004 running
00017a4c g       *ABS*	00000000 _gp
00011568 g     O .bss	0000000c output
0000e86c g     O .rwdata	00000180 alt_fd_list
000115c0 g     O .bss	00000078 processes
0000d74c g     F .text	00000094 alt_find_dev
00002160 g     F .text	000000a0 memcpy
0000fa4c g     O .rwdata	00000004 readyList
00006170 g     F .text	0000000c _cleanup_r
0000a83c g     F .text	000000f8 __floatsidf
0000d24c g     F .text	00000078 alt_io_redirect
0000a7b4 g     F .text	00000088 __ltdf2
0000dc08 g       *ABS*	00000000 __DTOR_END__
00002318 g     F .text	00000014 puts
000001d0 g     F .text	00000194 deposer
0001150c g     O .bss	00000004 nbLocks
00007550 g     F .text	000000b0 __ratio
000114fc g     O .bss	00000004 timer_capture
0000c5dc g     F .text	00000224 altera_avalon_jtag_uart_read
00001a0c g     F .text	00000014 malloc
00002244 g     F .text	00000034 _printf_r
000019b0 g     F .text	00000008 __udivsi3
0000b6a8 g     F .text	000000c0 isatty
0000ddc4 g     O .rodata	000000c8 __mprec_tens
00006d40 g     F .text	00000008 __locale_charset
00000ca0 g     F .text	00000050 init_clock
0000d9b8 g     F .text	00000090 alt_icache_flush
000005f4 g     F .text	00000084 consommateur0
00011510 g     O .bss	00000004 __malloc_top_pad
00011574 g     O .bss	0000000c input
0000fa60 g     O .rwdata	00000004 __mb_cur_max
00006d48 g     F .text	0000000c _localeconv_r
00007e6c g     F .text	0000003c __i2b
00006724 g     F .text	0000049c __sfvwrite_r
0000232c g     F .text	00000070 _sbrk_r
00008e70 g     F .text	00000078 _read_r
0000e838 g     O .rwdata	0000000c __lc_ctype
0000fa78 g     O .rwdata	00000004 alt_max_fd
0000afcc g     F .text	00000138 __unpack_d
00008bf0 g     F .text	00000110 _fclose_r
00005ff0 g     F .text	00000034 fflush
00011514 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b4e8 g     F .text	000001c0 alt_irq_register
00011638 g     O .bss	000003e8 locks
00009f04 g     F .text	00000074 __adddf3
00007430 g     F .text	00000120 __b2d
000094c4 g     F .text	000005b0 __umoddi3
0000b8b4 g     F .text	000000f0 lseek
0000fa54 g     O .rwdata	00000004 _global_impure_ptr
000081e8 g     F .text	000005f4 _realloc_r
00011cb0 g       *ABS*	00000000 __bss_end
0000d090 g     F .text	000000f8 alt_iic_isr_register
0000d620 g     F .text	0000010c alt_tick
00008ee8 g     F .text	000005dc __udivdi3
0000de8c g     O .rodata	00000028 __mprec_bigtens
000080c8 g     F .text	00000120 __s2b
0000aa0c g     F .text	00000194 __floatunsidf
00011504 g     O .bss	00000004 nextP
00007350 g     F .text	00000060 __mcmp
00006158 g     F .text	00000018 __fp_lock_all
000016cc g     F .text	00000084 signalAll
0000d048 g     F .text	00000048 alt_ic_irq_enabled
0000d588 g     F .text	00000098 alt_alarm_stop
0001152c g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
0000e844 g     O .rwdata	00000028 alt_dev_null
00011544 g     O .bss	0000000c numVerrou
0000cc94 g     F .text	0000001c alt_dcache_flush_all
0000721c g     F .text	00000070 __hi0bits
0000a934 g     F .text	000000d8 __fixdfsi
00000d98 g     F .text	00000044 iotransfer
0000fa90 g       *ABS*	00000000 __ram_rwdata_end
0000141c g     F .text	00000094 deverrouiller
0000fa70 g     O .rwdata	00000008 alt_dev_list
0000bd4c g     F .text	00000120 write
0000e030 g       *ABS*	00000000 __ram_rodata_end
0000b3b4 g     F .text	000000d4 fstat
000010b0 g     F .text	0000010c creerProcessus
00001310 g     F .text	0000010c verrouiller
00000f20 g     F .text	00000074 addFirst
00007fa8 g     F .text	00000120 __pow5mult
00011520 g     O .bss	00000004 __nlocale_changed
000019b8 g     F .text	00000008 __umodsi3
00011cb0 g       *ABS*	00000000 end
00011508 g     O .bss	00000004 nbProcess
00001050 g     F .text	00000060 head
0000c0dc g     F .text	000000c0 altera_avalon_jtag_uart_init
00001868 g       .text	00000000 allowInterrupts
0000dc04 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000cab0 g     F .text	00000090 alt_avalon_timer_sc_init
0000ac38 g     F .text	00000080 __clzsi2
0000c800 g     F .text	00000240 altera_avalon_jtag_uart_write
0000607c g     F .text	00000004 __sfp_lock_acquire
00006f98 g     F .text	000000e4 memchr
00002468 g     F .text	00001eac ___vfprintf_internal_r
00006410 g     F .text	00000314 _free_r
00004478 g     F .text	000001b0 __call_exitprocs
000114f0 g     O .bss	00000008 interruptVector
00011524 g     O .bss	00000004 __mlocale_changed
0000fa5c g     O .rwdata	00000004 __malloc_sbrk_base
00000194 g     F .text	0000003c _start
0001153c g     O .bss	00000004 _alt_tick_rate
00007b38 g     F .text	0000014c __lshift
00011540 g     O .bss	00000004 _alt_nticks
00001640 g     F .text	0000008c signal
0000bab0 g     F .text	00000120 read
0000bf00 g     F .text	0000005c alt_sys_init
0000dad0 g     F .text	00000134 __register_exitproc
00007c84 g     F .text	000001e8 __multiply
0000c474 g     F .text	00000074 altera_avalon_jtag_uart_close
0000e030 g       *ABS*	00000000 __ram_rwdata_start
0000dc08 g       *ABS*	00000000 __ram_rodata_start
0001158c g     O .bss	00000028 __malloc_current_mallinfo
00007830 g     F .text	0000017c __d2b
0000185c g       .text	00000000 maskInterrupts
0000bf94 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d900 g     F .text	000000b8 alt_get_fd
0000b104 g     F .text	000000c8 __fpcmp_parts_d
00008b80 g     F .text	00000070 _close_r
0000da5c g     F .text	00000074 memcmp
0000c044 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00011cb0 g       *ABS*	00000000 __alt_stack_base
0000c08c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004338 g     F .text	0000013c __swsetup_r
0000a33c g     F .text	00000258 __divdf3
000061f4 g     F .text	000000f0 __sfp
00007694 g     F .text	00000058 __copybits
0000e430 g     O .rwdata	00000408 __malloc_av_
00006088 g     F .text	00000004 __sinit_lock_release
00000364 g     F .text	000001c0 prelever
00009f78 g     F .text	000003c4 __muldf3
00008938 g     F .text	00000060 __sread
0000d7e0 g     F .text	00000120 alt_find_file
0000ccb0 g     F .text	000000b4 alt_dev_llist_insert
0000ba70 g     F .text	00000020 __malloc_lock
0000bc90 g     F .text	000000bc sbrk
00005df4 g     F .text	000001fc _fflush_r
00008acc g     F .text	000000b4 _calloc_r
000114f0 g       *ABS*	00000000 __bss_start
0000715c g     F .text	00000098 memset
00000780 g     F .text	00000238 main
00000a8c g     F .text	000000d8 insertTail
00011538 g     O .bss	00000004 alt_envp
00011518 g     O .bss	00000004 __malloc_max_total_mem
0000bfec g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000159c g     F .text	000000a4 await
00000c48 g     F .text	00000058 handle_timer_interrupts
0000884c g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008d00 g     F .text	00000014 fclose
00011b20 g     O .bss	00000190 _atexit0
00004840 g     F .text	000015b4 _dtoa_r
00001a20 g     F .text	00000740 _malloc_r
0000fa7c g     O .rwdata	00000004 alt_errno
00006c88 g     F .text	000000b8 _fwalk
000018f0 g     F .text	00000060 __divsi3
0000dee8 g     O .rodata	00000014 __thenan_df
000062e4 g     F .text	0000012c _malloc_trim_r
0000dc08 g       *ABS*	00000000 __CTOR_END__
000014b0 g     F .text	000000ec creerCondition
00008998 g     F .text	000000bc strcmp
0000dc08 g       *ABS*	00000000 __flash_rodata_start
0000dc08 g       *ABS*	00000000 __DTOR_LIST__
0000a61c g     F .text	00000088 __nedf2
0000becc g     F .text	00000034 alt_irq_init
0000bc30 g     F .text	00000060 alt_release_fd
000006fc g     F .text	00000084 consommateur2
0000defc g     O .rodata	00000100 __clz_tab
00011528 g     O .bss	00000004 _PathLocale
0000da48 g     F .text	00000014 atexit
00008a54 g     F .text	00000078 _write_r
00006de8 g     F .text	0000001c setlocale
0000fa50 g     O .rwdata	00000004 _impure_ptr
00011530 g     O .bss	00000004 alt_argc
0000ce28 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
000073b0 g     F .text	00000080 __ulp
000087dc g     F .text	00000040 __isinfd
00006140 g     F .text	00000018 __fp_unlock_all
00000f94 g     F .text	000000bc removeHead
0000fa68 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
00006d54 g     F .text	00000010 localeconv
000009b8 g     F .text	000000d4 removeHeadI
0000cebc g     F .text	00000050 alt_ic_isr_register
0000fa90 g       *ABS*	00000000 _edata
00011cb0 g       *ABS*	00000000 _end
00000cf0 g     F .text	0000005c newProcess
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c4e8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000cfa8 g     F .text	000000a0 alt_ic_irq_disable
000088bc g     F .text	0000007c __swrite
0000fa58 g     O .rwdata	00000004 __malloc_trim_threshold
0000d72c g     F .text	00000020 altera_nios2_qsys_irq_init
000019c0 g     F .text	00000038 exit
00006bc0 g     F .text	000000c8 _fwalk_reent
000079ac g     F .text	0000018c __mdiff
00001950 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
00006080 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000011bc g     F .text	0000007c start
0000881c g     F .text	00000030 __isnand
0000b394 g     F .text	00000020 _exit
0000cb40 g     F .text	00000154 alt_alarm_start
0000aba0 g     F .text	00000098 __muldi3
00006e04 g     F .text	00000194 __smakebuf_r
0000239c g     F .text	00000074 strlen
00011550 g     O .bss	00000018 numCondition
0000d3a0 g     F .text	00000188 open
0000a72c g     F .text	00000088 __gedf2
00001750 g       .text	00000000 _createStack
0000ce8c g     F .text	00000030 alt_icache_flush_all
0000fa80 g     O .rwdata	00000004 alt_priority_mask
0000cf0c g     F .text	0000009c alt_ic_irq_enable
00004314 g     F .text	00000024 __vfprintf_internal
00000524 g     F .text	000000d0 producteur
00009e84 g     F .text	00000080 __subdf3
00011580 g     O .bss	0000000c nbElement
0000728c g     F .text	000000c4 __lo0bits
0000fa88 g     O .rwdata	00000008 alt_alarm_list
0000cdc4 g     F .text	00000064 _do_ctors
00000b64 g     F .text	00000084 handle_button_interrupts
0000b1cc g     F .text	000000fc close
0000b7c8 g     F .text	00000080 alt_load
0000acb8 g     F .text	00000314 __pack_d
000019f8 g     F .text	00000014 free
00006084 g     F .text	00000004 __sinit_lock_acquire
00007ea8 g     F .text	00000100 __multadd
000071f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00074 	movhi	r3,1
 2000134:	18c68804 	addi	r3,r3,6688
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00074 	movhi	r3,1
 200014c:	18c68804 	addi	r3,r3,6688
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a0:	d69e9314 	ori	gp,gp,31308
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a8:	10853c14 	ori	r2,r2,5360

    movhi r3, %hi(__bss_end)
     1ac:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b0:	18c72c14 	ori	r3,r3,7344

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	000b7c80 	call	b7c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	000ba040 	call	ba04 <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <deposer>:
int output[NBTAMPON] = { 0 }; //out pointer for each buffer which will increase upon getting a new element
int input[NBTAMPON] = { 0 }; //in pointer for each buffer which will increase upon putting a new element
int nbElement[NBTAMPON] = { 0 }; //number of actual elements in each buffer

//Function which is used by producer to put an element k into buffer t 
void deposer(int t, int k) {
     1d0:	defffc04 	addi	sp,sp,-16
     1d4:	dfc00315 	stw	ra,12(sp)
     1d8:	df000215 	stw	fp,8(sp)
     1dc:	df000204 	addi	fp,sp,8
     1e0:	e13ffe15 	stw	r4,-8(fp)
     1e4:	e17fff15 	stw	r5,-4(fp)
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
     1e8:	e0bffe17 	ldw	r2,-8(fp)
     1ec:	00c00074 	movhi	r3,1
     1f0:	18c55104 	addi	r3,r3,5444
     1f4:	1085883a 	add	r2,r2,r2
     1f8:	1085883a 	add	r2,r2,r2
     1fc:	10c5883a 	add	r2,r2,r3
     200:	11000017 	ldw	r4,0(r2)
     204:	00013100 	call	1310 <verrouiller>
	//If buffer t is full it should wait
	while (nbElement[t] == TAILLETAMPON) {
     208:	00000e06 	br	244 <deposer+0x74>
		await(numCondition[numVerrou[t]][1]);
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	00c00074 	movhi	r3,1
     214:	18c55104 	addi	r3,r3,5444
     218:	1085883a 	add	r2,r2,r2
     21c:	1085883a 	add	r2,r2,r2
     220:	10c5883a 	add	r2,r2,r3
     224:	10800017 	ldw	r2,0(r2)
     228:	00c00074 	movhi	r3,1
     22c:	18c55404 	addi	r3,r3,5456
     230:	100490fa 	slli	r2,r2,3
     234:	10c5883a 	add	r2,r2,r3
     238:	10800104 	addi	r2,r2,4
     23c:	11000017 	ldw	r4,0(r2)
     240:	000159c0 	call	159c <await>
//Function which is used by producer to put an element k into buffer t 
void deposer(int t, int k) {
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
	//If buffer t is full it should wait
	while (nbElement[t] == TAILLETAMPON) {
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	00c00074 	movhi	r3,1
     24c:	18c56004 	addi	r3,r3,5504
     250:	1085883a 	add	r2,r2,r2
     254:	1085883a 	add	r2,r2,r2
     258:	10c5883a 	add	r2,r2,r3
     25c:	10800017 	ldw	r2,0(r2)
     260:	10800060 	cmpeqi	r2,r2,1
     264:	103fe91e 	bne	r2,zero,20c <deposer+0x3c>
		await(numCondition[numVerrou[t]][1]);
	}
	//Put the element k into buffer t
	tampon[t][input[t]] = k;
     268:	e13ffe17 	ldw	r4,-8(fp)
     26c:	e0bffe17 	ldw	r2,-8(fp)
     270:	00c00074 	movhi	r3,1
     274:	18c55d04 	addi	r3,r3,5492
     278:	1085883a 	add	r2,r2,r2
     27c:	1085883a 	add	r2,r2,r2
     280:	10c5883a 	add	r2,r2,r3
     284:	10800017 	ldw	r2,0(r2)
     288:	00c00074 	movhi	r3,1
     28c:	18c56d04 	addi	r3,r3,5556
     290:	1105883a 	add	r2,r2,r4
     294:	1085883a 	add	r2,r2,r2
     298:	1085883a 	add	r2,r2,r2
     29c:	10c7883a 	add	r3,r2,r3
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	18800015 	stw	r2,0(r3)
	input[t] = (input[t] + 1) % TAILLETAMPON;
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	00c00074 	movhi	r3,1
     2b0:	18c55d04 	addi	r3,r3,5492
     2b4:	1085883a 	add	r2,r2,r2
     2b8:	1085883a 	add	r2,r2,r2
     2bc:	10c5883a 	add	r2,r2,r3
     2c0:	10000015 	stw	zero,0(r2)
	nbElement[t]++;
     2c4:	e0fffe17 	ldw	r3,-8(fp)
     2c8:	01000074 	movhi	r4,1
     2cc:	21056004 	addi	r4,r4,5504
     2d0:	18c5883a 	add	r2,r3,r3
     2d4:	1085883a 	add	r2,r2,r2
     2d8:	1105883a 	add	r2,r2,r4
     2dc:	10800017 	ldw	r2,0(r2)
     2e0:	11400044 	addi	r5,r2,1
     2e4:	01000074 	movhi	r4,1
     2e8:	21056004 	addi	r4,r4,5504
     2ec:	18c5883a 	add	r2,r3,r3
     2f0:	1085883a 	add	r2,r2,r2
     2f4:	1105883a 	add	r2,r2,r4
     2f8:	11400015 	stw	r5,0(r2)
	//Send a signal to everybody waiting on condition numCondition[numVerrou[t],0]
	signal(numCondition[numVerrou[t]][0]);
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	00c00074 	movhi	r3,1
     304:	18c55104 	addi	r3,r3,5444
     308:	1085883a 	add	r2,r2,r2
     30c:	1085883a 	add	r2,r2,r2
     310:	10c5883a 	add	r2,r2,r3
     314:	10800017 	ldw	r2,0(r2)
     318:	00c00074 	movhi	r3,1
     31c:	18c55404 	addi	r3,r3,5456
     320:	100490fa 	slli	r2,r2,3
     324:	10c5883a 	add	r2,r2,r3
     328:	11000017 	ldw	r4,0(r2)
     32c:	00016400 	call	1640 <signal>
	//Exit the lock with the id numVerrou[t]
	deverrouiller(numVerrou[t]);
     330:	e0bffe17 	ldw	r2,-8(fp)
     334:	00c00074 	movhi	r3,1
     338:	18c55104 	addi	r3,r3,5444
     33c:	1085883a 	add	r2,r2,r2
     340:	1085883a 	add	r2,r2,r2
     344:	10c5883a 	add	r2,r2,r3
     348:	11000017 	ldw	r4,0(r2)
     34c:	000141c0 	call	141c <deverrouiller>
}
     350:	e037883a 	mov	sp,fp
     354:	dfc00117 	ldw	ra,4(sp)
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00204 	addi	sp,sp,8
     360:	f800283a 	ret

00000364 <prelever>:

//Function which is used by consumer to get an element from buffer t, which will be returned  
int prelever(int t) {
     364:	defffc04 	addi	sp,sp,-16
     368:	dfc00315 	stw	ra,12(sp)
     36c:	df000215 	stw	fp,8(sp)
     370:	df000204 	addi	fp,sp,8
     374:	e13fff15 	stw	r4,-4(fp)
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
     378:	e0bfff17 	ldw	r2,-4(fp)
     37c:	00c00074 	movhi	r3,1
     380:	18c55104 	addi	r3,r3,5444
     384:	1085883a 	add	r2,r2,r2
     388:	1085883a 	add	r2,r2,r2
     38c:	10c5883a 	add	r2,r2,r3
     390:	11000017 	ldw	r4,0(r2)
     394:	00013100 	call	1310 <verrouiller>
	//Wait for a signal if the buffer t is empty
	printf("nbElement[%d] = %d\n", t, nbElement[t]);
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	00c00074 	movhi	r3,1
     3a0:	18c56004 	addi	r3,r3,5504
     3a4:	1085883a 	add	r2,r2,r2
     3a8:	1085883a 	add	r2,r2,r2
     3ac:	10c5883a 	add	r2,r2,r3
     3b0:	11800017 	ldw	r6,0(r2)
     3b4:	01000074 	movhi	r4,1
     3b8:	21370204 	addi	r4,r4,-9208
     3bc:	e17fff17 	ldw	r5,-4(fp)
     3c0:	00022000 	call	2200 <printf>
	while (nbElement[t] == 0) {
     3c4:	00000d06 	br	3fc <prelever+0x98>
		await(numCondition[numVerrou[t]][0]);
     3c8:	e0bfff17 	ldw	r2,-4(fp)
     3cc:	00c00074 	movhi	r3,1
     3d0:	18c55104 	addi	r3,r3,5444
     3d4:	1085883a 	add	r2,r2,r2
     3d8:	1085883a 	add	r2,r2,r2
     3dc:	10c5883a 	add	r2,r2,r3
     3e0:	10800017 	ldw	r2,0(r2)
     3e4:	00c00074 	movhi	r3,1
     3e8:	18c55404 	addi	r3,r3,5456
     3ec:	100490fa 	slli	r2,r2,3
     3f0:	10c5883a 	add	r2,r2,r3
     3f4:	11000017 	ldw	r4,0(r2)
     3f8:	000159c0 	call	159c <await>
int prelever(int t) {
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
	//Wait for a signal if the buffer t is empty
	printf("nbElement[%d] = %d\n", t, nbElement[t]);
	while (nbElement[t] == 0) {
     3fc:	e0bfff17 	ldw	r2,-4(fp)
     400:	00c00074 	movhi	r3,1
     404:	18c56004 	addi	r3,r3,5504
     408:	1085883a 	add	r2,r2,r2
     40c:	1085883a 	add	r2,r2,r2
     410:	10c5883a 	add	r2,r2,r3
     414:	10800017 	ldw	r2,0(r2)
     418:	1005003a 	cmpeq	r2,r2,zero
     41c:	103fea1e 	bne	r2,zero,3c8 <prelever+0x64>
		await(numCondition[numVerrou[t]][0]);
	}
	//Get an element from buffer t
	int retour = tampon[t][output[t]];
     420:	e13fff17 	ldw	r4,-4(fp)
     424:	e0bfff17 	ldw	r2,-4(fp)
     428:	00c00074 	movhi	r3,1
     42c:	18c55a04 	addi	r3,r3,5480
     430:	1085883a 	add	r2,r2,r2
     434:	1085883a 	add	r2,r2,r2
     438:	10c5883a 	add	r2,r2,r3
     43c:	10800017 	ldw	r2,0(r2)
     440:	00c00074 	movhi	r3,1
     444:	18c56d04 	addi	r3,r3,5556
     448:	1105883a 	add	r2,r2,r4
     44c:	1085883a 	add	r2,r2,r2
     450:	1085883a 	add	r2,r2,r2
     454:	10c5883a 	add	r2,r2,r3
     458:	10800017 	ldw	r2,0(r2)
     45c:	e0bffe15 	stw	r2,-8(fp)
	output[t] = (output[t] + 1) % TAILLETAMPON;
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	00c00074 	movhi	r3,1
     468:	18c55a04 	addi	r3,r3,5480
     46c:	1085883a 	add	r2,r2,r2
     470:	1085883a 	add	r2,r2,r2
     474:	10c5883a 	add	r2,r2,r3
     478:	10000015 	stw	zero,0(r2)
	nbElement[t]--;
     47c:	e0ffff17 	ldw	r3,-4(fp)
     480:	01000074 	movhi	r4,1
     484:	21056004 	addi	r4,r4,5504
     488:	18c5883a 	add	r2,r3,r3
     48c:	1085883a 	add	r2,r2,r2
     490:	1105883a 	add	r2,r2,r4
     494:	10800017 	ldw	r2,0(r2)
     498:	117fffc4 	addi	r5,r2,-1
     49c:	01000074 	movhi	r4,1
     4a0:	21056004 	addi	r4,r4,5504
     4a4:	18c5883a 	add	r2,r3,r3
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	1105883a 	add	r2,r2,r4
     4b0:	11400015 	stw	r5,0(r2)
	//Send a signal to everybody waiting on condition numCondition[numVerrou[t],1]
	signal(numCondition[numVerrou[t]][1]);
     4b4:	e0bfff17 	ldw	r2,-4(fp)
     4b8:	00c00074 	movhi	r3,1
     4bc:	18c55104 	addi	r3,r3,5444
     4c0:	1085883a 	add	r2,r2,r2
     4c4:	1085883a 	add	r2,r2,r2
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800017 	ldw	r2,0(r2)
     4d0:	00c00074 	movhi	r3,1
     4d4:	18c55404 	addi	r3,r3,5456
     4d8:	100490fa 	slli	r2,r2,3
     4dc:	10c5883a 	add	r2,r2,r3
     4e0:	10800104 	addi	r2,r2,4
     4e4:	11000017 	ldw	r4,0(r2)
     4e8:	00016400 	call	1640 <signal>
	//Exit the lock with the id numVerrou[t]
	deverrouiller(numVerrou[t]);
     4ec:	e0bfff17 	ldw	r2,-4(fp)
     4f0:	00c00074 	movhi	r3,1
     4f4:	18c55104 	addi	r3,r3,5444
     4f8:	1085883a 	add	r2,r2,r2
     4fc:	1085883a 	add	r2,r2,r2
     500:	10c5883a 	add	r2,r2,r3
     504:	11000017 	ldw	r4,0(r2)
     508:	000141c0 	call	141c <deverrouiller>
	//Return the element which is already taken from buffer t
	return retour;
     50c:	e0bffe17 	ldw	r2,-8(fp)
}
     510:	e037883a 	mov	sp,fp
     514:	dfc00117 	ldw	ra,4(sp)
     518:	df000017 	ldw	fp,0(sp)
     51c:	dec00204 	addi	sp,sp,8
     520:	f800283a 	ret

00000524 <producteur>:

//Producer function which upon pressing any of the buttons 0,1 or 2
//will add element '1' to buffers 0,1 or 2 respectively
void producteur(void) {
     524:	defffa04 	addi	sp,sp,-24
     528:	dfc00515 	stw	ra,20(sp)
     52c:	df000415 	stw	fp,16(sp)
     530:	df000404 	addi	fp,sp,16
	//Infinite loop to read from buttons and put elements into corresponding buffers
	while (1) {
		//read which button is pressed by returning the value of button register
		int buttons = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     534:	00808034 	movhi	r2,512
     538:	10940304 	addi	r2,r2,20492
     53c:	10800037 	ldwio	r2,0(r2)
     540:	e0bffe15 	stw	r2,-8(fp)
		int temp=0;
     544:	e03ffd15 	stw	zero,-12(fp)
		int j=0;
     548:	e03ffc15 	stw	zero,-16(fp)
		temp = buttons;
     54c:	e0bffe17 	ldw	r2,-8(fp)
     550:	e0bffd15 	stw	r2,-12(fp)
		//To reinitialize the buttons register before reading new buttons
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, buttons);
     554:	00c08034 	movhi	r3,512
     558:	18d40304 	addi	r3,r3,20492
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	18800035 	stwio	r2,0(r3)
		//To verify which buttons are pressed
		for (j = 0; j < NBTAMPON; j++) {
     564:	e03ffc15 	stw	zero,-16(fp)
     568:	00001e06 	br	5e4 <producteur+0xc0>
			if (temp % 2 == 1)
     56c:	e0bffd17 	ldw	r2,-12(fp)
     570:	00e00034 	movhi	r3,32768
     574:	18c00044 	addi	r3,r3,1
     578:	10c4703a 	and	r2,r2,r3
     57c:	e0bfff15 	stw	r2,-4(fp)
     580:	e0ffff17 	ldw	r3,-4(fp)
     584:	1804403a 	cmpge	r2,r3,zero
     588:	10000a1e 	bne	r2,zero,5b4 <producteur+0x90>
     58c:	e0bfff17 	ldw	r2,-4(fp)
     590:	10bfffc4 	addi	r2,r2,-1
     594:	e0bfff15 	stw	r2,-4(fp)
     598:	00bfff84 	movi	r2,-2
     59c:	e0ffff17 	ldw	r3,-4(fp)
     5a0:	1886b03a 	or	r3,r3,r2
     5a4:	e0ffff15 	stw	r3,-4(fp)
     5a8:	e0bfff17 	ldw	r2,-4(fp)
     5ac:	10800044 	addi	r2,r2,1
     5b0:	e0bfff15 	stw	r2,-4(fp)
     5b4:	e0bfff17 	ldw	r2,-4(fp)
     5b8:	10800058 	cmpnei	r2,r2,1
     5bc:	1000031e 	bne	r2,zero,5cc <producteur+0xa8>
				deposer(j, 1); //To put element 1 into buffer j because button j is pressed
     5c0:	e13ffc17 	ldw	r4,-16(fp)
     5c4:	01400044 	movi	r5,1
     5c8:	00001d00 	call	1d0 <deposer>
			temp >>= 1;
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	1005d07a 	srai	r2,r2,1
     5d4:	e0bffd15 	stw	r2,-12(fp)
		int j=0;
		temp = buttons;
		//To reinitialize the buttons register before reading new buttons
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, buttons);
		//To verify which buttons are pressed
		for (j = 0; j < NBTAMPON; j++) {
     5d8:	e0bffc17 	ldw	r2,-16(fp)
     5dc:	10800044 	addi	r2,r2,1
     5e0:	e0bffc15 	stw	r2,-16(fp)
     5e4:	e0bffc17 	ldw	r2,-16(fp)
     5e8:	108000d0 	cmplti	r2,r2,3
     5ec:	103fdf1e 	bne	r2,zero,56c <producteur+0x48>
			if (temp % 2 == 1)
				deposer(j, 1); //To put element 1 into buffer j because button j is pressed
			temp >>= 1;
		}

	}
     5f0:	003fd006 	br	534 <producteur+0x10>

000005f4 <consommateur0>:
}

//First consumer function which will make led 0 blink upon getting an element from buffer 0 
void consommateur0(void) {
     5f4:	defffd04 	addi	sp,sp,-12
     5f8:	dfc00215 	stw	ra,8(sp)
     5fc:	df000115 	stw	fp,4(sp)
     600:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 0
	while (1) {
		// Get an element from buffer 0 (if there is no element, it will go to wait on this line)
		prelever(0);
     604:	0009883a 	mov	r4,zero
     608:	00003640 	call	364 <prelever>
		// Blink led 0 for specfied duration (one blink means consuming one element from buffer 0)
		int i=0;
     60c:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1);
     610:	00c08034 	movhi	r3,512
     614:	18d40804 	addi	r3,r3,20512
     618:	00800044 	movi	r2,1
     61c:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 0 for specified duration
		while (i < DELAYON) {
     620:	00000306 	br	630 <consommateur0+0x3c>
			i++;
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	10800044 	addi	r2,r2,1
     62c:	e0bfff15 	stw	r2,-4(fp)
		prelever(0);
		// Blink led 0 for specfied duration (one blink means consuming one element from buffer 0)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1);
		//turn on the first bit of led 0 for specified duration
		while (i < DELAYON) {
     630:	e0ffff17 	ldw	r3,-4(fp)
     634:	00800bb4 	movhi	r2,46
     638:	10b1afc4 	addi	r2,r2,-14657
     63c:	10fff90e 	bge	r2,r3,624 <consommateur0+0x30>
			i++;
		}
		i = 0;
     640:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
     644:	00808034 	movhi	r2,512
     648:	10940804 	addi	r2,r2,20512
     64c:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 0 for specified duration
		while (i < DELAYOFF) {
     650:	00000306 	br	660 <consommateur0+0x6c>
			i++;
     654:	e0bfff17 	ldw	r2,-4(fp)
     658:	10800044 	addi	r2,r2,1
     65c:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
		//turn off the first bit of led 0 for specified duration
		while (i < DELAYOFF) {
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	00800174 	movhi	r2,5
     668:	10a4f7c4 	addi	r2,r2,-27681
     66c:	10fff90e 	bge	r2,r3,654 <consommateur0+0x60>
			i++;
		}
		i = 0;
     670:	e03fff15 	stw	zero,-4(fp)
	}
     674:	003fe306 	br	604 <consommateur0+0x10>

00000678 <consommateur1>:


}

//Second consumer function which will make led 1 blink upon getting an element from buffer 1 
void consommateur1(void) {
     678:	defffd04 	addi	sp,sp,-12
     67c:	dfc00215 	stw	ra,8(sp)
     680:	df000115 	stw	fp,4(sp)
     684:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 1
	while (1) {
		// Get an element from buffer 1 (if there is no element, it will go to wait on this line)
		prelever(1);
     688:	01000044 	movi	r4,1
     68c:	00003640 	call	364 <prelever>
		// Blink led 1 for specfied duration (one blink means consuming one element from buffer 1)
		int i=0;
     690:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 1);
     694:	00c08034 	movhi	r3,512
     698:	18d41804 	addi	r3,r3,20576
     69c:	00800044 	movi	r2,1
     6a0:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 1 for specified duration
		while (i < DELAYON) {
     6a4:	00000306 	br	6b4 <consommateur1+0x3c>
			i++;
     6a8:	e0bfff17 	ldw	r2,-4(fp)
     6ac:	10800044 	addi	r2,r2,1
     6b0:	e0bfff15 	stw	r2,-4(fp)
		prelever(1);
		// Blink led 1 for specfied duration (one blink means consuming one element from buffer 1)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 1);
		//turn on the first bit of led 1 for specified duration
		while (i < DELAYON) {
     6b4:	e0ffff17 	ldw	r3,-4(fp)
     6b8:	00800bb4 	movhi	r2,46
     6bc:	10b1afc4 	addi	r2,r2,-14657
     6c0:	10fff90e 	bge	r2,r3,6a8 <consommateur1+0x30>
			i++;
		}
		i = 0;
     6c4:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
     6c8:	00808034 	movhi	r2,512
     6cc:	10941804 	addi	r2,r2,20576
     6d0:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 1 for specified duration
		while (i < DELAYOFF) {
     6d4:	00000306 	br	6e4 <consommateur1+0x6c>
			i++;
     6d8:	e0bfff17 	ldw	r2,-4(fp)
     6dc:	10800044 	addi	r2,r2,1
     6e0:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
		//turn off the first bit of led 1 for specified duration
		while (i < DELAYOFF) {
     6e4:	e0ffff17 	ldw	r3,-4(fp)
     6e8:	00800174 	movhi	r2,5
     6ec:	10a4f7c4 	addi	r2,r2,-27681
     6f0:	10fff90e 	bge	r2,r3,6d8 <consommateur1+0x60>
			i++;
		}
		i = 0;
     6f4:	e03fff15 	stw	zero,-4(fp)
	}
     6f8:	003fe306 	br	688 <consommateur1+0x10>

000006fc <consommateur2>:
}

//Third consumer function which will make led 2 blink upon getting an element from buffer 2 
void consommateur2(void) {
     6fc:	defffd04 	addi	sp,sp,-12
     700:	dfc00215 	stw	ra,8(sp)
     704:	df000115 	stw	fp,4(sp)
     708:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 2
	while (1) {
		// Get an element from buffer 2 (if there is no element, it will go to wait on this line)
		prelever(2);
     70c:	01000084 	movi	r4,2
     710:	00003640 	call	364 <prelever>
		// Blink led 2 for specfied duration (one blink means consuming one element from buffer 2)
		int i=0;
     714:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 1);
     718:	00c08034 	movhi	r3,512
     71c:	18d41004 	addi	r3,r3,20544
     720:	00800044 	movi	r2,1
     724:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 2 for specified duration
		while (i < DELAYON) {
     728:	00000306 	br	738 <consommateur2+0x3c>
			i++;
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10800044 	addi	r2,r2,1
     734:	e0bfff15 	stw	r2,-4(fp)
		prelever(2);
		// Blink led 2 for specfied duration (one blink means consuming one element from buffer 2)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 1);
		//turn on the first bit of led 2 for specified duration
		while (i < DELAYON) {
     738:	e0ffff17 	ldw	r3,-4(fp)
     73c:	00800bb4 	movhi	r2,46
     740:	10b1afc4 	addi	r2,r2,-14657
     744:	10fff90e 	bge	r2,r3,72c <consommateur2+0x30>
			i++;
		}
		i = 0;
     748:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
     74c:	00808034 	movhi	r2,512
     750:	10941004 	addi	r2,r2,20544
     754:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 2 for specified duration
		while (i < DELAYOFF) {
     758:	00000306 	br	768 <consommateur2+0x6c>
			i++;
     75c:	e0bfff17 	ldw	r2,-4(fp)
     760:	10800044 	addi	r2,r2,1
     764:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
		//turn off the first bit of led 2 for specified duration
		while (i < DELAYOFF) {
     768:	e0ffff17 	ldw	r3,-4(fp)
     76c:	00800174 	movhi	r2,5
     770:	10a4f7c4 	addi	r2,r2,-27681
     774:	10fff90e 	bge	r2,r3,75c <consommateur2+0x60>
			i++;
		}
		i = 0;
     778:	e03fff15 	stw	zero,-4(fp)
	}
     77c:	003fe306 	br	70c <consommateur2+0x10>

00000780 <main>:
}

//Main program
int main() {
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	dc000015 	stw	r16,0(sp)
     790:	d839883a 	mov	fp,sp
	//Initialize leds and buttons
	IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
     794:	00808034 	movhi	r2,512
     798:	10940804 	addi	r2,r2,20512
     79c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
     7a0:	00808034 	movhi	r2,512
     7a4:	10941804 	addi	r2,r2,20576
     7a8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
     7ac:	00808034 	movhi	r2,512
     7b0:	10941004 	addi	r2,r2,20544
     7b4:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 15);
     7b8:	00c08034 	movhi	r3,512
     7bc:	18d40304 	addi	r3,r3,20492
     7c0:	008003c4 	movi	r2,15
     7c4:	18800035 	stwio	r2,0(r3)
	//Create the locks and save their ids in numVerrou array
	numVerrou[0] = creerVerrou();
     7c8:	00012380 	call	1238 <creerVerrou>
     7cc:	1007883a 	mov	r3,r2
     7d0:	00800074 	movhi	r2,1
     7d4:	10855104 	addi	r2,r2,5444
     7d8:	10c00015 	stw	r3,0(r2)
	numVerrou[1] = creerVerrou();
     7dc:	00012380 	call	1238 <creerVerrou>
     7e0:	1007883a 	mov	r3,r2
     7e4:	00800074 	movhi	r2,1
     7e8:	10855104 	addi	r2,r2,5444
     7ec:	10c00115 	stw	r3,4(r2)
	numVerrou[2] = creerVerrou();
     7f0:	00012380 	call	1238 <creerVerrou>
     7f4:	1007883a 	mov	r3,r2
     7f8:	00800074 	movhi	r2,1
     7fc:	10855104 	addi	r2,r2,5444
     800:	10c00215 	stw	r3,8(r2)
	//Create conditions (0: notempty condition, 1: notfull condition) and save their ids in creerCondition array, linked to their corresponding locks
	numCondition[numVerrou[0]][0] = creerCondition(numVerrou[0]);
     804:	00800074 	movhi	r2,1
     808:	10855104 	addi	r2,r2,5444
     80c:	14000017 	ldw	r16,0(r2)
     810:	00800074 	movhi	r2,1
     814:	10855104 	addi	r2,r2,5444
     818:	11000017 	ldw	r4,0(r2)
     81c:	00014b00 	call	14b0 <creerCondition>
     820:	1009883a 	mov	r4,r2
     824:	00c00074 	movhi	r3,1
     828:	18c55404 	addi	r3,r3,5456
     82c:	800490fa 	slli	r2,r16,3
     830:	10c5883a 	add	r2,r2,r3
     834:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[0]][1] = creerCondition(numVerrou[0]);
     838:	00800074 	movhi	r2,1
     83c:	10855104 	addi	r2,r2,5444
     840:	14000017 	ldw	r16,0(r2)
     844:	00800074 	movhi	r2,1
     848:	10855104 	addi	r2,r2,5444
     84c:	11000017 	ldw	r4,0(r2)
     850:	00014b00 	call	14b0 <creerCondition>
     854:	1009883a 	mov	r4,r2
     858:	00c00074 	movhi	r3,1
     85c:	18c55404 	addi	r3,r3,5456
     860:	800490fa 	slli	r2,r16,3
     864:	10c5883a 	add	r2,r2,r3
     868:	10800104 	addi	r2,r2,4
     86c:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[1]][0] = creerCondition(numVerrou[1]);
     870:	00800074 	movhi	r2,1
     874:	10855104 	addi	r2,r2,5444
     878:	14000117 	ldw	r16,4(r2)
     87c:	00800074 	movhi	r2,1
     880:	10855104 	addi	r2,r2,5444
     884:	11000117 	ldw	r4,4(r2)
     888:	00014b00 	call	14b0 <creerCondition>
     88c:	1009883a 	mov	r4,r2
     890:	00c00074 	movhi	r3,1
     894:	18c55404 	addi	r3,r3,5456
     898:	800490fa 	slli	r2,r16,3
     89c:	10c5883a 	add	r2,r2,r3
     8a0:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[1]][1] = creerCondition(numVerrou[1]);
     8a4:	00800074 	movhi	r2,1
     8a8:	10855104 	addi	r2,r2,5444
     8ac:	14000117 	ldw	r16,4(r2)
     8b0:	00800074 	movhi	r2,1
     8b4:	10855104 	addi	r2,r2,5444
     8b8:	11000117 	ldw	r4,4(r2)
     8bc:	00014b00 	call	14b0 <creerCondition>
     8c0:	1009883a 	mov	r4,r2
     8c4:	00c00074 	movhi	r3,1
     8c8:	18c55404 	addi	r3,r3,5456
     8cc:	800490fa 	slli	r2,r16,3
     8d0:	10c5883a 	add	r2,r2,r3
     8d4:	10800104 	addi	r2,r2,4
     8d8:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[2]][0] = creerCondition(numVerrou[2]);
     8dc:	00800074 	movhi	r2,1
     8e0:	10855104 	addi	r2,r2,5444
     8e4:	14000217 	ldw	r16,8(r2)
     8e8:	00800074 	movhi	r2,1
     8ec:	10855104 	addi	r2,r2,5444
     8f0:	11000217 	ldw	r4,8(r2)
     8f4:	00014b00 	call	14b0 <creerCondition>
     8f8:	1009883a 	mov	r4,r2
     8fc:	00c00074 	movhi	r3,1
     900:	18c55404 	addi	r3,r3,5456
     904:	800490fa 	slli	r2,r16,3
     908:	10c5883a 	add	r2,r2,r3
     90c:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[2]][1] = creerCondition(numVerrou[2]);
     910:	00800074 	movhi	r2,1
     914:	10855104 	addi	r2,r2,5444
     918:	14000217 	ldw	r16,8(r2)
     91c:	00800074 	movhi	r2,1
     920:	10855104 	addi	r2,r2,5444
     924:	11000217 	ldw	r4,8(r2)
     928:	00014b00 	call	14b0 <creerCondition>
     92c:	1009883a 	mov	r4,r2
     930:	00c00074 	movhi	r3,1
     934:	18c55404 	addi	r3,r3,5456
     938:	800490fa 	slli	r2,r16,3
     93c:	10c5883a 	add	r2,r2,r3
     940:	10800104 	addi	r2,r2,4
     944:	11000015 	stw	r4,0(r2)
	//Create the processes
	creerProcessus(producteur, STACKSIZE, 1);
     948:	01000034 	movhi	r4,0
     94c:	21014904 	addi	r4,r4,1316
     950:	0149ca04 	movi	r5,10024
     954:	01800044 	movi	r6,1
     958:	00010b00 	call	10b0 <creerProcessus>
	creerProcessus(consommateur0, STACKSIZE, 2);
     95c:	01000034 	movhi	r4,0
     960:	21017d04 	addi	r4,r4,1524
     964:	0149ca04 	movi	r5,10024
     968:	01800084 	movi	r6,2
     96c:	00010b00 	call	10b0 <creerProcessus>
	creerProcessus(consommateur1, STACKSIZE, 2);
     970:	01000034 	movhi	r4,0
     974:	21019e04 	addi	r4,r4,1656
     978:	0149ca04 	movi	r5,10024
     97c:	01800084 	movi	r6,2
     980:	00010b00 	call	10b0 <creerProcessus>
	creerProcessus(consommateur2, STACKSIZE, 2);
     984:	01000034 	movhi	r4,0
     988:	2101bf04 	addi	r4,r4,1788
     98c:	0149ca04 	movi	r5,10024
     990:	01800084 	movi	r6,2
     994:	00010b00 	call	10b0 <creerProcessus>
	//Start execution of the processes
	start();
     998:	00011bc0 	call	11bc <start>
	return 0;
     99c:	0005883a 	mov	r2,zero
}
     9a0:	e037883a 	mov	sp,fp
     9a4:	dfc00217 	ldw	ra,8(sp)
     9a8:	df000117 	ldw	fp,4(sp)
     9ac:	dc000017 	ldw	r16,0(sp)
     9b0:	dec00304 	addi	sp,sp,12
     9b4:	f800283a 	ret

000009b8 <removeHeadI>:
} ListElem;

ListElem* interruptVector[2]={NULL,NULL};


Process removeHeadI(int i){
     9b8:	defff904 	addi	sp,sp,-28
     9bc:	dfc00615 	stw	ra,24(sp)
     9c0:	df000515 	stw	fp,20(sp)
     9c4:	df000504 	addi	fp,sp,20
     9c8:	e13ffe15 	stw	r4,-8(fp)
    
    ListElem* removed = interruptVector[i];
     9cc:	e0bffe17 	ldw	r2,-8(fp)
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	1087883a 	add	r3,r2,r2
     9d8:	d0a6a904 	addi	r2,gp,-25948
     9dc:	1885883a 	add	r2,r3,r2
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	e0bffd15 	stw	r2,-12(fp)
    if(interruptVector[i] != NULL){
     9e8:	e0bffe17 	ldw	r2,-8(fp)
     9ec:	1085883a 	add	r2,r2,r2
     9f0:	1087883a 	add	r3,r2,r2
     9f4:	d0a6a904 	addi	r2,gp,-25948
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	10800017 	ldw	r2,0(r2)
     a00:	1005003a 	cmpeq	r2,r2,zero
     a04:	10000d1e 	bne	r2,zero,a3c <removeHeadI+0x84>
        interruptVector[i] = interruptVector[i] -> next;
     a08:	e17ffe17 	ldw	r5,-8(fp)
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	1085883a 	add	r2,r2,r2
     a14:	1087883a 	add	r3,r2,r2
     a18:	d0a6a904 	addi	r2,gp,-25948
     a1c:	1885883a 	add	r2,r3,r2
     a20:	10800017 	ldw	r2,0(r2)
     a24:	11000117 	ldw	r4,4(r2)
     a28:	2945883a 	add	r2,r5,r5
     a2c:	1087883a 	add	r3,r2,r2
     a30:	d0a6a904 	addi	r2,gp,-25948
     a34:	1885883a 	add	r2,r3,r2
     a38:	11000015 	stw	r4,0(r2)
    }
    if(removed != NULL){
     a3c:	e0bffd17 	ldw	r2,-12(fp)
     a40:	1005003a 	cmpeq	r2,r2,zero
     a44:	1000081e 	bne	r2,zero,a68 <removeHeadI+0xb0>
        Process result = removed -> p; 
     a48:	e0bffd17 	ldw	r2,-12(fp)
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	e0bffc15 	stw	r2,-16(fp)
		free(removed); 
     a54:	e13ffd17 	ldw	r4,-12(fp)
     a58:	00019f80 	call	19f8 <free>
		return result;
     a5c:	e0bffc17 	ldw	r2,-16(fp)
     a60:	e0bfff15 	stw	r2,-4(fp)
     a64:	00000306 	br	a74 <removeHeadI+0xbc>
    }
    else{
        Process result = NULL;
     a68:	e03ffb15 	stw	zero,-20(fp)
        return result;
     a6c:	e0bffb17 	ldw	r2,-20(fp)
     a70:	e0bfff15 	stw	r2,-4(fp)
     a74:	e0bfff17 	ldw	r2,-4(fp)
    }  
}
     a78:	e037883a 	mov	sp,fp
     a7c:	dfc00117 	ldw	ra,4(sp)
     a80:	df000017 	ldw	fp,0(sp)
     a84:	dec00204 	addi	sp,sp,8
     a88:	f800283a 	ret

00000a8c <insertTail>:

void insertTail(int i, Process toBeInserted){
     a8c:	defffa04 	addi	sp,sp,-24
     a90:	dfc00515 	stw	ra,20(sp)
     a94:	df000415 	stw	fp,16(sp)
     a98:	df000404 	addi	fp,sp,16
     a9c:	e13ffe15 	stw	r4,-8(fp)
     aa0:	e17fff15 	stw	r5,-4(fp)
    
    ListElem* elem = malloc(sizeof(ListElem));
     aa4:	01000204 	movi	r4,8
     aa8:	0001a0c0 	call	1a0c <malloc>
     aac:	e0bffd15 	stw	r2,-12(fp)
    elem -> p = toBeInserted;
     ab0:	e0fffd17 	ldw	r3,-12(fp)
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	18800015 	stw	r2,0(r3)
    elem -> next = NULL;
     abc:	e0bffd17 	ldw	r2,-12(fp)
     ac0:	10000115 	stw	zero,4(r2)
    
    ListElem* temp= NULL;
     ac4:	e03ffc15 	stw	zero,-16(fp)
    if(interruptVector[i] == NULL){
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	1085883a 	add	r2,r2,r2
     ad0:	1087883a 	add	r3,r2,r2
     ad4:	d0a6a904 	addi	r2,gp,-25948
     ad8:	1885883a 	add	r2,r3,r2
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	1004c03a 	cmpne	r2,r2,zero
     ae4:	1000081e 	bne	r2,zero,b08 <insertTail+0x7c>
        
       interruptVector[i] = elem; 
     ae8:	e0bffe17 	ldw	r2,-8(fp)
     aec:	1085883a 	add	r2,r2,r2
     af0:	1087883a 	add	r3,r2,r2
     af4:	d0a6a904 	addi	r2,gp,-25948
     af8:	1887883a 	add	r3,r3,r2
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	18800015 	stw	r2,0(r3)
     b04:	00001206 	br	b50 <insertTail+0xc4>
    }
    else{
        
        temp = interruptVector[i];
     b08:	e0bffe17 	ldw	r2,-8(fp)
     b0c:	1085883a 	add	r2,r2,r2
     b10:	1087883a 	add	r3,r2,r2
     b14:	d0a6a904 	addi	r2,gp,-25948
     b18:	1885883a 	add	r2,r3,r2
     b1c:	10800017 	ldw	r2,0(r2)
     b20:	e0bffc15 	stw	r2,-16(fp)
        while((temp -> next) != NULL){
     b24:	00000306 	br	b34 <insertTail+0xa8>
        
            temp = temp -> next;
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	10800117 	ldw	r2,4(r2)
     b30:	e0bffc15 	stw	r2,-16(fp)
       interruptVector[i] = elem; 
    }
    else{
        
        temp = interruptVector[i];
        while((temp -> next) != NULL){
     b34:	e0bffc17 	ldw	r2,-16(fp)
     b38:	10800117 	ldw	r2,4(r2)
     b3c:	1004c03a 	cmpne	r2,r2,zero
     b40:	103ff91e 	bne	r2,zero,b28 <insertTail+0x9c>
        
            temp = temp -> next;
        }
        temp -> next = elem;  
     b44:	e0fffc17 	ldw	r3,-16(fp)
     b48:	e0bffd17 	ldw	r2,-12(fp)
     b4c:	18800115 	stw	r2,4(r3)
    
    }
    
        
}
     b50:	e037883a 	mov	sp,fp
     b54:	dfc00117 	ldw	ra,4(sp)
     b58:	df000017 	ldw	fp,0(sp)
     b5c:	dec00204 	addi	sp,sp,8
     b60:	f800283a 	ret

00000b64 <handle_button_interrupts>:
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture = 0;


void handle_button_interrupts(void* context, alt_u32 id)
{
     b64:	defffa04 	addi	sp,sp,-24
     b68:	dfc00515 	stw	ra,20(sp)
     b6c:	df000415 	stw	fp,16(sp)
     b70:	df000404 	addi	fp,sp,16
     b74:	e13ffe15 	stw	r4,-8(fp)
     b78:	e17fff15 	stw	r5,-4(fp)
    
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
     b7c:	e0bffe17 	ldw	r2,-8(fp)
     b80:	e0bffd15 	stw	r2,-12(fp)
    
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     b84:	00808034 	movhi	r2,512
     b88:	10940304 	addi	r2,r2,20492
     b8c:	10c00037 	ldwio	r3,0(r2)
     b90:	e0bffd17 	ldw	r2,-12(fp)
     b94:	10c00015 	stw	r3,0(r2)
	/* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     b98:	00c08034 	movhi	r3,512
     b9c:	18d40304 	addi	r3,r3,20492
     ba0:	008003c4 	movi	r2,15
     ba4:	18800035 	stwio	r2,0(r3)
    
    /* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems
     * with high processor -> pio latency and fast interrupts.  */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     ba8:	00808034 	movhi	r2,512
     bac:	10940304 	addi	r2,r2,20492
     bb0:	10800037 	ldwio	r2,0(r2)
    
    Process p2 = removeHeadI(1);
     bb4:	01000044 	movi	r4,1
     bb8:	00009b80 	call	9b8 <removeHeadI>
     bbc:	e0bffc15 	stw	r2,-16(fp)
   
    if(p2 != NULL){
     bc0:	e0bffc17 	ldw	r2,-16(fp)
     bc4:	1005003a 	cmpeq	r2,r2,zero
     bc8:	1000021e 	bne	r2,zero,bd4 <handle_button_interrupts+0x70>
        
        transfer(p2);
     bcc:	e13ffc17 	ldw	r4,-16(fp)
     bd0:	0000d4c0 	call	d4c <transfer>
       
    }
}
     bd4:	e037883a 	mov	sp,fp
     bd8:	dfc00117 	ldw	ra,4(sp)
     bdc:	df000017 	ldw	fp,0(sp)
     be0:	dec00204 	addi	sp,sp,8
     be4:	f800283a 	ret

00000be8 <init_button>:

/* Initialize the button_pio. */

void init_button()
{
     be8:	defffd04 	addi	sp,sp,-12
     bec:	dfc00215 	stw	ra,8(sp)
     bf0:	df000115 	stw	fp,4(sp)
     bf4:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
     bf8:	d0a6ab04 	addi	r2,gp,-25940
     bfc:	e0bfff15 	stw	r2,-4(fp)
    
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     c00:	00c08034 	movhi	r3,512
     c04:	18d40204 	addi	r3,r3,20488
     c08:	008003c4 	movi	r2,15
     c0c:	18800035 	stwio	r2,0(r3)
    
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     c10:	00c08034 	movhi	r3,512
     c14:	18d40304 	addi	r3,r3,20492
     c18:	008003c4 	movi	r2,15
     c1c:	18800035 	stwio	r2,0(r3)
    
    /* Register the interrupt handler. */
    alt_irq_register (BUTTONS_IRQ, edge_capture_ptr, handle_button_interrupts);
     c20:	01000084 	movi	r4,2
     c24:	e17fff17 	ldw	r5,-4(fp)
     c28:	01800034 	movhi	r6,0
     c2c:	3182d904 	addi	r6,r6,2916
     c30:	000b4e80 	call	b4e8 <alt_irq_register>
}
     c34:	e037883a 	mov	sp,fp
     c38:	dfc00117 	ldw	ra,4(sp)
     c3c:	df000017 	ldw	fp,0(sp)
     c40:	dec00204 	addi	sp,sp,8
     c44:	f800283a 	ret

00000c48 <handle_timer_interrupts>:

/* A variable to set up context for timer interrupt. */
volatile int timer_capture = 0;

void handle_timer_interrupts(void* context, alt_u32 id)
{
     c48:	defffb04 	addi	sp,sp,-20
     c4c:	dfc00415 	stw	ra,16(sp)
     c50:	df000315 	stw	fp,12(sp)
     c54:	df000304 	addi	fp,sp,12
     c58:	e13ffe15 	stw	r4,-8(fp)
     c5c:	e17fff15 	stw	r5,-4(fp)
	/* clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_BASE, 0);
     c60:	00808034 	movhi	r2,512
     c64:	10942804 	addi	r2,r2,20640
     c68:	10000035 	stwio	zero,0(r2)

	Process p2 = removeHeadI(0);
     c6c:	0009883a 	mov	r4,zero
     c70:	00009b80 	call	9b8 <removeHeadI>
     c74:	e0bffd15 	stw	r2,-12(fp)
    if(p2 != NULL){
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	1005003a 	cmpeq	r2,r2,zero
     c80:	1000021e 	bne	r2,zero,c8c <handle_timer_interrupts+0x44>
        transfer(p2);
     c84:	e13ffd17 	ldw	r4,-12(fp)
     c88:	0000d4c0 	call	d4c <transfer>
    }
}
     c8c:	e037883a 	mov	sp,fp
     c90:	dfc00117 	ldw	ra,4(sp)
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00204 	addi	sp,sp,8
     c9c:	f800283a 	ret

00000ca0 <init_clock>:

void init_clock()
{
     ca0:	defffd04 	addi	sp,sp,-12
     ca4:	dfc00215 	stw	ra,8(sp)
     ca8:	df000115 	stw	fp,4(sp)
     cac:	df000104 	addi	fp,sp,4
    
  void* timer_capture_ptr = (void*) &timer_capture;  
     cb0:	d0a6ac04 	addi	r2,gp,-25936
     cb4:	e0bfff15 	stw	r2,-4(fp)
  /* set to free running mode */
  IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_BASE, 
     cb8:	00c08034 	movhi	r3,512
     cbc:	18d42904 	addi	r3,r3,20644
     cc0:	008001c4 	movi	r2,7
     cc4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */ 
  alt_irq_register (TIMER_IRQ, timer_capture_ptr, handle_timer_interrupts);  
     cc8:	0009883a 	mov	r4,zero
     ccc:	e17fff17 	ldw	r5,-4(fp)
     cd0:	01800034 	movhi	r6,0
     cd4:	31831204 	addi	r6,r6,3144
     cd8:	000b4e80 	call	b4e8 <alt_irq_register>
  
}
     cdc:	e037883a 	mov	sp,fp
     ce0:	dfc00117 	ldw	ra,4(sp)
     ce4:	df000017 	ldw	fp,0(sp)
     ce8:	dec00204 	addi	sp,sp,8
     cec:	f800283a 	ret

00000cf0 <newProcess>:


Process running = NULL;  // pointer to the current process.
Process nextP = NULL;  // variable used internally to implement transfer and iotransfer procedures

Process newProcess(void (*f), unsigned int* stack, int stackSize){
     cf0:	defff804 	addi	sp,sp,-32
     cf4:	dfc00715 	stw	ra,28(sp)
     cf8:	df000615 	stw	fp,24(sp)
     cfc:	df000604 	addi	fp,sp,24
     d00:	e13ffd15 	stw	r4,-12(fp)
     d04:	e17ffe15 	stw	r5,-8(fp)
     d08:	e1bfff15 	stw	r6,-4(fp)
    
    unsigned int* newPC = f;
     d0c:	e0bffd17 	ldw	r2,-12(fp)
     d10:	e0bffc15 	stw	r2,-16(fp)
    int size = stackSize - 4;
     d14:	e0bfff17 	ldw	r2,-4(fp)
     d18:	10bfff04 	addi	r2,r2,-4
     d1c:	e0bffb15 	stw	r2,-20(fp)
    
    Process process = _createStack(stack,newPC,size);
     d20:	e13ffe17 	ldw	r4,-8(fp)
     d24:	e17ffc17 	ldw	r5,-16(fp)
     d28:	e1bffb17 	ldw	r6,-20(fp)
     d2c:	00017500 	call	1750 <_createStack>
     d30:	e0bffa15 	stw	r2,-24(fp)
    return process;
     d34:	e0bffa17 	ldw	r2,-24(fp)
}
     d38:	e037883a 	mov	sp,fp
     d3c:	dfc00117 	ldw	ra,4(sp)
     d40:	df000017 	ldw	fp,0(sp)
     d44:	dec00204 	addi	sp,sp,8
     d48:	f800283a 	ret

00000d4c <transfer>:

/**
 * Called mainly from interrupt routine.
 * (Except for the first call)
 */
void transfer(Process p){
     d4c:	defffd04 	addi	sp,sp,-12
     d50:	dfc00215 	stw	ra,8(sp)
     d54:	df000115 	stw	fp,4(sp)
     d58:	df000104 	addi	fp,sp,4
     d5c:	e13fff15 	stw	r4,-4(fp)
    
    if(running == NULL){
     d60:	d0a6ad17 	ldw	r2,-25932(gp)
     d64:	1004c03a 	cmpne	r2,r2,zero
     d68:	1000031e 	bne	r2,zero,d78 <transfer+0x2c>
        running = malloc(sizeof(Process));
     d6c:	01000104 	movi	r4,4
     d70:	0001a0c0 	call	1a0c <malloc>
     d74:	d0a6ad15 	stw	r2,-25932(gp)
    }
    nextP = p ;
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	d0a6ae15 	stw	r2,-25928(gp)
    _transfer();
     d80:	000176c0 	call	176c <_transfer>
   
}
     d84:	e037883a 	mov	sp,fp
     d88:	dfc00117 	ldw	ra,4(sp)
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00204 	addi	sp,sp,8
     d94:	f800283a 	ret

00000d98 <iotransfer>:

/**
 * Called from kernel thread.
 */
void iotransfer(Process p, int interruptV){
     d98:	defffc04 	addi	sp,sp,-16
     d9c:	dfc00315 	stw	ra,12(sp)
     da0:	df000215 	stw	fp,8(sp)
     da4:	df000204 	addi	fp,sp,8
     da8:	e13ffe15 	stw	r4,-8(fp)
     dac:	e17fff15 	stw	r5,-4(fp)
    
    insertTail(interruptV, running);
     db0:	d166ad17 	ldw	r5,-25932(gp)
     db4:	e13fff17 	ldw	r4,-4(fp)
     db8:	0000a8c0 	call	a8c <insertTail>
    nextP = p;
     dbc:	e0bffe17 	ldw	r2,-8(fp)
     dc0:	d0a6ae15 	stw	r2,-25928(gp)
    _transfer();
     dc4:	000176c0 	call	176c <_transfer>
   
}
     dc8:	e037883a 	mov	sp,fp
     dcc:	dfc00117 	ldw	ra,4(sp)
     dd0:	df000017 	ldw	fp,0(sp)
     dd4:	dec00204 	addi	sp,sp,8
     dd8:	f800283a 	ret

00000ddc <addLast>:
            Utility functions for list manipulation
************************************************************
* **********************************************************/

// add element to the tail of the list
void addLast(int* list, int processId) {
     ddc:	defffb04 	addi	sp,sp,-20
     de0:	df000415 	stw	fp,16(sp)
     de4:	df000404 	addi	fp,sp,16
     de8:	e13ffe15 	stw	r4,-8(fp)
     dec:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     df0:	e0bffe17 	ldw	r2,-8(fp)
     df4:	10800017 	ldw	r2,0(r2)
     df8:	10bfffd8 	cmpnei	r2,r2,-1
     dfc:	1000041e 	bne	r2,zero,e10 <addLast+0x34>
        // list is empty
        *list = processId;
     e00:	e0fffe17 	ldw	r3,-8(fp)
     e04:	e0bfff17 	ldw	r2,-4(fp)
     e08:	18800015 	stw	r2,0(r3)
     e0c:	00004006 	br	f10 <addLast+0x134>
    }
    else {
        int temp = *list;
     e10:	e0bffe17 	ldw	r2,-8(fp)
     e14:	10800017 	ldw	r2,0(r2)
     e18:	e0bffd15 	stw	r2,-12(fp)
		while (processes[temp].next != -1  || processes[processes[temp].next].priority >= processes[processId].priority){
     e1c:	00000806 	br	e40 <addLast+0x64>
			temp = processes[temp].next;
     e20:	e0bffd17 	ldw	r2,-12(fp)
     e24:	00c00074 	movhi	r3,1
     e28:	18c57004 	addi	r3,r3,5568
     e2c:	10800324 	muli	r2,r2,12
     e30:	10c5883a 	add	r2,r2,r3
     e34:	10800204 	addi	r2,r2,8
     e38:	10800017 	ldw	r2,0(r2)
     e3c:	e0bffd15 	stw	r2,-12(fp)
        // list is empty
        *list = processId;
    }
    else {
        int temp = *list;
		while (processes[temp].next != -1  || processes[processes[temp].next].priority >= processes[processId].priority){
     e40:	e0bffd17 	ldw	r2,-12(fp)
     e44:	00c00074 	movhi	r3,1
     e48:	18c57004 	addi	r3,r3,5568
     e4c:	10800324 	muli	r2,r2,12
     e50:	10c5883a 	add	r2,r2,r3
     e54:	10800204 	addi	r2,r2,8
     e58:	10800017 	ldw	r2,0(r2)
     e5c:	10bfffd8 	cmpnei	r2,r2,-1
     e60:	103fef1e 	bne	r2,zero,e20 <addLast+0x44>
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	00c00074 	movhi	r3,1
     e6c:	18c57004 	addi	r3,r3,5568
     e70:	10800324 	muli	r2,r2,12
     e74:	10c5883a 	add	r2,r2,r3
     e78:	10800204 	addi	r2,r2,8
     e7c:	10800017 	ldw	r2,0(r2)
     e80:	00c00074 	movhi	r3,1
     e84:	18c57004 	addi	r3,r3,5568
     e88:	10800324 	muli	r2,r2,12
     e8c:	10c5883a 	add	r2,r2,r3
     e90:	11000017 	ldw	r4,0(r2)
     e94:	e0bfff17 	ldw	r2,-4(fp)
     e98:	00c00074 	movhi	r3,1
     e9c:	18c57004 	addi	r3,r3,5568
     ea0:	10800324 	muli	r2,r2,12
     ea4:	10c5883a 	add	r2,r2,r3
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	20bfdc0e 	bge	r4,r2,e20 <addLast+0x44>
			temp = processes[temp].next;
		}
		int p = processes[temp].next;
     eb0:	e0bffd17 	ldw	r2,-12(fp)
     eb4:	00c00074 	movhi	r3,1
     eb8:	18c57004 	addi	r3,r3,5568
     ebc:	10800324 	muli	r2,r2,12
     ec0:	10c5883a 	add	r2,r2,r3
     ec4:	10800204 	addi	r2,r2,8
     ec8:	10800017 	ldw	r2,0(r2)
     ecc:	e0bffc15 	stw	r2,-16(fp)
		processes[temp].next = processId;
     ed0:	e0bffd17 	ldw	r2,-12(fp)
     ed4:	00c00074 	movhi	r3,1
     ed8:	18c57004 	addi	r3,r3,5568
     edc:	10800324 	muli	r2,r2,12
     ee0:	10c5883a 	add	r2,r2,r3
     ee4:	10c00204 	addi	r3,r2,8
     ee8:	e0bfff17 	ldw	r2,-4(fp)
     eec:	18800015 	stw	r2,0(r3)
		processes[processId].next = p;
     ef0:	e0bfff17 	ldw	r2,-4(fp)
     ef4:	00c00074 	movhi	r3,1
     ef8:	18c57004 	addi	r3,r3,5568
     efc:	10800324 	muli	r2,r2,12
     f00:	10c5883a 	add	r2,r2,r3
     f04:	10c00204 	addi	r3,r2,8
     f08:	e0bffc17 	ldw	r2,-16(fp)
     f0c:	18800015 	stw	r2,0(r3)
    }

}
     f10:	e037883a 	mov	sp,fp
     f14:	df000017 	ldw	fp,0(sp)
     f18:	dec00104 	addi	sp,sp,4
     f1c:	f800283a 	ret

00000f20 <addFirst>:

// add element to the head of list
void addFirst(int* list, int processId){
     f20:	defffd04 	addi	sp,sp,-12
     f24:	df000215 	stw	fp,8(sp)
     f28:	df000204 	addi	fp,sp,8
     f2c:	e13ffe15 	stw	r4,-8(fp)
     f30:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     f34:	e0bffe17 	ldw	r2,-8(fp)
     f38:	10800017 	ldw	r2,0(r2)
     f3c:	10bfffd8 	cmpnei	r2,r2,-1
     f40:	1000041e 	bne	r2,zero,f54 <addFirst+0x34>
        *list = processId;
     f44:	e0fffe17 	ldw	r3,-8(fp)
     f48:	e0bfff17 	ldw	r2,-4(fp)
     f4c:	18800015 	stw	r2,0(r3)
     f50:	00000c06 	br	f84 <addFirst+0x64>
    }
    else {
        processes[processId].next = *list;
     f54:	e13fff17 	ldw	r4,-4(fp)
     f58:	e0bffe17 	ldw	r2,-8(fp)
     f5c:	11400017 	ldw	r5,0(r2)
     f60:	00c00074 	movhi	r3,1
     f64:	18c57004 	addi	r3,r3,5568
     f68:	20800324 	muli	r2,r4,12
     f6c:	10c5883a 	add	r2,r2,r3
     f70:	10800204 	addi	r2,r2,8
     f74:	11400015 	stw	r5,0(r2)
        *list = processId;
     f78:	e0fffe17 	ldw	r3,-8(fp)
     f7c:	e0bfff17 	ldw	r2,-4(fp)
     f80:	18800015 	stw	r2,0(r3)
    }
}
     f84:	e037883a 	mov	sp,fp
     f88:	df000017 	ldw	fp,0(sp)
     f8c:	dec00104 	addi	sp,sp,4
     f90:	f800283a 	ret

00000f94 <removeHead>:

// remove element that is head of the list
int removeHead(int* list){
     f94:	defffa04 	addi	sp,sp,-24
     f98:	dfc00515 	stw	ra,20(sp)
     f9c:	df000415 	stw	fp,16(sp)
     fa0:	df000404 	addi	fp,sp,16
     fa4:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     fa8:	e0bffe17 	ldw	r2,-8(fp)
     fac:	10800017 	ldw	r2,0(r2)
     fb0:	10bfffd8 	cmpnei	r2,r2,-1
     fb4:	1000061e 	bne	r2,zero,fd0 <removeHead+0x3c>
        printf("List is empty!");
     fb8:	01000074 	movhi	r4,1
     fbc:	21370704 	addi	r4,r4,-9188
     fc0:	00022000 	call	2200 <printf>
        return(-1);
     fc4:	00bfffc4 	movi	r2,-1
     fc8:	e0bfff15 	stw	r2,-4(fp)
     fcc:	00001a06 	br	1038 <removeHead+0xa4>
    }
    else {
        int head = *list;
     fd0:	e0bffe17 	ldw	r2,-8(fp)
     fd4:	10800017 	ldw	r2,0(r2)
     fd8:	e0bffd15 	stw	r2,-12(fp)
        int next = processes[*list].next;
     fdc:	e0bffe17 	ldw	r2,-8(fp)
     fe0:	10800017 	ldw	r2,0(r2)
     fe4:	00c00074 	movhi	r3,1
     fe8:	18c57004 	addi	r3,r3,5568
     fec:	10800324 	muli	r2,r2,12
     ff0:	10c5883a 	add	r2,r2,r3
     ff4:	10800204 	addi	r2,r2,8
     ff8:	10800017 	ldw	r2,0(r2)
     ffc:	e0bffc15 	stw	r2,-16(fp)
        processes[*list].next = -1;
    1000:	e0bffe17 	ldw	r2,-8(fp)
    1004:	10800017 	ldw	r2,0(r2)
    1008:	00c00074 	movhi	r3,1
    100c:	18c57004 	addi	r3,r3,5568
    1010:	10800324 	muli	r2,r2,12
    1014:	10c5883a 	add	r2,r2,r3
    1018:	10c00204 	addi	r3,r2,8
    101c:	00bfffc4 	movi	r2,-1
    1020:	18800015 	stw	r2,0(r3)
        *list = next;
    1024:	e0fffe17 	ldw	r3,-8(fp)
    1028:	e0bffc17 	ldw	r2,-16(fp)
    102c:	18800015 	stw	r2,0(r3)
        return head;
    1030:	e0bffd17 	ldw	r2,-12(fp)
    1034:	e0bfff15 	stw	r2,-4(fp)
    1038:	e0bfff17 	ldw	r2,-4(fp)
    }
}
    103c:	e037883a 	mov	sp,fp
    1040:	dfc00117 	ldw	ra,4(sp)
    1044:	df000017 	ldw	fp,0(sp)
    1048:	dec00204 	addi	sp,sp,8
    104c:	f800283a 	ret

00001050 <head>:

// returns head of the list
int head(int* list){
    1050:	defffc04 	addi	sp,sp,-16
    1054:	dfc00315 	stw	ra,12(sp)
    1058:	df000215 	stw	fp,8(sp)
    105c:	df000204 	addi	fp,sp,8
    1060:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	10800017 	ldw	r2,0(r2)
    106c:	10bfffd8 	cmpnei	r2,r2,-1
    1070:	1000061e 	bne	r2,zero,108c <head+0x3c>
        printf("List is empty!\n");
    1074:	01000074 	movhi	r4,1
    1078:	21370704 	addi	r4,r4,-9188
    107c:	00023180 	call	2318 <puts>
        return(-1);
    1080:	00bfffc4 	movi	r2,-1
    1084:	e0bfff15 	stw	r2,-4(fp)
    1088:	00000306 	br	1098 <head+0x48>
    }
    else {
        return *list;
    108c:	e0bffe17 	ldw	r2,-8(fp)
    1090:	10800017 	ldw	r2,0(r2)
    1094:	e0bfff15 	stw	r2,-4(fp)
    1098:	e0bfff17 	ldw	r2,-4(fp)
    }
}
    109c:	e037883a 	mov	sp,fp
    10a0:	dfc00117 	ldw	ra,4(sp)
    10a4:	df000017 	ldw	fp,0(sp)
    10a8:	dec00204 	addi	sp,sp,8
    10ac:	f800283a 	ret

000010b0 <creerProcessus>:



void creerProcessus(void (*f), int stackSize, int priority){
    10b0:	defff904 	addi	sp,sp,-28
    10b4:	dfc00615 	stw	ra,24(sp)
    10b8:	df000515 	stw	fp,20(sp)
    10bc:	df000504 	addi	fp,sp,20
    10c0:	e13ffd15 	stw	r4,-12(fp)
    10c4:	e17ffe15 	stw	r5,-8(fp)
    10c8:	e1bfff15 	stw	r6,-4(fp)
	if (nbProcess >= MAX_PROCESS) {
    10cc:	d0a6af17 	ldw	r2,-25924(gp)
    10d0:	108002b0 	cmpltui	r2,r2,10
    10d4:	1000051e 	bne	r2,zero,10ec <creerProcessus+0x3c>
		printf("Error: max number of processes reached!\n");
    10d8:	01000074 	movhi	r4,1
    10dc:	21370b04 	addi	r4,r4,-9172
    10e0:	00023180 	call	2318 <puts>
		exit(1);
    10e4:	01000044 	movi	r4,1
    10e8:	00019c00 	call	19c0 <exit>
	}
    Process p = NULL;
    10ec:	e03ffc15 	stw	zero,-16(fp)
    unsigned int* stackAddr = NULL;
    10f0:	e03ffb15 	stw	zero,-20(fp)
    stackAddr = malloc(stackSize);
    10f4:	e13ffe17 	ldw	r4,-8(fp)
    10f8:	0001a0c0 	call	1a0c <malloc>
    10fc:	e0bffb15 	stw	r2,-20(fp)
    
    if(stackAddr != NULL) {
    1100:	e0bffb17 	ldw	r2,-20(fp)
    1104:	1005003a 	cmpeq	r2,r2,zero
    1108:	1000271e 	bne	r2,zero,11a8 <creerProcessus+0xf8>
        p = newProcess(f, stackAddr, stackSize);
    110c:	e13ffd17 	ldw	r4,-12(fp)
    1110:	e17ffb17 	ldw	r5,-20(fp)
    1114:	e1bffe17 	ldw	r6,-8(fp)
    1118:	0000cf00 	call	cf0 <newProcess>
    111c:	e0bffc15 	stw	r2,-16(fp)
        
        if(p != NULL) {
    1120:	e0bffc17 	ldw	r2,-16(fp)
    1124:	1005003a 	cmpeq	r2,r2,zero
    1128:	10001f1e 	bne	r2,zero,11a8 <creerProcessus+0xf8>
        	processes[nbProcess].p = p;
    112c:	d0a6af17 	ldw	r2,-25924(gp)
    1130:	00c00074 	movhi	r3,1
    1134:	18c57004 	addi	r3,r3,5568
    1138:	10800324 	muli	r2,r2,12
    113c:	10c5883a 	add	r2,r2,r3
    1140:	10c00104 	addi	r3,r2,4
    1144:	e0bffc17 	ldw	r2,-16(fp)
    1148:	18800015 	stw	r2,0(r3)
        	processes[nbProcess].priority = priority;
    114c:	d0a6af17 	ldw	r2,-25924(gp)
    1150:	00c00074 	movhi	r3,1
    1154:	18c57004 	addi	r3,r3,5568
    1158:	10800324 	muli	r2,r2,12
    115c:	10c7883a 	add	r3,r2,r3
    1160:	e0bfff17 	ldw	r2,-4(fp)
    1164:	18800015 	stw	r2,0(r3)
        	processes[nbProcess].next = -1;
    1168:	d0a6af17 	ldw	r2,-25924(gp)
    116c:	00c00074 	movhi	r3,1
    1170:	18c57004 	addi	r3,r3,5568
    1174:	10800324 	muli	r2,r2,12
    1178:	10c5883a 	add	r2,r2,r3
    117c:	10c00204 	addi	r3,r2,8
    1180:	00bfffc4 	movi	r2,-1
    1184:	18800015 	stw	r2,0(r3)
        	addLast(&readyList, *p);
    1188:	e0bffc17 	ldw	r2,-16(fp)
    118c:	10800017 	ldw	r2,0(r2)
    1190:	100b883a 	mov	r5,r2
    1194:	d1200004 	addi	r4,gp,-32768
    1198:	0000ddc0 	call	ddc <addLast>
        	nbProcess++;
    119c:	d0a6af17 	ldw	r2,-25924(gp)
    11a0:	10800044 	addi	r2,r2,1
    11a4:	d0a6af15 	stw	r2,-25924(gp)
        }
    }
}
    11a8:	e037883a 	mov	sp,fp
    11ac:	dfc00117 	ldw	ra,4(sp)
    11b0:	df000017 	ldw	fp,0(sp)
    11b4:	dec00204 	addi	sp,sp,8
    11b8:	f800283a 	ret

000011bc <start>:

void start(){
    11bc:	defffd04 	addi	sp,sp,-12
    11c0:	dfc00215 	stw	ra,8(sp)
    11c4:	df000115 	stw	fp,4(sp)
    11c8:	df000104 	addi	fp,sp,4
    printf("Starting kernel...\n");
    11cc:	01000074 	movhi	r4,1
    11d0:	21371504 	addi	r4,r4,-9132
    11d4:	00023180 	call	2318 <puts>
    if (readyList == -1){
    11d8:	d0a00017 	ldw	r2,-32768(gp)
    11dc:	10bfffd8 	cmpnei	r2,r2,-1
    11e0:	1000051e 	bne	r2,zero,11f8 <start+0x3c>
        printf("Error: No process in the ready list!\n");
    11e4:	01000074 	movhi	r4,1
    11e8:	21371a04 	addi	r4,r4,-9112
    11ec:	00023180 	call	2318 <puts>
        exit(1);
    11f0:	01000044 	movi	r4,1
    11f4:	00019c00 	call	19c0 <exit>
    }
    Process process = processes[head(&readyList)].p;
    11f8:	d1200004 	addi	r4,gp,-32768
    11fc:	00010500 	call	1050 <head>
    1200:	00c00074 	movhi	r3,1
    1204:	18c57004 	addi	r3,r3,5568
    1208:	10800324 	muli	r2,r2,12
    120c:	10c5883a 	add	r2,r2,r3
    1210:	10800104 	addi	r2,r2,4
    1214:	10800017 	ldw	r2,0(r2)
    1218:	e0bfff15 	stw	r2,-4(fp)
    transfer(process);
    121c:	e13fff17 	ldw	r4,-4(fp)
    1220:	0000d4c0 	call	d4c <transfer>
}
    1224:	e037883a 	mov	sp,fp
    1228:	dfc00117 	ldw	ra,4(sp)
    122c:	df000017 	ldw	fp,0(sp)
    1230:	dec00204 	addi	sp,sp,8
    1234:	f800283a 	ret

00001238 <creerVerrou>:

int creerVerrou(){
    1238:	defffd04 	addi	sp,sp,-12
    123c:	dfc00215 	stw	ra,8(sp)
    1240:	df000115 	stw	fp,4(sp)
    1244:	df000104 	addi	fp,sp,4
	if(nbLocks >= MAX_LOCK) {
    1248:	d0a6b017 	ldw	r2,-25920(gp)
    124c:	108002b0 	cmpltui	r2,r2,10
    1250:	1000051e 	bne	r2,zero,1268 <creerVerrou+0x30>
		printf("Error: max number of locks reached!\n");
    1254:	01000074 	movhi	r4,1
    1258:	21372404 	addi	r4,r4,-9072
    125c:	00023180 	call	2318 <puts>
		exit(1);
    1260:	01000044 	movi	r4,1
    1264:	00019c00 	call	19c0 <exit>
	}
	locks[nbLocks].lockID = nbLocks;
    1268:	d126b017 	ldw	r4,-25920(gp)
    126c:	d0a6b017 	ldw	r2,-25920(gp)
    1270:	100b883a 	mov	r5,r2
    1274:	00c00074 	movhi	r3,1
    1278:	18c58e04 	addi	r3,r3,5688
    127c:	20801924 	muli	r2,r4,100
    1280:	10c5883a 	add	r2,r2,r3
    1284:	10800204 	addi	r2,r2,8
    1288:	11400015 	stw	r5,0(r2)
	locks[nbLocks].state = 1;
    128c:	d0a6b017 	ldw	r2,-25920(gp)
    1290:	00c00074 	movhi	r3,1
    1294:	18c58e04 	addi	r3,r3,5688
    1298:	10801924 	muli	r2,r2,100
    129c:	10c7883a 	add	r3,r2,r3
    12a0:	00800044 	movi	r2,1
    12a4:	18800015 	stw	r2,0(r3)
	locks[nbLocks].waitingList = -1;
    12a8:	d0a6b017 	ldw	r2,-25920(gp)
    12ac:	00c00074 	movhi	r3,1
    12b0:	18c58e04 	addi	r3,r3,5688
    12b4:	10801924 	muli	r2,r2,100
    12b8:	10c5883a 	add	r2,r2,r3
    12bc:	10c00104 	addi	r3,r2,4
    12c0:	00bfffc4 	movi	r2,-1
    12c4:	18800015 	stw	r2,0(r3)
	locks[nbLocks].nbCond = 0;
    12c8:	d0a6b017 	ldw	r2,-25920(gp)
    12cc:	00c00074 	movhi	r3,1
    12d0:	18c58e04 	addi	r3,r3,5688
    12d4:	10801924 	muli	r2,r2,100
    12d8:	10c5883a 	add	r2,r2,r3
    12dc:	10801704 	addi	r2,r2,92
    12e0:	10000015 	stw	zero,0(r2)
	int n = nbLocks;
    12e4:	d0a6b017 	ldw	r2,-25920(gp)
    12e8:	e0bfff15 	stw	r2,-4(fp)
	nbLocks++;
    12ec:	d0a6b017 	ldw	r2,-25920(gp)
    12f0:	10800044 	addi	r2,r2,1
    12f4:	d0a6b015 	stw	r2,-25920(gp)
	return n;
    12f8:	e0bfff17 	ldw	r2,-4(fp)
}
    12fc:	e037883a 	mov	sp,fp
    1300:	dfc00117 	ldw	ra,4(sp)
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00204 	addi	sp,sp,8
    130c:	f800283a 	ret

00001310 <verrouiller>:

void verrouiller(int verrouID) {
    1310:	defffb04 	addi	sp,sp,-20
    1314:	dfc00415 	stw	ra,16(sp)
    1318:	df000315 	stw	fp,12(sp)
    131c:	dc000215 	stw	r16,8(sp)
    1320:	df000204 	addi	fp,sp,8
    1324:	e13fff15 	stw	r4,-4(fp)
	if(locks[verrouID].state == 1 || locks[verrouID].lockingPrss == head(&readyList)) {
    1328:	e0bfff17 	ldw	r2,-4(fp)
    132c:	00c00074 	movhi	r3,1
    1330:	18c58e04 	addi	r3,r3,5688
    1334:	10801924 	muli	r2,r2,100
    1338:	10c5883a 	add	r2,r2,r3
    133c:	10800017 	ldw	r2,0(r2)
    1340:	10800060 	cmpeqi	r2,r2,1
    1344:	10000a1e 	bne	r2,zero,1370 <verrouiller+0x60>
    1348:	e0bfff17 	ldw	r2,-4(fp)
    134c:	00c00074 	movhi	r3,1
    1350:	18c58e04 	addi	r3,r3,5688
    1354:	10801924 	muli	r2,r2,100
    1358:	10c5883a 	add	r2,r2,r3
    135c:	10801804 	addi	r2,r2,96
    1360:	14000017 	ldw	r16,0(r2)
    1364:	d1200004 	addi	r4,gp,-32768
    1368:	00010500 	call	1050 <head>
    136c:	8080111e 	bne	r16,r2,13b4 <verrouiller+0xa4>
		locks[verrouID].state = 0;
    1370:	e0bfff17 	ldw	r2,-4(fp)
    1374:	00c00074 	movhi	r3,1
    1378:	18c58e04 	addi	r3,r3,5688
    137c:	10801924 	muli	r2,r2,100
    1380:	10c5883a 	add	r2,r2,r3
    1384:	10000015 	stw	zero,0(r2)
		locks[verrouID].lockingPrss = head(&readyList);
    1388:	e43fff17 	ldw	r16,-4(fp)
    138c:	d1200004 	addi	r4,gp,-32768
    1390:	00010500 	call	1050 <head>
    1394:	1009883a 	mov	r4,r2
    1398:	00c00074 	movhi	r3,1
    139c:	18c58e04 	addi	r3,r3,5688
    13a0:	80801924 	muli	r2,r16,100
    13a4:	10c5883a 	add	r2,r2,r3
    13a8:	10801804 	addi	r2,r2,96
    13ac:	11000015 	stw	r4,0(r2)
	nbLocks++;
	return n;
}

void verrouiller(int verrouID) {
	if(locks[verrouID].state == 1 || locks[verrouID].lockingPrss == head(&readyList)) {
    13b0:	00001406 	br	1404 <verrouiller+0xf4>
		locks[verrouID].state = 0;
		locks[verrouID].lockingPrss = head(&readyList);
	} else {
		int prss = removeHead(&readyList);
    13b4:	d1200004 	addi	r4,gp,-32768
    13b8:	0000f940 	call	f94 <removeHead>
    13bc:	e0bffe15 	stw	r2,-8(fp)
		addLast(&locks[verrouID].waitingList, prss);
    13c0:	e0bfff17 	ldw	r2,-4(fp)
    13c4:	10801924 	muli	r2,r2,100
    13c8:	10c00104 	addi	r3,r2,4
    13cc:	00800074 	movhi	r2,1
    13d0:	10858e04 	addi	r2,r2,5688
    13d4:	1889883a 	add	r4,r3,r2
    13d8:	e17ffe17 	ldw	r5,-8(fp)
    13dc:	0000ddc0 	call	ddc <addLast>
		transfer(processes[head(&readyList)].p);
    13e0:	d1200004 	addi	r4,gp,-32768
    13e4:	00010500 	call	1050 <head>
    13e8:	00c00074 	movhi	r3,1
    13ec:	18c57004 	addi	r3,r3,5568
    13f0:	10800324 	muli	r2,r2,12
    13f4:	10c5883a 	add	r2,r2,r3
    13f8:	10800104 	addi	r2,r2,4
    13fc:	11000017 	ldw	r4,0(r2)
    1400:	0000d4c0 	call	d4c <transfer>
	}
}
    1404:	e037883a 	mov	sp,fp
    1408:	dfc00217 	ldw	ra,8(sp)
    140c:	df000117 	ldw	fp,4(sp)
    1410:	dc000017 	ldw	r16,0(sp)
    1414:	dec00304 	addi	sp,sp,12
    1418:	f800283a 	ret

0000141c <deverrouiller>:

void deverrouiller(int verrouID) {
    141c:	defffc04 	addi	sp,sp,-16
    1420:	dfc00315 	stw	ra,12(sp)
    1424:	df000215 	stw	fp,8(sp)
    1428:	df000204 	addi	fp,sp,8
    142c:	e13fff15 	stw	r4,-4(fp)
	locks[verrouID].state = 1;
    1430:	e0bfff17 	ldw	r2,-4(fp)
    1434:	00c00074 	movhi	r3,1
    1438:	18c58e04 	addi	r3,r3,5688
    143c:	10801924 	muli	r2,r2,100
    1440:	10c7883a 	add	r3,r2,r3
    1444:	00800044 	movi	r2,1
    1448:	18800015 	stw	r2,0(r3)
	if(locks[verrouID].waitingList != -1) {
    144c:	e0bfff17 	ldw	r2,-4(fp)
    1450:	00c00074 	movhi	r3,1
    1454:	18c58e04 	addi	r3,r3,5688
    1458:	10801924 	muli	r2,r2,100
    145c:	10c5883a 	add	r2,r2,r3
    1460:	10800104 	addi	r2,r2,4
    1464:	10800017 	ldw	r2,0(r2)
    1468:	10bfffe0 	cmpeqi	r2,r2,-1
    146c:	10000b1e 	bne	r2,zero,149c <deverrouiller+0x80>
		int p = removeHead(&locks[verrouID].waitingList);
    1470:	e0bfff17 	ldw	r2,-4(fp)
    1474:	10801924 	muli	r2,r2,100
    1478:	10c00104 	addi	r3,r2,4
    147c:	00800074 	movhi	r2,1
    1480:	10858e04 	addi	r2,r2,5688
    1484:	1889883a 	add	r4,r3,r2
    1488:	0000f940 	call	f94 <removeHead>
    148c:	e0bffe15 	stw	r2,-8(fp)
		addLast(&readyList, p);
    1490:	d1200004 	addi	r4,gp,-32768
    1494:	e17ffe17 	ldw	r5,-8(fp)
    1498:	0000ddc0 	call	ddc <addLast>
	}
}
    149c:	e037883a 	mov	sp,fp
    14a0:	dfc00117 	ldw	ra,4(sp)
    14a4:	df000017 	ldw	fp,0(sp)
    14a8:	dec00204 	addi	sp,sp,8
    14ac:	f800283a 	ret

000014b0 <creerCondition>:

int creerCondition(int verrouID) {
    14b0:	deffe304 	addi	sp,sp,-116
    14b4:	dfc01c15 	stw	ra,112(sp)
    14b8:	df001b15 	stw	fp,108(sp)
    14bc:	df001b04 	addi	fp,sp,108
    14c0:	e13fff15 	stw	r4,-4(fp)
	if(locks[verrouID].nbCond >= MAX_COND) {
    14c4:	e0bfff17 	ldw	r2,-4(fp)
    14c8:	00c00074 	movhi	r3,1
    14cc:	18c58e04 	addi	r3,r3,5688
    14d0:	10801924 	muli	r2,r2,100
    14d4:	10c5883a 	add	r2,r2,r3
    14d8:	10801704 	addi	r2,r2,92
    14dc:	10800017 	ldw	r2,0(r2)
    14e0:	108002b0 	cmpltui	r2,r2,10
    14e4:	1000061e 	bne	r2,zero,1500 <creerCondition+0x50>
		printf("Error: max number of conditions for lock %d reached!\n", verrouID);
    14e8:	01000074 	movhi	r4,1
    14ec:	21372d04 	addi	r4,r4,-9036
    14f0:	e17fff17 	ldw	r5,-4(fp)
    14f4:	00022000 	call	2200 <printf>
		exit(1);
    14f8:	01000044 	movi	r4,1
    14fc:	00019c00 	call	19c0 <exit>
	}
	LockDescriptor l = locks[verrouID];
    1500:	e0bfff17 	ldw	r2,-4(fp)
    1504:	00c00074 	movhi	r3,1
    1508:	18c58e04 	addi	r3,r3,5688
    150c:	10801924 	muli	r2,r2,100
    1510:	10c5883a 	add	r2,r2,r3
    1514:	e13fe604 	addi	r4,fp,-104
    1518:	100b883a 	mov	r5,r2
    151c:	01801904 	movi	r6,100
    1520:	00021600 	call	2160 <memcpy>
	l.conds[l.nbCond].condID = verrouID * MAX_COND + l.nbCond;
    1524:	e13ffd17 	ldw	r4,-12(fp)
    1528:	e0bfff17 	ldw	r2,-4(fp)
    152c:	108002a4 	muli	r2,r2,10
    1530:	1007883a 	mov	r3,r2
    1534:	e0bffd17 	ldw	r2,-12(fp)
    1538:	1885883a 	add	r2,r3,r2
    153c:	1007883a 	mov	r3,r2
    1540:	200490fa 	slli	r2,r4,3
    1544:	e13fe504 	addi	r4,fp,-108
    1548:	1105883a 	add	r2,r2,r4
    154c:	10800404 	addi	r2,r2,16
    1550:	10c00015 	stw	r3,0(r2)
	l.conds[l.nbCond].waitingList = -1;
    1554:	e0bffd17 	ldw	r2,-12(fp)
    1558:	100490fa 	slli	r2,r2,3
    155c:	e0ffe504 	addi	r3,fp,-108
    1560:	10c5883a 	add	r2,r2,r3
    1564:	10c00504 	addi	r3,r2,20
    1568:	00bfffc4 	movi	r2,-1
    156c:	18800015 	stw	r2,0(r3)
	int n = l.nbCond;
    1570:	e0bffd17 	ldw	r2,-12(fp)
    1574:	e0bfe515 	stw	r2,-108(fp)
	l.nbCond++;
    1578:	e0bffd17 	ldw	r2,-12(fp)
    157c:	10800044 	addi	r2,r2,1
    1580:	e0bffd15 	stw	r2,-12(fp)
	return n;
    1584:	e0bfe517 	ldw	r2,-108(fp)
}
    1588:	e037883a 	mov	sp,fp
    158c:	dfc00117 	ldw	ra,4(sp)
    1590:	df000017 	ldw	fp,0(sp)
    1594:	dec00204 	addi	sp,sp,8
    1598:	f800283a 	ret

0000159c <await>:

void await(int conditionID) {
    159c:	defffa04 	addi	sp,sp,-24
    15a0:	dfc00515 	stw	ra,20(sp)
    15a4:	df000415 	stw	fp,16(sp)
    15a8:	dc000315 	stw	r16,12(sp)
    15ac:	df000304 	addi	fp,sp,12
    15b0:	e13fff15 	stw	r4,-4(fp)
	int p = removeHead(&readyList);
    15b4:	d1200004 	addi	r4,gp,-32768
    15b8:	0000f940 	call	f94 <removeHead>
    15bc:	e0bffe15 	stw	r2,-8(fp)
	int lockID = conditionID / MAX_COND;
    15c0:	e13fff17 	ldw	r4,-4(fp)
    15c4:	01400284 	movi	r5,10
    15c8:	00018f00 	call	18f0 <__divsi3>
    15cc:	e0bffd15 	stw	r2,-12(fp)
	addLast(&locks[lockID].conds[conditionID % MAX_COND].waitingList, p);
    15d0:	e43ffd17 	ldw	r16,-12(fp)
    15d4:	e13fff17 	ldw	r4,-4(fp)
    15d8:	01400284 	movi	r5,10
    15dc:	00019500 	call	1950 <__modsi3>
    15e0:	100690fa 	slli	r3,r2,3
    15e4:	80801924 	muli	r2,r16,100
    15e8:	1885883a 	add	r2,r3,r2
    15ec:	10c00404 	addi	r3,r2,16
    15f0:	00800074 	movhi	r2,1
    15f4:	10858e04 	addi	r2,r2,5688
    15f8:	1889883a 	add	r4,r3,r2
    15fc:	e17ffe17 	ldw	r5,-8(fp)
    1600:	0000ddc0 	call	ddc <addLast>
	transfer(processes[head(&readyList)].p);
    1604:	d1200004 	addi	r4,gp,-32768
    1608:	00010500 	call	1050 <head>
    160c:	00c00074 	movhi	r3,1
    1610:	18c57004 	addi	r3,r3,5568
    1614:	10800324 	muli	r2,r2,12
    1618:	10c5883a 	add	r2,r2,r3
    161c:	10800104 	addi	r2,r2,4
    1620:	11000017 	ldw	r4,0(r2)
    1624:	0000d4c0 	call	d4c <transfer>
}
    1628:	e037883a 	mov	sp,fp
    162c:	dfc00217 	ldw	ra,8(sp)
    1630:	df000117 	ldw	fp,4(sp)
    1634:	dc000017 	ldw	r16,0(sp)
    1638:	dec00304 	addi	sp,sp,12
    163c:	f800283a 	ret

00001640 <signal>:

void signal(int conditionID) {
    1640:	defffa04 	addi	sp,sp,-24
    1644:	dfc00515 	stw	ra,20(sp)
    1648:	df000415 	stw	fp,16(sp)
    164c:	dc000315 	stw	r16,12(sp)
    1650:	df000304 	addi	fp,sp,12
    1654:	e13fff15 	stw	r4,-4(fp)
	int lockID = conditionID / MAX_COND;
    1658:	e13fff17 	ldw	r4,-4(fp)
    165c:	01400284 	movi	r5,10
    1660:	00018f00 	call	18f0 <__divsi3>
    1664:	e0bffe15 	stw	r2,-8(fp)
	int p = removeHead(&locks[lockID].conds[conditionID % MAX_COND].waitingList);
    1668:	e43ffe17 	ldw	r16,-8(fp)
    166c:	e13fff17 	ldw	r4,-4(fp)
    1670:	01400284 	movi	r5,10
    1674:	00019500 	call	1950 <__modsi3>
    1678:	100690fa 	slli	r3,r2,3
    167c:	80801924 	muli	r2,r16,100
    1680:	1885883a 	add	r2,r3,r2
    1684:	10c00404 	addi	r3,r2,16
    1688:	00800074 	movhi	r2,1
    168c:	10858e04 	addi	r2,r2,5688
    1690:	1889883a 	add	r4,r3,r2
    1694:	0000f940 	call	f94 <removeHead>
    1698:	e0bffd15 	stw	r2,-12(fp)
	if(p != -1) {
    169c:	e0bffd17 	ldw	r2,-12(fp)
    16a0:	10bfffe0 	cmpeqi	r2,r2,-1
    16a4:	1000031e 	bne	r2,zero,16b4 <signal+0x74>
		addLast(&readyList, p);
    16a8:	d1200004 	addi	r4,gp,-32768
    16ac:	e17ffd17 	ldw	r5,-12(fp)
    16b0:	0000ddc0 	call	ddc <addLast>
	}
}
    16b4:	e037883a 	mov	sp,fp
    16b8:	dfc00217 	ldw	ra,8(sp)
    16bc:	df000117 	ldw	fp,4(sp)
    16c0:	dc000017 	ldw	r16,0(sp)
    16c4:	dec00304 	addi	sp,sp,12
    16c8:	f800283a 	ret

000016cc <signalAll>:

void signalAll(int conditionID) {
    16cc:	defffb04 	addi	sp,sp,-20
    16d0:	dfc00415 	stw	ra,16(sp)
    16d4:	df000315 	stw	fp,12(sp)
    16d8:	dc000215 	stw	r16,8(sp)
    16dc:	df000204 	addi	fp,sp,8
    16e0:	e13fff15 	stw	r4,-4(fp)
	int lockID = conditionID / MAX_COND;
    16e4:	e13fff17 	ldw	r4,-4(fp)
    16e8:	01400284 	movi	r5,10
    16ec:	00018f00 	call	18f0 <__divsi3>
    16f0:	e0bffe15 	stw	r2,-8(fp)
	while(locks[lockID].conds[conditionID % MAX_COND].waitingList != -1) {
    16f4:	00000206 	br	1700 <signalAll+0x34>
		signal(conditionID);
    16f8:	e13fff17 	ldw	r4,-4(fp)
    16fc:	00016400 	call	1640 <signal>
	}
}

void signalAll(int conditionID) {
	int lockID = conditionID / MAX_COND;
	while(locks[lockID].conds[conditionID % MAX_COND].waitingList != -1) {
    1700:	e43ffe17 	ldw	r16,-8(fp)
    1704:	e13fff17 	ldw	r4,-4(fp)
    1708:	01400284 	movi	r5,10
    170c:	00019500 	call	1950 <__modsi3>
    1710:	01000074 	movhi	r4,1
    1714:	21058e04 	addi	r4,r4,5688
    1718:	100690fa 	slli	r3,r2,3
    171c:	80801924 	muli	r2,r16,100
    1720:	1885883a 	add	r2,r3,r2
    1724:	1105883a 	add	r2,r2,r4
    1728:	10800404 	addi	r2,r2,16
    172c:	10800017 	ldw	r2,0(r2)
    1730:	10bfffd8 	cmpnei	r2,r2,-1
    1734:	103ff01e 	bne	r2,zero,16f8 <signalAll+0x2c>
		signal(conditionID);
	}
}
    1738:	e037883a 	mov	sp,fp
    173c:	dfc00217 	ldw	ra,8(sp)
    1740:	df000117 	ldw	fp,4(sp)
    1744:	dc000017 	ldw	r16,0(sp)
    1748:	dec00304 	addi	sp,sp,12
    174c:	f800283a 	ret

00001750 <_createStack>:
.text
_createStack: #r4 = newSP
			  #r5 = newPC
			  #r6 = stackSize - 4
	   # pointer to the bottom of the stack
	   add r2, r4, r6
    1750:	2185883a 	add	r2,r4,r6
	   # init sp with r8
	   addi r8, r2, -100 # sp
    1754:	123fe704 	addi	r8,r2,-100
	   stw  r5, 0(r8)   # sp[0] = PC
    1758:	41400015 	stw	r5,0(r8)
	   addi r9, r0, 1
    175c:	02400044 	movi	r9,1
	   stw  r9, 96(r8)  # sp[24] = status = 1
    1760:	42401815 	stw	r9,96(r8)
	   # store sp on the stack bottom
	   stw  r8, 0(r2)
    1764:	12000015 	stw	r8,0(r2)
	   # return pointer to stack address
	   ret
    1768:	f800283a 	ret

0000176c <_transfer>:
 * (eret instruction retores estatus into status register, while jumping at ea)
 */
.global _transfer
.text
_transfer:
	addi sp, sp, -100
    176c:	deffe704 	addi	sp,sp,-100
	stw ra,  0(sp)
    1770:	dfc00015 	stw	ra,0(sp)
    stw fp,  4(sp)
    1774:	df000115 	stw	fp,4(sp)
    stw r2,  8(sp)
    1778:	d8800215 	stw	r2,8(sp)
    stw r3,  12(sp)
    177c:	d8c00315 	stw	r3,12(sp)
    stw r4,  16(sp)
    1780:	d9000415 	stw	r4,16(sp)
    stw r5,  20(sp)
    1784:	d9400515 	stw	r5,20(sp)
    stw r6,  24(sp)
    1788:	d9800615 	stw	r6,24(sp)
    stw r7,  28(sp)
    178c:	d9c00715 	stw	r7,28(sp)
    stw r8,  32(sp)
    1790:	da000815 	stw	r8,32(sp)
    stw r9,  36(sp)
    1794:	da400915 	stw	r9,36(sp)
    stw r10, 40(sp)
    1798:	da800a15 	stw	r10,40(sp)
    stw r11, 44(sp)
    179c:	dac00b15 	stw	r11,44(sp)
    stw r12, 48(sp)
    17a0:	db000c15 	stw	r12,48(sp)
    stw r13, 52(sp)
    17a4:	db400d15 	stw	r13,52(sp)
    stw r14, 56(sp)
    17a8:	db800e15 	stw	r14,56(sp)
    stw r15, 60(sp)
    17ac:	dbc00f15 	stw	r15,60(sp)
    stw r16, 64(sp)
    17b0:	dc001015 	stw	r16,64(sp)
    stw r17, 68(sp)
    17b4:	dc401115 	stw	r17,68(sp)
    stw r18, 72(sp)
    17b8:	dc801215 	stw	r18,72(sp)
    stw r19, 76(sp)
    17bc:	dcc01315 	stw	r19,76(sp)
    stw r20, 80(sp)
    17c0:	dd001415 	stw	r20,80(sp)
    stw r21, 84(sp)
    17c4:	dd401515 	stw	r21,84(sp)
    stw r22, 88(sp)
    17c8:	dd801615 	stw	r22,88(sp)
    stw r23, 92(sp)
    17cc:	ddc01715 	stw	r23,92(sp)
	# save the current interrupt switch status
    rdctl r2, status
    17d0:	0005303a 	rdctl	r2,status
    stw   r2, 96(sp)
    17d4:	d8801815 	stw	r2,96(sp)
    # running->sp = sp
    ldw r2, %gprel(running)(gp)
    17d8:	d0a6ad17 	ldw	r2,-25932(gp)
    stw sp, (r2)
    17dc:	16c00015 	stw	sp,0(r2)
    # running = nextP
	ldw r2, %gprel(nextP)(gp)
    17e0:	d0a6ae17 	ldw	r2,-25928(gp)
	stw r2, %gprel(running)(gp)
    17e4:	d0a6ad15 	stw	r2,-25932(gp)
	# set sp to the sp from the nextP
	ldw sp, (r2)
    17e8:	16c00017 	ldw	sp,0(r2)
	# return using bret -> ba
	ldw ba,  0(sp)
    17ec:	df800017 	ldw	r30,0(sp)
    ldw fp,  4(sp)
    17f0:	df000117 	ldw	fp,4(sp)
    ldw r2,  8(sp)
    17f4:	d8800217 	ldw	r2,8(sp)
    ldw r3,  12(sp)
    17f8:	d8c00317 	ldw	r3,12(sp)
    ldw r4,  16(sp)
    17fc:	d9000417 	ldw	r4,16(sp)
    ldw r5,  20(sp)
    1800:	d9400517 	ldw	r5,20(sp)
    ldw r6,  24(sp)
    1804:	d9800617 	ldw	r6,24(sp)
    ldw r7,  28(sp)
    1808:	d9c00717 	ldw	r7,28(sp)
    ldw r8,  32(sp)
    180c:	da000817 	ldw	r8,32(sp)
    ldw r9,  36(sp)
    1810:	da400917 	ldw	r9,36(sp)
    ldw r10, 40(sp)
    1814:	da800a17 	ldw	r10,40(sp)
    ldw r11, 44(sp)
    1818:	dac00b17 	ldw	r11,44(sp)
    ldw r12, 48(sp)
    181c:	db000c17 	ldw	r12,48(sp)
    ldw r13, 52(sp)
    1820:	db400d17 	ldw	r13,52(sp)
    ldw r14, 56(sp)
    1824:	db800e17 	ldw	r14,56(sp)
    ldw r15, 60(sp)
    1828:	dbc00f17 	ldw	r15,60(sp)
    ldw r16, 64(sp)
    182c:	dc001017 	ldw	r16,64(sp)
    ldw r17, 68(sp)
    1830:	dc401117 	ldw	r17,68(sp)
    ldw r18, 72(sp)
    1834:	dc801217 	ldw	r18,72(sp)
    ldw r19, 76(sp)
    1838:	dcc01317 	ldw	r19,76(sp)
    ldw r20, 80(sp)
    183c:	dd001417 	ldw	r20,80(sp)
    ldw r21, 84(sp)
    1840:	dd401517 	ldw	r21,84(sp)
    ldw r22, 88(sp)
    1844:	dd801617 	ldw	r22,88(sp)
	# restore interrupt switch status into bstatus
    ldw r23, 96(sp)
    1848:	ddc01817 	ldw	r23,96(sp)
    wrctl bstatus, r23
    184c:	b80170ba 	wrctl	bstatus,r23
    ldw r23, 92(sp)
    1850:	ddc01717 	ldw	r23,92(sp)

	addi sp, sp, 100
    1854:	dec01904 	addi	sp,sp,100
	# bret will copy back bstatus into status and go to ba
	bret
    1858:	f000483a 	bret

0000185c <maskInterrupts>:


.global maskInterrupts
.text
maskInterrupts:
	addi r9, r0, 0
    185c:	02400004 	movi	r9,0
	wrctl status, r9
    1860:	4801703a 	wrctl	status,r9
	ret
    1864:	f800283a 	ret

00001868 <allowInterrupts>:

.global allowInterrupts
.text
allowInterrupts:
	addi r9, r0, 1
    1868:	02400044 	movi	r9,1
	wrctl status, r9
    186c:	4801703a 	wrctl	status,r9
	ret
    1870:	f800283a 	ret

00001874 <udivmodsi4>:
    1874:	29001b2e 	bgeu	r5,r4,18e4 <udivmodsi4+0x70>
    1878:	28001a16 	blt	r5,zero,18e4 <udivmodsi4+0x70>
    187c:	00800044 	movi	r2,1
    1880:	0007883a 	mov	r3,zero
    1884:	01c007c4 	movi	r7,31
    1888:	00000306 	br	1898 <udivmodsi4+0x24>
    188c:	19c01326 	beq	r3,r7,18dc <udivmodsi4+0x68>
    1890:	18c00044 	addi	r3,r3,1
    1894:	28000416 	blt	r5,zero,18a8 <udivmodsi4+0x34>
    1898:	294b883a 	add	r5,r5,r5
    189c:	1085883a 	add	r2,r2,r2
    18a0:	293ffa36 	bltu	r5,r4,188c <udivmodsi4+0x18>
    18a4:	10000d26 	beq	r2,zero,18dc <udivmodsi4+0x68>
    18a8:	0007883a 	mov	r3,zero
    18ac:	21400236 	bltu	r4,r5,18b8 <udivmodsi4+0x44>
    18b0:	2149c83a 	sub	r4,r4,r5
    18b4:	1886b03a 	or	r3,r3,r2
    18b8:	1004d07a 	srli	r2,r2,1
    18bc:	280ad07a 	srli	r5,r5,1
    18c0:	103ffa1e 	bne	r2,zero,18ac <udivmodsi4+0x38>
    18c4:	30000226 	beq	r6,zero,18d0 <udivmodsi4+0x5c>
    18c8:	2005883a 	mov	r2,r4
    18cc:	f800283a 	ret
    18d0:	1809883a 	mov	r4,r3
    18d4:	2005883a 	mov	r2,r4
    18d8:	f800283a 	ret
    18dc:	0007883a 	mov	r3,zero
    18e0:	003ff806 	br	18c4 <udivmodsi4+0x50>
    18e4:	00800044 	movi	r2,1
    18e8:	0007883a 	mov	r3,zero
    18ec:	003fef06 	br	18ac <udivmodsi4+0x38>

000018f0 <__divsi3>:
    18f0:	defffe04 	addi	sp,sp,-8
    18f4:	dc000015 	stw	r16,0(sp)
    18f8:	dfc00115 	stw	ra,4(sp)
    18fc:	0021883a 	mov	r16,zero
    1900:	20000c16 	blt	r4,zero,1934 <__divsi3+0x44>
    1904:	000d883a 	mov	r6,zero
    1908:	28000e16 	blt	r5,zero,1944 <__divsi3+0x54>
    190c:	00018740 	call	1874 <udivmodsi4>
    1910:	1007883a 	mov	r3,r2
    1914:	8005003a 	cmpeq	r2,r16,zero
    1918:	1000011e 	bne	r2,zero,1920 <__divsi3+0x30>
    191c:	00c7c83a 	sub	r3,zero,r3
    1920:	1805883a 	mov	r2,r3
    1924:	dfc00117 	ldw	ra,4(sp)
    1928:	dc000017 	ldw	r16,0(sp)
    192c:	dec00204 	addi	sp,sp,8
    1930:	f800283a 	ret
    1934:	0109c83a 	sub	r4,zero,r4
    1938:	04000044 	movi	r16,1
    193c:	000d883a 	mov	r6,zero
    1940:	283ff20e 	bge	r5,zero,190c <__divsi3+0x1c>
    1944:	014bc83a 	sub	r5,zero,r5
    1948:	8021003a 	cmpeq	r16,r16,zero
    194c:	003fef06 	br	190c <__divsi3+0x1c>

00001950 <__modsi3>:
    1950:	deffff04 	addi	sp,sp,-4
    1954:	dfc00015 	stw	ra,0(sp)
    1958:	01800044 	movi	r6,1
    195c:	2807883a 	mov	r3,r5
    1960:	20000416 	blt	r4,zero,1974 <__modsi3+0x24>
    1964:	28000c16 	blt	r5,zero,1998 <__modsi3+0x48>
    1968:	dfc00017 	ldw	ra,0(sp)
    196c:	dec00104 	addi	sp,sp,4
    1970:	00018741 	jmpi	1874 <udivmodsi4>
    1974:	0109c83a 	sub	r4,zero,r4
    1978:	28000b16 	blt	r5,zero,19a8 <__modsi3+0x58>
    197c:	180b883a 	mov	r5,r3
    1980:	01800044 	movi	r6,1
    1984:	00018740 	call	1874 <udivmodsi4>
    1988:	0085c83a 	sub	r2,zero,r2
    198c:	dfc00017 	ldw	ra,0(sp)
    1990:	dec00104 	addi	sp,sp,4
    1994:	f800283a 	ret
    1998:	014bc83a 	sub	r5,zero,r5
    199c:	dfc00017 	ldw	ra,0(sp)
    19a0:	dec00104 	addi	sp,sp,4
    19a4:	00018741 	jmpi	1874 <udivmodsi4>
    19a8:	0147c83a 	sub	r3,zero,r5
    19ac:	003ff306 	br	197c <__modsi3+0x2c>

000019b0 <__udivsi3>:
    19b0:	000d883a 	mov	r6,zero
    19b4:	00018741 	jmpi	1874 <udivmodsi4>

000019b8 <__umodsi3>:
    19b8:	01800044 	movi	r6,1
    19bc:	00018741 	jmpi	1874 <udivmodsi4>

000019c0 <exit>:
    19c0:	defffe04 	addi	sp,sp,-8
    19c4:	000b883a 	mov	r5,zero
    19c8:	dc000015 	stw	r16,0(sp)
    19cc:	dfc00115 	stw	ra,4(sp)
    19d0:	2021883a 	mov	r16,r4
    19d4:	00044780 	call	4478 <__call_exitprocs>
    19d8:	00800074 	movhi	r2,1
    19dc:	10be9504 	addi	r2,r2,-1452
    19e0:	11000017 	ldw	r4,0(r2)
    19e4:	20800f17 	ldw	r2,60(r4)
    19e8:	10000126 	beq	r2,zero,19f0 <exit+0x30>
    19ec:	103ee83a 	callr	r2
    19f0:	8009883a 	mov	r4,r16
    19f4:	000b3940 	call	b394 <_exit>

000019f8 <free>:
    19f8:	00800074 	movhi	r2,1
    19fc:	10be9404 	addi	r2,r2,-1456
    1a00:	200b883a 	mov	r5,r4
    1a04:	11000017 	ldw	r4,0(r2)
    1a08:	00064101 	jmpi	6410 <_free_r>

00001a0c <malloc>:
    1a0c:	00800074 	movhi	r2,1
    1a10:	10be9404 	addi	r2,r2,-1456
    1a14:	200b883a 	mov	r5,r4
    1a18:	11000017 	ldw	r4,0(r2)
    1a1c:	0001a201 	jmpi	1a20 <_malloc_r>

00001a20 <_malloc_r>:
    1a20:	defff604 	addi	sp,sp,-40
    1a24:	28c002c4 	addi	r3,r5,11
    1a28:	00800584 	movi	r2,22
    1a2c:	dc800215 	stw	r18,8(sp)
    1a30:	dfc00915 	stw	ra,36(sp)
    1a34:	df000815 	stw	fp,32(sp)
    1a38:	ddc00715 	stw	r23,28(sp)
    1a3c:	dd800615 	stw	r22,24(sp)
    1a40:	dd400515 	stw	r21,20(sp)
    1a44:	dd000415 	stw	r20,16(sp)
    1a48:	dcc00315 	stw	r19,12(sp)
    1a4c:	dc400115 	stw	r17,4(sp)
    1a50:	dc000015 	stw	r16,0(sp)
    1a54:	2025883a 	mov	r18,r4
    1a58:	10c01236 	bltu	r2,r3,1aa4 <_malloc_r+0x84>
    1a5c:	04400404 	movi	r17,16
    1a60:	8940142e 	bgeu	r17,r5,1ab4 <_malloc_r+0x94>
    1a64:	00800304 	movi	r2,12
    1a68:	0007883a 	mov	r3,zero
    1a6c:	90800015 	stw	r2,0(r18)
    1a70:	1805883a 	mov	r2,r3
    1a74:	dfc00917 	ldw	ra,36(sp)
    1a78:	df000817 	ldw	fp,32(sp)
    1a7c:	ddc00717 	ldw	r23,28(sp)
    1a80:	dd800617 	ldw	r22,24(sp)
    1a84:	dd400517 	ldw	r21,20(sp)
    1a88:	dd000417 	ldw	r20,16(sp)
    1a8c:	dcc00317 	ldw	r19,12(sp)
    1a90:	dc800217 	ldw	r18,8(sp)
    1a94:	dc400117 	ldw	r17,4(sp)
    1a98:	dc000017 	ldw	r16,0(sp)
    1a9c:	dec00a04 	addi	sp,sp,40
    1aa0:	f800283a 	ret
    1aa4:	00bffe04 	movi	r2,-8
    1aa8:	18a2703a 	and	r17,r3,r2
    1aac:	883fed16 	blt	r17,zero,1a64 <_malloc_r+0x44>
    1ab0:	897fec36 	bltu	r17,r5,1a64 <_malloc_r+0x44>
    1ab4:	9009883a 	mov	r4,r18
    1ab8:	000ba700 	call	ba70 <__malloc_lock>
    1abc:	00807dc4 	movi	r2,503
    1ac0:	14402b2e 	bgeu	r2,r17,1b70 <_malloc_r+0x150>
    1ac4:	8806d27a 	srli	r3,r17,9
    1ac8:	18003f1e 	bne	r3,zero,1bc8 <_malloc_r+0x1a8>
    1acc:	880cd0fa 	srli	r6,r17,3
    1ad0:	300490fa 	slli	r2,r6,3
    1ad4:	02c00074 	movhi	r11,1
    1ad8:	5af90c04 	addi	r11,r11,-7120
    1adc:	12cb883a 	add	r5,r2,r11
    1ae0:	2c000317 	ldw	r16,12(r5)
    1ae4:	580f883a 	mov	r7,r11
    1ae8:	2c00041e 	bne	r5,r16,1afc <_malloc_r+0xdc>
    1aec:	00000a06 	br	1b18 <_malloc_r+0xf8>
    1af0:	1800860e 	bge	r3,zero,1d0c <_malloc_r+0x2ec>
    1af4:	84000317 	ldw	r16,12(r16)
    1af8:	2c000726 	beq	r5,r16,1b18 <_malloc_r+0xf8>
    1afc:	80800117 	ldw	r2,4(r16)
    1b00:	00ffff04 	movi	r3,-4
    1b04:	10c8703a 	and	r4,r2,r3
    1b08:	2447c83a 	sub	r3,r4,r17
    1b0c:	008003c4 	movi	r2,15
    1b10:	10fff70e 	bge	r2,r3,1af0 <_malloc_r+0xd0>
    1b14:	31bfffc4 	addi	r6,r6,-1
    1b18:	32400044 	addi	r9,r6,1
    1b1c:	02800074 	movhi	r10,1
    1b20:	52b90e04 	addi	r10,r10,-7112
    1b24:	54000217 	ldw	r16,8(r10)
    1b28:	8280a026 	beq	r16,r10,1dac <_malloc_r+0x38c>
    1b2c:	80800117 	ldw	r2,4(r16)
    1b30:	00ffff04 	movi	r3,-4
    1b34:	10ca703a 	and	r5,r2,r3
    1b38:	2c4dc83a 	sub	r6,r5,r17
    1b3c:	008003c4 	movi	r2,15
    1b40:	11808316 	blt	r2,r6,1d50 <_malloc_r+0x330>
    1b44:	52800315 	stw	r10,12(r10)
    1b48:	52800215 	stw	r10,8(r10)
    1b4c:	30002916 	blt	r6,zero,1bf4 <_malloc_r+0x1d4>
    1b50:	8147883a 	add	r3,r16,r5
    1b54:	18800117 	ldw	r2,4(r3)
    1b58:	9009883a 	mov	r4,r18
    1b5c:	10800054 	ori	r2,r2,1
    1b60:	18800115 	stw	r2,4(r3)
    1b64:	000ba900 	call	ba90 <__malloc_unlock>
    1b68:	80c00204 	addi	r3,r16,8
    1b6c:	003fc006 	br	1a70 <_malloc_r+0x50>
    1b70:	02c00074 	movhi	r11,1
    1b74:	5af90c04 	addi	r11,r11,-7120
    1b78:	8ac5883a 	add	r2,r17,r11
    1b7c:	14000317 	ldw	r16,12(r2)
    1b80:	580f883a 	mov	r7,r11
    1b84:	8806d0fa 	srli	r3,r17,3
    1b88:	14006c26 	beq	r2,r16,1d3c <_malloc_r+0x31c>
    1b8c:	80c00117 	ldw	r3,4(r16)
    1b90:	00bfff04 	movi	r2,-4
    1b94:	81800317 	ldw	r6,12(r16)
    1b98:	1886703a 	and	r3,r3,r2
    1b9c:	80c7883a 	add	r3,r16,r3
    1ba0:	18800117 	ldw	r2,4(r3)
    1ba4:	81400217 	ldw	r5,8(r16)
    1ba8:	9009883a 	mov	r4,r18
    1bac:	10800054 	ori	r2,r2,1
    1bb0:	18800115 	stw	r2,4(r3)
    1bb4:	31400215 	stw	r5,8(r6)
    1bb8:	29800315 	stw	r6,12(r5)
    1bbc:	000ba900 	call	ba90 <__malloc_unlock>
    1bc0:	80c00204 	addi	r3,r16,8
    1bc4:	003faa06 	br	1a70 <_malloc_r+0x50>
    1bc8:	00800104 	movi	r2,4
    1bcc:	10c0052e 	bgeu	r2,r3,1be4 <_malloc_r+0x1c4>
    1bd0:	00800504 	movi	r2,20
    1bd4:	10c07836 	bltu	r2,r3,1db8 <_malloc_r+0x398>
    1bd8:	198016c4 	addi	r6,r3,91
    1bdc:	300490fa 	slli	r2,r6,3
    1be0:	003fbc06 	br	1ad4 <_malloc_r+0xb4>
    1be4:	8804d1ba 	srli	r2,r17,6
    1be8:	11800e04 	addi	r6,r2,56
    1bec:	300490fa 	slli	r2,r6,3
    1bf0:	003fb806 	br	1ad4 <_malloc_r+0xb4>
    1bf4:	00807fc4 	movi	r2,511
    1bf8:	1140bb36 	bltu	r2,r5,1ee8 <_malloc_r+0x4c8>
    1bfc:	2806d0fa 	srli	r3,r5,3
    1c00:	573ffe04 	addi	fp,r10,-8
    1c04:	00800044 	movi	r2,1
    1c08:	180890fa 	slli	r4,r3,3
    1c0c:	1807d0ba 	srai	r3,r3,2
    1c10:	e1c00117 	ldw	r7,4(fp)
    1c14:	5909883a 	add	r4,r11,r4
    1c18:	21400217 	ldw	r5,8(r4)
    1c1c:	10c4983a 	sll	r2,r2,r3
    1c20:	81000315 	stw	r4,12(r16)
    1c24:	81400215 	stw	r5,8(r16)
    1c28:	388eb03a 	or	r7,r7,r2
    1c2c:	2c000315 	stw	r16,12(r5)
    1c30:	24000215 	stw	r16,8(r4)
    1c34:	e1c00115 	stw	r7,4(fp)
    1c38:	4807883a 	mov	r3,r9
    1c3c:	4800cd16 	blt	r9,zero,1f74 <_malloc_r+0x554>
    1c40:	1807d0ba 	srai	r3,r3,2
    1c44:	00800044 	movi	r2,1
    1c48:	10c8983a 	sll	r4,r2,r3
    1c4c:	39004436 	bltu	r7,r4,1d60 <_malloc_r+0x340>
    1c50:	21c4703a 	and	r2,r4,r7
    1c54:	10000a1e 	bne	r2,zero,1c80 <_malloc_r+0x260>
    1c58:	2109883a 	add	r4,r4,r4
    1c5c:	00bfff04 	movi	r2,-4
    1c60:	4884703a 	and	r2,r9,r2
    1c64:	3906703a 	and	r3,r7,r4
    1c68:	12400104 	addi	r9,r2,4
    1c6c:	1800041e 	bne	r3,zero,1c80 <_malloc_r+0x260>
    1c70:	2109883a 	add	r4,r4,r4
    1c74:	3904703a 	and	r2,r7,r4
    1c78:	4a400104 	addi	r9,r9,4
    1c7c:	103ffc26 	beq	r2,zero,1c70 <_malloc_r+0x250>
    1c80:	480490fa 	slli	r2,r9,3
    1c84:	4819883a 	mov	r12,r9
    1c88:	023fff04 	movi	r8,-4
    1c8c:	589b883a 	add	r13,r11,r2
    1c90:	6807883a 	mov	r3,r13
    1c94:	014003c4 	movi	r5,15
    1c98:	1c000317 	ldw	r16,12(r3)
    1c9c:	1c00041e 	bne	r3,r16,1cb0 <_malloc_r+0x290>
    1ca0:	0000a706 	br	1f40 <_malloc_r+0x520>
    1ca4:	3000ab0e 	bge	r6,zero,1f54 <_malloc_r+0x534>
    1ca8:	84000317 	ldw	r16,12(r16)
    1cac:	1c00a426 	beq	r3,r16,1f40 <_malloc_r+0x520>
    1cb0:	80800117 	ldw	r2,4(r16)
    1cb4:	1204703a 	and	r2,r2,r8
    1cb8:	144dc83a 	sub	r6,r2,r17
    1cbc:	29bff90e 	bge	r5,r6,1ca4 <_malloc_r+0x284>
    1cc0:	81000317 	ldw	r4,12(r16)
    1cc4:	80c00217 	ldw	r3,8(r16)
    1cc8:	89400054 	ori	r5,r17,1
    1ccc:	8445883a 	add	r2,r16,r17
    1cd0:	20c00215 	stw	r3,8(r4)
    1cd4:	19000315 	stw	r4,12(r3)
    1cd8:	81400115 	stw	r5,4(r16)
    1cdc:	1187883a 	add	r3,r2,r6
    1ce0:	31000054 	ori	r4,r6,1
    1ce4:	50800315 	stw	r2,12(r10)
    1ce8:	50800215 	stw	r2,8(r10)
    1cec:	19800015 	stw	r6,0(r3)
    1cf0:	11000115 	stw	r4,4(r2)
    1cf4:	12800215 	stw	r10,8(r2)
    1cf8:	12800315 	stw	r10,12(r2)
    1cfc:	9009883a 	mov	r4,r18
    1d00:	000ba900 	call	ba90 <__malloc_unlock>
    1d04:	80c00204 	addi	r3,r16,8
    1d08:	003f5906 	br	1a70 <_malloc_r+0x50>
    1d0c:	8109883a 	add	r4,r16,r4
    1d10:	20800117 	ldw	r2,4(r4)
    1d14:	80c00217 	ldw	r3,8(r16)
    1d18:	81400317 	ldw	r5,12(r16)
    1d1c:	10800054 	ori	r2,r2,1
    1d20:	20800115 	stw	r2,4(r4)
    1d24:	28c00215 	stw	r3,8(r5)
    1d28:	19400315 	stw	r5,12(r3)
    1d2c:	9009883a 	mov	r4,r18
    1d30:	000ba900 	call	ba90 <__malloc_unlock>
    1d34:	80c00204 	addi	r3,r16,8
    1d38:	003f4d06 	br	1a70 <_malloc_r+0x50>
    1d3c:	80800204 	addi	r2,r16,8
    1d40:	14000317 	ldw	r16,12(r2)
    1d44:	143f911e 	bne	r2,r16,1b8c <_malloc_r+0x16c>
    1d48:	1a400084 	addi	r9,r3,2
    1d4c:	003f7306 	br	1b1c <_malloc_r+0xfc>
    1d50:	88c00054 	ori	r3,r17,1
    1d54:	8445883a 	add	r2,r16,r17
    1d58:	80c00115 	stw	r3,4(r16)
    1d5c:	003fdf06 	br	1cdc <_malloc_r+0x2bc>
    1d60:	e4000217 	ldw	r16,8(fp)
    1d64:	00bfff04 	movi	r2,-4
    1d68:	80c00117 	ldw	r3,4(r16)
    1d6c:	802d883a 	mov	r22,r16
    1d70:	18aa703a 	and	r21,r3,r2
    1d74:	ac401636 	bltu	r21,r17,1dd0 <_malloc_r+0x3b0>
    1d78:	ac49c83a 	sub	r4,r21,r17
    1d7c:	008003c4 	movi	r2,15
    1d80:	1100130e 	bge	r2,r4,1dd0 <_malloc_r+0x3b0>
    1d84:	88800054 	ori	r2,r17,1
    1d88:	8447883a 	add	r3,r16,r17
    1d8c:	80800115 	stw	r2,4(r16)
    1d90:	20800054 	ori	r2,r4,1
    1d94:	18800115 	stw	r2,4(r3)
    1d98:	e0c00215 	stw	r3,8(fp)
    1d9c:	9009883a 	mov	r4,r18
    1da0:	000ba900 	call	ba90 <__malloc_unlock>
    1da4:	80c00204 	addi	r3,r16,8
    1da8:	003f3106 	br	1a70 <_malloc_r+0x50>
    1dac:	39c00117 	ldw	r7,4(r7)
    1db0:	573ffe04 	addi	fp,r10,-8
    1db4:	003fa006 	br	1c38 <_malloc_r+0x218>
    1db8:	00801504 	movi	r2,84
    1dbc:	10c06736 	bltu	r2,r3,1f5c <_malloc_r+0x53c>
    1dc0:	8804d33a 	srli	r2,r17,12
    1dc4:	11801b84 	addi	r6,r2,110
    1dc8:	300490fa 	slli	r2,r6,3
    1dcc:	003f4106 	br	1ad4 <_malloc_r+0xb4>
    1dd0:	d0a6b117 	ldw	r2,-25916(gp)
    1dd4:	d0e00417 	ldw	r3,-32752(gp)
    1dd8:	053fffc4 	movi	r20,-1
    1ddc:	10800404 	addi	r2,r2,16
    1de0:	88a7883a 	add	r19,r17,r2
    1de4:	1d000326 	beq	r3,r20,1df4 <_malloc_r+0x3d4>
    1de8:	98c3ffc4 	addi	r3,r19,4095
    1dec:	00bc0004 	movi	r2,-4096
    1df0:	18a6703a 	and	r19,r3,r2
    1df4:	9009883a 	mov	r4,r18
    1df8:	980b883a 	mov	r5,r19
    1dfc:	000232c0 	call	232c <_sbrk_r>
    1e00:	1009883a 	mov	r4,r2
    1e04:	15000426 	beq	r2,r20,1e18 <_malloc_r+0x3f8>
    1e08:	854b883a 	add	r5,r16,r21
    1e0c:	1029883a 	mov	r20,r2
    1e10:	11405a2e 	bgeu	r2,r5,1f7c <_malloc_r+0x55c>
    1e14:	87000c26 	beq	r16,fp,1e48 <_malloc_r+0x428>
    1e18:	e4000217 	ldw	r16,8(fp)
    1e1c:	80c00117 	ldw	r3,4(r16)
    1e20:	00bfff04 	movi	r2,-4
    1e24:	1884703a 	and	r2,r3,r2
    1e28:	14400336 	bltu	r2,r17,1e38 <_malloc_r+0x418>
    1e2c:	1449c83a 	sub	r4,r2,r17
    1e30:	008003c4 	movi	r2,15
    1e34:	113fd316 	blt	r2,r4,1d84 <_malloc_r+0x364>
    1e38:	9009883a 	mov	r4,r18
    1e3c:	000ba900 	call	ba90 <__malloc_unlock>
    1e40:	0007883a 	mov	r3,zero
    1e44:	003f0a06 	br	1a70 <_malloc_r+0x50>
    1e48:	05c00074 	movhi	r23,1
    1e4c:	bdc56304 	addi	r23,r23,5516
    1e50:	b8800017 	ldw	r2,0(r23)
    1e54:	988d883a 	add	r6,r19,r2
    1e58:	b9800015 	stw	r6,0(r23)
    1e5c:	d0e00417 	ldw	r3,-32752(gp)
    1e60:	00bfffc4 	movi	r2,-1
    1e64:	18808e26 	beq	r3,r2,20a0 <_malloc_r+0x680>
    1e68:	2145c83a 	sub	r2,r4,r5
    1e6c:	3085883a 	add	r2,r6,r2
    1e70:	b8800015 	stw	r2,0(r23)
    1e74:	20c001cc 	andi	r3,r4,7
    1e78:	18005f1e 	bne	r3,zero,1ff8 <_malloc_r+0x5d8>
    1e7c:	000b883a 	mov	r5,zero
    1e80:	a4c5883a 	add	r2,r20,r19
    1e84:	1083ffcc 	andi	r2,r2,4095
    1e88:	00c40004 	movi	r3,4096
    1e8c:	1887c83a 	sub	r3,r3,r2
    1e90:	28e7883a 	add	r19,r5,r3
    1e94:	9009883a 	mov	r4,r18
    1e98:	980b883a 	mov	r5,r19
    1e9c:	000232c0 	call	232c <_sbrk_r>
    1ea0:	1007883a 	mov	r3,r2
    1ea4:	00bfffc4 	movi	r2,-1
    1ea8:	18807a26 	beq	r3,r2,2094 <_malloc_r+0x674>
    1eac:	1d05c83a 	sub	r2,r3,r20
    1eb0:	9885883a 	add	r2,r19,r2
    1eb4:	10c00054 	ori	r3,r2,1
    1eb8:	b8800017 	ldw	r2,0(r23)
    1ebc:	a021883a 	mov	r16,r20
    1ec0:	a0c00115 	stw	r3,4(r20)
    1ec4:	9885883a 	add	r2,r19,r2
    1ec8:	b8800015 	stw	r2,0(r23)
    1ecc:	e5000215 	stw	r20,8(fp)
    1ed0:	b7003626 	beq	r22,fp,1fac <_malloc_r+0x58c>
    1ed4:	018003c4 	movi	r6,15
    1ed8:	35404b36 	bltu	r6,r21,2008 <_malloc_r+0x5e8>
    1edc:	00800044 	movi	r2,1
    1ee0:	a0800115 	stw	r2,4(r20)
    1ee4:	003fcd06 	br	1e1c <_malloc_r+0x3fc>
    1ee8:	2808d27a 	srli	r4,r5,9
    1eec:	2000371e 	bne	r4,zero,1fcc <_malloc_r+0x5ac>
    1ef0:	2808d0fa 	srli	r4,r5,3
    1ef4:	200690fa 	slli	r3,r4,3
    1ef8:	1ad1883a 	add	r8,r3,r11
    1efc:	41800217 	ldw	r6,8(r8)
    1f00:	41805b26 	beq	r8,r6,2070 <_malloc_r+0x650>
    1f04:	30800117 	ldw	r2,4(r6)
    1f08:	00ffff04 	movi	r3,-4
    1f0c:	10c4703a 	and	r2,r2,r3
    1f10:	2880022e 	bgeu	r5,r2,1f1c <_malloc_r+0x4fc>
    1f14:	31800217 	ldw	r6,8(r6)
    1f18:	41bffa1e 	bne	r8,r6,1f04 <_malloc_r+0x4e4>
    1f1c:	32000317 	ldw	r8,12(r6)
    1f20:	39c00117 	ldw	r7,4(r7)
    1f24:	82000315 	stw	r8,12(r16)
    1f28:	81800215 	stw	r6,8(r16)
    1f2c:	07000074 	movhi	fp,1
    1f30:	e7390c04 	addi	fp,fp,-7120
    1f34:	34000315 	stw	r16,12(r6)
    1f38:	44000215 	stw	r16,8(r8)
    1f3c:	003f3e06 	br	1c38 <_malloc_r+0x218>
    1f40:	63000044 	addi	r12,r12,1
    1f44:	608000cc 	andi	r2,r12,3
    1f48:	10005d26 	beq	r2,zero,20c0 <_malloc_r+0x6a0>
    1f4c:	18c00204 	addi	r3,r3,8
    1f50:	003f5106 	br	1c98 <_malloc_r+0x278>
    1f54:	8089883a 	add	r4,r16,r2
    1f58:	003f6d06 	br	1d10 <_malloc_r+0x2f0>
    1f5c:	00805504 	movi	r2,340
    1f60:	10c02036 	bltu	r2,r3,1fe4 <_malloc_r+0x5c4>
    1f64:	8804d3fa 	srli	r2,r17,15
    1f68:	11801dc4 	addi	r6,r2,119
    1f6c:	300490fa 	slli	r2,r6,3
    1f70:	003ed806 	br	1ad4 <_malloc_r+0xb4>
    1f74:	48c000c4 	addi	r3,r9,3
    1f78:	003f3106 	br	1c40 <_malloc_r+0x220>
    1f7c:	05c00074 	movhi	r23,1
    1f80:	bdc56304 	addi	r23,r23,5516
    1f84:	b8800017 	ldw	r2,0(r23)
    1f88:	988d883a 	add	r6,r19,r2
    1f8c:	b9800015 	stw	r6,0(r23)
    1f90:	293fb21e 	bne	r5,r4,1e5c <_malloc_r+0x43c>
    1f94:	2083ffcc 	andi	r2,r4,4095
    1f98:	103fb01e 	bne	r2,zero,1e5c <_malloc_r+0x43c>
    1f9c:	e4000217 	ldw	r16,8(fp)
    1fa0:	9d45883a 	add	r2,r19,r21
    1fa4:	10800054 	ori	r2,r2,1
    1fa8:	80800115 	stw	r2,4(r16)
    1fac:	b8c00017 	ldw	r3,0(r23)
    1fb0:	d0a6b217 	ldw	r2,-25912(gp)
    1fb4:	10c0012e 	bgeu	r2,r3,1fbc <_malloc_r+0x59c>
    1fb8:	d0e6b215 	stw	r3,-25912(gp)
    1fbc:	d0a6b317 	ldw	r2,-25908(gp)
    1fc0:	10ff962e 	bgeu	r2,r3,1e1c <_malloc_r+0x3fc>
    1fc4:	d0e6b315 	stw	r3,-25908(gp)
    1fc8:	003f9406 	br	1e1c <_malloc_r+0x3fc>
    1fcc:	00800104 	movi	r2,4
    1fd0:	11001e36 	bltu	r2,r4,204c <_malloc_r+0x62c>
    1fd4:	2804d1ba 	srli	r2,r5,6
    1fd8:	11000e04 	addi	r4,r2,56
    1fdc:	200690fa 	slli	r3,r4,3
    1fe0:	003fc506 	br	1ef8 <_malloc_r+0x4d8>
    1fe4:	00815504 	movi	r2,1364
    1fe8:	10c01d2e 	bgeu	r2,r3,2060 <_malloc_r+0x640>
    1fec:	01801f84 	movi	r6,126
    1ff0:	0080fc04 	movi	r2,1008
    1ff4:	003eb706 	br	1ad4 <_malloc_r+0xb4>
    1ff8:	00800204 	movi	r2,8
    1ffc:	10cbc83a 	sub	r5,r2,r3
    2000:	2169883a 	add	r20,r4,r5
    2004:	003f9e06 	br	1e80 <_malloc_r+0x460>
    2008:	00bffe04 	movi	r2,-8
    200c:	a93ffd04 	addi	r4,r21,-12
    2010:	2088703a 	and	r4,r4,r2
    2014:	b10b883a 	add	r5,r22,r4
    2018:	00c00144 	movi	r3,5
    201c:	28c00215 	stw	r3,8(r5)
    2020:	28c00115 	stw	r3,4(r5)
    2024:	b0800117 	ldw	r2,4(r22)
    2028:	1080004c 	andi	r2,r2,1
    202c:	2084b03a 	or	r2,r4,r2
    2030:	b0800115 	stw	r2,4(r22)
    2034:	313fdd2e 	bgeu	r6,r4,1fac <_malloc_r+0x58c>
    2038:	b1400204 	addi	r5,r22,8
    203c:	9009883a 	mov	r4,r18
    2040:	00064100 	call	6410 <_free_r>
    2044:	e4000217 	ldw	r16,8(fp)
    2048:	003fd806 	br	1fac <_malloc_r+0x58c>
    204c:	00800504 	movi	r2,20
    2050:	11001536 	bltu	r2,r4,20a8 <_malloc_r+0x688>
    2054:	210016c4 	addi	r4,r4,91
    2058:	200690fa 	slli	r3,r4,3
    205c:	003fa606 	br	1ef8 <_malloc_r+0x4d8>
    2060:	8804d4ba 	srli	r2,r17,18
    2064:	11801f04 	addi	r6,r2,124
    2068:	300490fa 	slli	r2,r6,3
    206c:	003e9906 	br	1ad4 <_malloc_r+0xb4>
    2070:	2009d0ba 	srai	r4,r4,2
    2074:	01400074 	movhi	r5,1
    2078:	29790c04 	addi	r5,r5,-7120
    207c:	00c00044 	movi	r3,1
    2080:	28800117 	ldw	r2,4(r5)
    2084:	1906983a 	sll	r3,r3,r4
    2088:	10c4b03a 	or	r2,r2,r3
    208c:	28800115 	stw	r2,4(r5)
    2090:	003fa306 	br	1f20 <_malloc_r+0x500>
    2094:	0027883a 	mov	r19,zero
    2098:	00c00044 	movi	r3,1
    209c:	003f8606 	br	1eb8 <_malloc_r+0x498>
    20a0:	d1200415 	stw	r4,-32752(gp)
    20a4:	003f7306 	br	1e74 <_malloc_r+0x454>
    20a8:	00801504 	movi	r2,84
    20ac:	11001936 	bltu	r2,r4,2114 <_malloc_r+0x6f4>
    20b0:	2804d33a 	srli	r2,r5,12
    20b4:	11001b84 	addi	r4,r2,110
    20b8:	200690fa 	slli	r3,r4,3
    20bc:	003f8e06 	br	1ef8 <_malloc_r+0x4d8>
    20c0:	480b883a 	mov	r5,r9
    20c4:	6807883a 	mov	r3,r13
    20c8:	288000cc 	andi	r2,r5,3
    20cc:	18fffe04 	addi	r3,r3,-8
    20d0:	297fffc4 	addi	r5,r5,-1
    20d4:	10001526 	beq	r2,zero,212c <_malloc_r+0x70c>
    20d8:	18800217 	ldw	r2,8(r3)
    20dc:	10fffa26 	beq	r2,r3,20c8 <_malloc_r+0x6a8>
    20e0:	2109883a 	add	r4,r4,r4
    20e4:	393f1e36 	bltu	r7,r4,1d60 <_malloc_r+0x340>
    20e8:	203f1d26 	beq	r4,zero,1d60 <_malloc_r+0x340>
    20ec:	21c4703a 	and	r2,r4,r7
    20f0:	10000226 	beq	r2,zero,20fc <_malloc_r+0x6dc>
    20f4:	6013883a 	mov	r9,r12
    20f8:	003ee106 	br	1c80 <_malloc_r+0x260>
    20fc:	2109883a 	add	r4,r4,r4
    2100:	3904703a 	and	r2,r7,r4
    2104:	63000104 	addi	r12,r12,4
    2108:	103ffc26 	beq	r2,zero,20fc <_malloc_r+0x6dc>
    210c:	6013883a 	mov	r9,r12
    2110:	003edb06 	br	1c80 <_malloc_r+0x260>
    2114:	00805504 	movi	r2,340
    2118:	11000836 	bltu	r2,r4,213c <_malloc_r+0x71c>
    211c:	2804d3fa 	srli	r2,r5,15
    2120:	11001dc4 	addi	r4,r2,119
    2124:	200690fa 	slli	r3,r4,3
    2128:	003f7306 	br	1ef8 <_malloc_r+0x4d8>
    212c:	0104303a 	nor	r2,zero,r4
    2130:	388e703a 	and	r7,r7,r2
    2134:	e1c00115 	stw	r7,4(fp)
    2138:	003fe906 	br	20e0 <_malloc_r+0x6c0>
    213c:	00815504 	movi	r2,1364
    2140:	1100032e 	bgeu	r2,r4,2150 <_malloc_r+0x730>
    2144:	01001f84 	movi	r4,126
    2148:	00c0fc04 	movi	r3,1008
    214c:	003f6a06 	br	1ef8 <_malloc_r+0x4d8>
    2150:	2804d4ba 	srli	r2,r5,18
    2154:	11001f04 	addi	r4,r2,124
    2158:	200690fa 	slli	r3,r4,3
    215c:	003f6606 	br	1ef8 <_malloc_r+0x4d8>

00002160 <memcpy>:
    2160:	01c003c4 	movi	r7,15
    2164:	2007883a 	mov	r3,r4
    2168:	3980032e 	bgeu	r7,r6,2178 <memcpy+0x18>
    216c:	2904b03a 	or	r2,r5,r4
    2170:	108000cc 	andi	r2,r2,3
    2174:	10000926 	beq	r2,zero,219c <memcpy+0x3c>
    2178:	30000626 	beq	r6,zero,2194 <memcpy+0x34>
    217c:	30cd883a 	add	r6,r6,r3
    2180:	28800003 	ldbu	r2,0(r5)
    2184:	29400044 	addi	r5,r5,1
    2188:	18800005 	stb	r2,0(r3)
    218c:	18c00044 	addi	r3,r3,1
    2190:	30fffb1e 	bne	r6,r3,2180 <memcpy+0x20>
    2194:	2005883a 	mov	r2,r4
    2198:	f800283a 	ret
    219c:	3811883a 	mov	r8,r7
    21a0:	200f883a 	mov	r7,r4
    21a4:	28c00017 	ldw	r3,0(r5)
    21a8:	31bffc04 	addi	r6,r6,-16
    21ac:	38c00015 	stw	r3,0(r7)
    21b0:	28800117 	ldw	r2,4(r5)
    21b4:	38800115 	stw	r2,4(r7)
    21b8:	28c00217 	ldw	r3,8(r5)
    21bc:	38c00215 	stw	r3,8(r7)
    21c0:	28800317 	ldw	r2,12(r5)
    21c4:	29400404 	addi	r5,r5,16
    21c8:	38800315 	stw	r2,12(r7)
    21cc:	39c00404 	addi	r7,r7,16
    21d0:	41bff436 	bltu	r8,r6,21a4 <memcpy+0x44>
    21d4:	008000c4 	movi	r2,3
    21d8:	1180072e 	bgeu	r2,r6,21f8 <memcpy+0x98>
    21dc:	1007883a 	mov	r3,r2
    21e0:	28800017 	ldw	r2,0(r5)
    21e4:	31bfff04 	addi	r6,r6,-4
    21e8:	29400104 	addi	r5,r5,4
    21ec:	38800015 	stw	r2,0(r7)
    21f0:	39c00104 	addi	r7,r7,4
    21f4:	19bffa36 	bltu	r3,r6,21e0 <memcpy+0x80>
    21f8:	3807883a 	mov	r3,r7
    21fc:	003fde06 	br	2178 <memcpy+0x18>

00002200 <printf>:
    2200:	defffb04 	addi	sp,sp,-20
    2204:	dfc00115 	stw	ra,4(sp)
    2208:	d9400215 	stw	r5,8(sp)
    220c:	d9800315 	stw	r6,12(sp)
    2210:	d9c00415 	stw	r7,16(sp)
    2214:	00800074 	movhi	r2,1
    2218:	10be9404 	addi	r2,r2,-1456
    221c:	10c00017 	ldw	r3,0(r2)
    2220:	200b883a 	mov	r5,r4
    2224:	d8800204 	addi	r2,sp,8
    2228:	19000217 	ldw	r4,8(r3)
    222c:	100d883a 	mov	r6,r2
    2230:	d8800015 	stw	r2,0(sp)
    2234:	00043140 	call	4314 <__vfprintf_internal>
    2238:	dfc00117 	ldw	ra,4(sp)
    223c:	dec00504 	addi	sp,sp,20
    2240:	f800283a 	ret

00002244 <_printf_r>:
    2244:	defffc04 	addi	sp,sp,-16
    2248:	dfc00115 	stw	ra,4(sp)
    224c:	d9800215 	stw	r6,8(sp)
    2250:	d9c00315 	stw	r7,12(sp)
    2254:	280d883a 	mov	r6,r5
    2258:	21400217 	ldw	r5,8(r4)
    225c:	d8c00204 	addi	r3,sp,8
    2260:	180f883a 	mov	r7,r3
    2264:	d8c00015 	stw	r3,0(sp)
    2268:	00024680 	call	2468 <___vfprintf_internal_r>
    226c:	dfc00117 	ldw	ra,4(sp)
    2270:	dec00404 	addi	sp,sp,16
    2274:	f800283a 	ret

00002278 <_puts_r>:
    2278:	defff604 	addi	sp,sp,-40
    227c:	dc400715 	stw	r17,28(sp)
    2280:	2023883a 	mov	r17,r4
    2284:	2809883a 	mov	r4,r5
    2288:	dfc00915 	stw	ra,36(sp)
    228c:	dcc00815 	stw	r19,32(sp)
    2290:	2827883a 	mov	r19,r5
    2294:	000239c0 	call	239c <strlen>
    2298:	89400217 	ldw	r5,8(r17)
    229c:	00c00074 	movhi	r3,1
    22a0:	18f73c04 	addi	r3,r3,-8976
    22a4:	01c00044 	movi	r7,1
    22a8:	12000044 	addi	r8,r2,1
    22ac:	d8c00515 	stw	r3,20(sp)
    22b0:	d9c00615 	stw	r7,24(sp)
    22b4:	d8c00304 	addi	r3,sp,12
    22b8:	01c00084 	movi	r7,2
    22bc:	8809883a 	mov	r4,r17
    22c0:	d80d883a 	mov	r6,sp
    22c4:	d8c00015 	stw	r3,0(sp)
    22c8:	dcc00315 	stw	r19,12(sp)
    22cc:	da000215 	stw	r8,8(sp)
    22d0:	d9c00115 	stw	r7,4(sp)
    22d4:	d8800415 	stw	r2,16(sp)
    22d8:	00067240 	call	6724 <__sfvwrite_r>
    22dc:	00ffffc4 	movi	r3,-1
    22e0:	10000626 	beq	r2,zero,22fc <_puts_r+0x84>
    22e4:	1805883a 	mov	r2,r3
    22e8:	dfc00917 	ldw	ra,36(sp)
    22ec:	dcc00817 	ldw	r19,32(sp)
    22f0:	dc400717 	ldw	r17,28(sp)
    22f4:	dec00a04 	addi	sp,sp,40
    22f8:	f800283a 	ret
    22fc:	00c00284 	movi	r3,10
    2300:	1805883a 	mov	r2,r3
    2304:	dfc00917 	ldw	ra,36(sp)
    2308:	dcc00817 	ldw	r19,32(sp)
    230c:	dc400717 	ldw	r17,28(sp)
    2310:	dec00a04 	addi	sp,sp,40
    2314:	f800283a 	ret

00002318 <puts>:
    2318:	00800074 	movhi	r2,1
    231c:	10be9404 	addi	r2,r2,-1456
    2320:	200b883a 	mov	r5,r4
    2324:	11000017 	ldw	r4,0(r2)
    2328:	00022781 	jmpi	2278 <_puts_r>

0000232c <_sbrk_r>:
    232c:	defffd04 	addi	sp,sp,-12
    2330:	dc000015 	stw	r16,0(sp)
    2334:	04000074 	movhi	r16,1
    2338:	84054704 	addi	r16,r16,5404
    233c:	dc400115 	stw	r17,4(sp)
    2340:	80000015 	stw	zero,0(r16)
    2344:	2023883a 	mov	r17,r4
    2348:	2809883a 	mov	r4,r5
    234c:	dfc00215 	stw	ra,8(sp)
    2350:	000bc900 	call	bc90 <sbrk>
    2354:	1007883a 	mov	r3,r2
    2358:	00bfffc4 	movi	r2,-1
    235c:	18800626 	beq	r3,r2,2378 <_sbrk_r+0x4c>
    2360:	1805883a 	mov	r2,r3
    2364:	dfc00217 	ldw	ra,8(sp)
    2368:	dc400117 	ldw	r17,4(sp)
    236c:	dc000017 	ldw	r16,0(sp)
    2370:	dec00304 	addi	sp,sp,12
    2374:	f800283a 	ret
    2378:	80800017 	ldw	r2,0(r16)
    237c:	103ff826 	beq	r2,zero,2360 <_sbrk_r+0x34>
    2380:	88800015 	stw	r2,0(r17)
    2384:	1805883a 	mov	r2,r3
    2388:	dfc00217 	ldw	ra,8(sp)
    238c:	dc400117 	ldw	r17,4(sp)
    2390:	dc000017 	ldw	r16,0(sp)
    2394:	dec00304 	addi	sp,sp,12
    2398:	f800283a 	ret

0000239c <strlen>:
    239c:	208000cc 	andi	r2,r4,3
    23a0:	2011883a 	mov	r8,r4
    23a4:	1000161e 	bne	r2,zero,2400 <strlen+0x64>
    23a8:	20c00017 	ldw	r3,0(r4)
    23ac:	017fbff4 	movhi	r5,65279
    23b0:	297fbfc4 	addi	r5,r5,-257
    23b4:	01e02074 	movhi	r7,32897
    23b8:	39e02004 	addi	r7,r7,-32640
    23bc:	1945883a 	add	r2,r3,r5
    23c0:	11c4703a 	and	r2,r2,r7
    23c4:	00c6303a 	nor	r3,zero,r3
    23c8:	1886703a 	and	r3,r3,r2
    23cc:	18000c1e 	bne	r3,zero,2400 <strlen+0x64>
    23d0:	280d883a 	mov	r6,r5
    23d4:	380b883a 	mov	r5,r7
    23d8:	21000104 	addi	r4,r4,4
    23dc:	20800017 	ldw	r2,0(r4)
    23e0:	1187883a 	add	r3,r2,r6
    23e4:	1946703a 	and	r3,r3,r5
    23e8:	0084303a 	nor	r2,zero,r2
    23ec:	10c4703a 	and	r2,r2,r3
    23f0:	103ff926 	beq	r2,zero,23d8 <strlen+0x3c>
    23f4:	20800007 	ldb	r2,0(r4)
    23f8:	10000326 	beq	r2,zero,2408 <strlen+0x6c>
    23fc:	21000044 	addi	r4,r4,1
    2400:	20800007 	ldb	r2,0(r4)
    2404:	103ffd1e 	bne	r2,zero,23fc <strlen+0x60>
    2408:	2205c83a 	sub	r2,r4,r8
    240c:	f800283a 	ret

00002410 <__sprint_r>:
    2410:	30800217 	ldw	r2,8(r6)
    2414:	defffe04 	addi	sp,sp,-8
    2418:	dc000015 	stw	r16,0(sp)
    241c:	dfc00115 	stw	ra,4(sp)
    2420:	3021883a 	mov	r16,r6
    2424:	0007883a 	mov	r3,zero
    2428:	1000061e 	bne	r2,zero,2444 <__sprint_r+0x34>
    242c:	1805883a 	mov	r2,r3
    2430:	30000115 	stw	zero,4(r6)
    2434:	dfc00117 	ldw	ra,4(sp)
    2438:	dc000017 	ldw	r16,0(sp)
    243c:	dec00204 	addi	sp,sp,8
    2440:	f800283a 	ret
    2444:	00067240 	call	6724 <__sfvwrite_r>
    2448:	1007883a 	mov	r3,r2
    244c:	1805883a 	mov	r2,r3
    2450:	80000115 	stw	zero,4(r16)
    2454:	80000215 	stw	zero,8(r16)
    2458:	dfc00117 	ldw	ra,4(sp)
    245c:	dc000017 	ldw	r16,0(sp)
    2460:	dec00204 	addi	sp,sp,8
    2464:	f800283a 	ret

00002468 <___vfprintf_internal_r>:
    2468:	defea404 	addi	sp,sp,-1392
    246c:	dd815815 	stw	r22,1376(sp)
    2470:	dc015215 	stw	r16,1352(sp)
    2474:	d9c15115 	stw	r7,1348(sp)
    2478:	dfc15b15 	stw	ra,1388(sp)
    247c:	df015a15 	stw	fp,1384(sp)
    2480:	ddc15915 	stw	r23,1380(sp)
    2484:	dd415715 	stw	r21,1372(sp)
    2488:	dd015615 	stw	r20,1368(sp)
    248c:	dcc15515 	stw	r19,1364(sp)
    2490:	dc815415 	stw	r18,1360(sp)
    2494:	dc415315 	stw	r17,1356(sp)
    2498:	282d883a 	mov	r22,r5
    249c:	3021883a 	mov	r16,r6
    24a0:	d9014f15 	stw	r4,1340(sp)
    24a4:	0006d480 	call	6d48 <_localeconv_r>
    24a8:	10800017 	ldw	r2,0(r2)
    24ac:	d9c15117 	ldw	r7,1348(sp)
    24b0:	d8814915 	stw	r2,1316(sp)
    24b4:	d8814f17 	ldw	r2,1340(sp)
    24b8:	10000226 	beq	r2,zero,24c4 <___vfprintf_internal_r+0x5c>
    24bc:	10800e17 	ldw	r2,56(r2)
    24c0:	10020d26 	beq	r2,zero,2cf8 <___vfprintf_internal_r+0x890>
    24c4:	b080030b 	ldhu	r2,12(r22)
    24c8:	1080020c 	andi	r2,r2,8
    24cc:	10020e26 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x8a0>
    24d0:	b0800417 	ldw	r2,16(r22)
    24d4:	10020c26 	beq	r2,zero,2d08 <___vfprintf_internal_r+0x8a0>
    24d8:	b200030b 	ldhu	r8,12(r22)
    24dc:	00800284 	movi	r2,10
    24e0:	40c0068c 	andi	r3,r8,26
    24e4:	18802f1e 	bne	r3,r2,25a4 <___vfprintf_internal_r+0x13c>
    24e8:	b080038f 	ldh	r2,14(r22)
    24ec:	10002d16 	blt	r2,zero,25a4 <___vfprintf_internal_r+0x13c>
    24f0:	b240038b 	ldhu	r9,14(r22)
    24f4:	b2800717 	ldw	r10,28(r22)
    24f8:	b2c00917 	ldw	r11,36(r22)
    24fc:	d9014f17 	ldw	r4,1340(sp)
    2500:	dc402904 	addi	r17,sp,164
    2504:	d8804004 	addi	r2,sp,256
    2508:	00c10004 	movi	r3,1024
    250c:	423fff4c 	andi	r8,r8,65533
    2510:	800d883a 	mov	r6,r16
    2514:	880b883a 	mov	r5,r17
    2518:	da002c0d 	sth	r8,176(sp)
    251c:	da402c8d 	sth	r9,178(sp)
    2520:	da803015 	stw	r10,192(sp)
    2524:	dac03215 	stw	r11,200(sp)
    2528:	d8802d15 	stw	r2,180(sp)
    252c:	d8c02e15 	stw	r3,184(sp)
    2530:	d8802915 	stw	r2,164(sp)
    2534:	d8c02b15 	stw	r3,172(sp)
    2538:	d8002f15 	stw	zero,188(sp)
    253c:	00024680 	call	2468 <___vfprintf_internal_r>
    2540:	d8814b15 	stw	r2,1324(sp)
    2544:	10000416 	blt	r2,zero,2558 <___vfprintf_internal_r+0xf0>
    2548:	d9014f17 	ldw	r4,1340(sp)
    254c:	880b883a 	mov	r5,r17
    2550:	0005df40 	call	5df4 <_fflush_r>
    2554:	1002321e 	bne	r2,zero,2e20 <___vfprintf_internal_r+0x9b8>
    2558:	d8802c0b 	ldhu	r2,176(sp)
    255c:	1080100c 	andi	r2,r2,64
    2560:	10000326 	beq	r2,zero,2570 <___vfprintf_internal_r+0x108>
    2564:	b080030b 	ldhu	r2,12(r22)
    2568:	10801014 	ori	r2,r2,64
    256c:	b080030d 	sth	r2,12(r22)
    2570:	d8814b17 	ldw	r2,1324(sp)
    2574:	dfc15b17 	ldw	ra,1388(sp)
    2578:	df015a17 	ldw	fp,1384(sp)
    257c:	ddc15917 	ldw	r23,1380(sp)
    2580:	dd815817 	ldw	r22,1376(sp)
    2584:	dd415717 	ldw	r21,1372(sp)
    2588:	dd015617 	ldw	r20,1368(sp)
    258c:	dcc15517 	ldw	r19,1364(sp)
    2590:	dc815417 	ldw	r18,1360(sp)
    2594:	dc415317 	ldw	r17,1356(sp)
    2598:	dc015217 	ldw	r16,1352(sp)
    259c:	dec15c04 	addi	sp,sp,1392
    25a0:	f800283a 	ret
    25a4:	0005883a 	mov	r2,zero
    25a8:	0007883a 	mov	r3,zero
    25ac:	dd401904 	addi	r21,sp,100
    25b0:	d8814215 	stw	r2,1288(sp)
    25b4:	802f883a 	mov	r23,r16
    25b8:	d8c14315 	stw	r3,1292(sp)
    25bc:	d8014b15 	stw	zero,1324(sp)
    25c0:	d8014815 	stw	zero,1312(sp)
    25c4:	d8014415 	stw	zero,1296(sp)
    25c8:	d8014715 	stw	zero,1308(sp)
    25cc:	dd400c15 	stw	r21,48(sp)
    25d0:	d8000e15 	stw	zero,56(sp)
    25d4:	d8000d15 	stw	zero,52(sp)
    25d8:	b8800007 	ldb	r2,0(r23)
    25dc:	10001926 	beq	r2,zero,2644 <___vfprintf_internal_r+0x1dc>
    25e0:	00c00944 	movi	r3,37
    25e4:	10c01726 	beq	r2,r3,2644 <___vfprintf_internal_r+0x1dc>
    25e8:	b821883a 	mov	r16,r23
    25ec:	00000106 	br	25f4 <___vfprintf_internal_r+0x18c>
    25f0:	10c00326 	beq	r2,r3,2600 <___vfprintf_internal_r+0x198>
    25f4:	84000044 	addi	r16,r16,1
    25f8:	80800007 	ldb	r2,0(r16)
    25fc:	103ffc1e 	bne	r2,zero,25f0 <___vfprintf_internal_r+0x188>
    2600:	85e7c83a 	sub	r19,r16,r23
    2604:	98000e26 	beq	r19,zero,2640 <___vfprintf_internal_r+0x1d8>
    2608:	dc800e17 	ldw	r18,56(sp)
    260c:	dc400d17 	ldw	r17,52(sp)
    2610:	008001c4 	movi	r2,7
    2614:	94e5883a 	add	r18,r18,r19
    2618:	8c400044 	addi	r17,r17,1
    261c:	adc00015 	stw	r23,0(r21)
    2620:	dc800e15 	stw	r18,56(sp)
    2624:	acc00115 	stw	r19,4(r21)
    2628:	dc400d15 	stw	r17,52(sp)
    262c:	14428b16 	blt	r2,r17,305c <___vfprintf_internal_r+0xbf4>
    2630:	ad400204 	addi	r21,r21,8
    2634:	d9014b17 	ldw	r4,1324(sp)
    2638:	24c9883a 	add	r4,r4,r19
    263c:	d9014b15 	stw	r4,1324(sp)
    2640:	802f883a 	mov	r23,r16
    2644:	b8800007 	ldb	r2,0(r23)
    2648:	10013c26 	beq	r2,zero,2b3c <___vfprintf_internal_r+0x6d4>
    264c:	bdc00044 	addi	r23,r23,1
    2650:	d8000405 	stb	zero,16(sp)
    2654:	b8c00007 	ldb	r3,0(r23)
    2658:	04ffffc4 	movi	r19,-1
    265c:	d8014c15 	stw	zero,1328(sp)
    2660:	d8014a15 	stw	zero,1320(sp)
    2664:	d8c14d15 	stw	r3,1332(sp)
    2668:	bdc00044 	addi	r23,r23,1
    266c:	d9414d17 	ldw	r5,1332(sp)
    2670:	00801604 	movi	r2,88
    2674:	28fff804 	addi	r3,r5,-32
    2678:	10c06036 	bltu	r2,r3,27fc <___vfprintf_internal_r+0x394>
    267c:	18c5883a 	add	r2,r3,r3
    2680:	1085883a 	add	r2,r2,r2
    2684:	00c00034 	movhi	r3,0
    2688:	18c9a604 	addi	r3,r3,9880
    268c:	10c5883a 	add	r2,r2,r3
    2690:	11000017 	ldw	r4,0(r2)
    2694:	2000683a 	jmp	r4
    2698:	0000360c 	andi	zero,zero,216
    269c:	000027fc 	xorhi	zero,zero,159
    26a0:	000027fc 	xorhi	zero,zero,159
    26a4:	000035f8 	rdprs	zero,zero,215
    26a8:	000027fc 	xorhi	zero,zero,159
    26ac:	000027fc 	xorhi	zero,zero,159
    26b0:	000027fc 	xorhi	zero,zero,159
    26b4:	000027fc 	xorhi	zero,zero,159
    26b8:	000027fc 	xorhi	zero,zero,159
    26bc:	000027fc 	xorhi	zero,zero,159
    26c0:	000033d8 	cmpnei	zero,zero,207
    26c4:	000035e8 	cmpgeui	zero,zero,215
    26c8:	000027fc 	xorhi	zero,zero,159
    26cc:	000033f0 	cmpltui	zero,zero,207
    26d0:	00003684 	movi	zero,218
    26d4:	000027fc 	xorhi	zero,zero,159
    26d8:	00003670 	cmpltui	zero,zero,217
    26dc:	00003638 	rdprs	zero,zero,216
    26e0:	00003638 	rdprs	zero,zero,216
    26e4:	00003638 	rdprs	zero,zero,216
    26e8:	00003638 	rdprs	zero,zero,216
    26ec:	00003638 	rdprs	zero,zero,216
    26f0:	00003638 	rdprs	zero,zero,216
    26f4:	00003638 	rdprs	zero,zero,216
    26f8:	00003638 	rdprs	zero,zero,216
    26fc:	00003638 	rdprs	zero,zero,216
    2700:	000027fc 	xorhi	zero,zero,159
    2704:	000027fc 	xorhi	zero,zero,159
    2708:	000027fc 	xorhi	zero,zero,159
    270c:	000027fc 	xorhi	zero,zero,159
    2710:	000027fc 	xorhi	zero,zero,159
    2714:	000027fc 	xorhi	zero,zero,159
    2718:	000027fc 	xorhi	zero,zero,159
    271c:	000027fc 	xorhi	zero,zero,159
    2720:	000027fc 	xorhi	zero,zero,159
    2724:	000027fc 	xorhi	zero,zero,159
    2728:	00002e54 	movui	zero,185
    272c:	000034c0 	call	34c <deposer+0x17c>
    2730:	000027fc 	xorhi	zero,zero,159
    2734:	000034c0 	call	34c <deposer+0x17c>
    2738:	000027fc 	xorhi	zero,zero,159
    273c:	000027fc 	xorhi	zero,zero,159
    2740:	000027fc 	xorhi	zero,zero,159
    2744:	000027fc 	xorhi	zero,zero,159
    2748:	00003624 	muli	zero,zero,216
    274c:	000027fc 	xorhi	zero,zero,159
    2750:	000027fc 	xorhi	zero,zero,159
    2754:	00002f08 	cmpgei	zero,zero,188
    2758:	000027fc 	xorhi	zero,zero,159
    275c:	000027fc 	xorhi	zero,zero,159
    2760:	000027fc 	xorhi	zero,zero,159
    2764:	000027fc 	xorhi	zero,zero,159
    2768:	000027fc 	xorhi	zero,zero,159
    276c:	00002f54 	movui	zero,189
    2770:	000027fc 	xorhi	zero,zero,159
    2774:	000027fc 	xorhi	zero,zero,159
    2778:	00003574 	movhi	zero,213
    277c:	000027fc 	xorhi	zero,zero,159
    2780:	000027fc 	xorhi	zero,zero,159
    2784:	000027fc 	xorhi	zero,zero,159
    2788:	000027fc 	xorhi	zero,zero,159
    278c:	000027fc 	xorhi	zero,zero,159
    2790:	000027fc 	xorhi	zero,zero,159
    2794:	000027fc 	xorhi	zero,zero,159
    2798:	000027fc 	xorhi	zero,zero,159
    279c:	000027fc 	xorhi	zero,zero,159
    27a0:	000027fc 	xorhi	zero,zero,159
    27a4:	00003548 	cmpgei	zero,zero,213
    27a8:	00002e60 	cmpeqi	zero,zero,185
    27ac:	000034c0 	call	34c <deposer+0x17c>
    27b0:	000034c0 	call	34c <deposer+0x17c>
    27b4:	000034c0 	call	34c <deposer+0x17c>
    27b8:	000034ac 	andhi	zero,zero,210
    27bc:	00002e60 	cmpeqi	zero,zero,185
    27c0:	000027fc 	xorhi	zero,zero,159
    27c4:	000027fc 	xorhi	zero,zero,159
    27c8:	00003434 	movhi	zero,208
    27cc:	000027fc 	xorhi	zero,zero,159
    27d0:	00003404 	movi	zero,208
    27d4:	00002f14 	movui	zero,188
    27d8:	00003464 	muli	zero,zero,209
    27dc:	00003450 	cmplti	zero,zero,209
    27e0:	000027fc 	xorhi	zero,zero,159
    27e4:	000036e0 	cmpeqi	zero,zero,219
    27e8:	000027fc 	xorhi	zero,zero,159
    27ec:	00002f60 	cmpeqi	zero,zero,189
    27f0:	000027fc 	xorhi	zero,zero,159
    27f4:	000027fc 	xorhi	zero,zero,159
    27f8:	000035d8 	cmpnei	zero,zero,215
    27fc:	d9014d17 	ldw	r4,1332(sp)
    2800:	2000ce26 	beq	r4,zero,2b3c <___vfprintf_internal_r+0x6d4>
    2804:	01400044 	movi	r5,1
    2808:	d9800f04 	addi	r6,sp,60
    280c:	d9c14015 	stw	r7,1280(sp)
    2810:	d9414515 	stw	r5,1300(sp)
    2814:	d9814115 	stw	r6,1284(sp)
    2818:	280f883a 	mov	r7,r5
    281c:	d9000f05 	stb	r4,60(sp)
    2820:	d8000405 	stb	zero,16(sp)
    2824:	d8014615 	stw	zero,1304(sp)
    2828:	d8c14c17 	ldw	r3,1328(sp)
    282c:	1880008c 	andi	r2,r3,2
    2830:	1005003a 	cmpeq	r2,r2,zero
    2834:	d8815015 	stw	r2,1344(sp)
    2838:	1000031e 	bne	r2,zero,2848 <___vfprintf_internal_r+0x3e0>
    283c:	d9014517 	ldw	r4,1300(sp)
    2840:	21000084 	addi	r4,r4,2
    2844:	d9014515 	stw	r4,1300(sp)
    2848:	d9414c17 	ldw	r5,1328(sp)
    284c:	2940210c 	andi	r5,r5,132
    2850:	d9414e15 	stw	r5,1336(sp)
    2854:	28002d1e 	bne	r5,zero,290c <___vfprintf_internal_r+0x4a4>
    2858:	d9814a17 	ldw	r6,1320(sp)
    285c:	d8814517 	ldw	r2,1300(sp)
    2860:	30a1c83a 	sub	r16,r6,r2
    2864:	0400290e 	bge	zero,r16,290c <___vfprintf_internal_r+0x4a4>
    2868:	00800404 	movi	r2,16
    286c:	1404580e 	bge	r2,r16,39d0 <___vfprintf_internal_r+0x1568>
    2870:	dc800e17 	ldw	r18,56(sp)
    2874:	dc400d17 	ldw	r17,52(sp)
    2878:	1027883a 	mov	r19,r2
    287c:	07000074 	movhi	fp,1
    2880:	e7375884 	addi	fp,fp,-8862
    2884:	050001c4 	movi	r20,7
    2888:	00000306 	br	2898 <___vfprintf_internal_r+0x430>
    288c:	843ffc04 	addi	r16,r16,-16
    2890:	ad400204 	addi	r21,r21,8
    2894:	9c00130e 	bge	r19,r16,28e4 <___vfprintf_internal_r+0x47c>
    2898:	94800404 	addi	r18,r18,16
    289c:	8c400044 	addi	r17,r17,1
    28a0:	af000015 	stw	fp,0(r21)
    28a4:	acc00115 	stw	r19,4(r21)
    28a8:	dc800e15 	stw	r18,56(sp)
    28ac:	dc400d15 	stw	r17,52(sp)
    28b0:	a47ff60e 	bge	r20,r17,288c <___vfprintf_internal_r+0x424>
    28b4:	d9014f17 	ldw	r4,1340(sp)
    28b8:	b00b883a 	mov	r5,r22
    28bc:	d9800c04 	addi	r6,sp,48
    28c0:	d9c15115 	stw	r7,1348(sp)
    28c4:	00024100 	call	2410 <__sprint_r>
    28c8:	d9c15117 	ldw	r7,1348(sp)
    28cc:	10009e1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    28d0:	843ffc04 	addi	r16,r16,-16
    28d4:	dc800e17 	ldw	r18,56(sp)
    28d8:	dc400d17 	ldw	r17,52(sp)
    28dc:	dd401904 	addi	r21,sp,100
    28e0:	9c3fed16 	blt	r19,r16,2898 <___vfprintf_internal_r+0x430>
    28e4:	9425883a 	add	r18,r18,r16
    28e8:	8c400044 	addi	r17,r17,1
    28ec:	008001c4 	movi	r2,7
    28f0:	af000015 	stw	fp,0(r21)
    28f4:	ac000115 	stw	r16,4(r21)
    28f8:	dc800e15 	stw	r18,56(sp)
    28fc:	dc400d15 	stw	r17,52(sp)
    2900:	1441f516 	blt	r2,r17,30d8 <___vfprintf_internal_r+0xc70>
    2904:	ad400204 	addi	r21,r21,8
    2908:	00000206 	br	2914 <___vfprintf_internal_r+0x4ac>
    290c:	dc800e17 	ldw	r18,56(sp)
    2910:	dc400d17 	ldw	r17,52(sp)
    2914:	d8800407 	ldb	r2,16(sp)
    2918:	10000b26 	beq	r2,zero,2948 <___vfprintf_internal_r+0x4e0>
    291c:	00800044 	movi	r2,1
    2920:	94800044 	addi	r18,r18,1
    2924:	8c400044 	addi	r17,r17,1
    2928:	a8800115 	stw	r2,4(r21)
    292c:	d8c00404 	addi	r3,sp,16
    2930:	008001c4 	movi	r2,7
    2934:	a8c00015 	stw	r3,0(r21)
    2938:	dc800e15 	stw	r18,56(sp)
    293c:	dc400d15 	stw	r17,52(sp)
    2940:	1441da16 	blt	r2,r17,30ac <___vfprintf_internal_r+0xc44>
    2944:	ad400204 	addi	r21,r21,8
    2948:	d9015017 	ldw	r4,1344(sp)
    294c:	20000b1e 	bne	r4,zero,297c <___vfprintf_internal_r+0x514>
    2950:	d8800444 	addi	r2,sp,17
    2954:	94800084 	addi	r18,r18,2
    2958:	8c400044 	addi	r17,r17,1
    295c:	a8800015 	stw	r2,0(r21)
    2960:	00c00084 	movi	r3,2
    2964:	008001c4 	movi	r2,7
    2968:	a8c00115 	stw	r3,4(r21)
    296c:	dc800e15 	stw	r18,56(sp)
    2970:	dc400d15 	stw	r17,52(sp)
    2974:	1441c216 	blt	r2,r17,3080 <___vfprintf_internal_r+0xc18>
    2978:	ad400204 	addi	r21,r21,8
    297c:	d9414e17 	ldw	r5,1336(sp)
    2980:	00802004 	movi	r2,128
    2984:	2880b126 	beq	r5,r2,2c4c <___vfprintf_internal_r+0x7e4>
    2988:	d8c14617 	ldw	r3,1304(sp)
    298c:	19e1c83a 	sub	r16,r3,r7
    2990:	0400260e 	bge	zero,r16,2a2c <___vfprintf_internal_r+0x5c4>
    2994:	00800404 	movi	r2,16
    2998:	1403c90e 	bge	r2,r16,38c0 <___vfprintf_internal_r+0x1458>
    299c:	1027883a 	mov	r19,r2
    29a0:	07000074 	movhi	fp,1
    29a4:	e7375484 	addi	fp,fp,-8878
    29a8:	050001c4 	movi	r20,7
    29ac:	00000306 	br	29bc <___vfprintf_internal_r+0x554>
    29b0:	843ffc04 	addi	r16,r16,-16
    29b4:	ad400204 	addi	r21,r21,8
    29b8:	9c00130e 	bge	r19,r16,2a08 <___vfprintf_internal_r+0x5a0>
    29bc:	94800404 	addi	r18,r18,16
    29c0:	8c400044 	addi	r17,r17,1
    29c4:	af000015 	stw	fp,0(r21)
    29c8:	acc00115 	stw	r19,4(r21)
    29cc:	dc800e15 	stw	r18,56(sp)
    29d0:	dc400d15 	stw	r17,52(sp)
    29d4:	a47ff60e 	bge	r20,r17,29b0 <___vfprintf_internal_r+0x548>
    29d8:	d9014f17 	ldw	r4,1340(sp)
    29dc:	b00b883a 	mov	r5,r22
    29e0:	d9800c04 	addi	r6,sp,48
    29e4:	d9c15115 	stw	r7,1348(sp)
    29e8:	00024100 	call	2410 <__sprint_r>
    29ec:	d9c15117 	ldw	r7,1348(sp)
    29f0:	1000551e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    29f4:	843ffc04 	addi	r16,r16,-16
    29f8:	dc800e17 	ldw	r18,56(sp)
    29fc:	dc400d17 	ldw	r17,52(sp)
    2a00:	dd401904 	addi	r21,sp,100
    2a04:	9c3fed16 	blt	r19,r16,29bc <___vfprintf_internal_r+0x554>
    2a08:	9425883a 	add	r18,r18,r16
    2a0c:	8c400044 	addi	r17,r17,1
    2a10:	008001c4 	movi	r2,7
    2a14:	af000015 	stw	fp,0(r21)
    2a18:	ac000115 	stw	r16,4(r21)
    2a1c:	dc800e15 	stw	r18,56(sp)
    2a20:	dc400d15 	stw	r17,52(sp)
    2a24:	14418216 	blt	r2,r17,3030 <___vfprintf_internal_r+0xbc8>
    2a28:	ad400204 	addi	r21,r21,8
    2a2c:	d9014c17 	ldw	r4,1328(sp)
    2a30:	2080400c 	andi	r2,r4,256
    2a34:	10004a1e 	bne	r2,zero,2b60 <___vfprintf_internal_r+0x6f8>
    2a38:	d9414117 	ldw	r5,1284(sp)
    2a3c:	91e5883a 	add	r18,r18,r7
    2a40:	8c400044 	addi	r17,r17,1
    2a44:	008001c4 	movi	r2,7
    2a48:	a9400015 	stw	r5,0(r21)
    2a4c:	a9c00115 	stw	r7,4(r21)
    2a50:	dc800e15 	stw	r18,56(sp)
    2a54:	dc400d15 	stw	r17,52(sp)
    2a58:	14416716 	blt	r2,r17,2ff8 <___vfprintf_internal_r+0xb90>
    2a5c:	a8c00204 	addi	r3,r21,8
    2a60:	d9814c17 	ldw	r6,1328(sp)
    2a64:	3080010c 	andi	r2,r6,4
    2a68:	10002826 	beq	r2,zero,2b0c <___vfprintf_internal_r+0x6a4>
    2a6c:	d8814a17 	ldw	r2,1320(sp)
    2a70:	d9014517 	ldw	r4,1300(sp)
    2a74:	1121c83a 	sub	r16,r2,r4
    2a78:	0400240e 	bge	zero,r16,2b0c <___vfprintf_internal_r+0x6a4>
    2a7c:	00800404 	movi	r2,16
    2a80:	14044f0e 	bge	r2,r16,3bc0 <___vfprintf_internal_r+0x1758>
    2a84:	dc400d17 	ldw	r17,52(sp)
    2a88:	1027883a 	mov	r19,r2
    2a8c:	07000074 	movhi	fp,1
    2a90:	e7375884 	addi	fp,fp,-8862
    2a94:	050001c4 	movi	r20,7
    2a98:	00000306 	br	2aa8 <___vfprintf_internal_r+0x640>
    2a9c:	843ffc04 	addi	r16,r16,-16
    2aa0:	18c00204 	addi	r3,r3,8
    2aa4:	9c00110e 	bge	r19,r16,2aec <___vfprintf_internal_r+0x684>
    2aa8:	94800404 	addi	r18,r18,16
    2aac:	8c400044 	addi	r17,r17,1
    2ab0:	1f000015 	stw	fp,0(r3)
    2ab4:	1cc00115 	stw	r19,4(r3)
    2ab8:	dc800e15 	stw	r18,56(sp)
    2abc:	dc400d15 	stw	r17,52(sp)
    2ac0:	a47ff60e 	bge	r20,r17,2a9c <___vfprintf_internal_r+0x634>
    2ac4:	d9014f17 	ldw	r4,1340(sp)
    2ac8:	b00b883a 	mov	r5,r22
    2acc:	d9800c04 	addi	r6,sp,48
    2ad0:	00024100 	call	2410 <__sprint_r>
    2ad4:	10001c1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    2ad8:	843ffc04 	addi	r16,r16,-16
    2adc:	dc800e17 	ldw	r18,56(sp)
    2ae0:	dc400d17 	ldw	r17,52(sp)
    2ae4:	d8c01904 	addi	r3,sp,100
    2ae8:	9c3fef16 	blt	r19,r16,2aa8 <___vfprintf_internal_r+0x640>
    2aec:	9425883a 	add	r18,r18,r16
    2af0:	8c400044 	addi	r17,r17,1
    2af4:	008001c4 	movi	r2,7
    2af8:	1f000015 	stw	fp,0(r3)
    2afc:	1c000115 	stw	r16,4(r3)
    2b00:	dc800e15 	stw	r18,56(sp)
    2b04:	dc400d15 	stw	r17,52(sp)
    2b08:	1440cb16 	blt	r2,r17,2e38 <___vfprintf_internal_r+0x9d0>
    2b0c:	d8814a17 	ldw	r2,1320(sp)
    2b10:	d9414517 	ldw	r5,1300(sp)
    2b14:	1140010e 	bge	r2,r5,2b1c <___vfprintf_internal_r+0x6b4>
    2b18:	2805883a 	mov	r2,r5
    2b1c:	d9814b17 	ldw	r6,1324(sp)
    2b20:	308d883a 	add	r6,r6,r2
    2b24:	d9814b15 	stw	r6,1324(sp)
    2b28:	90013b1e 	bne	r18,zero,3018 <___vfprintf_internal_r+0xbb0>
    2b2c:	d9c14017 	ldw	r7,1280(sp)
    2b30:	dd401904 	addi	r21,sp,100
    2b34:	d8000d15 	stw	zero,52(sp)
    2b38:	003ea706 	br	25d8 <___vfprintf_internal_r+0x170>
    2b3c:	d8800e17 	ldw	r2,56(sp)
    2b40:	10053f1e 	bne	r2,zero,4040 <___vfprintf_internal_r+0x1bd8>
    2b44:	d8000d15 	stw	zero,52(sp)
    2b48:	b080030b 	ldhu	r2,12(r22)
    2b4c:	1080100c 	andi	r2,r2,64
    2b50:	103e8726 	beq	r2,zero,2570 <___vfprintf_internal_r+0x108>
    2b54:	00bfffc4 	movi	r2,-1
    2b58:	d8814b15 	stw	r2,1324(sp)
    2b5c:	003e8406 	br	2570 <___vfprintf_internal_r+0x108>
    2b60:	d9814d17 	ldw	r6,1332(sp)
    2b64:	00801944 	movi	r2,101
    2b68:	11806e16 	blt	r2,r6,2d24 <___vfprintf_internal_r+0x8bc>
    2b6c:	d9414717 	ldw	r5,1308(sp)
    2b70:	00c00044 	movi	r3,1
    2b74:	1943430e 	bge	r3,r5,3884 <___vfprintf_internal_r+0x141c>
    2b78:	d8814117 	ldw	r2,1284(sp)
    2b7c:	94800044 	addi	r18,r18,1
    2b80:	8c400044 	addi	r17,r17,1
    2b84:	a8800015 	stw	r2,0(r21)
    2b88:	008001c4 	movi	r2,7
    2b8c:	a8c00115 	stw	r3,4(r21)
    2b90:	dc800e15 	stw	r18,56(sp)
    2b94:	dc400d15 	stw	r17,52(sp)
    2b98:	1441ca16 	blt	r2,r17,32c4 <___vfprintf_internal_r+0xe5c>
    2b9c:	a8c00204 	addi	r3,r21,8
    2ba0:	d9014917 	ldw	r4,1316(sp)
    2ba4:	00800044 	movi	r2,1
    2ba8:	94800044 	addi	r18,r18,1
    2bac:	8c400044 	addi	r17,r17,1
    2bb0:	18800115 	stw	r2,4(r3)
    2bb4:	008001c4 	movi	r2,7
    2bb8:	19000015 	stw	r4,0(r3)
    2bbc:	dc800e15 	stw	r18,56(sp)
    2bc0:	dc400d15 	stw	r17,52(sp)
    2bc4:	1441b616 	blt	r2,r17,32a0 <___vfprintf_internal_r+0xe38>
    2bc8:	1cc00204 	addi	r19,r3,8
    2bcc:	d9014217 	ldw	r4,1288(sp)
    2bd0:	d9414317 	ldw	r5,1292(sp)
    2bd4:	000d883a 	mov	r6,zero
    2bd8:	000f883a 	mov	r7,zero
    2bdc:	000a61c0 	call	a61c <__nedf2>
    2be0:	10017426 	beq	r2,zero,31b4 <___vfprintf_internal_r+0xd4c>
    2be4:	d9414717 	ldw	r5,1308(sp)
    2be8:	d9814117 	ldw	r6,1284(sp)
    2bec:	8c400044 	addi	r17,r17,1
    2bf0:	2c85883a 	add	r2,r5,r18
    2bf4:	14bfffc4 	addi	r18,r2,-1
    2bf8:	28bfffc4 	addi	r2,r5,-1
    2bfc:	30c00044 	addi	r3,r6,1
    2c00:	98800115 	stw	r2,4(r19)
    2c04:	008001c4 	movi	r2,7
    2c08:	98c00015 	stw	r3,0(r19)
    2c0c:	dc800e15 	stw	r18,56(sp)
    2c10:	dc400d15 	stw	r17,52(sp)
    2c14:	14418e16 	blt	r2,r17,3250 <___vfprintf_internal_r+0xde8>
    2c18:	9cc00204 	addi	r19,r19,8
    2c1c:	d9414817 	ldw	r5,1312(sp)
    2c20:	d8800804 	addi	r2,sp,32
    2c24:	8c400044 	addi	r17,r17,1
    2c28:	9165883a 	add	r18,r18,r5
    2c2c:	98800015 	stw	r2,0(r19)
    2c30:	008001c4 	movi	r2,7
    2c34:	99400115 	stw	r5,4(r19)
    2c38:	dc800e15 	stw	r18,56(sp)
    2c3c:	dc400d15 	stw	r17,52(sp)
    2c40:	1440ed16 	blt	r2,r17,2ff8 <___vfprintf_internal_r+0xb90>
    2c44:	98c00204 	addi	r3,r19,8
    2c48:	003f8506 	br	2a60 <___vfprintf_internal_r+0x5f8>
    2c4c:	d9814a17 	ldw	r6,1320(sp)
    2c50:	d8814517 	ldw	r2,1300(sp)
    2c54:	30a1c83a 	sub	r16,r6,r2
    2c58:	043f4b0e 	bge	zero,r16,2988 <___vfprintf_internal_r+0x520>
    2c5c:	00800404 	movi	r2,16
    2c60:	1404340e 	bge	r2,r16,3d34 <___vfprintf_internal_r+0x18cc>
    2c64:	1027883a 	mov	r19,r2
    2c68:	07000074 	movhi	fp,1
    2c6c:	e7375484 	addi	fp,fp,-8878
    2c70:	050001c4 	movi	r20,7
    2c74:	00000306 	br	2c84 <___vfprintf_internal_r+0x81c>
    2c78:	843ffc04 	addi	r16,r16,-16
    2c7c:	ad400204 	addi	r21,r21,8
    2c80:	9c00130e 	bge	r19,r16,2cd0 <___vfprintf_internal_r+0x868>
    2c84:	94800404 	addi	r18,r18,16
    2c88:	8c400044 	addi	r17,r17,1
    2c8c:	af000015 	stw	fp,0(r21)
    2c90:	acc00115 	stw	r19,4(r21)
    2c94:	dc800e15 	stw	r18,56(sp)
    2c98:	dc400d15 	stw	r17,52(sp)
    2c9c:	a47ff60e 	bge	r20,r17,2c78 <___vfprintf_internal_r+0x810>
    2ca0:	d9014f17 	ldw	r4,1340(sp)
    2ca4:	b00b883a 	mov	r5,r22
    2ca8:	d9800c04 	addi	r6,sp,48
    2cac:	d9c15115 	stw	r7,1348(sp)
    2cb0:	00024100 	call	2410 <__sprint_r>
    2cb4:	d9c15117 	ldw	r7,1348(sp)
    2cb8:	103fa31e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    2cbc:	843ffc04 	addi	r16,r16,-16
    2cc0:	dc800e17 	ldw	r18,56(sp)
    2cc4:	dc400d17 	ldw	r17,52(sp)
    2cc8:	dd401904 	addi	r21,sp,100
    2ccc:	9c3fed16 	blt	r19,r16,2c84 <___vfprintf_internal_r+0x81c>
    2cd0:	9425883a 	add	r18,r18,r16
    2cd4:	8c400044 	addi	r17,r17,1
    2cd8:	008001c4 	movi	r2,7
    2cdc:	af000015 	stw	fp,0(r21)
    2ce0:	ac000115 	stw	r16,4(r21)
    2ce4:	dc800e15 	stw	r18,56(sp)
    2ce8:	dc400d15 	stw	r17,52(sp)
    2cec:	14416116 	blt	r2,r17,3274 <___vfprintf_internal_r+0xe0c>
    2cf0:	ad400204 	addi	r21,r21,8
    2cf4:	003f2406 	br	2988 <___vfprintf_internal_r+0x520>
    2cf8:	d9014f17 	ldw	r4,1340(sp)
    2cfc:	000608c0 	call	608c <__sinit>
    2d00:	d9c15117 	ldw	r7,1348(sp)
    2d04:	003def06 	br	24c4 <___vfprintf_internal_r+0x5c>
    2d08:	d9014f17 	ldw	r4,1340(sp)
    2d0c:	b00b883a 	mov	r5,r22
    2d10:	d9c15115 	stw	r7,1348(sp)
    2d14:	00043380 	call	4338 <__swsetup_r>
    2d18:	d9c15117 	ldw	r7,1348(sp)
    2d1c:	103dee26 	beq	r2,zero,24d8 <___vfprintf_internal_r+0x70>
    2d20:	003f8c06 	br	2b54 <___vfprintf_internal_r+0x6ec>
    2d24:	d9014217 	ldw	r4,1288(sp)
    2d28:	d9414317 	ldw	r5,1292(sp)
    2d2c:	000d883a 	mov	r6,zero
    2d30:	000f883a 	mov	r7,zero
    2d34:	000a5940 	call	a594 <__eqdf2>
    2d38:	1000f21e 	bne	r2,zero,3104 <___vfprintf_internal_r+0xc9c>
    2d3c:	00800074 	movhi	r2,1
    2d40:	10b75404 	addi	r2,r2,-8880
    2d44:	94800044 	addi	r18,r18,1
    2d48:	8c400044 	addi	r17,r17,1
    2d4c:	a8800015 	stw	r2,0(r21)
    2d50:	00c00044 	movi	r3,1
    2d54:	008001c4 	movi	r2,7
    2d58:	a8c00115 	stw	r3,4(r21)
    2d5c:	dc800e15 	stw	r18,56(sp)
    2d60:	dc400d15 	stw	r17,52(sp)
    2d64:	1442fa16 	blt	r2,r17,3950 <___vfprintf_internal_r+0x14e8>
    2d68:	a8c00204 	addi	r3,r21,8
    2d6c:	d8800517 	ldw	r2,20(sp)
    2d70:	d9014717 	ldw	r4,1308(sp)
    2d74:	11015c0e 	bge	r2,r4,32e8 <___vfprintf_internal_r+0xe80>
    2d78:	dc400d17 	ldw	r17,52(sp)
    2d7c:	d9814917 	ldw	r6,1316(sp)
    2d80:	00800044 	movi	r2,1
    2d84:	94800044 	addi	r18,r18,1
    2d88:	8c400044 	addi	r17,r17,1
    2d8c:	18800115 	stw	r2,4(r3)
    2d90:	008001c4 	movi	r2,7
    2d94:	19800015 	stw	r6,0(r3)
    2d98:	dc800e15 	stw	r18,56(sp)
    2d9c:	dc400d15 	stw	r17,52(sp)
    2da0:	14431016 	blt	r2,r17,39e4 <___vfprintf_internal_r+0x157c>
    2da4:	18c00204 	addi	r3,r3,8
    2da8:	d8814717 	ldw	r2,1308(sp)
    2dac:	143fffc4 	addi	r16,r2,-1
    2db0:	043f2b0e 	bge	zero,r16,2a60 <___vfprintf_internal_r+0x5f8>
    2db4:	00800404 	movi	r2,16
    2db8:	1402a20e 	bge	r2,r16,3844 <___vfprintf_internal_r+0x13dc>
    2dbc:	dc400d17 	ldw	r17,52(sp)
    2dc0:	1027883a 	mov	r19,r2
    2dc4:	07000074 	movhi	fp,1
    2dc8:	e7375484 	addi	fp,fp,-8878
    2dcc:	050001c4 	movi	r20,7
    2dd0:	00000306 	br	2de0 <___vfprintf_internal_r+0x978>
    2dd4:	18c00204 	addi	r3,r3,8
    2dd8:	843ffc04 	addi	r16,r16,-16
    2ddc:	9c029c0e 	bge	r19,r16,3850 <___vfprintf_internal_r+0x13e8>
    2de0:	94800404 	addi	r18,r18,16
    2de4:	8c400044 	addi	r17,r17,1
    2de8:	1f000015 	stw	fp,0(r3)
    2dec:	1cc00115 	stw	r19,4(r3)
    2df0:	dc800e15 	stw	r18,56(sp)
    2df4:	dc400d15 	stw	r17,52(sp)
    2df8:	a47ff60e 	bge	r20,r17,2dd4 <___vfprintf_internal_r+0x96c>
    2dfc:	d9014f17 	ldw	r4,1340(sp)
    2e00:	b00b883a 	mov	r5,r22
    2e04:	d9800c04 	addi	r6,sp,48
    2e08:	00024100 	call	2410 <__sprint_r>
    2e0c:	103f4e1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    2e10:	dc800e17 	ldw	r18,56(sp)
    2e14:	dc400d17 	ldw	r17,52(sp)
    2e18:	d8c01904 	addi	r3,sp,100
    2e1c:	003fee06 	br	2dd8 <___vfprintf_internal_r+0x970>
    2e20:	d8802c0b 	ldhu	r2,176(sp)
    2e24:	00ffffc4 	movi	r3,-1
    2e28:	d8c14b15 	stw	r3,1324(sp)
    2e2c:	1080100c 	andi	r2,r2,64
    2e30:	103dcc1e 	bne	r2,zero,2564 <___vfprintf_internal_r+0xfc>
    2e34:	003dce06 	br	2570 <___vfprintf_internal_r+0x108>
    2e38:	d9014f17 	ldw	r4,1340(sp)
    2e3c:	b00b883a 	mov	r5,r22
    2e40:	d9800c04 	addi	r6,sp,48
    2e44:	00024100 	call	2410 <__sprint_r>
    2e48:	103f3f1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    2e4c:	dc800e17 	ldw	r18,56(sp)
    2e50:	003f2e06 	br	2b0c <___vfprintf_internal_r+0x6a4>
    2e54:	d9414c17 	ldw	r5,1328(sp)
    2e58:	29400414 	ori	r5,r5,16
    2e5c:	d9414c15 	stw	r5,1328(sp)
    2e60:	d9814c17 	ldw	r6,1328(sp)
    2e64:	3080080c 	andi	r2,r6,32
    2e68:	10014f1e 	bne	r2,zero,33a8 <___vfprintf_internal_r+0xf40>
    2e6c:	d8c14c17 	ldw	r3,1328(sp)
    2e70:	1880040c 	andi	r2,r3,16
    2e74:	1002ea1e 	bne	r2,zero,3a20 <___vfprintf_internal_r+0x15b8>
    2e78:	d9014c17 	ldw	r4,1328(sp)
    2e7c:	2080100c 	andi	r2,r4,64
    2e80:	1002e726 	beq	r2,zero,3a20 <___vfprintf_internal_r+0x15b8>
    2e84:	3880000f 	ldh	r2,0(r7)
    2e88:	39c00104 	addi	r7,r7,4
    2e8c:	d9c14015 	stw	r7,1280(sp)
    2e90:	1023d7fa 	srai	r17,r2,31
    2e94:	1021883a 	mov	r16,r2
    2e98:	88037216 	blt	r17,zero,3c64 <___vfprintf_internal_r+0x17fc>
    2e9c:	01000044 	movi	r4,1
    2ea0:	98000416 	blt	r19,zero,2eb4 <___vfprintf_internal_r+0xa4c>
    2ea4:	d8c14c17 	ldw	r3,1328(sp)
    2ea8:	00bfdfc4 	movi	r2,-129
    2eac:	1886703a 	and	r3,r3,r2
    2eb0:	d8c14c15 	stw	r3,1328(sp)
    2eb4:	8444b03a 	or	r2,r16,r17
    2eb8:	1002261e 	bne	r2,zero,3754 <___vfprintf_internal_r+0x12ec>
    2ebc:	9802251e 	bne	r19,zero,3754 <___vfprintf_internal_r+0x12ec>
    2ec0:	20803fcc 	andi	r2,r4,255
    2ec4:	10029b26 	beq	r2,zero,3934 <___vfprintf_internal_r+0x14cc>
    2ec8:	d8c01904 	addi	r3,sp,100
    2ecc:	dd000f04 	addi	r20,sp,60
    2ed0:	d8c14115 	stw	r3,1284(sp)
    2ed4:	d8c14117 	ldw	r3,1284(sp)
    2ed8:	dcc14515 	stw	r19,1300(sp)
    2edc:	a0c5c83a 	sub	r2,r20,r3
    2ee0:	11c00a04 	addi	r7,r2,40
    2ee4:	99c0010e 	bge	r19,r7,2eec <___vfprintf_internal_r+0xa84>
    2ee8:	d9c14515 	stw	r7,1300(sp)
    2eec:	dcc14615 	stw	r19,1304(sp)
    2ef0:	d8800407 	ldb	r2,16(sp)
    2ef4:	103e4c26 	beq	r2,zero,2828 <___vfprintf_internal_r+0x3c0>
    2ef8:	d8814517 	ldw	r2,1300(sp)
    2efc:	10800044 	addi	r2,r2,1
    2f00:	d8814515 	stw	r2,1300(sp)
    2f04:	003e4806 	br	2828 <___vfprintf_internal_r+0x3c0>
    2f08:	d9814c17 	ldw	r6,1328(sp)
    2f0c:	31800414 	ori	r6,r6,16
    2f10:	d9814c15 	stw	r6,1328(sp)
    2f14:	d8c14c17 	ldw	r3,1328(sp)
    2f18:	1880080c 	andi	r2,r3,32
    2f1c:	1001271e 	bne	r2,zero,33bc <___vfprintf_internal_r+0xf54>
    2f20:	d9414c17 	ldw	r5,1328(sp)
    2f24:	2880040c 	andi	r2,r5,16
    2f28:	1002b61e 	bne	r2,zero,3a04 <___vfprintf_internal_r+0x159c>
    2f2c:	d9814c17 	ldw	r6,1328(sp)
    2f30:	3080100c 	andi	r2,r6,64
    2f34:	1002b326 	beq	r2,zero,3a04 <___vfprintf_internal_r+0x159c>
    2f38:	3c00000b 	ldhu	r16,0(r7)
    2f3c:	0009883a 	mov	r4,zero
    2f40:	39c00104 	addi	r7,r7,4
    2f44:	0023883a 	mov	r17,zero
    2f48:	d9c14015 	stw	r7,1280(sp)
    2f4c:	d8000405 	stb	zero,16(sp)
    2f50:	003fd306 	br	2ea0 <___vfprintf_internal_r+0xa38>
    2f54:	d9014c17 	ldw	r4,1328(sp)
    2f58:	21000414 	ori	r4,r4,16
    2f5c:	d9014c15 	stw	r4,1328(sp)
    2f60:	d9414c17 	ldw	r5,1328(sp)
    2f64:	2880080c 	andi	r2,r5,32
    2f68:	1001081e 	bne	r2,zero,338c <___vfprintf_internal_r+0xf24>
    2f6c:	d8c14c17 	ldw	r3,1328(sp)
    2f70:	1880040c 	andi	r2,r3,16
    2f74:	1002b01e 	bne	r2,zero,3a38 <___vfprintf_internal_r+0x15d0>
    2f78:	d9014c17 	ldw	r4,1328(sp)
    2f7c:	2080100c 	andi	r2,r4,64
    2f80:	1002ad26 	beq	r2,zero,3a38 <___vfprintf_internal_r+0x15d0>
    2f84:	3c00000b 	ldhu	r16,0(r7)
    2f88:	01000044 	movi	r4,1
    2f8c:	39c00104 	addi	r7,r7,4
    2f90:	0023883a 	mov	r17,zero
    2f94:	d9c14015 	stw	r7,1280(sp)
    2f98:	d8000405 	stb	zero,16(sp)
    2f9c:	003fc006 	br	2ea0 <___vfprintf_internal_r+0xa38>
    2fa0:	d9014f17 	ldw	r4,1340(sp)
    2fa4:	b00b883a 	mov	r5,r22
    2fa8:	d9800c04 	addi	r6,sp,48
    2fac:	00024100 	call	2410 <__sprint_r>
    2fb0:	103ee51e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    2fb4:	dc800e17 	ldw	r18,56(sp)
    2fb8:	d8c01904 	addi	r3,sp,100
    2fbc:	d9814c17 	ldw	r6,1328(sp)
    2fc0:	3080004c 	andi	r2,r6,1
    2fc4:	1005003a 	cmpeq	r2,r2,zero
    2fc8:	103ea51e 	bne	r2,zero,2a60 <___vfprintf_internal_r+0x5f8>
    2fcc:	00800044 	movi	r2,1
    2fd0:	dc400d17 	ldw	r17,52(sp)
    2fd4:	18800115 	stw	r2,4(r3)
    2fd8:	d8814917 	ldw	r2,1316(sp)
    2fdc:	94800044 	addi	r18,r18,1
    2fe0:	8c400044 	addi	r17,r17,1
    2fe4:	18800015 	stw	r2,0(r3)
    2fe8:	008001c4 	movi	r2,7
    2fec:	dc800e15 	stw	r18,56(sp)
    2ff0:	dc400d15 	stw	r17,52(sp)
    2ff4:	14421e0e 	bge	r2,r17,3870 <___vfprintf_internal_r+0x1408>
    2ff8:	d9014f17 	ldw	r4,1340(sp)
    2ffc:	b00b883a 	mov	r5,r22
    3000:	d9800c04 	addi	r6,sp,48
    3004:	00024100 	call	2410 <__sprint_r>
    3008:	103ecf1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    300c:	dc800e17 	ldw	r18,56(sp)
    3010:	d8c01904 	addi	r3,sp,100
    3014:	003e9206 	br	2a60 <___vfprintf_internal_r+0x5f8>
    3018:	d9014f17 	ldw	r4,1340(sp)
    301c:	b00b883a 	mov	r5,r22
    3020:	d9800c04 	addi	r6,sp,48
    3024:	00024100 	call	2410 <__sprint_r>
    3028:	103ec026 	beq	r2,zero,2b2c <___vfprintf_internal_r+0x6c4>
    302c:	003ec606 	br	2b48 <___vfprintf_internal_r+0x6e0>
    3030:	d9014f17 	ldw	r4,1340(sp)
    3034:	b00b883a 	mov	r5,r22
    3038:	d9800c04 	addi	r6,sp,48
    303c:	d9c15115 	stw	r7,1348(sp)
    3040:	00024100 	call	2410 <__sprint_r>
    3044:	d9c15117 	ldw	r7,1348(sp)
    3048:	103ebf1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    304c:	dc800e17 	ldw	r18,56(sp)
    3050:	dc400d17 	ldw	r17,52(sp)
    3054:	dd401904 	addi	r21,sp,100
    3058:	003e7406 	br	2a2c <___vfprintf_internal_r+0x5c4>
    305c:	d9014f17 	ldw	r4,1340(sp)
    3060:	b00b883a 	mov	r5,r22
    3064:	d9800c04 	addi	r6,sp,48
    3068:	d9c15115 	stw	r7,1348(sp)
    306c:	00024100 	call	2410 <__sprint_r>
    3070:	d9c15117 	ldw	r7,1348(sp)
    3074:	103eb41e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3078:	dd401904 	addi	r21,sp,100
    307c:	003d6d06 	br	2634 <___vfprintf_internal_r+0x1cc>
    3080:	d9014f17 	ldw	r4,1340(sp)
    3084:	b00b883a 	mov	r5,r22
    3088:	d9800c04 	addi	r6,sp,48
    308c:	d9c15115 	stw	r7,1348(sp)
    3090:	00024100 	call	2410 <__sprint_r>
    3094:	d9c15117 	ldw	r7,1348(sp)
    3098:	103eab1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    309c:	dc800e17 	ldw	r18,56(sp)
    30a0:	dc400d17 	ldw	r17,52(sp)
    30a4:	dd401904 	addi	r21,sp,100
    30a8:	003e3406 	br	297c <___vfprintf_internal_r+0x514>
    30ac:	d9014f17 	ldw	r4,1340(sp)
    30b0:	b00b883a 	mov	r5,r22
    30b4:	d9800c04 	addi	r6,sp,48
    30b8:	d9c15115 	stw	r7,1348(sp)
    30bc:	00024100 	call	2410 <__sprint_r>
    30c0:	d9c15117 	ldw	r7,1348(sp)
    30c4:	103ea01e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    30c8:	dc800e17 	ldw	r18,56(sp)
    30cc:	dc400d17 	ldw	r17,52(sp)
    30d0:	dd401904 	addi	r21,sp,100
    30d4:	003e1c06 	br	2948 <___vfprintf_internal_r+0x4e0>
    30d8:	d9014f17 	ldw	r4,1340(sp)
    30dc:	b00b883a 	mov	r5,r22
    30e0:	d9800c04 	addi	r6,sp,48
    30e4:	d9c15115 	stw	r7,1348(sp)
    30e8:	00024100 	call	2410 <__sprint_r>
    30ec:	d9c15117 	ldw	r7,1348(sp)
    30f0:	103e951e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    30f4:	dc800e17 	ldw	r18,56(sp)
    30f8:	dc400d17 	ldw	r17,52(sp)
    30fc:	dd401904 	addi	r21,sp,100
    3100:	003e0406 	br	2914 <___vfprintf_internal_r+0x4ac>
    3104:	d9000517 	ldw	r4,20(sp)
    3108:	0102520e 	bge	zero,r4,3a54 <___vfprintf_internal_r+0x15ec>
    310c:	d9814717 	ldw	r6,1308(sp)
    3110:	21807a16 	blt	r4,r6,32fc <___vfprintf_internal_r+0xe94>
    3114:	d8814117 	ldw	r2,1284(sp)
    3118:	91a5883a 	add	r18,r18,r6
    311c:	8c400044 	addi	r17,r17,1
    3120:	a8800015 	stw	r2,0(r21)
    3124:	008001c4 	movi	r2,7
    3128:	a9800115 	stw	r6,4(r21)
    312c:	dc800e15 	stw	r18,56(sp)
    3130:	dc400d15 	stw	r17,52(sp)
    3134:	1442f616 	blt	r2,r17,3d10 <___vfprintf_internal_r+0x18a8>
    3138:	a8c00204 	addi	r3,r21,8
    313c:	d9414717 	ldw	r5,1308(sp)
    3140:	2161c83a 	sub	r16,r4,r5
    3144:	043f9d0e 	bge	zero,r16,2fbc <___vfprintf_internal_r+0xb54>
    3148:	00800404 	movi	r2,16
    314c:	1402130e 	bge	r2,r16,399c <___vfprintf_internal_r+0x1534>
    3150:	dc400d17 	ldw	r17,52(sp)
    3154:	1027883a 	mov	r19,r2
    3158:	07000074 	movhi	fp,1
    315c:	e7375484 	addi	fp,fp,-8878
    3160:	050001c4 	movi	r20,7
    3164:	00000306 	br	3174 <___vfprintf_internal_r+0xd0c>
    3168:	18c00204 	addi	r3,r3,8
    316c:	843ffc04 	addi	r16,r16,-16
    3170:	9c020d0e 	bge	r19,r16,39a8 <___vfprintf_internal_r+0x1540>
    3174:	94800404 	addi	r18,r18,16
    3178:	8c400044 	addi	r17,r17,1
    317c:	1f000015 	stw	fp,0(r3)
    3180:	1cc00115 	stw	r19,4(r3)
    3184:	dc800e15 	stw	r18,56(sp)
    3188:	dc400d15 	stw	r17,52(sp)
    318c:	a47ff60e 	bge	r20,r17,3168 <___vfprintf_internal_r+0xd00>
    3190:	d9014f17 	ldw	r4,1340(sp)
    3194:	b00b883a 	mov	r5,r22
    3198:	d9800c04 	addi	r6,sp,48
    319c:	00024100 	call	2410 <__sprint_r>
    31a0:	103e691e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    31a4:	dc800e17 	ldw	r18,56(sp)
    31a8:	dc400d17 	ldw	r17,52(sp)
    31ac:	d8c01904 	addi	r3,sp,100
    31b0:	003fee06 	br	316c <___vfprintf_internal_r+0xd04>
    31b4:	d8814717 	ldw	r2,1308(sp)
    31b8:	143fffc4 	addi	r16,r2,-1
    31bc:	043e970e 	bge	zero,r16,2c1c <___vfprintf_internal_r+0x7b4>
    31c0:	00800404 	movi	r2,16
    31c4:	1400180e 	bge	r2,r16,3228 <___vfprintf_internal_r+0xdc0>
    31c8:	1029883a 	mov	r20,r2
    31cc:	07000074 	movhi	fp,1
    31d0:	e7375484 	addi	fp,fp,-8878
    31d4:	054001c4 	movi	r21,7
    31d8:	00000306 	br	31e8 <___vfprintf_internal_r+0xd80>
    31dc:	9cc00204 	addi	r19,r19,8
    31e0:	843ffc04 	addi	r16,r16,-16
    31e4:	a400120e 	bge	r20,r16,3230 <___vfprintf_internal_r+0xdc8>
    31e8:	94800404 	addi	r18,r18,16
    31ec:	8c400044 	addi	r17,r17,1
    31f0:	9f000015 	stw	fp,0(r19)
    31f4:	9d000115 	stw	r20,4(r19)
    31f8:	dc800e15 	stw	r18,56(sp)
    31fc:	dc400d15 	stw	r17,52(sp)
    3200:	ac7ff60e 	bge	r21,r17,31dc <___vfprintf_internal_r+0xd74>
    3204:	d9014f17 	ldw	r4,1340(sp)
    3208:	b00b883a 	mov	r5,r22
    320c:	d9800c04 	addi	r6,sp,48
    3210:	00024100 	call	2410 <__sprint_r>
    3214:	103e4c1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3218:	dc800e17 	ldw	r18,56(sp)
    321c:	dc400d17 	ldw	r17,52(sp)
    3220:	dcc01904 	addi	r19,sp,100
    3224:	003fee06 	br	31e0 <___vfprintf_internal_r+0xd78>
    3228:	07000074 	movhi	fp,1
    322c:	e7375484 	addi	fp,fp,-8878
    3230:	9425883a 	add	r18,r18,r16
    3234:	8c400044 	addi	r17,r17,1
    3238:	008001c4 	movi	r2,7
    323c:	9f000015 	stw	fp,0(r19)
    3240:	9c000115 	stw	r16,4(r19)
    3244:	dc800e15 	stw	r18,56(sp)
    3248:	dc400d15 	stw	r17,52(sp)
    324c:	147e720e 	bge	r2,r17,2c18 <___vfprintf_internal_r+0x7b0>
    3250:	d9014f17 	ldw	r4,1340(sp)
    3254:	b00b883a 	mov	r5,r22
    3258:	d9800c04 	addi	r6,sp,48
    325c:	00024100 	call	2410 <__sprint_r>
    3260:	103e391e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3264:	dc800e17 	ldw	r18,56(sp)
    3268:	dc400d17 	ldw	r17,52(sp)
    326c:	dcc01904 	addi	r19,sp,100
    3270:	003e6a06 	br	2c1c <___vfprintf_internal_r+0x7b4>
    3274:	d9014f17 	ldw	r4,1340(sp)
    3278:	b00b883a 	mov	r5,r22
    327c:	d9800c04 	addi	r6,sp,48
    3280:	d9c15115 	stw	r7,1348(sp)
    3284:	00024100 	call	2410 <__sprint_r>
    3288:	d9c15117 	ldw	r7,1348(sp)
    328c:	103e2e1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3290:	dc800e17 	ldw	r18,56(sp)
    3294:	dc400d17 	ldw	r17,52(sp)
    3298:	dd401904 	addi	r21,sp,100
    329c:	003dba06 	br	2988 <___vfprintf_internal_r+0x520>
    32a0:	d9014f17 	ldw	r4,1340(sp)
    32a4:	b00b883a 	mov	r5,r22
    32a8:	d9800c04 	addi	r6,sp,48
    32ac:	00024100 	call	2410 <__sprint_r>
    32b0:	103e251e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    32b4:	dc800e17 	ldw	r18,56(sp)
    32b8:	dc400d17 	ldw	r17,52(sp)
    32bc:	dcc01904 	addi	r19,sp,100
    32c0:	003e4206 	br	2bcc <___vfprintf_internal_r+0x764>
    32c4:	d9014f17 	ldw	r4,1340(sp)
    32c8:	b00b883a 	mov	r5,r22
    32cc:	d9800c04 	addi	r6,sp,48
    32d0:	00024100 	call	2410 <__sprint_r>
    32d4:	103e1c1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    32d8:	dc800e17 	ldw	r18,56(sp)
    32dc:	dc400d17 	ldw	r17,52(sp)
    32e0:	d8c01904 	addi	r3,sp,100
    32e4:	003e2e06 	br	2ba0 <___vfprintf_internal_r+0x738>
    32e8:	d9414c17 	ldw	r5,1328(sp)
    32ec:	2880004c 	andi	r2,r5,1
    32f0:	1005003a 	cmpeq	r2,r2,zero
    32f4:	103dda1e 	bne	r2,zero,2a60 <___vfprintf_internal_r+0x5f8>
    32f8:	003e9f06 	br	2d78 <___vfprintf_internal_r+0x910>
    32fc:	d8c14117 	ldw	r3,1284(sp)
    3300:	9125883a 	add	r18,r18,r4
    3304:	8c400044 	addi	r17,r17,1
    3308:	008001c4 	movi	r2,7
    330c:	a8c00015 	stw	r3,0(r21)
    3310:	a9000115 	stw	r4,4(r21)
    3314:	dc800e15 	stw	r18,56(sp)
    3318:	dc400d15 	stw	r17,52(sp)
    331c:	14426616 	blt	r2,r17,3cb8 <___vfprintf_internal_r+0x1850>
    3320:	a8c00204 	addi	r3,r21,8
    3324:	d9414917 	ldw	r5,1316(sp)
    3328:	00800044 	movi	r2,1
    332c:	94800044 	addi	r18,r18,1
    3330:	8c400044 	addi	r17,r17,1
    3334:	18800115 	stw	r2,4(r3)
    3338:	008001c4 	movi	r2,7
    333c:	19400015 	stw	r5,0(r3)
    3340:	dc800e15 	stw	r18,56(sp)
    3344:	dc400d15 	stw	r17,52(sp)
    3348:	2021883a 	mov	r16,r4
    334c:	14425016 	blt	r2,r17,3c90 <___vfprintf_internal_r+0x1828>
    3350:	19400204 	addi	r5,r3,8
    3354:	d9814717 	ldw	r6,1308(sp)
    3358:	8c400044 	addi	r17,r17,1
    335c:	dc400d15 	stw	r17,52(sp)
    3360:	3107c83a 	sub	r3,r6,r4
    3364:	d9014117 	ldw	r4,1284(sp)
    3368:	90e5883a 	add	r18,r18,r3
    336c:	28c00115 	stw	r3,4(r5)
    3370:	8105883a 	add	r2,r16,r4
    3374:	28800015 	stw	r2,0(r5)
    3378:	008001c4 	movi	r2,7
    337c:	dc800e15 	stw	r18,56(sp)
    3380:	147f1d16 	blt	r2,r17,2ff8 <___vfprintf_internal_r+0xb90>
    3384:	28c00204 	addi	r3,r5,8
    3388:	003db506 	br	2a60 <___vfprintf_internal_r+0x5f8>
    338c:	3c000017 	ldw	r16,0(r7)
    3390:	3c400117 	ldw	r17,4(r7)
    3394:	39800204 	addi	r6,r7,8
    3398:	01000044 	movi	r4,1
    339c:	d9814015 	stw	r6,1280(sp)
    33a0:	d8000405 	stb	zero,16(sp)
    33a4:	003ebe06 	br	2ea0 <___vfprintf_internal_r+0xa38>
    33a8:	3c000017 	ldw	r16,0(r7)
    33ac:	3c400117 	ldw	r17,4(r7)
    33b0:	38800204 	addi	r2,r7,8
    33b4:	d8814015 	stw	r2,1280(sp)
    33b8:	003eb706 	br	2e98 <___vfprintf_internal_r+0xa30>
    33bc:	3c000017 	ldw	r16,0(r7)
    33c0:	3c400117 	ldw	r17,4(r7)
    33c4:	39000204 	addi	r4,r7,8
    33c8:	d9014015 	stw	r4,1280(sp)
    33cc:	0009883a 	mov	r4,zero
    33d0:	d8000405 	stb	zero,16(sp)
    33d4:	003eb206 	br	2ea0 <___vfprintf_internal_r+0xa38>
    33d8:	38c00017 	ldw	r3,0(r7)
    33dc:	39c00104 	addi	r7,r7,4
    33e0:	d8c14a15 	stw	r3,1320(sp)
    33e4:	1800d10e 	bge	r3,zero,372c <___vfprintf_internal_r+0x12c4>
    33e8:	00c7c83a 	sub	r3,zero,r3
    33ec:	d8c14a15 	stw	r3,1320(sp)
    33f0:	d9014c17 	ldw	r4,1328(sp)
    33f4:	b8c00007 	ldb	r3,0(r23)
    33f8:	21000114 	ori	r4,r4,4
    33fc:	d9014c15 	stw	r4,1328(sp)
    3400:	003c9806 	br	2664 <___vfprintf_internal_r+0x1fc>
    3404:	d9814c17 	ldw	r6,1328(sp)
    3408:	3080080c 	andi	r2,r6,32
    340c:	1001f026 	beq	r2,zero,3bd0 <___vfprintf_internal_r+0x1768>
    3410:	d9014b17 	ldw	r4,1324(sp)
    3414:	38800017 	ldw	r2,0(r7)
    3418:	39c00104 	addi	r7,r7,4
    341c:	d9c14015 	stw	r7,1280(sp)
    3420:	2007d7fa 	srai	r3,r4,31
    3424:	d9c14017 	ldw	r7,1280(sp)
    3428:	11000015 	stw	r4,0(r2)
    342c:	10c00115 	stw	r3,4(r2)
    3430:	003c6906 	br	25d8 <___vfprintf_internal_r+0x170>
    3434:	b8c00007 	ldb	r3,0(r23)
    3438:	00801b04 	movi	r2,108
    343c:	18824f26 	beq	r3,r2,3d7c <___vfprintf_internal_r+0x1914>
    3440:	d9414c17 	ldw	r5,1328(sp)
    3444:	29400414 	ori	r5,r5,16
    3448:	d9414c15 	stw	r5,1328(sp)
    344c:	003c8506 	br	2664 <___vfprintf_internal_r+0x1fc>
    3450:	d9814c17 	ldw	r6,1328(sp)
    3454:	b8c00007 	ldb	r3,0(r23)
    3458:	31800814 	ori	r6,r6,32
    345c:	d9814c15 	stw	r6,1328(sp)
    3460:	003c8006 	br	2664 <___vfprintf_internal_r+0x1fc>
    3464:	d8814c17 	ldw	r2,1328(sp)
    3468:	3c000017 	ldw	r16,0(r7)
    346c:	00c01e04 	movi	r3,120
    3470:	10800094 	ori	r2,r2,2
    3474:	d8814c15 	stw	r2,1328(sp)
    3478:	39c00104 	addi	r7,r7,4
    347c:	01400074 	movhi	r5,1
    3480:	29773d04 	addi	r5,r5,-8972
    3484:	00800c04 	movi	r2,48
    3488:	0023883a 	mov	r17,zero
    348c:	01000084 	movi	r4,2
    3490:	d9c14015 	stw	r7,1280(sp)
    3494:	d8c14d15 	stw	r3,1332(sp)
    3498:	d9414415 	stw	r5,1296(sp)
    349c:	d8800445 	stb	r2,17(sp)
    34a0:	d8c00485 	stb	r3,18(sp)
    34a4:	d8000405 	stb	zero,16(sp)
    34a8:	003e7d06 	br	2ea0 <___vfprintf_internal_r+0xa38>
    34ac:	d8814c17 	ldw	r2,1328(sp)
    34b0:	b8c00007 	ldb	r3,0(r23)
    34b4:	10801014 	ori	r2,r2,64
    34b8:	d8814c15 	stw	r2,1328(sp)
    34bc:	003c6906 	br	2664 <___vfprintf_internal_r+0x1fc>
    34c0:	d9414c17 	ldw	r5,1328(sp)
    34c4:	2880020c 	andi	r2,r5,8
    34c8:	1001df26 	beq	r2,zero,3c48 <___vfprintf_internal_r+0x17e0>
    34cc:	39800017 	ldw	r6,0(r7)
    34d0:	38800204 	addi	r2,r7,8
    34d4:	d8814015 	stw	r2,1280(sp)
    34d8:	d9814215 	stw	r6,1288(sp)
    34dc:	39c00117 	ldw	r7,4(r7)
    34e0:	d9c14315 	stw	r7,1292(sp)
    34e4:	d9014217 	ldw	r4,1288(sp)
    34e8:	d9414317 	ldw	r5,1292(sp)
    34ec:	00087dc0 	call	87dc <__isinfd>
    34f0:	10021726 	beq	r2,zero,3d50 <___vfprintf_internal_r+0x18e8>
    34f4:	d9014217 	ldw	r4,1288(sp)
    34f8:	d9414317 	ldw	r5,1292(sp)
    34fc:	000d883a 	mov	r6,zero
    3500:	000f883a 	mov	r7,zero
    3504:	000a7b40 	call	a7b4 <__ltdf2>
    3508:	1002ca16 	blt	r2,zero,4034 <___vfprintf_internal_r+0x1bcc>
    350c:	d9414d17 	ldw	r5,1332(sp)
    3510:	008011c4 	movi	r2,71
    3514:	11420a16 	blt	r2,r5,3d40 <___vfprintf_internal_r+0x18d8>
    3518:	01800074 	movhi	r6,1
    351c:	31b74204 	addi	r6,r6,-8952
    3520:	d9814115 	stw	r6,1284(sp)
    3524:	d9014c17 	ldw	r4,1328(sp)
    3528:	00c000c4 	movi	r3,3
    352c:	00bfdfc4 	movi	r2,-129
    3530:	2088703a 	and	r4,r4,r2
    3534:	180f883a 	mov	r7,r3
    3538:	d8c14515 	stw	r3,1300(sp)
    353c:	d9014c15 	stw	r4,1328(sp)
    3540:	d8014615 	stw	zero,1304(sp)
    3544:	003e6a06 	br	2ef0 <___vfprintf_internal_r+0xa88>
    3548:	38800017 	ldw	r2,0(r7)
    354c:	00c00044 	movi	r3,1
    3550:	39c00104 	addi	r7,r7,4
    3554:	d9c14015 	stw	r7,1280(sp)
    3558:	d9000f04 	addi	r4,sp,60
    355c:	180f883a 	mov	r7,r3
    3560:	d8c14515 	stw	r3,1300(sp)
    3564:	d9014115 	stw	r4,1284(sp)
    3568:	d8800f05 	stb	r2,60(sp)
    356c:	d8000405 	stb	zero,16(sp)
    3570:	003cac06 	br	2824 <___vfprintf_internal_r+0x3bc>
    3574:	01400074 	movhi	r5,1
    3578:	29774804 	addi	r5,r5,-8928
    357c:	d9414415 	stw	r5,1296(sp)
    3580:	d9814c17 	ldw	r6,1328(sp)
    3584:	3080080c 	andi	r2,r6,32
    3588:	1000f926 	beq	r2,zero,3970 <___vfprintf_internal_r+0x1508>
    358c:	3c000017 	ldw	r16,0(r7)
    3590:	3c400117 	ldw	r17,4(r7)
    3594:	38800204 	addi	r2,r7,8
    3598:	d8814015 	stw	r2,1280(sp)
    359c:	d9414c17 	ldw	r5,1328(sp)
    35a0:	2880004c 	andi	r2,r5,1
    35a4:	1005003a 	cmpeq	r2,r2,zero
    35a8:	1000b31e 	bne	r2,zero,3878 <___vfprintf_internal_r+0x1410>
    35ac:	8444b03a 	or	r2,r16,r17
    35b0:	1000b126 	beq	r2,zero,3878 <___vfprintf_internal_r+0x1410>
    35b4:	d9814d17 	ldw	r6,1332(sp)
    35b8:	29400094 	ori	r5,r5,2
    35bc:	00800c04 	movi	r2,48
    35c0:	01000084 	movi	r4,2
    35c4:	d9414c15 	stw	r5,1328(sp)
    35c8:	d8800445 	stb	r2,17(sp)
    35cc:	d9800485 	stb	r6,18(sp)
    35d0:	d8000405 	stb	zero,16(sp)
    35d4:	003e3206 	br	2ea0 <___vfprintf_internal_r+0xa38>
    35d8:	01800074 	movhi	r6,1
    35dc:	31b73d04 	addi	r6,r6,-8972
    35e0:	d9814415 	stw	r6,1296(sp)
    35e4:	003fe606 	br	3580 <___vfprintf_internal_r+0x1118>
    35e8:	00800ac4 	movi	r2,43
    35ec:	d8800405 	stb	r2,16(sp)
    35f0:	b8c00007 	ldb	r3,0(r23)
    35f4:	003c1b06 	br	2664 <___vfprintf_internal_r+0x1fc>
    35f8:	d8814c17 	ldw	r2,1328(sp)
    35fc:	b8c00007 	ldb	r3,0(r23)
    3600:	10800054 	ori	r2,r2,1
    3604:	d8814c15 	stw	r2,1328(sp)
    3608:	003c1606 	br	2664 <___vfprintf_internal_r+0x1fc>
    360c:	d8800407 	ldb	r2,16(sp)
    3610:	1000461e 	bne	r2,zero,372c <___vfprintf_internal_r+0x12c4>
    3614:	00800804 	movi	r2,32
    3618:	d8800405 	stb	r2,16(sp)
    361c:	b8c00007 	ldb	r3,0(r23)
    3620:	003c1006 	br	2664 <___vfprintf_internal_r+0x1fc>
    3624:	d9814c17 	ldw	r6,1328(sp)
    3628:	b8c00007 	ldb	r3,0(r23)
    362c:	31800214 	ori	r6,r6,8
    3630:	d9814c15 	stw	r6,1328(sp)
    3634:	003c0b06 	br	2664 <___vfprintf_internal_r+0x1fc>
    3638:	0007883a 	mov	r3,zero
    363c:	01000244 	movi	r4,9
    3640:	188002a4 	muli	r2,r3,10
    3644:	b8c00007 	ldb	r3,0(r23)
    3648:	d9814d17 	ldw	r6,1332(sp)
    364c:	bdc00044 	addi	r23,r23,1
    3650:	d8c14d15 	stw	r3,1332(sp)
    3654:	d9414d17 	ldw	r5,1332(sp)
    3658:	3085883a 	add	r2,r6,r2
    365c:	10fff404 	addi	r3,r2,-48
    3660:	28bff404 	addi	r2,r5,-48
    3664:	20bff62e 	bgeu	r4,r2,3640 <___vfprintf_internal_r+0x11d8>
    3668:	d8c14a15 	stw	r3,1320(sp)
    366c:	003bff06 	br	266c <___vfprintf_internal_r+0x204>
    3670:	d9414c17 	ldw	r5,1328(sp)
    3674:	b8c00007 	ldb	r3,0(r23)
    3678:	29402014 	ori	r5,r5,128
    367c:	d9414c15 	stw	r5,1328(sp)
    3680:	003bf806 	br	2664 <___vfprintf_internal_r+0x1fc>
    3684:	b8c00007 	ldb	r3,0(r23)
    3688:	00800a84 	movi	r2,42
    368c:	bdc00044 	addi	r23,r23,1
    3690:	18831526 	beq	r3,r2,42e8 <___vfprintf_internal_r+0x1e80>
    3694:	d8c14d15 	stw	r3,1332(sp)
    3698:	18bff404 	addi	r2,r3,-48
    369c:	00c00244 	movi	r3,9
    36a0:	18827836 	bltu	r3,r2,4084 <___vfprintf_internal_r+0x1c1c>
    36a4:	000d883a 	mov	r6,zero
    36a8:	308002a4 	muli	r2,r6,10
    36ac:	b9800007 	ldb	r6,0(r23)
    36b0:	d9414d17 	ldw	r5,1332(sp)
    36b4:	bdc00044 	addi	r23,r23,1
    36b8:	d9814d15 	stw	r6,1332(sp)
    36bc:	d9014d17 	ldw	r4,1332(sp)
    36c0:	1145883a 	add	r2,r2,r5
    36c4:	11bff404 	addi	r6,r2,-48
    36c8:	20bff404 	addi	r2,r4,-48
    36cc:	18bff62e 	bgeu	r3,r2,36a8 <___vfprintf_internal_r+0x1240>
    36d0:	3027883a 	mov	r19,r6
    36d4:	303be50e 	bge	r6,zero,266c <___vfprintf_internal_r+0x204>
    36d8:	04ffffc4 	movi	r19,-1
    36dc:	003be306 	br	266c <___vfprintf_internal_r+0x204>
    36e0:	d8000405 	stb	zero,16(sp)
    36e4:	39800017 	ldw	r6,0(r7)
    36e8:	39c00104 	addi	r7,r7,4
    36ec:	d9c14015 	stw	r7,1280(sp)
    36f0:	d9814115 	stw	r6,1284(sp)
    36f4:	3001c926 	beq	r6,zero,3e1c <___vfprintf_internal_r+0x19b4>
    36f8:	98000e16 	blt	r19,zero,3734 <___vfprintf_internal_r+0x12cc>
    36fc:	d9014117 	ldw	r4,1284(sp)
    3700:	000b883a 	mov	r5,zero
    3704:	980d883a 	mov	r6,r19
    3708:	0006f980 	call	6f98 <memchr>
    370c:	10025926 	beq	r2,zero,4074 <___vfprintf_internal_r+0x1c0c>
    3710:	d8c14117 	ldw	r3,1284(sp)
    3714:	10cfc83a 	sub	r7,r2,r3
    3718:	99c19e16 	blt	r19,r7,3d94 <___vfprintf_internal_r+0x192c>
    371c:	d9c14515 	stw	r7,1300(sp)
    3720:	38000916 	blt	r7,zero,3748 <___vfprintf_internal_r+0x12e0>
    3724:	d8014615 	stw	zero,1304(sp)
    3728:	003df106 	br	2ef0 <___vfprintf_internal_r+0xa88>
    372c:	b8c00007 	ldb	r3,0(r23)
    3730:	003bcc06 	br	2664 <___vfprintf_internal_r+0x1fc>
    3734:	d9014117 	ldw	r4,1284(sp)
    3738:	000239c0 	call	239c <strlen>
    373c:	d8814515 	stw	r2,1300(sp)
    3740:	100f883a 	mov	r7,r2
    3744:	103ff70e 	bge	r2,zero,3724 <___vfprintf_internal_r+0x12bc>
    3748:	d8014515 	stw	zero,1300(sp)
    374c:	d8014615 	stw	zero,1304(sp)
    3750:	003de706 	br	2ef0 <___vfprintf_internal_r+0xa88>
    3754:	20c03fcc 	andi	r3,r4,255
    3758:	00800044 	movi	r2,1
    375c:	18802d26 	beq	r3,r2,3814 <___vfprintf_internal_r+0x13ac>
    3760:	18800e36 	bltu	r3,r2,379c <___vfprintf_internal_r+0x1334>
    3764:	00800084 	movi	r2,2
    3768:	1880fa26 	beq	r3,r2,3b54 <___vfprintf_internal_r+0x16ec>
    376c:	01000074 	movhi	r4,1
    3770:	21374d04 	addi	r4,r4,-8908
    3774:	000239c0 	call	239c <strlen>
    3778:	100f883a 	mov	r7,r2
    377c:	dcc14515 	stw	r19,1300(sp)
    3780:	9880010e 	bge	r19,r2,3788 <___vfprintf_internal_r+0x1320>
    3784:	d8814515 	stw	r2,1300(sp)
    3788:	00800074 	movhi	r2,1
    378c:	10b74d04 	addi	r2,r2,-8908
    3790:	dcc14615 	stw	r19,1304(sp)
    3794:	d8814115 	stw	r2,1284(sp)
    3798:	003dd506 	br	2ef0 <___vfprintf_internal_r+0xa88>
    379c:	d9401904 	addi	r5,sp,100
    37a0:	dd000f04 	addi	r20,sp,60
    37a4:	d9414115 	stw	r5,1284(sp)
    37a8:	880a977a 	slli	r5,r17,29
    37ac:	d9814117 	ldw	r6,1284(sp)
    37b0:	8004d0fa 	srli	r2,r16,3
    37b4:	8806d0fa 	srli	r3,r17,3
    37b8:	810001cc 	andi	r4,r16,7
    37bc:	2884b03a 	or	r2,r5,r2
    37c0:	31bfffc4 	addi	r6,r6,-1
    37c4:	21000c04 	addi	r4,r4,48
    37c8:	d9814115 	stw	r6,1284(sp)
    37cc:	10cab03a 	or	r5,r2,r3
    37d0:	31000005 	stb	r4,0(r6)
    37d4:	1021883a 	mov	r16,r2
    37d8:	1823883a 	mov	r17,r3
    37dc:	283ff21e 	bne	r5,zero,37a8 <___vfprintf_internal_r+0x1340>
    37e0:	d8c14c17 	ldw	r3,1328(sp)
    37e4:	1880004c 	andi	r2,r3,1
    37e8:	1005003a 	cmpeq	r2,r2,zero
    37ec:	103db91e 	bne	r2,zero,2ed4 <___vfprintf_internal_r+0xa6c>
    37f0:	20803fcc 	andi	r2,r4,255
    37f4:	1080201c 	xori	r2,r2,128
    37f8:	10bfe004 	addi	r2,r2,-128
    37fc:	00c00c04 	movi	r3,48
    3800:	10fdb426 	beq	r2,r3,2ed4 <___vfprintf_internal_r+0xa6c>
    3804:	31bfffc4 	addi	r6,r6,-1
    3808:	d9814115 	stw	r6,1284(sp)
    380c:	30c00005 	stb	r3,0(r6)
    3810:	003db006 	br	2ed4 <___vfprintf_internal_r+0xa6c>
    3814:	88800068 	cmpgeui	r2,r17,1
    3818:	10002c1e 	bne	r2,zero,38cc <___vfprintf_internal_r+0x1464>
    381c:	8800021e 	bne	r17,zero,3828 <___vfprintf_internal_r+0x13c0>
    3820:	00800244 	movi	r2,9
    3824:	14002936 	bltu	r2,r16,38cc <___vfprintf_internal_r+0x1464>
    3828:	d90018c4 	addi	r4,sp,99
    382c:	dd000f04 	addi	r20,sp,60
    3830:	d9014115 	stw	r4,1284(sp)
    3834:	d9014117 	ldw	r4,1284(sp)
    3838:	80800c04 	addi	r2,r16,48
    383c:	20800005 	stb	r2,0(r4)
    3840:	003da406 	br	2ed4 <___vfprintf_internal_r+0xa6c>
    3844:	dc400d17 	ldw	r17,52(sp)
    3848:	07000074 	movhi	fp,1
    384c:	e7375484 	addi	fp,fp,-8878
    3850:	9425883a 	add	r18,r18,r16
    3854:	8c400044 	addi	r17,r17,1
    3858:	008001c4 	movi	r2,7
    385c:	1f000015 	stw	fp,0(r3)
    3860:	1c000115 	stw	r16,4(r3)
    3864:	dc800e15 	stw	r18,56(sp)
    3868:	dc400d15 	stw	r17,52(sp)
    386c:	147de216 	blt	r2,r17,2ff8 <___vfprintf_internal_r+0xb90>
    3870:	18c00204 	addi	r3,r3,8
    3874:	003c7a06 	br	2a60 <___vfprintf_internal_r+0x5f8>
    3878:	01000084 	movi	r4,2
    387c:	d8000405 	stb	zero,16(sp)
    3880:	003d8706 	br	2ea0 <___vfprintf_internal_r+0xa38>
    3884:	d9814c17 	ldw	r6,1328(sp)
    3888:	30c4703a 	and	r2,r6,r3
    388c:	1005003a 	cmpeq	r2,r2,zero
    3890:	103cb926 	beq	r2,zero,2b78 <___vfprintf_internal_r+0x710>
    3894:	d9014117 	ldw	r4,1284(sp)
    3898:	94800044 	addi	r18,r18,1
    389c:	8c400044 	addi	r17,r17,1
    38a0:	008001c4 	movi	r2,7
    38a4:	a9000015 	stw	r4,0(r21)
    38a8:	a8c00115 	stw	r3,4(r21)
    38ac:	dc800e15 	stw	r18,56(sp)
    38b0:	dc400d15 	stw	r17,52(sp)
    38b4:	147e6616 	blt	r2,r17,3250 <___vfprintf_internal_r+0xde8>
    38b8:	acc00204 	addi	r19,r21,8
    38bc:	003cd706 	br	2c1c <___vfprintf_internal_r+0x7b4>
    38c0:	07000074 	movhi	fp,1
    38c4:	e7375484 	addi	fp,fp,-8878
    38c8:	003c4f06 	br	2a08 <___vfprintf_internal_r+0x5a0>
    38cc:	dd000f04 	addi	r20,sp,60
    38d0:	dc801904 	addi	r18,sp,100
    38d4:	8009883a 	mov	r4,r16
    38d8:	880b883a 	mov	r5,r17
    38dc:	01800284 	movi	r6,10
    38e0:	000f883a 	mov	r7,zero
    38e4:	00094c40 	call	94c4 <__umoddi3>
    38e8:	12000c04 	addi	r8,r2,48
    38ec:	94bfffc4 	addi	r18,r18,-1
    38f0:	8009883a 	mov	r4,r16
    38f4:	880b883a 	mov	r5,r17
    38f8:	01800284 	movi	r6,10
    38fc:	000f883a 	mov	r7,zero
    3900:	92000005 	stb	r8,0(r18)
    3904:	0008ee80 	call	8ee8 <__udivdi3>
    3908:	1009883a 	mov	r4,r2
    390c:	1021883a 	mov	r16,r2
    3910:	18800068 	cmpgeui	r2,r3,1
    3914:	1823883a 	mov	r17,r3
    3918:	103fee1e 	bne	r2,zero,38d4 <___vfprintf_internal_r+0x146c>
    391c:	1800021e 	bne	r3,zero,3928 <___vfprintf_internal_r+0x14c0>
    3920:	00800244 	movi	r2,9
    3924:	113feb36 	bltu	r2,r4,38d4 <___vfprintf_internal_r+0x146c>
    3928:	94bfffc4 	addi	r18,r18,-1
    392c:	dc814115 	stw	r18,1284(sp)
    3930:	003fc006 	br	3834 <___vfprintf_internal_r+0x13cc>
    3934:	d9014c17 	ldw	r4,1328(sp)
    3938:	2080004c 	andi	r2,r4,1
    393c:	10009a1e 	bne	r2,zero,3ba8 <___vfprintf_internal_r+0x1740>
    3940:	d9401904 	addi	r5,sp,100
    3944:	dd000f04 	addi	r20,sp,60
    3948:	d9414115 	stw	r5,1284(sp)
    394c:	003d6106 	br	2ed4 <___vfprintf_internal_r+0xa6c>
    3950:	d9014f17 	ldw	r4,1340(sp)
    3954:	b00b883a 	mov	r5,r22
    3958:	d9800c04 	addi	r6,sp,48
    395c:	00024100 	call	2410 <__sprint_r>
    3960:	103c791e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3964:	dc800e17 	ldw	r18,56(sp)
    3968:	d8c01904 	addi	r3,sp,100
    396c:	003cff06 	br	2d6c <___vfprintf_internal_r+0x904>
    3970:	d8c14c17 	ldw	r3,1328(sp)
    3974:	1880040c 	andi	r2,r3,16
    3978:	1000711e 	bne	r2,zero,3b40 <___vfprintf_internal_r+0x16d8>
    397c:	d9014c17 	ldw	r4,1328(sp)
    3980:	2080100c 	andi	r2,r4,64
    3984:	10006e26 	beq	r2,zero,3b40 <___vfprintf_internal_r+0x16d8>
    3988:	3c00000b 	ldhu	r16,0(r7)
    398c:	0023883a 	mov	r17,zero
    3990:	39c00104 	addi	r7,r7,4
    3994:	d9c14015 	stw	r7,1280(sp)
    3998:	003f0006 	br	359c <___vfprintf_internal_r+0x1134>
    399c:	dc400d17 	ldw	r17,52(sp)
    39a0:	07000074 	movhi	fp,1
    39a4:	e7375484 	addi	fp,fp,-8878
    39a8:	9425883a 	add	r18,r18,r16
    39ac:	8c400044 	addi	r17,r17,1
    39b0:	008001c4 	movi	r2,7
    39b4:	1f000015 	stw	fp,0(r3)
    39b8:	1c000115 	stw	r16,4(r3)
    39bc:	dc800e15 	stw	r18,56(sp)
    39c0:	dc400d15 	stw	r17,52(sp)
    39c4:	147d7616 	blt	r2,r17,2fa0 <___vfprintf_internal_r+0xb38>
    39c8:	18c00204 	addi	r3,r3,8
    39cc:	003d7b06 	br	2fbc <___vfprintf_internal_r+0xb54>
    39d0:	dc800e17 	ldw	r18,56(sp)
    39d4:	dc400d17 	ldw	r17,52(sp)
    39d8:	07000074 	movhi	fp,1
    39dc:	e7375884 	addi	fp,fp,-8862
    39e0:	003bc006 	br	28e4 <___vfprintf_internal_r+0x47c>
    39e4:	d9014f17 	ldw	r4,1340(sp)
    39e8:	b00b883a 	mov	r5,r22
    39ec:	d9800c04 	addi	r6,sp,48
    39f0:	00024100 	call	2410 <__sprint_r>
    39f4:	103c541e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    39f8:	dc800e17 	ldw	r18,56(sp)
    39fc:	d8c01904 	addi	r3,sp,100
    3a00:	003ce906 	br	2da8 <___vfprintf_internal_r+0x940>
    3a04:	3c000017 	ldw	r16,0(r7)
    3a08:	0009883a 	mov	r4,zero
    3a0c:	39c00104 	addi	r7,r7,4
    3a10:	0023883a 	mov	r17,zero
    3a14:	d9c14015 	stw	r7,1280(sp)
    3a18:	d8000405 	stb	zero,16(sp)
    3a1c:	003d2006 	br	2ea0 <___vfprintf_internal_r+0xa38>
    3a20:	38800017 	ldw	r2,0(r7)
    3a24:	39c00104 	addi	r7,r7,4
    3a28:	d9c14015 	stw	r7,1280(sp)
    3a2c:	1023d7fa 	srai	r17,r2,31
    3a30:	1021883a 	mov	r16,r2
    3a34:	003d1806 	br	2e98 <___vfprintf_internal_r+0xa30>
    3a38:	3c000017 	ldw	r16,0(r7)
    3a3c:	01000044 	movi	r4,1
    3a40:	39c00104 	addi	r7,r7,4
    3a44:	0023883a 	mov	r17,zero
    3a48:	d9c14015 	stw	r7,1280(sp)
    3a4c:	d8000405 	stb	zero,16(sp)
    3a50:	003d1306 	br	2ea0 <___vfprintf_internal_r+0xa38>
    3a54:	00800074 	movhi	r2,1
    3a58:	10b75404 	addi	r2,r2,-8880
    3a5c:	94800044 	addi	r18,r18,1
    3a60:	8c400044 	addi	r17,r17,1
    3a64:	a8800015 	stw	r2,0(r21)
    3a68:	00c00044 	movi	r3,1
    3a6c:	008001c4 	movi	r2,7
    3a70:	a8c00115 	stw	r3,4(r21)
    3a74:	dc800e15 	stw	r18,56(sp)
    3a78:	dc400d15 	stw	r17,52(sp)
    3a7c:	1440ca16 	blt	r2,r17,3da8 <___vfprintf_internal_r+0x1940>
    3a80:	a8c00204 	addi	r3,r21,8
    3a84:	2000061e 	bne	r4,zero,3aa0 <___vfprintf_internal_r+0x1638>
    3a88:	d9414717 	ldw	r5,1308(sp)
    3a8c:	2800041e 	bne	r5,zero,3aa0 <___vfprintf_internal_r+0x1638>
    3a90:	d9814c17 	ldw	r6,1328(sp)
    3a94:	3080004c 	andi	r2,r6,1
    3a98:	1005003a 	cmpeq	r2,r2,zero
    3a9c:	103bf01e 	bne	r2,zero,2a60 <___vfprintf_internal_r+0x5f8>
    3aa0:	00800044 	movi	r2,1
    3aa4:	dc400d17 	ldw	r17,52(sp)
    3aa8:	18800115 	stw	r2,4(r3)
    3aac:	d8814917 	ldw	r2,1316(sp)
    3ab0:	94800044 	addi	r18,r18,1
    3ab4:	8c400044 	addi	r17,r17,1
    3ab8:	18800015 	stw	r2,0(r3)
    3abc:	008001c4 	movi	r2,7
    3ac0:	dc800e15 	stw	r18,56(sp)
    3ac4:	dc400d15 	stw	r17,52(sp)
    3ac8:	1440ca16 	blt	r2,r17,3df4 <___vfprintf_internal_r+0x198c>
    3acc:	18c00204 	addi	r3,r3,8
    3ad0:	0121c83a 	sub	r16,zero,r4
    3ad4:	0400500e 	bge	zero,r16,3c18 <___vfprintf_internal_r+0x17b0>
    3ad8:	00800404 	movi	r2,16
    3adc:	1400800e 	bge	r2,r16,3ce0 <___vfprintf_internal_r+0x1878>
    3ae0:	1027883a 	mov	r19,r2
    3ae4:	07000074 	movhi	fp,1
    3ae8:	e7375484 	addi	fp,fp,-8878
    3aec:	050001c4 	movi	r20,7
    3af0:	00000306 	br	3b00 <___vfprintf_internal_r+0x1698>
    3af4:	18c00204 	addi	r3,r3,8
    3af8:	843ffc04 	addi	r16,r16,-16
    3afc:	9c007a0e 	bge	r19,r16,3ce8 <___vfprintf_internal_r+0x1880>
    3b00:	94800404 	addi	r18,r18,16
    3b04:	8c400044 	addi	r17,r17,1
    3b08:	1f000015 	stw	fp,0(r3)
    3b0c:	1cc00115 	stw	r19,4(r3)
    3b10:	dc800e15 	stw	r18,56(sp)
    3b14:	dc400d15 	stw	r17,52(sp)
    3b18:	a47ff60e 	bge	r20,r17,3af4 <___vfprintf_internal_r+0x168c>
    3b1c:	d9014f17 	ldw	r4,1340(sp)
    3b20:	b00b883a 	mov	r5,r22
    3b24:	d9800c04 	addi	r6,sp,48
    3b28:	00024100 	call	2410 <__sprint_r>
    3b2c:	103c061e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3b30:	dc800e17 	ldw	r18,56(sp)
    3b34:	dc400d17 	ldw	r17,52(sp)
    3b38:	d8c01904 	addi	r3,sp,100
    3b3c:	003fee06 	br	3af8 <___vfprintf_internal_r+0x1690>
    3b40:	3c000017 	ldw	r16,0(r7)
    3b44:	0023883a 	mov	r17,zero
    3b48:	39c00104 	addi	r7,r7,4
    3b4c:	d9c14015 	stw	r7,1280(sp)
    3b50:	003e9206 	br	359c <___vfprintf_internal_r+0x1134>
    3b54:	d9401904 	addi	r5,sp,100
    3b58:	dd000f04 	addi	r20,sp,60
    3b5c:	d9414115 	stw	r5,1284(sp)
    3b60:	d9814417 	ldw	r6,1296(sp)
    3b64:	880a973a 	slli	r5,r17,28
    3b68:	8004d13a 	srli	r2,r16,4
    3b6c:	810003cc 	andi	r4,r16,15
    3b70:	3109883a 	add	r4,r6,r4
    3b74:	2884b03a 	or	r2,r5,r2
    3b78:	21400003 	ldbu	r5,0(r4)
    3b7c:	d9014117 	ldw	r4,1284(sp)
    3b80:	8806d13a 	srli	r3,r17,4
    3b84:	1021883a 	mov	r16,r2
    3b88:	213fffc4 	addi	r4,r4,-1
    3b8c:	d9014115 	stw	r4,1284(sp)
    3b90:	d9814117 	ldw	r6,1284(sp)
    3b94:	10c8b03a 	or	r4,r2,r3
    3b98:	1823883a 	mov	r17,r3
    3b9c:	31400005 	stb	r5,0(r6)
    3ba0:	203fef1e 	bne	r4,zero,3b60 <___vfprintf_internal_r+0x16f8>
    3ba4:	003ccb06 	br	2ed4 <___vfprintf_internal_r+0xa6c>
    3ba8:	00800c04 	movi	r2,48
    3bac:	d98018c4 	addi	r6,sp,99
    3bb0:	dd000f04 	addi	r20,sp,60
    3bb4:	d88018c5 	stb	r2,99(sp)
    3bb8:	d9814115 	stw	r6,1284(sp)
    3bbc:	003cc506 	br	2ed4 <___vfprintf_internal_r+0xa6c>
    3bc0:	dc400d17 	ldw	r17,52(sp)
    3bc4:	07000074 	movhi	fp,1
    3bc8:	e7375884 	addi	fp,fp,-8862
    3bcc:	003bc706 	br	2aec <___vfprintf_internal_r+0x684>
    3bd0:	d9414c17 	ldw	r5,1328(sp)
    3bd4:	2880040c 	andi	r2,r5,16
    3bd8:	10007c26 	beq	r2,zero,3dcc <___vfprintf_internal_r+0x1964>
    3bdc:	38800017 	ldw	r2,0(r7)
    3be0:	39c00104 	addi	r7,r7,4
    3be4:	d9c14015 	stw	r7,1280(sp)
    3be8:	d9814b17 	ldw	r6,1324(sp)
    3bec:	d9c14017 	ldw	r7,1280(sp)
    3bf0:	11800015 	stw	r6,0(r2)
    3bf4:	003a7806 	br	25d8 <___vfprintf_internal_r+0x170>
    3bf8:	d9014f17 	ldw	r4,1340(sp)
    3bfc:	b00b883a 	mov	r5,r22
    3c00:	d9800c04 	addi	r6,sp,48
    3c04:	00024100 	call	2410 <__sprint_r>
    3c08:	103bcf1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3c0c:	dc800e17 	ldw	r18,56(sp)
    3c10:	dc400d17 	ldw	r17,52(sp)
    3c14:	d8c01904 	addi	r3,sp,100
    3c18:	d9014717 	ldw	r4,1308(sp)
    3c1c:	d9414117 	ldw	r5,1284(sp)
    3c20:	8c400044 	addi	r17,r17,1
    3c24:	9125883a 	add	r18,r18,r4
    3c28:	008001c4 	movi	r2,7
    3c2c:	19400015 	stw	r5,0(r3)
    3c30:	19000115 	stw	r4,4(r3)
    3c34:	dc800e15 	stw	r18,56(sp)
    3c38:	dc400d15 	stw	r17,52(sp)
    3c3c:	147cee16 	blt	r2,r17,2ff8 <___vfprintf_internal_r+0xb90>
    3c40:	18c00204 	addi	r3,r3,8
    3c44:	003b8606 	br	2a60 <___vfprintf_internal_r+0x5f8>
    3c48:	38c00017 	ldw	r3,0(r7)
    3c4c:	39000204 	addi	r4,r7,8
    3c50:	d9014015 	stw	r4,1280(sp)
    3c54:	d8c14215 	stw	r3,1288(sp)
    3c58:	39c00117 	ldw	r7,4(r7)
    3c5c:	d9c14315 	stw	r7,1292(sp)
    3c60:	003e2006 	br	34e4 <___vfprintf_internal_r+0x107c>
    3c64:	0005883a 	mov	r2,zero
    3c68:	1409c83a 	sub	r4,r2,r16
    3c6c:	1105803a 	cmpltu	r2,r2,r4
    3c70:	044bc83a 	sub	r5,zero,r17
    3c74:	2885c83a 	sub	r2,r5,r2
    3c78:	2021883a 	mov	r16,r4
    3c7c:	1023883a 	mov	r17,r2
    3c80:	01000044 	movi	r4,1
    3c84:	00800b44 	movi	r2,45
    3c88:	d8800405 	stb	r2,16(sp)
    3c8c:	003c8406 	br	2ea0 <___vfprintf_internal_r+0xa38>
    3c90:	d9014f17 	ldw	r4,1340(sp)
    3c94:	b00b883a 	mov	r5,r22
    3c98:	d9800c04 	addi	r6,sp,48
    3c9c:	00024100 	call	2410 <__sprint_r>
    3ca0:	103ba91e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3ca4:	dc800e17 	ldw	r18,56(sp)
    3ca8:	dc400d17 	ldw	r17,52(sp)
    3cac:	d9000517 	ldw	r4,20(sp)
    3cb0:	d9401904 	addi	r5,sp,100
    3cb4:	003da706 	br	3354 <___vfprintf_internal_r+0xeec>
    3cb8:	d9014f17 	ldw	r4,1340(sp)
    3cbc:	b00b883a 	mov	r5,r22
    3cc0:	d9800c04 	addi	r6,sp,48
    3cc4:	00024100 	call	2410 <__sprint_r>
    3cc8:	103b9f1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3ccc:	dc800e17 	ldw	r18,56(sp)
    3cd0:	dc400d17 	ldw	r17,52(sp)
    3cd4:	d9000517 	ldw	r4,20(sp)
    3cd8:	d8c01904 	addi	r3,sp,100
    3cdc:	003d9106 	br	3324 <___vfprintf_internal_r+0xebc>
    3ce0:	07000074 	movhi	fp,1
    3ce4:	e7375484 	addi	fp,fp,-8878
    3ce8:	9425883a 	add	r18,r18,r16
    3cec:	8c400044 	addi	r17,r17,1
    3cf0:	008001c4 	movi	r2,7
    3cf4:	1f000015 	stw	fp,0(r3)
    3cf8:	1c000115 	stw	r16,4(r3)
    3cfc:	dc800e15 	stw	r18,56(sp)
    3d00:	dc400d15 	stw	r17,52(sp)
    3d04:	147fbc16 	blt	r2,r17,3bf8 <___vfprintf_internal_r+0x1790>
    3d08:	18c00204 	addi	r3,r3,8
    3d0c:	003fc206 	br	3c18 <___vfprintf_internal_r+0x17b0>
    3d10:	d9014f17 	ldw	r4,1340(sp)
    3d14:	b00b883a 	mov	r5,r22
    3d18:	d9800c04 	addi	r6,sp,48
    3d1c:	00024100 	call	2410 <__sprint_r>
    3d20:	103b891e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3d24:	dc800e17 	ldw	r18,56(sp)
    3d28:	d9000517 	ldw	r4,20(sp)
    3d2c:	d8c01904 	addi	r3,sp,100
    3d30:	003d0206 	br	313c <___vfprintf_internal_r+0xcd4>
    3d34:	07000074 	movhi	fp,1
    3d38:	e7375484 	addi	fp,fp,-8878
    3d3c:	003be406 	br	2cd0 <___vfprintf_internal_r+0x868>
    3d40:	00800074 	movhi	r2,1
    3d44:	10b74304 	addi	r2,r2,-8948
    3d48:	d8814115 	stw	r2,1284(sp)
    3d4c:	003df506 	br	3524 <___vfprintf_internal_r+0x10bc>
    3d50:	d9014217 	ldw	r4,1288(sp)
    3d54:	d9414317 	ldw	r5,1292(sp)
    3d58:	000881c0 	call	881c <__isnand>
    3d5c:	10003926 	beq	r2,zero,3e44 <___vfprintf_internal_r+0x19dc>
    3d60:	d9414d17 	ldw	r5,1332(sp)
    3d64:	008011c4 	movi	r2,71
    3d68:	1140ce16 	blt	r2,r5,40a4 <___vfprintf_internal_r+0x1c3c>
    3d6c:	01800074 	movhi	r6,1
    3d70:	31b74404 	addi	r6,r6,-8944
    3d74:	d9814115 	stw	r6,1284(sp)
    3d78:	003dea06 	br	3524 <___vfprintf_internal_r+0x10bc>
    3d7c:	d9014c17 	ldw	r4,1328(sp)
    3d80:	bdc00044 	addi	r23,r23,1
    3d84:	b8c00007 	ldb	r3,0(r23)
    3d88:	21000814 	ori	r4,r4,32
    3d8c:	d9014c15 	stw	r4,1328(sp)
    3d90:	003a3406 	br	2664 <___vfprintf_internal_r+0x1fc>
    3d94:	dcc14515 	stw	r19,1300(sp)
    3d98:	98011016 	blt	r19,zero,41dc <___vfprintf_internal_r+0x1d74>
    3d9c:	980f883a 	mov	r7,r19
    3da0:	d8014615 	stw	zero,1304(sp)
    3da4:	003c5206 	br	2ef0 <___vfprintf_internal_r+0xa88>
    3da8:	d9014f17 	ldw	r4,1340(sp)
    3dac:	b00b883a 	mov	r5,r22
    3db0:	d9800c04 	addi	r6,sp,48
    3db4:	00024100 	call	2410 <__sprint_r>
    3db8:	103b631e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3dbc:	dc800e17 	ldw	r18,56(sp)
    3dc0:	d9000517 	ldw	r4,20(sp)
    3dc4:	d8c01904 	addi	r3,sp,100
    3dc8:	003f2e06 	br	3a84 <___vfprintf_internal_r+0x161c>
    3dcc:	d8c14c17 	ldw	r3,1328(sp)
    3dd0:	1880100c 	andi	r2,r3,64
    3dd4:	1000a026 	beq	r2,zero,4058 <___vfprintf_internal_r+0x1bf0>
    3dd8:	38800017 	ldw	r2,0(r7)
    3ddc:	39c00104 	addi	r7,r7,4
    3de0:	d9c14015 	stw	r7,1280(sp)
    3de4:	d9014b17 	ldw	r4,1324(sp)
    3de8:	d9c14017 	ldw	r7,1280(sp)
    3dec:	1100000d 	sth	r4,0(r2)
    3df0:	0039f906 	br	25d8 <___vfprintf_internal_r+0x170>
    3df4:	d9014f17 	ldw	r4,1340(sp)
    3df8:	b00b883a 	mov	r5,r22
    3dfc:	d9800c04 	addi	r6,sp,48
    3e00:	00024100 	call	2410 <__sprint_r>
    3e04:	103b501e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    3e08:	dc800e17 	ldw	r18,56(sp)
    3e0c:	dc400d17 	ldw	r17,52(sp)
    3e10:	d9000517 	ldw	r4,20(sp)
    3e14:	d8c01904 	addi	r3,sp,100
    3e18:	003f2d06 	br	3ad0 <___vfprintf_internal_r+0x1668>
    3e1c:	00800184 	movi	r2,6
    3e20:	14c09a36 	bltu	r2,r19,408c <___vfprintf_internal_r+0x1c24>
    3e24:	dcc14515 	stw	r19,1300(sp)
    3e28:	9800010e 	bge	r19,zero,3e30 <___vfprintf_internal_r+0x19c8>
    3e2c:	d8014515 	stw	zero,1300(sp)
    3e30:	00800074 	movhi	r2,1
    3e34:	10b74604 	addi	r2,r2,-8936
    3e38:	980f883a 	mov	r7,r19
    3e3c:	d8814115 	stw	r2,1284(sp)
    3e40:	003a7806 	br	2824 <___vfprintf_internal_r+0x3bc>
    3e44:	00bfffc4 	movi	r2,-1
    3e48:	9880e226 	beq	r19,r2,41d4 <___vfprintf_internal_r+0x1d6c>
    3e4c:	d9414d17 	ldw	r5,1332(sp)
    3e50:	008019c4 	movi	r2,103
    3e54:	2880dc26 	beq	r5,r2,41c8 <___vfprintf_internal_r+0x1d60>
    3e58:	008011c4 	movi	r2,71
    3e5c:	2880da26 	beq	r5,r2,41c8 <___vfprintf_internal_r+0x1d60>
    3e60:	d9414c17 	ldw	r5,1328(sp)
    3e64:	d9014317 	ldw	r4,1292(sp)
    3e68:	d9814217 	ldw	r6,1288(sp)
    3e6c:	29404014 	ori	r5,r5,256
    3e70:	d9414c15 	stw	r5,1328(sp)
    3e74:	2000cc16 	blt	r4,zero,41a8 <___vfprintf_internal_r+0x1d40>
    3e78:	3021883a 	mov	r16,r6
    3e7c:	2023883a 	mov	r17,r4
    3e80:	0039883a 	mov	fp,zero
    3e84:	d9414d17 	ldw	r5,1332(sp)
    3e88:	00801984 	movi	r2,102
    3e8c:	2880b726 	beq	r5,r2,416c <___vfprintf_internal_r+0x1d04>
    3e90:	00801184 	movi	r2,70
    3e94:	2880b526 	beq	r5,r2,416c <___vfprintf_internal_r+0x1d04>
    3e98:	00801944 	movi	r2,101
    3e9c:	2880c826 	beq	r5,r2,41c0 <___vfprintf_internal_r+0x1d58>
    3ea0:	00801144 	movi	r2,69
    3ea4:	2880c626 	beq	r5,r2,41c0 <___vfprintf_internal_r+0x1d58>
    3ea8:	9829883a 	mov	r20,r19
    3eac:	d9014f17 	ldw	r4,1340(sp)
    3eb0:	d8800504 	addi	r2,sp,20
    3eb4:	880d883a 	mov	r6,r17
    3eb8:	d8800115 	stw	r2,4(sp)
    3ebc:	d8c00604 	addi	r3,sp,24
    3ec0:	d8800704 	addi	r2,sp,28
    3ec4:	800b883a 	mov	r5,r16
    3ec8:	01c00084 	movi	r7,2
    3ecc:	d8c00215 	stw	r3,8(sp)
    3ed0:	d8800315 	stw	r2,12(sp)
    3ed4:	dd000015 	stw	r20,0(sp)
    3ed8:	00048400 	call	4840 <_dtoa_r>
    3edc:	d9814d17 	ldw	r6,1332(sp)
    3ee0:	d8814115 	stw	r2,1284(sp)
    3ee4:	008019c4 	movi	r2,103
    3ee8:	30809526 	beq	r6,r2,4140 <___vfprintf_internal_r+0x1cd8>
    3eec:	d8c14d17 	ldw	r3,1332(sp)
    3ef0:	008011c4 	movi	r2,71
    3ef4:	18809226 	beq	r3,r2,4140 <___vfprintf_internal_r+0x1cd8>
    3ef8:	d9414117 	ldw	r5,1284(sp)
    3efc:	d9814d17 	ldw	r6,1332(sp)
    3f00:	00801984 	movi	r2,102
    3f04:	2d25883a 	add	r18,r5,r20
    3f08:	30808626 	beq	r6,r2,4124 <___vfprintf_internal_r+0x1cbc>
    3f0c:	00801184 	movi	r2,70
    3f10:	30808426 	beq	r6,r2,4124 <___vfprintf_internal_r+0x1cbc>
    3f14:	000d883a 	mov	r6,zero
    3f18:	000f883a 	mov	r7,zero
    3f1c:	880b883a 	mov	r5,r17
    3f20:	8009883a 	mov	r4,r16
    3f24:	000a5940 	call	a594 <__eqdf2>
    3f28:	1000751e 	bne	r2,zero,4100 <___vfprintf_internal_r+0x1c98>
    3f2c:	9005883a 	mov	r2,r18
    3f30:	dc800715 	stw	r18,28(sp)
    3f34:	d9014117 	ldw	r4,1284(sp)
    3f38:	d9414d17 	ldw	r5,1332(sp)
    3f3c:	00c019c4 	movi	r3,103
    3f40:	1125c83a 	sub	r18,r2,r4
    3f44:	28c06826 	beq	r5,r3,40e8 <___vfprintf_internal_r+0x1c80>
    3f48:	008011c4 	movi	r2,71
    3f4c:	28806626 	beq	r5,r2,40e8 <___vfprintf_internal_r+0x1c80>
    3f50:	d9000517 	ldw	r4,20(sp)
    3f54:	d8c14d17 	ldw	r3,1332(sp)
    3f58:	00801944 	movi	r2,101
    3f5c:	10c05516 	blt	r2,r3,40b4 <___vfprintf_internal_r+0x1c4c>
    3f60:	213fffc4 	addi	r4,r4,-1
    3f64:	d9000515 	stw	r4,20(sp)
    3f68:	d8c00805 	stb	r3,32(sp)
    3f6c:	2021883a 	mov	r16,r4
    3f70:	2000c116 	blt	r4,zero,4278 <___vfprintf_internal_r+0x1e10>
    3f74:	00800ac4 	movi	r2,43
    3f78:	d8800845 	stb	r2,33(sp)
    3f7c:	00800244 	movi	r2,9
    3f80:	1400af0e 	bge	r2,r16,4240 <___vfprintf_internal_r+0x1dd8>
    3f84:	1027883a 	mov	r19,r2
    3f88:	dc400b84 	addi	r17,sp,46
    3f8c:	8009883a 	mov	r4,r16
    3f90:	01400284 	movi	r5,10
    3f94:	00019500 	call	1950 <__modsi3>
    3f98:	10800c04 	addi	r2,r2,48
    3f9c:	8c7fffc4 	addi	r17,r17,-1
    3fa0:	8009883a 	mov	r4,r16
    3fa4:	01400284 	movi	r5,10
    3fa8:	88800005 	stb	r2,0(r17)
    3fac:	00018f00 	call	18f0 <__divsi3>
    3fb0:	1021883a 	mov	r16,r2
    3fb4:	98bff516 	blt	r19,r2,3f8c <___vfprintf_internal_r+0x1b24>
    3fb8:	10c00c04 	addi	r3,r2,48
    3fbc:	d88009c4 	addi	r2,sp,39
    3fc0:	108001c4 	addi	r2,r2,7
    3fc4:	897fffc4 	addi	r5,r17,-1
    3fc8:	88ffffc5 	stb	r3,-1(r17)
    3fcc:	2880a72e 	bgeu	r5,r2,426c <___vfprintf_internal_r+0x1e04>
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	d9800804 	addi	r6,sp,32
    3fd8:	d8c00884 	addi	r3,sp,34
    3fdc:	28800003 	ldbu	r2,0(r5)
    3fe0:	29400044 	addi	r5,r5,1
    3fe4:	18800005 	stb	r2,0(r3)
    3fe8:	18c00044 	addi	r3,r3,1
    3fec:	293ffb36 	bltu	r5,r4,3fdc <___vfprintf_internal_r+0x1b74>
    3ff0:	1987c83a 	sub	r3,r3,r6
    3ff4:	00800044 	movi	r2,1
    3ff8:	d8c14815 	stw	r3,1312(sp)
    3ffc:	90cf883a 	add	r7,r18,r3
    4000:	1480960e 	bge	r2,r18,425c <___vfprintf_internal_r+0x1df4>
    4004:	39c00044 	addi	r7,r7,1
    4008:	d9c14515 	stw	r7,1300(sp)
    400c:	38003416 	blt	r7,zero,40e0 <___vfprintf_internal_r+0x1c78>
    4010:	e0803fcc 	andi	r2,fp,255
    4014:	1080201c 	xori	r2,r2,128
    4018:	10bfe004 	addi	r2,r2,-128
    401c:	10004e26 	beq	r2,zero,4158 <___vfprintf_internal_r+0x1cf0>
    4020:	00800b44 	movi	r2,45
    4024:	dc814715 	stw	r18,1308(sp)
    4028:	d8014615 	stw	zero,1304(sp)
    402c:	d8800405 	stb	r2,16(sp)
    4030:	003bb106 	br	2ef8 <___vfprintf_internal_r+0xa90>
    4034:	00800b44 	movi	r2,45
    4038:	d8800405 	stb	r2,16(sp)
    403c:	003d3306 	br	350c <___vfprintf_internal_r+0x10a4>
    4040:	d9014f17 	ldw	r4,1340(sp)
    4044:	b00b883a 	mov	r5,r22
    4048:	d9800c04 	addi	r6,sp,48
    404c:	00024100 	call	2410 <__sprint_r>
    4050:	103abd1e 	bne	r2,zero,2b48 <___vfprintf_internal_r+0x6e0>
    4054:	003abb06 	br	2b44 <___vfprintf_internal_r+0x6dc>
    4058:	38800017 	ldw	r2,0(r7)
    405c:	39c00104 	addi	r7,r7,4
    4060:	d9c14015 	stw	r7,1280(sp)
    4064:	d9414b17 	ldw	r5,1324(sp)
    4068:	d9c14017 	ldw	r7,1280(sp)
    406c:	11400015 	stw	r5,0(r2)
    4070:	00395906 	br	25d8 <___vfprintf_internal_r+0x170>
    4074:	980f883a 	mov	r7,r19
    4078:	dcc14515 	stw	r19,1300(sp)
    407c:	d8014615 	stw	zero,1304(sp)
    4080:	003b9b06 	br	2ef0 <___vfprintf_internal_r+0xa88>
    4084:	0027883a 	mov	r19,zero
    4088:	00397806 	br	266c <___vfprintf_internal_r+0x204>
    408c:	00c00074 	movhi	r3,1
    4090:	18f74604 	addi	r3,r3,-8936
    4094:	100f883a 	mov	r7,r2
    4098:	d8814515 	stw	r2,1300(sp)
    409c:	d8c14115 	stw	r3,1284(sp)
    40a0:	0039e006 	br	2824 <___vfprintf_internal_r+0x3bc>
    40a4:	00800074 	movhi	r2,1
    40a8:	10b74504 	addi	r2,r2,-8940
    40ac:	d8814115 	stw	r2,1284(sp)
    40b0:	003d1c06 	br	3524 <___vfprintf_internal_r+0x10bc>
    40b4:	d9414d17 	ldw	r5,1332(sp)
    40b8:	00801984 	movi	r2,102
    40bc:	28804926 	beq	r5,r2,41e4 <___vfprintf_internal_r+0x1d7c>
    40c0:	200f883a 	mov	r7,r4
    40c4:	24805716 	blt	r4,r18,4224 <___vfprintf_internal_r+0x1dbc>
    40c8:	d9414c17 	ldw	r5,1328(sp)
    40cc:	2880004c 	andi	r2,r5,1
    40d0:	10000126 	beq	r2,zero,40d8 <___vfprintf_internal_r+0x1c70>
    40d4:	21c00044 	addi	r7,r4,1
    40d8:	d9c14515 	stw	r7,1300(sp)
    40dc:	383fcc0e 	bge	r7,zero,4010 <___vfprintf_internal_r+0x1ba8>
    40e0:	d8014515 	stw	zero,1300(sp)
    40e4:	003fca06 	br	4010 <___vfprintf_internal_r+0x1ba8>
    40e8:	d9000517 	ldw	r4,20(sp)
    40ec:	00bfff04 	movi	r2,-4
    40f0:	1100480e 	bge	r2,r4,4214 <___vfprintf_internal_r+0x1dac>
    40f4:	99004716 	blt	r19,r4,4214 <___vfprintf_internal_r+0x1dac>
    40f8:	d8c14d15 	stw	r3,1332(sp)
    40fc:	003ff006 	br	40c0 <___vfprintf_internal_r+0x1c58>
    4100:	d8800717 	ldw	r2,28(sp)
    4104:	14bf8b2e 	bgeu	r2,r18,3f34 <___vfprintf_internal_r+0x1acc>
    4108:	9007883a 	mov	r3,r18
    410c:	01000c04 	movi	r4,48
    4110:	11000005 	stb	r4,0(r2)
    4114:	10800044 	addi	r2,r2,1
    4118:	d8800715 	stw	r2,28(sp)
    411c:	18bffc1e 	bne	r3,r2,4110 <___vfprintf_internal_r+0x1ca8>
    4120:	003f8406 	br	3f34 <___vfprintf_internal_r+0x1acc>
    4124:	d8814117 	ldw	r2,1284(sp)
    4128:	10c00007 	ldb	r3,0(r2)
    412c:	00800c04 	movi	r2,48
    4130:	18805b26 	beq	r3,r2,42a0 <___vfprintf_internal_r+0x1e38>
    4134:	d9000517 	ldw	r4,20(sp)
    4138:	9125883a 	add	r18,r18,r4
    413c:	003f7506 	br	3f14 <___vfprintf_internal_r+0x1aac>
    4140:	d9014c17 	ldw	r4,1328(sp)
    4144:	2080004c 	andi	r2,r4,1
    4148:	1005003a 	cmpeq	r2,r2,zero
    414c:	103f6a26 	beq	r2,zero,3ef8 <___vfprintf_internal_r+0x1a90>
    4150:	d8800717 	ldw	r2,28(sp)
    4154:	003f7706 	br	3f34 <___vfprintf_internal_r+0x1acc>
    4158:	d9c14515 	stw	r7,1300(sp)
    415c:	38004d16 	blt	r7,zero,4294 <___vfprintf_internal_r+0x1e2c>
    4160:	dc814715 	stw	r18,1308(sp)
    4164:	d8014615 	stw	zero,1304(sp)
    4168:	003b6106 	br	2ef0 <___vfprintf_internal_r+0xa88>
    416c:	d9014f17 	ldw	r4,1340(sp)
    4170:	d8800504 	addi	r2,sp,20
    4174:	d8800115 	stw	r2,4(sp)
    4178:	d8c00604 	addi	r3,sp,24
    417c:	d8800704 	addi	r2,sp,28
    4180:	800b883a 	mov	r5,r16
    4184:	880d883a 	mov	r6,r17
    4188:	01c000c4 	movi	r7,3
    418c:	d8c00215 	stw	r3,8(sp)
    4190:	d8800315 	stw	r2,12(sp)
    4194:	dcc00015 	stw	r19,0(sp)
    4198:	9829883a 	mov	r20,r19
    419c:	00048400 	call	4840 <_dtoa_r>
    41a0:	d8814115 	stw	r2,1284(sp)
    41a4:	003f5106 	br	3eec <___vfprintf_internal_r+0x1a84>
    41a8:	d8c14217 	ldw	r3,1288(sp)
    41ac:	d9014317 	ldw	r4,1292(sp)
    41b0:	07000b44 	movi	fp,45
    41b4:	1821883a 	mov	r16,r3
    41b8:	2460003c 	xorhi	r17,r4,32768
    41bc:	003f3106 	br	3e84 <___vfprintf_internal_r+0x1a1c>
    41c0:	9d000044 	addi	r20,r19,1
    41c4:	003f3906 	br	3eac <___vfprintf_internal_r+0x1a44>
    41c8:	983f251e 	bne	r19,zero,3e60 <___vfprintf_internal_r+0x19f8>
    41cc:	04c00044 	movi	r19,1
    41d0:	003f2306 	br	3e60 <___vfprintf_internal_r+0x19f8>
    41d4:	04c00184 	movi	r19,6
    41d8:	003f2106 	br	3e60 <___vfprintf_internal_r+0x19f8>
    41dc:	d8014515 	stw	zero,1300(sp)
    41e0:	003eee06 	br	3d9c <___vfprintf_internal_r+0x1934>
    41e4:	200f883a 	mov	r7,r4
    41e8:	0100370e 	bge	zero,r4,42c8 <___vfprintf_internal_r+0x1e60>
    41ec:	9800031e 	bne	r19,zero,41fc <___vfprintf_internal_r+0x1d94>
    41f0:	d9814c17 	ldw	r6,1328(sp)
    41f4:	3080004c 	andi	r2,r6,1
    41f8:	103fb726 	beq	r2,zero,40d8 <___vfprintf_internal_r+0x1c70>
    41fc:	20800044 	addi	r2,r4,1
    4200:	98a7883a 	add	r19,r19,r2
    4204:	dcc14515 	stw	r19,1300(sp)
    4208:	980f883a 	mov	r7,r19
    420c:	983f800e 	bge	r19,zero,4010 <___vfprintf_internal_r+0x1ba8>
    4210:	003fb306 	br	40e0 <___vfprintf_internal_r+0x1c78>
    4214:	d9814d17 	ldw	r6,1332(sp)
    4218:	31bfff84 	addi	r6,r6,-2
    421c:	d9814d15 	stw	r6,1332(sp)
    4220:	003f4c06 	br	3f54 <___vfprintf_internal_r+0x1aec>
    4224:	0100180e 	bge	zero,r4,4288 <___vfprintf_internal_r+0x1e20>
    4228:	00800044 	movi	r2,1
    422c:	1485883a 	add	r2,r2,r18
    4230:	d8814515 	stw	r2,1300(sp)
    4234:	100f883a 	mov	r7,r2
    4238:	103f750e 	bge	r2,zero,4010 <___vfprintf_internal_r+0x1ba8>
    423c:	003fa806 	br	40e0 <___vfprintf_internal_r+0x1c78>
    4240:	80c00c04 	addi	r3,r16,48
    4244:	00800c04 	movi	r2,48
    4248:	d8c008c5 	stb	r3,35(sp)
    424c:	d9800804 	addi	r6,sp,32
    4250:	d8c00904 	addi	r3,sp,36
    4254:	d8800885 	stb	r2,34(sp)
    4258:	003f6506 	br	3ff0 <___vfprintf_internal_r+0x1b88>
    425c:	d9014c17 	ldw	r4,1328(sp)
    4260:	2084703a 	and	r2,r4,r2
    4264:	103f9c26 	beq	r2,zero,40d8 <___vfprintf_internal_r+0x1c70>
    4268:	003f6606 	br	4004 <___vfprintf_internal_r+0x1b9c>
    426c:	d9800804 	addi	r6,sp,32
    4270:	d8c00884 	addi	r3,sp,34
    4274:	003f5e06 	br	3ff0 <___vfprintf_internal_r+0x1b88>
    4278:	00800b44 	movi	r2,45
    427c:	0121c83a 	sub	r16,zero,r4
    4280:	d8800845 	stb	r2,33(sp)
    4284:	003f3d06 	br	3f7c <___vfprintf_internal_r+0x1b14>
    4288:	00800084 	movi	r2,2
    428c:	1105c83a 	sub	r2,r2,r4
    4290:	003fe606 	br	422c <___vfprintf_internal_r+0x1dc4>
    4294:	d8014515 	stw	zero,1300(sp)
    4298:	dc814715 	stw	r18,1308(sp)
    429c:	003fb106 	br	4164 <___vfprintf_internal_r+0x1cfc>
    42a0:	000d883a 	mov	r6,zero
    42a4:	000f883a 	mov	r7,zero
    42a8:	8009883a 	mov	r4,r16
    42ac:	880b883a 	mov	r5,r17
    42b0:	000a61c0 	call	a61c <__nedf2>
    42b4:	103f9f26 	beq	r2,zero,4134 <___vfprintf_internal_r+0x1ccc>
    42b8:	00800044 	movi	r2,1
    42bc:	1509c83a 	sub	r4,r2,r20
    42c0:	d9000515 	stw	r4,20(sp)
    42c4:	003f9b06 	br	4134 <___vfprintf_internal_r+0x1ccc>
    42c8:	98000d1e 	bne	r19,zero,4300 <___vfprintf_internal_r+0x1e98>
    42cc:	d8c14c17 	ldw	r3,1328(sp)
    42d0:	1880004c 	andi	r2,r3,1
    42d4:	10000a1e 	bne	r2,zero,4300 <___vfprintf_internal_r+0x1e98>
    42d8:	01000044 	movi	r4,1
    42dc:	200f883a 	mov	r7,r4
    42e0:	d9014515 	stw	r4,1300(sp)
    42e4:	003f4a06 	br	4010 <___vfprintf_internal_r+0x1ba8>
    42e8:	3cc00017 	ldw	r19,0(r7)
    42ec:	39c00104 	addi	r7,r7,4
    42f0:	983d0e0e 	bge	r19,zero,372c <___vfprintf_internal_r+0x12c4>
    42f4:	b8c00007 	ldb	r3,0(r23)
    42f8:	04ffffc4 	movi	r19,-1
    42fc:	0038d906 	br	2664 <___vfprintf_internal_r+0x1fc>
    4300:	9cc00084 	addi	r19,r19,2
    4304:	dcc14515 	stw	r19,1300(sp)
    4308:	980f883a 	mov	r7,r19
    430c:	983f400e 	bge	r19,zero,4010 <___vfprintf_internal_r+0x1ba8>
    4310:	003f7306 	br	40e0 <___vfprintf_internal_r+0x1c78>

00004314 <__vfprintf_internal>:
    4314:	00800074 	movhi	r2,1
    4318:	10be9404 	addi	r2,r2,-1456
    431c:	2013883a 	mov	r9,r4
    4320:	11000017 	ldw	r4,0(r2)
    4324:	2805883a 	mov	r2,r5
    4328:	300f883a 	mov	r7,r6
    432c:	480b883a 	mov	r5,r9
    4330:	100d883a 	mov	r6,r2
    4334:	00024681 	jmpi	2468 <___vfprintf_internal_r>

00004338 <__swsetup_r>:
    4338:	00800074 	movhi	r2,1
    433c:	10be9404 	addi	r2,r2,-1456
    4340:	10c00017 	ldw	r3,0(r2)
    4344:	defffd04 	addi	sp,sp,-12
    4348:	dc400115 	stw	r17,4(sp)
    434c:	dc000015 	stw	r16,0(sp)
    4350:	dfc00215 	stw	ra,8(sp)
    4354:	2023883a 	mov	r17,r4
    4358:	2821883a 	mov	r16,r5
    435c:	18000226 	beq	r3,zero,4368 <__swsetup_r+0x30>
    4360:	18800e17 	ldw	r2,56(r3)
    4364:	10001f26 	beq	r2,zero,43e4 <__swsetup_r+0xac>
    4368:	8100030b 	ldhu	r4,12(r16)
    436c:	2080020c 	andi	r2,r4,8
    4370:	10002826 	beq	r2,zero,4414 <__swsetup_r+0xdc>
    4374:	81400417 	ldw	r5,16(r16)
    4378:	28001d26 	beq	r5,zero,43f0 <__swsetup_r+0xb8>
    437c:	2080004c 	andi	r2,r4,1
    4380:	1005003a 	cmpeq	r2,r2,zero
    4384:	10000b26 	beq	r2,zero,43b4 <__swsetup_r+0x7c>
    4388:	2080008c 	andi	r2,r4,2
    438c:	10001226 	beq	r2,zero,43d8 <__swsetup_r+0xa0>
    4390:	0005883a 	mov	r2,zero
    4394:	80800215 	stw	r2,8(r16)
    4398:	28000b26 	beq	r5,zero,43c8 <__swsetup_r+0x90>
    439c:	0005883a 	mov	r2,zero
    43a0:	dfc00217 	ldw	ra,8(sp)
    43a4:	dc400117 	ldw	r17,4(sp)
    43a8:	dc000017 	ldw	r16,0(sp)
    43ac:	dec00304 	addi	sp,sp,12
    43b0:	f800283a 	ret
    43b4:	80800517 	ldw	r2,20(r16)
    43b8:	80000215 	stw	zero,8(r16)
    43bc:	0085c83a 	sub	r2,zero,r2
    43c0:	80800615 	stw	r2,24(r16)
    43c4:	283ff51e 	bne	r5,zero,439c <__swsetup_r+0x64>
    43c8:	2080200c 	andi	r2,r4,128
    43cc:	103ff326 	beq	r2,zero,439c <__swsetup_r+0x64>
    43d0:	00bfffc4 	movi	r2,-1
    43d4:	003ff206 	br	43a0 <__swsetup_r+0x68>
    43d8:	80800517 	ldw	r2,20(r16)
    43dc:	80800215 	stw	r2,8(r16)
    43e0:	003fed06 	br	4398 <__swsetup_r+0x60>
    43e4:	1809883a 	mov	r4,r3
    43e8:	000608c0 	call	608c <__sinit>
    43ec:	003fde06 	br	4368 <__swsetup_r+0x30>
    43f0:	20c0a00c 	andi	r3,r4,640
    43f4:	00808004 	movi	r2,512
    43f8:	18bfe026 	beq	r3,r2,437c <__swsetup_r+0x44>
    43fc:	8809883a 	mov	r4,r17
    4400:	800b883a 	mov	r5,r16
    4404:	0006e040 	call	6e04 <__smakebuf_r>
    4408:	8100030b 	ldhu	r4,12(r16)
    440c:	81400417 	ldw	r5,16(r16)
    4410:	003fda06 	br	437c <__swsetup_r+0x44>
    4414:	2080040c 	andi	r2,r4,16
    4418:	103fed26 	beq	r2,zero,43d0 <__swsetup_r+0x98>
    441c:	2080010c 	andi	r2,r4,4
    4420:	10001226 	beq	r2,zero,446c <__swsetup_r+0x134>
    4424:	81400c17 	ldw	r5,48(r16)
    4428:	28000526 	beq	r5,zero,4440 <__swsetup_r+0x108>
    442c:	80801004 	addi	r2,r16,64
    4430:	28800226 	beq	r5,r2,443c <__swsetup_r+0x104>
    4434:	8809883a 	mov	r4,r17
    4438:	00064100 	call	6410 <_free_r>
    443c:	80000c15 	stw	zero,48(r16)
    4440:	8080030b 	ldhu	r2,12(r16)
    4444:	81400417 	ldw	r5,16(r16)
    4448:	80000115 	stw	zero,4(r16)
    444c:	10bff6cc 	andi	r2,r2,65499
    4450:	8080030d 	sth	r2,12(r16)
    4454:	81400015 	stw	r5,0(r16)
    4458:	8080030b 	ldhu	r2,12(r16)
    445c:	10800214 	ori	r2,r2,8
    4460:	113fffcc 	andi	r4,r2,65535
    4464:	8080030d 	sth	r2,12(r16)
    4468:	003fc306 	br	4378 <__swsetup_r+0x40>
    446c:	81400417 	ldw	r5,16(r16)
    4470:	003ff906 	br	4458 <__swsetup_r+0x120>

00004474 <register_fini>:
    4474:	f800283a 	ret

00004478 <__call_exitprocs>:
    4478:	00800074 	movhi	r2,1
    447c:	10be9504 	addi	r2,r2,-1452
    4480:	10800017 	ldw	r2,0(r2)
    4484:	defff304 	addi	sp,sp,-52
    4488:	df000b15 	stw	fp,44(sp)
    448c:	d8800115 	stw	r2,4(sp)
    4490:	00800034 	movhi	r2,0
    4494:	10867e04 	addi	r2,r2,6648
    4498:	1005003a 	cmpeq	r2,r2,zero
    449c:	d8800215 	stw	r2,8(sp)
    44a0:	d8800117 	ldw	r2,4(sp)
    44a4:	dd400815 	stw	r21,32(sp)
    44a8:	dd000715 	stw	r20,28(sp)
    44ac:	10805204 	addi	r2,r2,328
    44b0:	dfc00c15 	stw	ra,48(sp)
    44b4:	ddc00a15 	stw	r23,40(sp)
    44b8:	dd800915 	stw	r22,36(sp)
    44bc:	dcc00615 	stw	r19,24(sp)
    44c0:	dc800515 	stw	r18,20(sp)
    44c4:	dc400415 	stw	r17,16(sp)
    44c8:	dc000315 	stw	r16,12(sp)
    44cc:	282b883a 	mov	r21,r5
    44d0:	2039883a 	mov	fp,r4
    44d4:	d8800015 	stw	r2,0(sp)
    44d8:	2829003a 	cmpeq	r20,r5,zero
    44dc:	d8800117 	ldw	r2,4(sp)
    44e0:	14405217 	ldw	r17,328(r2)
    44e4:	88001026 	beq	r17,zero,4528 <__call_exitprocs+0xb0>
    44e8:	ddc00017 	ldw	r23,0(sp)
    44ec:	88800117 	ldw	r2,4(r17)
    44f0:	8c802204 	addi	r18,r17,136
    44f4:	143fffc4 	addi	r16,r2,-1
    44f8:	80000916 	blt	r16,zero,4520 <__call_exitprocs+0xa8>
    44fc:	05bfffc4 	movi	r22,-1
    4500:	a000151e 	bne	r20,zero,4558 <__call_exitprocs+0xe0>
    4504:	8409883a 	add	r4,r16,r16
    4508:	2105883a 	add	r2,r4,r4
    450c:	1485883a 	add	r2,r2,r18
    4510:	10c02017 	ldw	r3,128(r2)
    4514:	a8c01126 	beq	r21,r3,455c <__call_exitprocs+0xe4>
    4518:	843fffc4 	addi	r16,r16,-1
    451c:	85bff81e 	bne	r16,r22,4500 <__call_exitprocs+0x88>
    4520:	d8800217 	ldw	r2,8(sp)
    4524:	10003126 	beq	r2,zero,45ec <__call_exitprocs+0x174>
    4528:	dfc00c17 	ldw	ra,48(sp)
    452c:	df000b17 	ldw	fp,44(sp)
    4530:	ddc00a17 	ldw	r23,40(sp)
    4534:	dd800917 	ldw	r22,36(sp)
    4538:	dd400817 	ldw	r21,32(sp)
    453c:	dd000717 	ldw	r20,28(sp)
    4540:	dcc00617 	ldw	r19,24(sp)
    4544:	dc800517 	ldw	r18,20(sp)
    4548:	dc400417 	ldw	r17,16(sp)
    454c:	dc000317 	ldw	r16,12(sp)
    4550:	dec00d04 	addi	sp,sp,52
    4554:	f800283a 	ret
    4558:	8409883a 	add	r4,r16,r16
    455c:	88c00117 	ldw	r3,4(r17)
    4560:	2105883a 	add	r2,r4,r4
    4564:	1445883a 	add	r2,r2,r17
    4568:	18ffffc4 	addi	r3,r3,-1
    456c:	11800217 	ldw	r6,8(r2)
    4570:	1c001526 	beq	r3,r16,45c8 <__call_exitprocs+0x150>
    4574:	10000215 	stw	zero,8(r2)
    4578:	303fe726 	beq	r6,zero,4518 <__call_exitprocs+0xa0>
    457c:	00c00044 	movi	r3,1
    4580:	1c06983a 	sll	r3,r3,r16
    4584:	90804017 	ldw	r2,256(r18)
    4588:	8cc00117 	ldw	r19,4(r17)
    458c:	1884703a 	and	r2,r3,r2
    4590:	10001426 	beq	r2,zero,45e4 <__call_exitprocs+0x16c>
    4594:	90804117 	ldw	r2,260(r18)
    4598:	1884703a 	and	r2,r3,r2
    459c:	10000c1e 	bne	r2,zero,45d0 <__call_exitprocs+0x158>
    45a0:	2105883a 	add	r2,r4,r4
    45a4:	1485883a 	add	r2,r2,r18
    45a8:	11400017 	ldw	r5,0(r2)
    45ac:	e009883a 	mov	r4,fp
    45b0:	303ee83a 	callr	r6
    45b4:	88800117 	ldw	r2,4(r17)
    45b8:	98bfc81e 	bne	r19,r2,44dc <__call_exitprocs+0x64>
    45bc:	b8800017 	ldw	r2,0(r23)
    45c0:	147fd526 	beq	r2,r17,4518 <__call_exitprocs+0xa0>
    45c4:	003fc506 	br	44dc <__call_exitprocs+0x64>
    45c8:	8c000115 	stw	r16,4(r17)
    45cc:	003fea06 	br	4578 <__call_exitprocs+0x100>
    45d0:	2105883a 	add	r2,r4,r4
    45d4:	1485883a 	add	r2,r2,r18
    45d8:	11000017 	ldw	r4,0(r2)
    45dc:	303ee83a 	callr	r6
    45e0:	003ff406 	br	45b4 <__call_exitprocs+0x13c>
    45e4:	303ee83a 	callr	r6
    45e8:	003ff206 	br	45b4 <__call_exitprocs+0x13c>
    45ec:	88800117 	ldw	r2,4(r17)
    45f0:	1000081e 	bne	r2,zero,4614 <__call_exitprocs+0x19c>
    45f4:	89000017 	ldw	r4,0(r17)
    45f8:	20000726 	beq	r4,zero,4618 <__call_exitprocs+0x1a0>
    45fc:	b9000015 	stw	r4,0(r23)
    4600:	8809883a 	mov	r4,r17
    4604:	00019f80 	call	19f8 <free>
    4608:	bc400017 	ldw	r17,0(r23)
    460c:	883fb71e 	bne	r17,zero,44ec <__call_exitprocs+0x74>
    4610:	003fc506 	br	4528 <__call_exitprocs+0xb0>
    4614:	89000017 	ldw	r4,0(r17)
    4618:	882f883a 	mov	r23,r17
    461c:	2023883a 	mov	r17,r4
    4620:	883fb21e 	bne	r17,zero,44ec <__call_exitprocs+0x74>
    4624:	003fc006 	br	4528 <__call_exitprocs+0xb0>

00004628 <quorem>:
    4628:	28c00417 	ldw	r3,16(r5)
    462c:	20800417 	ldw	r2,16(r4)
    4630:	defff604 	addi	sp,sp,-40
    4634:	ddc00715 	stw	r23,28(sp)
    4638:	dd400515 	stw	r21,20(sp)
    463c:	dfc00915 	stw	ra,36(sp)
    4640:	df000815 	stw	fp,32(sp)
    4644:	dd800615 	stw	r22,24(sp)
    4648:	dd000415 	stw	r20,16(sp)
    464c:	dcc00315 	stw	r19,12(sp)
    4650:	dc800215 	stw	r18,8(sp)
    4654:	dc400115 	stw	r17,4(sp)
    4658:	dc000015 	stw	r16,0(sp)
    465c:	202f883a 	mov	r23,r4
    4660:	282b883a 	mov	r21,r5
    4664:	10c07416 	blt	r2,r3,4838 <quorem+0x210>
    4668:	1c7fffc4 	addi	r17,r3,-1
    466c:	8c45883a 	add	r2,r17,r17
    4670:	1085883a 	add	r2,r2,r2
    4674:	2c000504 	addi	r16,r5,20
    4678:	24c00504 	addi	r19,r4,20
    467c:	14ed883a 	add	r22,r2,r19
    4680:	80a5883a 	add	r18,r16,r2
    4684:	b7000017 	ldw	fp,0(r22)
    4688:	91400017 	ldw	r5,0(r18)
    468c:	e009883a 	mov	r4,fp
    4690:	29400044 	addi	r5,r5,1
    4694:	00019b00 	call	19b0 <__udivsi3>
    4698:	1029883a 	mov	r20,r2
    469c:	10003c1e 	bne	r2,zero,4790 <quorem+0x168>
    46a0:	a80b883a 	mov	r5,r21
    46a4:	b809883a 	mov	r4,r23
    46a8:	00073500 	call	7350 <__mcmp>
    46ac:	10002b16 	blt	r2,zero,475c <quorem+0x134>
    46b0:	a5000044 	addi	r20,r20,1
    46b4:	980f883a 	mov	r7,r19
    46b8:	0011883a 	mov	r8,zero
    46bc:	0009883a 	mov	r4,zero
    46c0:	81400017 	ldw	r5,0(r16)
    46c4:	38c00017 	ldw	r3,0(r7)
    46c8:	84000104 	addi	r16,r16,4
    46cc:	28bfffcc 	andi	r2,r5,65535
    46d0:	2085883a 	add	r2,r4,r2
    46d4:	11bfffcc 	andi	r6,r2,65535
    46d8:	193fffcc 	andi	r4,r3,65535
    46dc:	1004d43a 	srli	r2,r2,16
    46e0:	280ad43a 	srli	r5,r5,16
    46e4:	2189c83a 	sub	r4,r4,r6
    46e8:	2209883a 	add	r4,r4,r8
    46ec:	1806d43a 	srli	r3,r3,16
    46f0:	288b883a 	add	r5,r5,r2
    46f4:	200dd43a 	srai	r6,r4,16
    46f8:	28bfffcc 	andi	r2,r5,65535
    46fc:	1887c83a 	sub	r3,r3,r2
    4700:	1987883a 	add	r3,r3,r6
    4704:	3900000d 	sth	r4,0(r7)
    4708:	38c0008d 	sth	r3,2(r7)
    470c:	2808d43a 	srli	r4,r5,16
    4710:	39c00104 	addi	r7,r7,4
    4714:	1811d43a 	srai	r8,r3,16
    4718:	943fe92e 	bgeu	r18,r16,46c0 <quorem+0x98>
    471c:	8c45883a 	add	r2,r17,r17
    4720:	1085883a 	add	r2,r2,r2
    4724:	9885883a 	add	r2,r19,r2
    4728:	10c00017 	ldw	r3,0(r2)
    472c:	18000b1e 	bne	r3,zero,475c <quorem+0x134>
    4730:	113fff04 	addi	r4,r2,-4
    4734:	9900082e 	bgeu	r19,r4,4758 <quorem+0x130>
    4738:	10bfff17 	ldw	r2,-4(r2)
    473c:	10000326 	beq	r2,zero,474c <quorem+0x124>
    4740:	00000506 	br	4758 <quorem+0x130>
    4744:	20800017 	ldw	r2,0(r4)
    4748:	1000031e 	bne	r2,zero,4758 <quorem+0x130>
    474c:	213fff04 	addi	r4,r4,-4
    4750:	8c7fffc4 	addi	r17,r17,-1
    4754:	993ffb36 	bltu	r19,r4,4744 <quorem+0x11c>
    4758:	bc400415 	stw	r17,16(r23)
    475c:	a005883a 	mov	r2,r20
    4760:	dfc00917 	ldw	ra,36(sp)
    4764:	df000817 	ldw	fp,32(sp)
    4768:	ddc00717 	ldw	r23,28(sp)
    476c:	dd800617 	ldw	r22,24(sp)
    4770:	dd400517 	ldw	r21,20(sp)
    4774:	dd000417 	ldw	r20,16(sp)
    4778:	dcc00317 	ldw	r19,12(sp)
    477c:	dc800217 	ldw	r18,8(sp)
    4780:	dc400117 	ldw	r17,4(sp)
    4784:	dc000017 	ldw	r16,0(sp)
    4788:	dec00a04 	addi	sp,sp,40
    478c:	f800283a 	ret
    4790:	980f883a 	mov	r7,r19
    4794:	8011883a 	mov	r8,r16
    4798:	0013883a 	mov	r9,zero
    479c:	000d883a 	mov	r6,zero
    47a0:	40c00017 	ldw	r3,0(r8)
    47a4:	39000017 	ldw	r4,0(r7)
    47a8:	42000104 	addi	r8,r8,4
    47ac:	18bfffcc 	andi	r2,r3,65535
    47b0:	a085383a 	mul	r2,r20,r2
    47b4:	1806d43a 	srli	r3,r3,16
    47b8:	217fffcc 	andi	r5,r4,65535
    47bc:	3085883a 	add	r2,r6,r2
    47c0:	11bfffcc 	andi	r6,r2,65535
    47c4:	a0c7383a 	mul	r3,r20,r3
    47c8:	1004d43a 	srli	r2,r2,16
    47cc:	298bc83a 	sub	r5,r5,r6
    47d0:	2a4b883a 	add	r5,r5,r9
    47d4:	2008d43a 	srli	r4,r4,16
    47d8:	1887883a 	add	r3,r3,r2
    47dc:	280dd43a 	srai	r6,r5,16
    47e0:	18bfffcc 	andi	r2,r3,65535
    47e4:	2089c83a 	sub	r4,r4,r2
    47e8:	2189883a 	add	r4,r4,r6
    47ec:	3900008d 	sth	r4,2(r7)
    47f0:	3940000d 	sth	r5,0(r7)
    47f4:	180cd43a 	srli	r6,r3,16
    47f8:	39c00104 	addi	r7,r7,4
    47fc:	2013d43a 	srai	r9,r4,16
    4800:	923fe72e 	bgeu	r18,r8,47a0 <quorem+0x178>
    4804:	e03fa61e 	bne	fp,zero,46a0 <quorem+0x78>
    4808:	b0ffff04 	addi	r3,r22,-4
    480c:	98c0082e 	bgeu	r19,r3,4830 <quorem+0x208>
    4810:	b0bfff17 	ldw	r2,-4(r22)
    4814:	10000326 	beq	r2,zero,4824 <quorem+0x1fc>
    4818:	00000506 	br	4830 <quorem+0x208>
    481c:	18800017 	ldw	r2,0(r3)
    4820:	1000031e 	bne	r2,zero,4830 <quorem+0x208>
    4824:	18ffff04 	addi	r3,r3,-4
    4828:	8c7fffc4 	addi	r17,r17,-1
    482c:	98fffb36 	bltu	r19,r3,481c <quorem+0x1f4>
    4830:	bc400415 	stw	r17,16(r23)
    4834:	003f9a06 	br	46a0 <quorem+0x78>
    4838:	0005883a 	mov	r2,zero
    483c:	003fc806 	br	4760 <quorem+0x138>

00004840 <_dtoa_r>:
    4840:	22001017 	ldw	r8,64(r4)
    4844:	deffda04 	addi	sp,sp,-152
    4848:	dd402115 	stw	r21,132(sp)
    484c:	dd002015 	stw	r20,128(sp)
    4850:	dc801e15 	stw	r18,120(sp)
    4854:	dc401d15 	stw	r17,116(sp)
    4858:	dfc02515 	stw	ra,148(sp)
    485c:	df002415 	stw	fp,144(sp)
    4860:	ddc02315 	stw	r23,140(sp)
    4864:	dd802215 	stw	r22,136(sp)
    4868:	dcc01f15 	stw	r19,124(sp)
    486c:	dc001c15 	stw	r16,112(sp)
    4870:	d9001615 	stw	r4,88(sp)
    4874:	3023883a 	mov	r17,r6
    4878:	2829883a 	mov	r20,r5
    487c:	d9c01715 	stw	r7,92(sp)
    4880:	dc802817 	ldw	r18,160(sp)
    4884:	302b883a 	mov	r21,r6
    4888:	40000a26 	beq	r8,zero,48b4 <_dtoa_r+0x74>
    488c:	20801117 	ldw	r2,68(r4)
    4890:	400b883a 	mov	r5,r8
    4894:	40800115 	stw	r2,4(r8)
    4898:	20c01117 	ldw	r3,68(r4)
    489c:	00800044 	movi	r2,1
    48a0:	10c4983a 	sll	r2,r2,r3
    48a4:	40800215 	stw	r2,8(r8)
    48a8:	00071f40 	call	71f4 <_Bfree>
    48ac:	d8c01617 	ldw	r3,88(sp)
    48b0:	18001015 	stw	zero,64(r3)
    48b4:	8800a316 	blt	r17,zero,4b44 <_dtoa_r+0x304>
    48b8:	90000015 	stw	zero,0(r18)
    48bc:	a8dffc2c 	andhi	r3,r21,32752
    48c0:	009ffc34 	movhi	r2,32752
    48c4:	18809126 	beq	r3,r2,4b0c <_dtoa_r+0x2cc>
    48c8:	000d883a 	mov	r6,zero
    48cc:	000f883a 	mov	r7,zero
    48d0:	a009883a 	mov	r4,r20
    48d4:	a80b883a 	mov	r5,r21
    48d8:	dd001215 	stw	r20,72(sp)
    48dc:	dd401315 	stw	r21,76(sp)
    48e0:	000a61c0 	call	a61c <__nedf2>
    48e4:	1000171e 	bne	r2,zero,4944 <_dtoa_r+0x104>
    48e8:	d9802717 	ldw	r6,156(sp)
    48ec:	00800044 	movi	r2,1
    48f0:	30800015 	stw	r2,0(r6)
    48f4:	d8802917 	ldw	r2,164(sp)
    48f8:	10029b26 	beq	r2,zero,5368 <_dtoa_r+0xb28>
    48fc:	d9002917 	ldw	r4,164(sp)
    4900:	00800074 	movhi	r2,1
    4904:	10b75444 	addi	r2,r2,-8879
    4908:	10ffffc4 	addi	r3,r2,-1
    490c:	20800015 	stw	r2,0(r4)
    4910:	1805883a 	mov	r2,r3
    4914:	dfc02517 	ldw	ra,148(sp)
    4918:	df002417 	ldw	fp,144(sp)
    491c:	ddc02317 	ldw	r23,140(sp)
    4920:	dd802217 	ldw	r22,136(sp)
    4924:	dd402117 	ldw	r21,132(sp)
    4928:	dd002017 	ldw	r20,128(sp)
    492c:	dcc01f17 	ldw	r19,124(sp)
    4930:	dc801e17 	ldw	r18,120(sp)
    4934:	dc401d17 	ldw	r17,116(sp)
    4938:	dc001c17 	ldw	r16,112(sp)
    493c:	dec02604 	addi	sp,sp,152
    4940:	f800283a 	ret
    4944:	d9001617 	ldw	r4,88(sp)
    4948:	d9401217 	ldw	r5,72(sp)
    494c:	d8800104 	addi	r2,sp,4
    4950:	a80d883a 	mov	r6,r21
    4954:	d9c00204 	addi	r7,sp,8
    4958:	d8800015 	stw	r2,0(sp)
    495c:	00078300 	call	7830 <__d2b>
    4960:	d8800715 	stw	r2,28(sp)
    4964:	a804d53a 	srli	r2,r21,20
    4968:	1101ffcc 	andi	r4,r2,2047
    496c:	20008626 	beq	r4,zero,4b88 <_dtoa_r+0x348>
    4970:	d8c01217 	ldw	r3,72(sp)
    4974:	00800434 	movhi	r2,16
    4978:	10bfffc4 	addi	r2,r2,-1
    497c:	ddc00117 	ldw	r23,4(sp)
    4980:	a884703a 	and	r2,r21,r2
    4984:	1811883a 	mov	r8,r3
    4988:	124ffc34 	orhi	r9,r2,16368
    498c:	25bf0044 	addi	r22,r4,-1023
    4990:	d8000815 	stw	zero,32(sp)
    4994:	0005883a 	mov	r2,zero
    4998:	00cffe34 	movhi	r3,16376
    499c:	480b883a 	mov	r5,r9
    49a0:	4009883a 	mov	r4,r8
    49a4:	180f883a 	mov	r7,r3
    49a8:	100d883a 	mov	r6,r2
    49ac:	0009e840 	call	9e84 <__subdf3>
    49b0:	0218dbf4 	movhi	r8,25455
    49b4:	4210d844 	addi	r8,r8,17249
    49b8:	024ff4f4 	movhi	r9,16339
    49bc:	4a61e9c4 	addi	r9,r9,-30809
    49c0:	480f883a 	mov	r7,r9
    49c4:	400d883a 	mov	r6,r8
    49c8:	180b883a 	mov	r5,r3
    49cc:	1009883a 	mov	r4,r2
    49d0:	0009f780 	call	9f78 <__muldf3>
    49d4:	0222d874 	movhi	r8,35681
    49d8:	42322cc4 	addi	r8,r8,-14157
    49dc:	024ff1f4 	movhi	r9,16327
    49e0:	4a628a04 	addi	r9,r9,-30168
    49e4:	480f883a 	mov	r7,r9
    49e8:	400d883a 	mov	r6,r8
    49ec:	180b883a 	mov	r5,r3
    49f0:	1009883a 	mov	r4,r2
    49f4:	0009f040 	call	9f04 <__adddf3>
    49f8:	b009883a 	mov	r4,r22
    49fc:	1021883a 	mov	r16,r2
    4a00:	1823883a 	mov	r17,r3
    4a04:	000a83c0 	call	a83c <__floatsidf>
    4a08:	021427f4 	movhi	r8,20639
    4a0c:	421e7ec4 	addi	r8,r8,31227
    4a10:	024ff4f4 	movhi	r9,16339
    4a14:	4a5104c4 	addi	r9,r9,17427
    4a18:	480f883a 	mov	r7,r9
    4a1c:	400d883a 	mov	r6,r8
    4a20:	180b883a 	mov	r5,r3
    4a24:	1009883a 	mov	r4,r2
    4a28:	0009f780 	call	9f78 <__muldf3>
    4a2c:	180f883a 	mov	r7,r3
    4a30:	880b883a 	mov	r5,r17
    4a34:	100d883a 	mov	r6,r2
    4a38:	8009883a 	mov	r4,r16
    4a3c:	0009f040 	call	9f04 <__adddf3>
    4a40:	1009883a 	mov	r4,r2
    4a44:	180b883a 	mov	r5,r3
    4a48:	1021883a 	mov	r16,r2
    4a4c:	1823883a 	mov	r17,r3
    4a50:	000a9340 	call	a934 <__fixdfsi>
    4a54:	000d883a 	mov	r6,zero
    4a58:	000f883a 	mov	r7,zero
    4a5c:	8009883a 	mov	r4,r16
    4a60:	880b883a 	mov	r5,r17
    4a64:	d8800d15 	stw	r2,52(sp)
    4a68:	000a7b40 	call	a7b4 <__ltdf2>
    4a6c:	10031716 	blt	r2,zero,56cc <_dtoa_r+0xe8c>
    4a70:	d8c00d17 	ldw	r3,52(sp)
    4a74:	00800584 	movi	r2,22
    4a78:	10c1482e 	bgeu	r2,r3,4f9c <_dtoa_r+0x75c>
    4a7c:	01000044 	movi	r4,1
    4a80:	d9000c15 	stw	r4,48(sp)
    4a84:	bd85c83a 	sub	r2,r23,r22
    4a88:	11bfffc4 	addi	r6,r2,-1
    4a8c:	30030b16 	blt	r6,zero,56bc <_dtoa_r+0xe7c>
    4a90:	d9800a15 	stw	r6,40(sp)
    4a94:	d8001115 	stw	zero,68(sp)
    4a98:	d8c00d17 	ldw	r3,52(sp)
    4a9c:	1802ff16 	blt	r3,zero,569c <_dtoa_r+0xe5c>
    4aa0:	d9000a17 	ldw	r4,40(sp)
    4aa4:	d8c00915 	stw	r3,36(sp)
    4aa8:	d8001015 	stw	zero,64(sp)
    4aac:	20c9883a 	add	r4,r4,r3
    4ab0:	d9000a15 	stw	r4,40(sp)
    4ab4:	d9001717 	ldw	r4,92(sp)
    4ab8:	00800244 	movi	r2,9
    4abc:	11004636 	bltu	r2,r4,4bd8 <_dtoa_r+0x398>
    4ac0:	00800144 	movi	r2,5
    4ac4:	11020416 	blt	r2,r4,52d8 <_dtoa_r+0xa98>
    4ac8:	04400044 	movi	r17,1
    4acc:	d8c01717 	ldw	r3,92(sp)
    4ad0:	00800144 	movi	r2,5
    4ad4:	10c1ed36 	bltu	r2,r3,528c <_dtoa_r+0xa4c>
    4ad8:	18c5883a 	add	r2,r3,r3
    4adc:	1085883a 	add	r2,r2,r2
    4ae0:	00c00034 	movhi	r3,0
    4ae4:	18d2bd04 	addi	r3,r3,19188
    4ae8:	10c5883a 	add	r2,r2,r3
    4aec:	11000017 	ldw	r4,0(r2)
    4af0:	2000683a 	jmp	r4
    4af4:	00004be0 	cmpeqi	zero,zero,303
    4af8:	00004be0 	cmpeqi	zero,zero,303
    4afc:	000055e0 	cmpeqi	zero,zero,343
    4b00:	000055b8 	rdprs	zero,zero,342
    4b04:	000055fc 	xorhi	zero,zero,343
    4b08:	00005608 	cmpgei	zero,zero,344
    4b0c:	d9002717 	ldw	r4,156(sp)
    4b10:	0089c3c4 	movi	r2,9999
    4b14:	20800015 	stw	r2,0(r4)
    4b18:	a0001026 	beq	r20,zero,4b5c <_dtoa_r+0x31c>
    4b1c:	00c00074 	movhi	r3,1
    4b20:	18f76004 	addi	r3,r3,-8832
    4b24:	d9802917 	ldw	r6,164(sp)
    4b28:	303f7926 	beq	r6,zero,4910 <_dtoa_r+0xd0>
    4b2c:	188000c7 	ldb	r2,3(r3)
    4b30:	190000c4 	addi	r4,r3,3
    4b34:	1000101e 	bne	r2,zero,4b78 <_dtoa_r+0x338>
    4b38:	d8802917 	ldw	r2,164(sp)
    4b3c:	11000015 	stw	r4,0(r2)
    4b40:	003f7306 	br	4910 <_dtoa_r+0xd0>
    4b44:	00a00034 	movhi	r2,32768
    4b48:	10bfffc4 	addi	r2,r2,-1
    4b4c:	00c00044 	movi	r3,1
    4b50:	88aa703a 	and	r21,r17,r2
    4b54:	90c00015 	stw	r3,0(r18)
    4b58:	003f5806 	br	48bc <_dtoa_r+0x7c>
    4b5c:	00800434 	movhi	r2,16
    4b60:	10bfffc4 	addi	r2,r2,-1
    4b64:	a884703a 	and	r2,r21,r2
    4b68:	103fec1e 	bne	r2,zero,4b1c <_dtoa_r+0x2dc>
    4b6c:	00c00074 	movhi	r3,1
    4b70:	18f75d04 	addi	r3,r3,-8844
    4b74:	003feb06 	br	4b24 <_dtoa_r+0x2e4>
    4b78:	d8802917 	ldw	r2,164(sp)
    4b7c:	19000204 	addi	r4,r3,8
    4b80:	11000015 	stw	r4,0(r2)
    4b84:	003f6206 	br	4910 <_dtoa_r+0xd0>
    4b88:	ddc00117 	ldw	r23,4(sp)
    4b8c:	d8800217 	ldw	r2,8(sp)
    4b90:	01000804 	movi	r4,32
    4b94:	b8c10c84 	addi	r3,r23,1074
    4b98:	18a3883a 	add	r17,r3,r2
    4b9c:	2441b80e 	bge	r4,r17,5280 <_dtoa_r+0xa40>
    4ba0:	00c01004 	movi	r3,64
    4ba4:	1c47c83a 	sub	r3,r3,r17
    4ba8:	88bff804 	addi	r2,r17,-32
    4bac:	a8c6983a 	sll	r3,r21,r3
    4bb0:	a084d83a 	srl	r2,r20,r2
    4bb4:	1888b03a 	or	r4,r3,r2
    4bb8:	000aa0c0 	call	aa0c <__floatunsidf>
    4bbc:	1011883a 	mov	r8,r2
    4bc0:	00bf8434 	movhi	r2,65040
    4bc4:	01000044 	movi	r4,1
    4bc8:	10d3883a 	add	r9,r2,r3
    4bcc:	8dbef344 	addi	r22,r17,-1075
    4bd0:	d9000815 	stw	r4,32(sp)
    4bd4:	003f6f06 	br	4994 <_dtoa_r+0x154>
    4bd8:	d8001715 	stw	zero,92(sp)
    4bdc:	04400044 	movi	r17,1
    4be0:	00bfffc4 	movi	r2,-1
    4be4:	00c00044 	movi	r3,1
    4be8:	d8800e15 	stw	r2,56(sp)
    4bec:	d8002615 	stw	zero,152(sp)
    4bf0:	d8800f15 	stw	r2,60(sp)
    4bf4:	d8c00b15 	stw	r3,44(sp)
    4bf8:	1021883a 	mov	r16,r2
    4bfc:	d8801617 	ldw	r2,88(sp)
    4c00:	10001115 	stw	zero,68(r2)
    4c04:	d8801617 	ldw	r2,88(sp)
    4c08:	11401117 	ldw	r5,68(r2)
    4c0c:	1009883a 	mov	r4,r2
    4c10:	00077740 	call	7774 <_Balloc>
    4c14:	d8c01617 	ldw	r3,88(sp)
    4c18:	d8800515 	stw	r2,20(sp)
    4c1c:	18801015 	stw	r2,64(r3)
    4c20:	00800384 	movi	r2,14
    4c24:	14006836 	bltu	r2,r16,4dc8 <_dtoa_r+0x588>
    4c28:	8805003a 	cmpeq	r2,r17,zero
    4c2c:	1000661e 	bne	r2,zero,4dc8 <_dtoa_r+0x588>
    4c30:	d9000d17 	ldw	r4,52(sp)
    4c34:	0102300e 	bge	zero,r4,54f8 <_dtoa_r+0xcb8>
    4c38:	208003cc 	andi	r2,r4,15
    4c3c:	100490fa 	slli	r2,r2,3
    4c40:	2025d13a 	srai	r18,r4,4
    4c44:	00c00074 	movhi	r3,1
    4c48:	18f77104 	addi	r3,r3,-8764
    4c4c:	10c5883a 	add	r2,r2,r3
    4c50:	90c0040c 	andi	r3,r18,16
    4c54:	14000017 	ldw	r16,0(r2)
    4c58:	14400117 	ldw	r17,4(r2)
    4c5c:	18036a1e 	bne	r3,zero,5a08 <_dtoa_r+0x11c8>
    4c60:	05800084 	movi	r22,2
    4c64:	90001026 	beq	r18,zero,4ca8 <_dtoa_r+0x468>
    4c68:	04c00074 	movhi	r19,1
    4c6c:	9cf7a304 	addi	r19,r19,-8564
    4c70:	9080004c 	andi	r2,r18,1
    4c74:	1005003a 	cmpeq	r2,r2,zero
    4c78:	1000081e 	bne	r2,zero,4c9c <_dtoa_r+0x45c>
    4c7c:	99800017 	ldw	r6,0(r19)
    4c80:	99c00117 	ldw	r7,4(r19)
    4c84:	880b883a 	mov	r5,r17
    4c88:	8009883a 	mov	r4,r16
    4c8c:	0009f780 	call	9f78 <__muldf3>
    4c90:	1021883a 	mov	r16,r2
    4c94:	b5800044 	addi	r22,r22,1
    4c98:	1823883a 	mov	r17,r3
    4c9c:	9025d07a 	srai	r18,r18,1
    4ca0:	9cc00204 	addi	r19,r19,8
    4ca4:	903ff21e 	bne	r18,zero,4c70 <_dtoa_r+0x430>
    4ca8:	a80b883a 	mov	r5,r21
    4cac:	a009883a 	mov	r4,r20
    4cb0:	880f883a 	mov	r7,r17
    4cb4:	800d883a 	mov	r6,r16
    4cb8:	000a33c0 	call	a33c <__divdf3>
    4cbc:	1029883a 	mov	r20,r2
    4cc0:	182b883a 	mov	r21,r3
    4cc4:	d8c00c17 	ldw	r3,48(sp)
    4cc8:	1805003a 	cmpeq	r2,r3,zero
    4ccc:	1000081e 	bne	r2,zero,4cf0 <_dtoa_r+0x4b0>
    4cd0:	0005883a 	mov	r2,zero
    4cd4:	00cffc34 	movhi	r3,16368
    4cd8:	180f883a 	mov	r7,r3
    4cdc:	a009883a 	mov	r4,r20
    4ce0:	a80b883a 	mov	r5,r21
    4ce4:	100d883a 	mov	r6,r2
    4ce8:	000a7b40 	call	a7b4 <__ltdf2>
    4cec:	1003fe16 	blt	r2,zero,5ce8 <_dtoa_r+0x14a8>
    4cf0:	b009883a 	mov	r4,r22
    4cf4:	000a83c0 	call	a83c <__floatsidf>
    4cf8:	180b883a 	mov	r5,r3
    4cfc:	1009883a 	mov	r4,r2
    4d00:	a00d883a 	mov	r6,r20
    4d04:	a80f883a 	mov	r7,r21
    4d08:	0009f780 	call	9f78 <__muldf3>
    4d0c:	0011883a 	mov	r8,zero
    4d10:	02500734 	movhi	r9,16412
    4d14:	1009883a 	mov	r4,r2
    4d18:	180b883a 	mov	r5,r3
    4d1c:	480f883a 	mov	r7,r9
    4d20:	400d883a 	mov	r6,r8
    4d24:	0009f040 	call	9f04 <__adddf3>
    4d28:	d9000f17 	ldw	r4,60(sp)
    4d2c:	102d883a 	mov	r22,r2
    4d30:	00bf3034 	movhi	r2,64704
    4d34:	18b9883a 	add	fp,r3,r2
    4d38:	e02f883a 	mov	r23,fp
    4d3c:	20028f1e 	bne	r4,zero,577c <_dtoa_r+0xf3c>
    4d40:	0005883a 	mov	r2,zero
    4d44:	00d00534 	movhi	r3,16404
    4d48:	a009883a 	mov	r4,r20
    4d4c:	a80b883a 	mov	r5,r21
    4d50:	180f883a 	mov	r7,r3
    4d54:	100d883a 	mov	r6,r2
    4d58:	0009e840 	call	9e84 <__subdf3>
    4d5c:	1009883a 	mov	r4,r2
    4d60:	e00f883a 	mov	r7,fp
    4d64:	180b883a 	mov	r5,r3
    4d68:	b00d883a 	mov	r6,r22
    4d6c:	1025883a 	mov	r18,r2
    4d70:	1827883a 	mov	r19,r3
    4d74:	000a6a40 	call	a6a4 <__gtdf2>
    4d78:	00834f16 	blt	zero,r2,5ab8 <_dtoa_r+0x1278>
    4d7c:	e0e0003c 	xorhi	r3,fp,32768
    4d80:	9009883a 	mov	r4,r18
    4d84:	980b883a 	mov	r5,r19
    4d88:	180f883a 	mov	r7,r3
    4d8c:	b00d883a 	mov	r6,r22
    4d90:	000a7b40 	call	a7b4 <__ltdf2>
    4d94:	1000080e 	bge	r2,zero,4db8 <_dtoa_r+0x578>
    4d98:	0027883a 	mov	r19,zero
    4d9c:	0025883a 	mov	r18,zero
    4da0:	d8802617 	ldw	r2,152(sp)
    4da4:	df000517 	ldw	fp,20(sp)
    4da8:	d8000615 	stw	zero,24(sp)
    4dac:	0084303a 	nor	r2,zero,r2
    4db0:	d8800d15 	stw	r2,52(sp)
    4db4:	00019b06 	br	5424 <_dtoa_r+0xbe4>
    4db8:	d9801217 	ldw	r6,72(sp)
    4dbc:	d8801317 	ldw	r2,76(sp)
    4dc0:	3029883a 	mov	r20,r6
    4dc4:	102b883a 	mov	r21,r2
    4dc8:	d8c00217 	ldw	r3,8(sp)
    4dcc:	18008516 	blt	r3,zero,4fe4 <_dtoa_r+0x7a4>
    4dd0:	d9000d17 	ldw	r4,52(sp)
    4dd4:	00800384 	movi	r2,14
    4dd8:	11008216 	blt	r2,r4,4fe4 <_dtoa_r+0x7a4>
    4ddc:	200490fa 	slli	r2,r4,3
    4de0:	d9802617 	ldw	r6,152(sp)
    4de4:	00c00074 	movhi	r3,1
    4de8:	18f77104 	addi	r3,r3,-8764
    4dec:	10c5883a 	add	r2,r2,r3
    4df0:	14800017 	ldw	r18,0(r2)
    4df4:	14c00117 	ldw	r19,4(r2)
    4df8:	30031e16 	blt	r6,zero,5a74 <_dtoa_r+0x1234>
    4dfc:	d9000517 	ldw	r4,20(sp)
    4e00:	d8c00f17 	ldw	r3,60(sp)
    4e04:	a823883a 	mov	r17,r21
    4e08:	a021883a 	mov	r16,r20
    4e0c:	192b883a 	add	r21,r3,r4
    4e10:	2039883a 	mov	fp,r4
    4e14:	00000f06 	br	4e54 <_dtoa_r+0x614>
    4e18:	0005883a 	mov	r2,zero
    4e1c:	00d00934 	movhi	r3,16420
    4e20:	5009883a 	mov	r4,r10
    4e24:	580b883a 	mov	r5,r11
    4e28:	180f883a 	mov	r7,r3
    4e2c:	100d883a 	mov	r6,r2
    4e30:	0009f780 	call	9f78 <__muldf3>
    4e34:	180b883a 	mov	r5,r3
    4e38:	000d883a 	mov	r6,zero
    4e3c:	000f883a 	mov	r7,zero
    4e40:	1009883a 	mov	r4,r2
    4e44:	1021883a 	mov	r16,r2
    4e48:	1823883a 	mov	r17,r3
    4e4c:	000a61c0 	call	a61c <__nedf2>
    4e50:	10004526 	beq	r2,zero,4f68 <_dtoa_r+0x728>
    4e54:	900d883a 	mov	r6,r18
    4e58:	980f883a 	mov	r7,r19
    4e5c:	8009883a 	mov	r4,r16
    4e60:	880b883a 	mov	r5,r17
    4e64:	000a33c0 	call	a33c <__divdf3>
    4e68:	180b883a 	mov	r5,r3
    4e6c:	1009883a 	mov	r4,r2
    4e70:	000a9340 	call	a934 <__fixdfsi>
    4e74:	1009883a 	mov	r4,r2
    4e78:	1029883a 	mov	r20,r2
    4e7c:	000a83c0 	call	a83c <__floatsidf>
    4e80:	180f883a 	mov	r7,r3
    4e84:	9009883a 	mov	r4,r18
    4e88:	980b883a 	mov	r5,r19
    4e8c:	100d883a 	mov	r6,r2
    4e90:	0009f780 	call	9f78 <__muldf3>
    4e94:	180f883a 	mov	r7,r3
    4e98:	880b883a 	mov	r5,r17
    4e9c:	8009883a 	mov	r4,r16
    4ea0:	100d883a 	mov	r6,r2
    4ea4:	0009e840 	call	9e84 <__subdf3>
    4ea8:	1015883a 	mov	r10,r2
    4eac:	a0800c04 	addi	r2,r20,48
    4eb0:	e0800005 	stb	r2,0(fp)
    4eb4:	e7000044 	addi	fp,fp,1
    4eb8:	1817883a 	mov	r11,r3
    4ebc:	e57fd61e 	bne	fp,r21,4e18 <_dtoa_r+0x5d8>
    4ec0:	500d883a 	mov	r6,r10
    4ec4:	180f883a 	mov	r7,r3
    4ec8:	5009883a 	mov	r4,r10
    4ecc:	180b883a 	mov	r5,r3
    4ed0:	0009f040 	call	9f04 <__adddf3>
    4ed4:	100d883a 	mov	r6,r2
    4ed8:	9009883a 	mov	r4,r18
    4edc:	980b883a 	mov	r5,r19
    4ee0:	180f883a 	mov	r7,r3
    4ee4:	1021883a 	mov	r16,r2
    4ee8:	1823883a 	mov	r17,r3
    4eec:	000a7b40 	call	a7b4 <__ltdf2>
    4ef0:	10000816 	blt	r2,zero,4f14 <_dtoa_r+0x6d4>
    4ef4:	980b883a 	mov	r5,r19
    4ef8:	800d883a 	mov	r6,r16
    4efc:	880f883a 	mov	r7,r17
    4f00:	9009883a 	mov	r4,r18
    4f04:	000a5940 	call	a594 <__eqdf2>
    4f08:	1000171e 	bne	r2,zero,4f68 <_dtoa_r+0x728>
    4f0c:	a080004c 	andi	r2,r20,1
    4f10:	10001526 	beq	r2,zero,4f68 <_dtoa_r+0x728>
    4f14:	d8800d17 	ldw	r2,52(sp)
    4f18:	d8800415 	stw	r2,16(sp)
    4f1c:	e009883a 	mov	r4,fp
    4f20:	213fffc4 	addi	r4,r4,-1
    4f24:	20c00007 	ldb	r3,0(r4)
    4f28:	00800e44 	movi	r2,57
    4f2c:	1880081e 	bne	r3,r2,4f50 <_dtoa_r+0x710>
    4f30:	d8800517 	ldw	r2,20(sp)
    4f34:	113ffa1e 	bne	r2,r4,4f20 <_dtoa_r+0x6e0>
    4f38:	d8c00417 	ldw	r3,16(sp)
    4f3c:	d9800517 	ldw	r6,20(sp)
    4f40:	00800c04 	movi	r2,48
    4f44:	18c00044 	addi	r3,r3,1
    4f48:	d8c00415 	stw	r3,16(sp)
    4f4c:	30800005 	stb	r2,0(r6)
    4f50:	20800003 	ldbu	r2,0(r4)
    4f54:	d8c00417 	ldw	r3,16(sp)
    4f58:	27000044 	addi	fp,r4,1
    4f5c:	10800044 	addi	r2,r2,1
    4f60:	d8c00d15 	stw	r3,52(sp)
    4f64:	20800005 	stb	r2,0(r4)
    4f68:	d9001617 	ldw	r4,88(sp)
    4f6c:	d9400717 	ldw	r5,28(sp)
    4f70:	00071f40 	call	71f4 <_Bfree>
    4f74:	e0000005 	stb	zero,0(fp)
    4f78:	d9800d17 	ldw	r6,52(sp)
    4f7c:	d8c02717 	ldw	r3,156(sp)
    4f80:	d9002917 	ldw	r4,164(sp)
    4f84:	30800044 	addi	r2,r6,1
    4f88:	18800015 	stw	r2,0(r3)
    4f8c:	20029c26 	beq	r4,zero,5a00 <_dtoa_r+0x11c0>
    4f90:	d8c00517 	ldw	r3,20(sp)
    4f94:	27000015 	stw	fp,0(r4)
    4f98:	003e5d06 	br	4910 <_dtoa_r+0xd0>
    4f9c:	d9800d17 	ldw	r6,52(sp)
    4fa0:	00c00074 	movhi	r3,1
    4fa4:	18f77104 	addi	r3,r3,-8764
    4fa8:	d9001217 	ldw	r4,72(sp)
    4fac:	300490fa 	slli	r2,r6,3
    4fb0:	d9401317 	ldw	r5,76(sp)
    4fb4:	10c5883a 	add	r2,r2,r3
    4fb8:	12000017 	ldw	r8,0(r2)
    4fbc:	12400117 	ldw	r9,4(r2)
    4fc0:	400d883a 	mov	r6,r8
    4fc4:	480f883a 	mov	r7,r9
    4fc8:	000a7b40 	call	a7b4 <__ltdf2>
    4fcc:	1000030e 	bge	r2,zero,4fdc <_dtoa_r+0x79c>
    4fd0:	d8800d17 	ldw	r2,52(sp)
    4fd4:	10bfffc4 	addi	r2,r2,-1
    4fd8:	d8800d15 	stw	r2,52(sp)
    4fdc:	d8000c15 	stw	zero,48(sp)
    4fe0:	003ea806 	br	4a84 <_dtoa_r+0x244>
    4fe4:	d9000b17 	ldw	r4,44(sp)
    4fe8:	202cc03a 	cmpne	r22,r4,zero
    4fec:	b000c71e 	bne	r22,zero,530c <_dtoa_r+0xacc>
    4ff0:	dc001117 	ldw	r16,68(sp)
    4ff4:	dc801017 	ldw	r18,64(sp)
    4ff8:	0027883a 	mov	r19,zero
    4ffc:	04000b0e 	bge	zero,r16,502c <_dtoa_r+0x7ec>
    5000:	d8c00a17 	ldw	r3,40(sp)
    5004:	00c0090e 	bge	zero,r3,502c <_dtoa_r+0x7ec>
    5008:	8005883a 	mov	r2,r16
    500c:	1c011316 	blt	r3,r16,545c <_dtoa_r+0xc1c>
    5010:	d9000a17 	ldw	r4,40(sp)
    5014:	d9801117 	ldw	r6,68(sp)
    5018:	80a1c83a 	sub	r16,r16,r2
    501c:	2089c83a 	sub	r4,r4,r2
    5020:	308dc83a 	sub	r6,r6,r2
    5024:	d9000a15 	stw	r4,40(sp)
    5028:	d9801115 	stw	r6,68(sp)
    502c:	d8801017 	ldw	r2,64(sp)
    5030:	0080150e 	bge	zero,r2,5088 <_dtoa_r+0x848>
    5034:	d8c00b17 	ldw	r3,44(sp)
    5038:	1805003a 	cmpeq	r2,r3,zero
    503c:	1001c91e 	bne	r2,zero,5764 <_dtoa_r+0xf24>
    5040:	04800e0e 	bge	zero,r18,507c <_dtoa_r+0x83c>
    5044:	d9001617 	ldw	r4,88(sp)
    5048:	980b883a 	mov	r5,r19
    504c:	900d883a 	mov	r6,r18
    5050:	0007fa80 	call	7fa8 <__pow5mult>
    5054:	d9001617 	ldw	r4,88(sp)
    5058:	d9800717 	ldw	r6,28(sp)
    505c:	100b883a 	mov	r5,r2
    5060:	1027883a 	mov	r19,r2
    5064:	0007c840 	call	7c84 <__multiply>
    5068:	d9001617 	ldw	r4,88(sp)
    506c:	d9400717 	ldw	r5,28(sp)
    5070:	1023883a 	mov	r17,r2
    5074:	00071f40 	call	71f4 <_Bfree>
    5078:	dc400715 	stw	r17,28(sp)
    507c:	d9001017 	ldw	r4,64(sp)
    5080:	248dc83a 	sub	r6,r4,r18
    5084:	30010e1e 	bne	r6,zero,54c0 <_dtoa_r+0xc80>
    5088:	d9001617 	ldw	r4,88(sp)
    508c:	04400044 	movi	r17,1
    5090:	880b883a 	mov	r5,r17
    5094:	0007e6c0 	call	7e6c <__i2b>
    5098:	d9800917 	ldw	r6,36(sp)
    509c:	1025883a 	mov	r18,r2
    50a0:	0180040e 	bge	zero,r6,50b4 <_dtoa_r+0x874>
    50a4:	d9001617 	ldw	r4,88(sp)
    50a8:	100b883a 	mov	r5,r2
    50ac:	0007fa80 	call	7fa8 <__pow5mult>
    50b0:	1025883a 	mov	r18,r2
    50b4:	d8801717 	ldw	r2,92(sp)
    50b8:	8880f30e 	bge	r17,r2,5488 <_dtoa_r+0xc48>
    50bc:	0023883a 	mov	r17,zero
    50c0:	d9800917 	ldw	r6,36(sp)
    50c4:	30019e1e 	bne	r6,zero,5740 <_dtoa_r+0xf00>
    50c8:	00c00044 	movi	r3,1
    50cc:	d9000a17 	ldw	r4,40(sp)
    50d0:	20c5883a 	add	r2,r4,r3
    50d4:	10c007cc 	andi	r3,r2,31
    50d8:	1800841e 	bne	r3,zero,52ec <_dtoa_r+0xaac>
    50dc:	00800704 	movi	r2,28
    50e0:	d9000a17 	ldw	r4,40(sp)
    50e4:	d9801117 	ldw	r6,68(sp)
    50e8:	80a1883a 	add	r16,r16,r2
    50ec:	2089883a 	add	r4,r4,r2
    50f0:	308d883a 	add	r6,r6,r2
    50f4:	d9000a15 	stw	r4,40(sp)
    50f8:	d9801115 	stw	r6,68(sp)
    50fc:	d8801117 	ldw	r2,68(sp)
    5100:	0080050e 	bge	zero,r2,5118 <_dtoa_r+0x8d8>
    5104:	d9400717 	ldw	r5,28(sp)
    5108:	d9001617 	ldw	r4,88(sp)
    510c:	100d883a 	mov	r6,r2
    5110:	0007b380 	call	7b38 <__lshift>
    5114:	d8800715 	stw	r2,28(sp)
    5118:	d8c00a17 	ldw	r3,40(sp)
    511c:	00c0050e 	bge	zero,r3,5134 <_dtoa_r+0x8f4>
    5120:	d9001617 	ldw	r4,88(sp)
    5124:	900b883a 	mov	r5,r18
    5128:	180d883a 	mov	r6,r3
    512c:	0007b380 	call	7b38 <__lshift>
    5130:	1025883a 	mov	r18,r2
    5134:	d9000c17 	ldw	r4,48(sp)
    5138:	2005003a 	cmpeq	r2,r4,zero
    513c:	10016f26 	beq	r2,zero,56fc <_dtoa_r+0xebc>
    5140:	d9000f17 	ldw	r4,60(sp)
    5144:	0102170e 	bge	zero,r4,59a4 <_dtoa_r+0x1164>
    5148:	d9800b17 	ldw	r6,44(sp)
    514c:	3005003a 	cmpeq	r2,r6,zero
    5150:	1000881e 	bne	r2,zero,5374 <_dtoa_r+0xb34>
    5154:	0400050e 	bge	zero,r16,516c <_dtoa_r+0x92c>
    5158:	d9001617 	ldw	r4,88(sp)
    515c:	980b883a 	mov	r5,r19
    5160:	800d883a 	mov	r6,r16
    5164:	0007b380 	call	7b38 <__lshift>
    5168:	1027883a 	mov	r19,r2
    516c:	8804c03a 	cmpne	r2,r17,zero
    5170:	1002541e 	bne	r2,zero,5ac4 <_dtoa_r+0x1284>
    5174:	980b883a 	mov	r5,r19
    5178:	dd800517 	ldw	r22,20(sp)
    517c:	dcc00615 	stw	r19,24(sp)
    5180:	a700004c 	andi	fp,r20,1
    5184:	2827883a 	mov	r19,r5
    5188:	d9000717 	ldw	r4,28(sp)
    518c:	900b883a 	mov	r5,r18
    5190:	00046280 	call	4628 <quorem>
    5194:	d9000717 	ldw	r4,28(sp)
    5198:	d9400617 	ldw	r5,24(sp)
    519c:	1023883a 	mov	r17,r2
    51a0:	8dc00c04 	addi	r23,r17,48
    51a4:	00073500 	call	7350 <__mcmp>
    51a8:	d9001617 	ldw	r4,88(sp)
    51ac:	900b883a 	mov	r5,r18
    51b0:	980d883a 	mov	r6,r19
    51b4:	1029883a 	mov	r20,r2
    51b8:	00079ac0 	call	79ac <__mdiff>
    51bc:	102b883a 	mov	r21,r2
    51c0:	10800317 	ldw	r2,12(r2)
    51c4:	1001281e 	bne	r2,zero,5668 <_dtoa_r+0xe28>
    51c8:	d9000717 	ldw	r4,28(sp)
    51cc:	a80b883a 	mov	r5,r21
    51d0:	00073500 	call	7350 <__mcmp>
    51d4:	d9001617 	ldw	r4,88(sp)
    51d8:	1021883a 	mov	r16,r2
    51dc:	a80b883a 	mov	r5,r21
    51e0:	00071f40 	call	71f4 <_Bfree>
    51e4:	8000041e 	bne	r16,zero,51f8 <_dtoa_r+0x9b8>
    51e8:	d8801717 	ldw	r2,92(sp)
    51ec:	1000021e 	bne	r2,zero,51f8 <_dtoa_r+0x9b8>
    51f0:	e004c03a 	cmpne	r2,fp,zero
    51f4:	10011726 	beq	r2,zero,5654 <_dtoa_r+0xe14>
    51f8:	a0010616 	blt	r20,zero,5614 <_dtoa_r+0xdd4>
    51fc:	a000041e 	bne	r20,zero,5210 <_dtoa_r+0x9d0>
    5200:	d8c01717 	ldw	r3,92(sp)
    5204:	1800021e 	bne	r3,zero,5210 <_dtoa_r+0x9d0>
    5208:	e004c03a 	cmpne	r2,fp,zero
    520c:	10010126 	beq	r2,zero,5614 <_dtoa_r+0xdd4>
    5210:	04023d16 	blt	zero,r16,5b08 <_dtoa_r+0x12c8>
    5214:	b5c00005 	stb	r23,0(r22)
    5218:	d9800517 	ldw	r6,20(sp)
    521c:	d9000f17 	ldw	r4,60(sp)
    5220:	b5800044 	addi	r22,r22,1
    5224:	3105883a 	add	r2,r6,r4
    5228:	b0806526 	beq	r22,r2,53c0 <_dtoa_r+0xb80>
    522c:	d9400717 	ldw	r5,28(sp)
    5230:	d9001617 	ldw	r4,88(sp)
    5234:	01800284 	movi	r6,10
    5238:	000f883a 	mov	r7,zero
    523c:	0007ea80 	call	7ea8 <__multadd>
    5240:	d8800715 	stw	r2,28(sp)
    5244:	d8800617 	ldw	r2,24(sp)
    5248:	14c10c26 	beq	r2,r19,567c <_dtoa_r+0xe3c>
    524c:	d9400617 	ldw	r5,24(sp)
    5250:	d9001617 	ldw	r4,88(sp)
    5254:	01800284 	movi	r6,10
    5258:	000f883a 	mov	r7,zero
    525c:	0007ea80 	call	7ea8 <__multadd>
    5260:	d9001617 	ldw	r4,88(sp)
    5264:	980b883a 	mov	r5,r19
    5268:	01800284 	movi	r6,10
    526c:	000f883a 	mov	r7,zero
    5270:	d8800615 	stw	r2,24(sp)
    5274:	0007ea80 	call	7ea8 <__multadd>
    5278:	1027883a 	mov	r19,r2
    527c:	003fc206 	br	5188 <_dtoa_r+0x948>
    5280:	2445c83a 	sub	r2,r4,r17
    5284:	a088983a 	sll	r4,r20,r2
    5288:	003e4b06 	br	4bb8 <_dtoa_r+0x378>
    528c:	01bfffc4 	movi	r6,-1
    5290:	00800044 	movi	r2,1
    5294:	d9800e15 	stw	r6,56(sp)
    5298:	d9800f15 	stw	r6,60(sp)
    529c:	d8800b15 	stw	r2,44(sp)
    52a0:	d8c01617 	ldw	r3,88(sp)
    52a4:	008005c4 	movi	r2,23
    52a8:	18001115 	stw	zero,68(r3)
    52ac:	1580082e 	bgeu	r2,r22,52d0 <_dtoa_r+0xa90>
    52b0:	00c00104 	movi	r3,4
    52b4:	0009883a 	mov	r4,zero
    52b8:	18c7883a 	add	r3,r3,r3
    52bc:	18800504 	addi	r2,r3,20
    52c0:	21000044 	addi	r4,r4,1
    52c4:	b0bffc2e 	bgeu	r22,r2,52b8 <_dtoa_r+0xa78>
    52c8:	d9801617 	ldw	r6,88(sp)
    52cc:	31001115 	stw	r4,68(r6)
    52d0:	dc000f17 	ldw	r16,60(sp)
    52d4:	003e4b06 	br	4c04 <_dtoa_r+0x3c4>
    52d8:	d9801717 	ldw	r6,92(sp)
    52dc:	0023883a 	mov	r17,zero
    52e0:	31bfff04 	addi	r6,r6,-4
    52e4:	d9801715 	stw	r6,92(sp)
    52e8:	003df806 	br	4acc <_dtoa_r+0x28c>
    52ec:	00800804 	movi	r2,32
    52f0:	10c9c83a 	sub	r4,r2,r3
    52f4:	00c00104 	movi	r3,4
    52f8:	19005a16 	blt	r3,r4,5464 <_dtoa_r+0xc24>
    52fc:	008000c4 	movi	r2,3
    5300:	113f7e16 	blt	r2,r4,50fc <_dtoa_r+0x8bc>
    5304:	20800704 	addi	r2,r4,28
    5308:	003f7506 	br	50e0 <_dtoa_r+0x8a0>
    530c:	d9801717 	ldw	r6,92(sp)
    5310:	00800044 	movi	r2,1
    5314:	1180a10e 	bge	r2,r6,559c <_dtoa_r+0xd5c>
    5318:	d9800f17 	ldw	r6,60(sp)
    531c:	d8c01017 	ldw	r3,64(sp)
    5320:	30bfffc4 	addi	r2,r6,-1
    5324:	1881c616 	blt	r3,r2,5a40 <_dtoa_r+0x1200>
    5328:	18a5c83a 	sub	r18,r3,r2
    532c:	d8800f17 	ldw	r2,60(sp)
    5330:	10026216 	blt	r2,zero,5cbc <_dtoa_r+0x147c>
    5334:	dc001117 	ldw	r16,68(sp)
    5338:	1007883a 	mov	r3,r2
    533c:	d9800a17 	ldw	r6,40(sp)
    5340:	d8801117 	ldw	r2,68(sp)
    5344:	d9001617 	ldw	r4,88(sp)
    5348:	30cd883a 	add	r6,r6,r3
    534c:	10c5883a 	add	r2,r2,r3
    5350:	01400044 	movi	r5,1
    5354:	d9800a15 	stw	r6,40(sp)
    5358:	d8801115 	stw	r2,68(sp)
    535c:	0007e6c0 	call	7e6c <__i2b>
    5360:	1027883a 	mov	r19,r2
    5364:	003f2506 	br	4ffc <_dtoa_r+0x7bc>
    5368:	00c00074 	movhi	r3,1
    536c:	18f75404 	addi	r3,r3,-8880
    5370:	003d6706 	br	4910 <_dtoa_r+0xd0>
    5374:	dd800517 	ldw	r22,20(sp)
    5378:	04000044 	movi	r16,1
    537c:	00000706 	br	539c <_dtoa_r+0xb5c>
    5380:	d9400717 	ldw	r5,28(sp)
    5384:	d9001617 	ldw	r4,88(sp)
    5388:	01800284 	movi	r6,10
    538c:	000f883a 	mov	r7,zero
    5390:	0007ea80 	call	7ea8 <__multadd>
    5394:	d8800715 	stw	r2,28(sp)
    5398:	84000044 	addi	r16,r16,1
    539c:	d9000717 	ldw	r4,28(sp)
    53a0:	900b883a 	mov	r5,r18
    53a4:	00046280 	call	4628 <quorem>
    53a8:	15c00c04 	addi	r23,r2,48
    53ac:	b5c00005 	stb	r23,0(r22)
    53b0:	d8c00f17 	ldw	r3,60(sp)
    53b4:	b5800044 	addi	r22,r22,1
    53b8:	80fff116 	blt	r16,r3,5380 <_dtoa_r+0xb40>
    53bc:	d8000615 	stw	zero,24(sp)
    53c0:	d9400717 	ldw	r5,28(sp)
    53c4:	d9001617 	ldw	r4,88(sp)
    53c8:	01800044 	movi	r6,1
    53cc:	0007b380 	call	7b38 <__lshift>
    53d0:	1009883a 	mov	r4,r2
    53d4:	900b883a 	mov	r5,r18
    53d8:	d8800715 	stw	r2,28(sp)
    53dc:	00073500 	call	7350 <__mcmp>
    53e0:	00803c0e 	bge	zero,r2,54d4 <_dtoa_r+0xc94>
    53e4:	b009883a 	mov	r4,r22
    53e8:	213fffc4 	addi	r4,r4,-1
    53ec:	21400003 	ldbu	r5,0(r4)
    53f0:	00800e44 	movi	r2,57
    53f4:	28c03fcc 	andi	r3,r5,255
    53f8:	18c0201c 	xori	r3,r3,128
    53fc:	18ffe004 	addi	r3,r3,-128
    5400:	1881981e 	bne	r3,r2,5a64 <_dtoa_r+0x1224>
    5404:	d9800517 	ldw	r6,20(sp)
    5408:	21bff71e 	bne	r4,r6,53e8 <_dtoa_r+0xba8>
    540c:	d8800d17 	ldw	r2,52(sp)
    5410:	37000044 	addi	fp,r6,1
    5414:	10800044 	addi	r2,r2,1
    5418:	d8800d15 	stw	r2,52(sp)
    541c:	00800c44 	movi	r2,49
    5420:	30800005 	stb	r2,0(r6)
    5424:	d9001617 	ldw	r4,88(sp)
    5428:	900b883a 	mov	r5,r18
    542c:	00071f40 	call	71f4 <_Bfree>
    5430:	983ecd26 	beq	r19,zero,4f68 <_dtoa_r+0x728>
    5434:	d8c00617 	ldw	r3,24(sp)
    5438:	18000426 	beq	r3,zero,544c <_dtoa_r+0xc0c>
    543c:	1cc00326 	beq	r3,r19,544c <_dtoa_r+0xc0c>
    5440:	d9001617 	ldw	r4,88(sp)
    5444:	180b883a 	mov	r5,r3
    5448:	00071f40 	call	71f4 <_Bfree>
    544c:	d9001617 	ldw	r4,88(sp)
    5450:	980b883a 	mov	r5,r19
    5454:	00071f40 	call	71f4 <_Bfree>
    5458:	003ec306 	br	4f68 <_dtoa_r+0x728>
    545c:	1805883a 	mov	r2,r3
    5460:	003eeb06 	br	5010 <_dtoa_r+0x7d0>
    5464:	d9800a17 	ldw	r6,40(sp)
    5468:	d8c01117 	ldw	r3,68(sp)
    546c:	20bfff04 	addi	r2,r4,-4
    5470:	308d883a 	add	r6,r6,r2
    5474:	1887883a 	add	r3,r3,r2
    5478:	80a1883a 	add	r16,r16,r2
    547c:	d9800a15 	stw	r6,40(sp)
    5480:	d8c01115 	stw	r3,68(sp)
    5484:	003f1d06 	br	50fc <_dtoa_r+0x8bc>
    5488:	a03f0c1e 	bne	r20,zero,50bc <_dtoa_r+0x87c>
    548c:	00800434 	movhi	r2,16
    5490:	10bfffc4 	addi	r2,r2,-1
    5494:	a884703a 	and	r2,r21,r2
    5498:	103f081e 	bne	r2,zero,50bc <_dtoa_r+0x87c>
    549c:	a89ffc2c 	andhi	r2,r21,32752
    54a0:	103f0626 	beq	r2,zero,50bc <_dtoa_r+0x87c>
    54a4:	d8c01117 	ldw	r3,68(sp)
    54a8:	d9000a17 	ldw	r4,40(sp)
    54ac:	18c00044 	addi	r3,r3,1
    54b0:	21000044 	addi	r4,r4,1
    54b4:	d8c01115 	stw	r3,68(sp)
    54b8:	d9000a15 	stw	r4,40(sp)
    54bc:	003f0006 	br	50c0 <_dtoa_r+0x880>
    54c0:	d9400717 	ldw	r5,28(sp)
    54c4:	d9001617 	ldw	r4,88(sp)
    54c8:	0007fa80 	call	7fa8 <__pow5mult>
    54cc:	d8800715 	stw	r2,28(sp)
    54d0:	003eed06 	br	5088 <_dtoa_r+0x848>
    54d4:	1000021e 	bne	r2,zero,54e0 <_dtoa_r+0xca0>
    54d8:	b880004c 	andi	r2,r23,1
    54dc:	103fc11e 	bne	r2,zero,53e4 <_dtoa_r+0xba4>
    54e0:	b5bfffc4 	addi	r22,r22,-1
    54e4:	b0c00007 	ldb	r3,0(r22)
    54e8:	00800c04 	movi	r2,48
    54ec:	18bffc26 	beq	r3,r2,54e0 <_dtoa_r+0xca0>
    54f0:	b7000044 	addi	fp,r22,1
    54f4:	003fcb06 	br	5424 <_dtoa_r+0xbe4>
    54f8:	d9800d17 	ldw	r6,52(sp)
    54fc:	018fc83a 	sub	r7,zero,r6
    5500:	3801f726 	beq	r7,zero,5ce0 <_dtoa_r+0x14a0>
    5504:	398003cc 	andi	r6,r7,15
    5508:	300c90fa 	slli	r6,r6,3
    550c:	01400074 	movhi	r5,1
    5510:	29777104 	addi	r5,r5,-8764
    5514:	d9001217 	ldw	r4,72(sp)
    5518:	314d883a 	add	r6,r6,r5
    551c:	30c00117 	ldw	r3,4(r6)
    5520:	30800017 	ldw	r2,0(r6)
    5524:	d9401317 	ldw	r5,76(sp)
    5528:	3821d13a 	srai	r16,r7,4
    552c:	100d883a 	mov	r6,r2
    5530:	180f883a 	mov	r7,r3
    5534:	0009f780 	call	9f78 <__muldf3>
    5538:	1011883a 	mov	r8,r2
    553c:	1813883a 	mov	r9,r3
    5540:	1029883a 	mov	r20,r2
    5544:	182b883a 	mov	r21,r3
    5548:	8001e526 	beq	r16,zero,5ce0 <_dtoa_r+0x14a0>
    554c:	05800084 	movi	r22,2
    5550:	04400074 	movhi	r17,1
    5554:	8c77a304 	addi	r17,r17,-8564
    5558:	8080004c 	andi	r2,r16,1
    555c:	1005003a 	cmpeq	r2,r2,zero
    5560:	1000081e 	bne	r2,zero,5584 <_dtoa_r+0xd44>
    5564:	89800017 	ldw	r6,0(r17)
    5568:	89c00117 	ldw	r7,4(r17)
    556c:	480b883a 	mov	r5,r9
    5570:	4009883a 	mov	r4,r8
    5574:	0009f780 	call	9f78 <__muldf3>
    5578:	1011883a 	mov	r8,r2
    557c:	b5800044 	addi	r22,r22,1
    5580:	1813883a 	mov	r9,r3
    5584:	8021d07a 	srai	r16,r16,1
    5588:	8c400204 	addi	r17,r17,8
    558c:	803ff21e 	bne	r16,zero,5558 <_dtoa_r+0xd18>
    5590:	4029883a 	mov	r20,r8
    5594:	482b883a 	mov	r21,r9
    5598:	003dca06 	br	4cc4 <_dtoa_r+0x484>
    559c:	d9000817 	ldw	r4,32(sp)
    55a0:	2005003a 	cmpeq	r2,r4,zero
    55a4:	1001f61e 	bne	r2,zero,5d80 <_dtoa_r+0x1540>
    55a8:	dc001117 	ldw	r16,68(sp)
    55ac:	dc801017 	ldw	r18,64(sp)
    55b0:	18c10cc4 	addi	r3,r3,1075
    55b4:	003f6106 	br	533c <_dtoa_r+0xafc>
    55b8:	d8000b15 	stw	zero,44(sp)
    55bc:	d9802617 	ldw	r6,152(sp)
    55c0:	d8c00d17 	ldw	r3,52(sp)
    55c4:	30800044 	addi	r2,r6,1
    55c8:	18ad883a 	add	r22,r3,r2
    55cc:	b13fffc4 	addi	r4,r22,-1
    55d0:	d9000e15 	stw	r4,56(sp)
    55d4:	0581f60e 	bge	zero,r22,5db0 <_dtoa_r+0x1570>
    55d8:	dd800f15 	stw	r22,60(sp)
    55dc:	003f3006 	br	52a0 <_dtoa_r+0xa60>
    55e0:	d8000b15 	stw	zero,44(sp)
    55e4:	d9002617 	ldw	r4,152(sp)
    55e8:	0101eb0e 	bge	zero,r4,5d98 <_dtoa_r+0x1558>
    55ec:	202d883a 	mov	r22,r4
    55f0:	d9000e15 	stw	r4,56(sp)
    55f4:	d9000f15 	stw	r4,60(sp)
    55f8:	003f2906 	br	52a0 <_dtoa_r+0xa60>
    55fc:	01800044 	movi	r6,1
    5600:	d9800b15 	stw	r6,44(sp)
    5604:	003ff706 	br	55e4 <_dtoa_r+0xda4>
    5608:	01000044 	movi	r4,1
    560c:	d9000b15 	stw	r4,44(sp)
    5610:	003fea06 	br	55bc <_dtoa_r+0xd7c>
    5614:	04000c0e 	bge	zero,r16,5648 <_dtoa_r+0xe08>
    5618:	d9400717 	ldw	r5,28(sp)
    561c:	d9001617 	ldw	r4,88(sp)
    5620:	01800044 	movi	r6,1
    5624:	0007b380 	call	7b38 <__lshift>
    5628:	1009883a 	mov	r4,r2
    562c:	900b883a 	mov	r5,r18
    5630:	d8800715 	stw	r2,28(sp)
    5634:	00073500 	call	7350 <__mcmp>
    5638:	0081e00e 	bge	zero,r2,5dbc <_dtoa_r+0x157c>
    563c:	bdc00044 	addi	r23,r23,1
    5640:	00800e84 	movi	r2,58
    5644:	b881a226 	beq	r23,r2,5cd0 <_dtoa_r+0x1490>
    5648:	b7000044 	addi	fp,r22,1
    564c:	b5c00005 	stb	r23,0(r22)
    5650:	003f7406 	br	5424 <_dtoa_r+0xbe4>
    5654:	00800e44 	movi	r2,57
    5658:	b8819d26 	beq	r23,r2,5cd0 <_dtoa_r+0x1490>
    565c:	053ffa0e 	bge	zero,r20,5648 <_dtoa_r+0xe08>
    5660:	8dc00c44 	addi	r23,r17,49
    5664:	003ff806 	br	5648 <_dtoa_r+0xe08>
    5668:	d9001617 	ldw	r4,88(sp)
    566c:	a80b883a 	mov	r5,r21
    5670:	04000044 	movi	r16,1
    5674:	00071f40 	call	71f4 <_Bfree>
    5678:	003edf06 	br	51f8 <_dtoa_r+0x9b8>
    567c:	d9001617 	ldw	r4,88(sp)
    5680:	980b883a 	mov	r5,r19
    5684:	01800284 	movi	r6,10
    5688:	000f883a 	mov	r7,zero
    568c:	0007ea80 	call	7ea8 <__multadd>
    5690:	1027883a 	mov	r19,r2
    5694:	d8800615 	stw	r2,24(sp)
    5698:	003ebb06 	br	5188 <_dtoa_r+0x948>
    569c:	d9801117 	ldw	r6,68(sp)
    56a0:	d8800d17 	ldw	r2,52(sp)
    56a4:	d8000915 	stw	zero,36(sp)
    56a8:	308dc83a 	sub	r6,r6,r2
    56ac:	0087c83a 	sub	r3,zero,r2
    56b0:	d9801115 	stw	r6,68(sp)
    56b4:	d8c01015 	stw	r3,64(sp)
    56b8:	003cfe06 	br	4ab4 <_dtoa_r+0x274>
    56bc:	018dc83a 	sub	r6,zero,r6
    56c0:	d9801115 	stw	r6,68(sp)
    56c4:	d8000a15 	stw	zero,40(sp)
    56c8:	003cf306 	br	4a98 <_dtoa_r+0x258>
    56cc:	d9000d17 	ldw	r4,52(sp)
    56d0:	000a83c0 	call	a83c <__floatsidf>
    56d4:	880b883a 	mov	r5,r17
    56d8:	8009883a 	mov	r4,r16
    56dc:	180f883a 	mov	r7,r3
    56e0:	100d883a 	mov	r6,r2
    56e4:	000a61c0 	call	a61c <__nedf2>
    56e8:	103ce126 	beq	r2,zero,4a70 <_dtoa_r+0x230>
    56ec:	d9800d17 	ldw	r6,52(sp)
    56f0:	31bfffc4 	addi	r6,r6,-1
    56f4:	d9800d15 	stw	r6,52(sp)
    56f8:	003cdd06 	br	4a70 <_dtoa_r+0x230>
    56fc:	d9000717 	ldw	r4,28(sp)
    5700:	900b883a 	mov	r5,r18
    5704:	00073500 	call	7350 <__mcmp>
    5708:	103e8d0e 	bge	r2,zero,5140 <_dtoa_r+0x900>
    570c:	d9400717 	ldw	r5,28(sp)
    5710:	d9001617 	ldw	r4,88(sp)
    5714:	01800284 	movi	r6,10
    5718:	000f883a 	mov	r7,zero
    571c:	0007ea80 	call	7ea8 <__multadd>
    5720:	d9800d17 	ldw	r6,52(sp)
    5724:	d8800715 	stw	r2,28(sp)
    5728:	31bfffc4 	addi	r6,r6,-1
    572c:	d9800d15 	stw	r6,52(sp)
    5730:	b001a71e 	bne	r22,zero,5dd0 <_dtoa_r+0x1590>
    5734:	d8800e17 	ldw	r2,56(sp)
    5738:	d8800f15 	stw	r2,60(sp)
    573c:	003e8006 	br	5140 <_dtoa_r+0x900>
    5740:	90800417 	ldw	r2,16(r18)
    5744:	1085883a 	add	r2,r2,r2
    5748:	1085883a 	add	r2,r2,r2
    574c:	1485883a 	add	r2,r2,r18
    5750:	11000417 	ldw	r4,16(r2)
    5754:	000721c0 	call	721c <__hi0bits>
    5758:	00c00804 	movi	r3,32
    575c:	1887c83a 	sub	r3,r3,r2
    5760:	003e5a06 	br	50cc <_dtoa_r+0x88c>
    5764:	d9400717 	ldw	r5,28(sp)
    5768:	d9801017 	ldw	r6,64(sp)
    576c:	d9001617 	ldw	r4,88(sp)
    5770:	0007fa80 	call	7fa8 <__pow5mult>
    5774:	d8800715 	stw	r2,28(sp)
    5778:	003e4306 	br	5088 <_dtoa_r+0x848>
    577c:	d9800f17 	ldw	r6,60(sp)
    5780:	d8800d17 	ldw	r2,52(sp)
    5784:	d9800315 	stw	r6,12(sp)
    5788:	d8800415 	stw	r2,16(sp)
    578c:	d8c00b17 	ldw	r3,44(sp)
    5790:	1805003a 	cmpeq	r2,r3,zero
    5794:	1000e21e 	bne	r2,zero,5b20 <_dtoa_r+0x12e0>
    5798:	d9000317 	ldw	r4,12(sp)
    579c:	0005883a 	mov	r2,zero
    57a0:	00cff834 	movhi	r3,16352
    57a4:	200c90fa 	slli	r6,r4,3
    57a8:	01000074 	movhi	r4,1
    57ac:	21377104 	addi	r4,r4,-8764
    57b0:	180b883a 	mov	r5,r3
    57b4:	310d883a 	add	r6,r6,r4
    57b8:	327fff17 	ldw	r9,-4(r6)
    57bc:	323ffe17 	ldw	r8,-8(r6)
    57c0:	1009883a 	mov	r4,r2
    57c4:	480f883a 	mov	r7,r9
    57c8:	400d883a 	mov	r6,r8
    57cc:	000a33c0 	call	a33c <__divdf3>
    57d0:	180b883a 	mov	r5,r3
    57d4:	b00d883a 	mov	r6,r22
    57d8:	b80f883a 	mov	r7,r23
    57dc:	1009883a 	mov	r4,r2
    57e0:	0009e840 	call	9e84 <__subdf3>
    57e4:	a80b883a 	mov	r5,r21
    57e8:	a009883a 	mov	r4,r20
    57ec:	d8c01915 	stw	r3,100(sp)
    57f0:	d8801815 	stw	r2,96(sp)
    57f4:	000a9340 	call	a934 <__fixdfsi>
    57f8:	1009883a 	mov	r4,r2
    57fc:	1027883a 	mov	r19,r2
    5800:	000a83c0 	call	a83c <__floatsidf>
    5804:	a80b883a 	mov	r5,r21
    5808:	a009883a 	mov	r4,r20
    580c:	180f883a 	mov	r7,r3
    5810:	100d883a 	mov	r6,r2
    5814:	0009e840 	call	9e84 <__subdf3>
    5818:	d9801817 	ldw	r6,96(sp)
    581c:	1823883a 	mov	r17,r3
    5820:	d8801415 	stw	r2,80(sp)
    5824:	302d883a 	mov	r22,r6
    5828:	d9800517 	ldw	r6,20(sp)
    582c:	9cc00c04 	addi	r19,r19,48
    5830:	dc401515 	stw	r17,84(sp)
    5834:	d8c01917 	ldw	r3,100(sp)
    5838:	34c00005 	stb	r19,0(r6)
    583c:	d8800517 	ldw	r2,20(sp)
    5840:	d9401917 	ldw	r5,100(sp)
    5844:	d9801417 	ldw	r6,80(sp)
    5848:	b009883a 	mov	r4,r22
    584c:	880f883a 	mov	r7,r17
    5850:	182f883a 	mov	r23,r3
    5854:	17000044 	addi	fp,r2,1
    5858:	000a6a40 	call	a6a4 <__gtdf2>
    585c:	00804e16 	blt	zero,r2,5998 <_dtoa_r+0x1158>
    5860:	d9801417 	ldw	r6,80(sp)
    5864:	0005883a 	mov	r2,zero
    5868:	00cffc34 	movhi	r3,16368
    586c:	180b883a 	mov	r5,r3
    5870:	880f883a 	mov	r7,r17
    5874:	1009883a 	mov	r4,r2
    5878:	0009e840 	call	9e84 <__subdf3>
    587c:	d9401917 	ldw	r5,100(sp)
    5880:	180f883a 	mov	r7,r3
    5884:	b009883a 	mov	r4,r22
    5888:	100d883a 	mov	r6,r2
    588c:	000a6a40 	call	a6a4 <__gtdf2>
    5890:	00bda216 	blt	zero,r2,4f1c <_dtoa_r+0x6dc>
    5894:	d8c00317 	ldw	r3,12(sp)
    5898:	00800044 	movi	r2,1
    589c:	10c01216 	blt	r2,r3,58e8 <_dtoa_r+0x10a8>
    58a0:	003d4506 	br	4db8 <_dtoa_r+0x578>
    58a4:	d9801417 	ldw	r6,80(sp)
    58a8:	0005883a 	mov	r2,zero
    58ac:	00cffc34 	movhi	r3,16368
    58b0:	180b883a 	mov	r5,r3
    58b4:	880f883a 	mov	r7,r17
    58b8:	1009883a 	mov	r4,r2
    58bc:	0009e840 	call	9e84 <__subdf3>
    58c0:	d9c01b17 	ldw	r7,108(sp)
    58c4:	180b883a 	mov	r5,r3
    58c8:	1009883a 	mov	r4,r2
    58cc:	b00d883a 	mov	r6,r22
    58d0:	000a7b40 	call	a7b4 <__ltdf2>
    58d4:	103d9116 	blt	r2,zero,4f1c <_dtoa_r+0x6dc>
    58d8:	d9800517 	ldw	r6,20(sp)
    58dc:	d9000317 	ldw	r4,12(sp)
    58e0:	3105883a 	add	r2,r6,r4
    58e4:	e0bd3426 	beq	fp,r2,4db8 <_dtoa_r+0x578>
    58e8:	04500934 	movhi	r17,16420
    58ec:	0021883a 	mov	r16,zero
    58f0:	b80b883a 	mov	r5,r23
    58f4:	b009883a 	mov	r4,r22
    58f8:	800d883a 	mov	r6,r16
    58fc:	880f883a 	mov	r7,r17
    5900:	0009f780 	call	9f78 <__muldf3>
    5904:	d9401517 	ldw	r5,84(sp)
    5908:	d9001417 	ldw	r4,80(sp)
    590c:	880f883a 	mov	r7,r17
    5910:	000d883a 	mov	r6,zero
    5914:	d8801a15 	stw	r2,104(sp)
    5918:	d8c01b15 	stw	r3,108(sp)
    591c:	0009f780 	call	9f78 <__muldf3>
    5920:	180b883a 	mov	r5,r3
    5924:	1009883a 	mov	r4,r2
    5928:	1823883a 	mov	r17,r3
    592c:	1021883a 	mov	r16,r2
    5930:	000a9340 	call	a934 <__fixdfsi>
    5934:	1009883a 	mov	r4,r2
    5938:	102b883a 	mov	r21,r2
    593c:	000a83c0 	call	a83c <__floatsidf>
    5940:	880b883a 	mov	r5,r17
    5944:	8009883a 	mov	r4,r16
    5948:	180f883a 	mov	r7,r3
    594c:	100d883a 	mov	r6,r2
    5950:	0009e840 	call	9e84 <__subdf3>
    5954:	1021883a 	mov	r16,r2
    5958:	d9001b17 	ldw	r4,108(sp)
    595c:	1823883a 	mov	r17,r3
    5960:	dc001415 	stw	r16,80(sp)
    5964:	ad400c04 	addi	r21,r21,48
    5968:	dc401515 	stw	r17,84(sp)
    596c:	d8801a17 	ldw	r2,104(sp)
    5970:	e5400005 	stb	r21,0(fp)
    5974:	202f883a 	mov	r23,r4
    5978:	d9c01b17 	ldw	r7,108(sp)
    597c:	d9001417 	ldw	r4,80(sp)
    5980:	880b883a 	mov	r5,r17
    5984:	100d883a 	mov	r6,r2
    5988:	102d883a 	mov	r22,r2
    598c:	e7000044 	addi	fp,fp,1
    5990:	000a7b40 	call	a7b4 <__ltdf2>
    5994:	103fc30e 	bge	r2,zero,58a4 <_dtoa_r+0x1064>
    5998:	d9000417 	ldw	r4,16(sp)
    599c:	d9000d15 	stw	r4,52(sp)
    59a0:	003d7106 	br	4f68 <_dtoa_r+0x728>
    59a4:	d9801717 	ldw	r6,92(sp)
    59a8:	00800084 	movi	r2,2
    59ac:	11bde60e 	bge	r2,r6,5148 <_dtoa_r+0x908>
    59b0:	203cfb1e 	bne	r4,zero,4da0 <_dtoa_r+0x560>
    59b4:	d9001617 	ldw	r4,88(sp)
    59b8:	900b883a 	mov	r5,r18
    59bc:	01800144 	movi	r6,5
    59c0:	000f883a 	mov	r7,zero
    59c4:	0007ea80 	call	7ea8 <__multadd>
    59c8:	d9000717 	ldw	r4,28(sp)
    59cc:	100b883a 	mov	r5,r2
    59d0:	1025883a 	mov	r18,r2
    59d4:	00073500 	call	7350 <__mcmp>
    59d8:	00bcf10e 	bge	zero,r2,4da0 <_dtoa_r+0x560>
    59dc:	d8c00d17 	ldw	r3,52(sp)
    59e0:	d9000517 	ldw	r4,20(sp)
    59e4:	d8000615 	stw	zero,24(sp)
    59e8:	18c00044 	addi	r3,r3,1
    59ec:	d8c00d15 	stw	r3,52(sp)
    59f0:	00800c44 	movi	r2,49
    59f4:	27000044 	addi	fp,r4,1
    59f8:	20800005 	stb	r2,0(r4)
    59fc:	003e8906 	br	5424 <_dtoa_r+0xbe4>
    5a00:	d8c00517 	ldw	r3,20(sp)
    5a04:	003bc206 	br	4910 <_dtoa_r+0xd0>
    5a08:	01800074 	movhi	r6,1
    5a0c:	31b7a304 	addi	r6,r6,-8564
    5a10:	30c00917 	ldw	r3,36(r6)
    5a14:	30800817 	ldw	r2,32(r6)
    5a18:	d9001217 	ldw	r4,72(sp)
    5a1c:	d9401317 	ldw	r5,76(sp)
    5a20:	180f883a 	mov	r7,r3
    5a24:	100d883a 	mov	r6,r2
    5a28:	000a33c0 	call	a33c <__divdf3>
    5a2c:	948003cc 	andi	r18,r18,15
    5a30:	058000c4 	movi	r22,3
    5a34:	1029883a 	mov	r20,r2
    5a38:	182b883a 	mov	r21,r3
    5a3c:	003c8906 	br	4c64 <_dtoa_r+0x424>
    5a40:	d9001017 	ldw	r4,64(sp)
    5a44:	d9800917 	ldw	r6,36(sp)
    5a48:	0025883a 	mov	r18,zero
    5a4c:	1105c83a 	sub	r2,r2,r4
    5a50:	2089883a 	add	r4,r4,r2
    5a54:	308d883a 	add	r6,r6,r2
    5a58:	d9001015 	stw	r4,64(sp)
    5a5c:	d9800915 	stw	r6,36(sp)
    5a60:	003e3206 	br	532c <_dtoa_r+0xaec>
    5a64:	28800044 	addi	r2,r5,1
    5a68:	27000044 	addi	fp,r4,1
    5a6c:	20800005 	stb	r2,0(r4)
    5a70:	003e6c06 	br	5424 <_dtoa_r+0xbe4>
    5a74:	d8800f17 	ldw	r2,60(sp)
    5a78:	00bce016 	blt	zero,r2,4dfc <_dtoa_r+0x5bc>
    5a7c:	d9800f17 	ldw	r6,60(sp)
    5a80:	303cc51e 	bne	r6,zero,4d98 <_dtoa_r+0x558>
    5a84:	0005883a 	mov	r2,zero
    5a88:	00d00534 	movhi	r3,16404
    5a8c:	980b883a 	mov	r5,r19
    5a90:	180f883a 	mov	r7,r3
    5a94:	9009883a 	mov	r4,r18
    5a98:	100d883a 	mov	r6,r2
    5a9c:	0009f780 	call	9f78 <__muldf3>
    5aa0:	180b883a 	mov	r5,r3
    5aa4:	a80f883a 	mov	r7,r21
    5aa8:	1009883a 	mov	r4,r2
    5aac:	a00d883a 	mov	r6,r20
    5ab0:	000a72c0 	call	a72c <__gedf2>
    5ab4:	103cb80e 	bge	r2,zero,4d98 <_dtoa_r+0x558>
    5ab8:	0027883a 	mov	r19,zero
    5abc:	0025883a 	mov	r18,zero
    5ac0:	003fc606 	br	59dc <_dtoa_r+0x119c>
    5ac4:	99400117 	ldw	r5,4(r19)
    5ac8:	d9001617 	ldw	r4,88(sp)
    5acc:	00077740 	call	7774 <_Balloc>
    5ad0:	99800417 	ldw	r6,16(r19)
    5ad4:	11000304 	addi	r4,r2,12
    5ad8:	99400304 	addi	r5,r19,12
    5adc:	318d883a 	add	r6,r6,r6
    5ae0:	318d883a 	add	r6,r6,r6
    5ae4:	31800204 	addi	r6,r6,8
    5ae8:	1023883a 	mov	r17,r2
    5aec:	00021600 	call	2160 <memcpy>
    5af0:	d9001617 	ldw	r4,88(sp)
    5af4:	880b883a 	mov	r5,r17
    5af8:	01800044 	movi	r6,1
    5afc:	0007b380 	call	7b38 <__lshift>
    5b00:	100b883a 	mov	r5,r2
    5b04:	003d9c06 	br	5178 <_dtoa_r+0x938>
    5b08:	00800e44 	movi	r2,57
    5b0c:	b8807026 	beq	r23,r2,5cd0 <_dtoa_r+0x1490>
    5b10:	b8800044 	addi	r2,r23,1
    5b14:	b7000044 	addi	fp,r22,1
    5b18:	b0800005 	stb	r2,0(r22)
    5b1c:	003e4106 	br	5424 <_dtoa_r+0xbe4>
    5b20:	d8800317 	ldw	r2,12(sp)
    5b24:	01800074 	movhi	r6,1
    5b28:	31b77104 	addi	r6,r6,-8764
    5b2c:	b009883a 	mov	r4,r22
    5b30:	100e90fa 	slli	r7,r2,3
    5b34:	b80b883a 	mov	r5,r23
    5b38:	398f883a 	add	r7,r7,r6
    5b3c:	38bffe17 	ldw	r2,-8(r7)
    5b40:	d9800517 	ldw	r6,20(sp)
    5b44:	38ffff17 	ldw	r3,-4(r7)
    5b48:	37000044 	addi	fp,r6,1
    5b4c:	180f883a 	mov	r7,r3
    5b50:	100d883a 	mov	r6,r2
    5b54:	0009f780 	call	9f78 <__muldf3>
    5b58:	a80b883a 	mov	r5,r21
    5b5c:	a009883a 	mov	r4,r20
    5b60:	182f883a 	mov	r23,r3
    5b64:	102d883a 	mov	r22,r2
    5b68:	000a9340 	call	a934 <__fixdfsi>
    5b6c:	1009883a 	mov	r4,r2
    5b70:	1027883a 	mov	r19,r2
    5b74:	000a83c0 	call	a83c <__floatsidf>
    5b78:	a80b883a 	mov	r5,r21
    5b7c:	a009883a 	mov	r4,r20
    5b80:	180f883a 	mov	r7,r3
    5b84:	100d883a 	mov	r6,r2
    5b88:	0009e840 	call	9e84 <__subdf3>
    5b8c:	180b883a 	mov	r5,r3
    5b90:	d8c00517 	ldw	r3,20(sp)
    5b94:	9cc00c04 	addi	r19,r19,48
    5b98:	1009883a 	mov	r4,r2
    5b9c:	1cc00005 	stb	r19,0(r3)
    5ba0:	2021883a 	mov	r16,r4
    5ba4:	d9000317 	ldw	r4,12(sp)
    5ba8:	00800044 	movi	r2,1
    5bac:	2823883a 	mov	r17,r5
    5bb0:	20802226 	beq	r4,r2,5c3c <_dtoa_r+0x13fc>
    5bb4:	1029883a 	mov	r20,r2
    5bb8:	0005883a 	mov	r2,zero
    5bbc:	00d00934 	movhi	r3,16420
    5bc0:	180f883a 	mov	r7,r3
    5bc4:	100d883a 	mov	r6,r2
    5bc8:	880b883a 	mov	r5,r17
    5bcc:	8009883a 	mov	r4,r16
    5bd0:	0009f780 	call	9f78 <__muldf3>
    5bd4:	180b883a 	mov	r5,r3
    5bd8:	1009883a 	mov	r4,r2
    5bdc:	1823883a 	mov	r17,r3
    5be0:	1021883a 	mov	r16,r2
    5be4:	000a9340 	call	a934 <__fixdfsi>
    5be8:	1009883a 	mov	r4,r2
    5bec:	102b883a 	mov	r21,r2
    5bf0:	000a83c0 	call	a83c <__floatsidf>
    5bf4:	880b883a 	mov	r5,r17
    5bf8:	8009883a 	mov	r4,r16
    5bfc:	180f883a 	mov	r7,r3
    5c00:	100d883a 	mov	r6,r2
    5c04:	0009e840 	call	9e84 <__subdf3>
    5c08:	180b883a 	mov	r5,r3
    5c0c:	d8c00517 	ldw	r3,20(sp)
    5c10:	1009883a 	mov	r4,r2
    5c14:	ad400c04 	addi	r21,r21,48
    5c18:	1d05883a 	add	r2,r3,r20
    5c1c:	15400005 	stb	r21,0(r2)
    5c20:	2021883a 	mov	r16,r4
    5c24:	d9000317 	ldw	r4,12(sp)
    5c28:	a5000044 	addi	r20,r20,1
    5c2c:	2823883a 	mov	r17,r5
    5c30:	a13fe11e 	bne	r20,r4,5bb8 <_dtoa_r+0x1378>
    5c34:	e505883a 	add	r2,fp,r20
    5c38:	173fffc4 	addi	fp,r2,-1
    5c3c:	0025883a 	mov	r18,zero
    5c40:	04cff834 	movhi	r19,16352
    5c44:	b009883a 	mov	r4,r22
    5c48:	b80b883a 	mov	r5,r23
    5c4c:	900d883a 	mov	r6,r18
    5c50:	980f883a 	mov	r7,r19
    5c54:	0009f040 	call	9f04 <__adddf3>
    5c58:	180b883a 	mov	r5,r3
    5c5c:	1009883a 	mov	r4,r2
    5c60:	800d883a 	mov	r6,r16
    5c64:	880f883a 	mov	r7,r17
    5c68:	000a7b40 	call	a7b4 <__ltdf2>
    5c6c:	103cab16 	blt	r2,zero,4f1c <_dtoa_r+0x6dc>
    5c70:	0009883a 	mov	r4,zero
    5c74:	980b883a 	mov	r5,r19
    5c78:	b80f883a 	mov	r7,r23
    5c7c:	b00d883a 	mov	r6,r22
    5c80:	0009e840 	call	9e84 <__subdf3>
    5c84:	180b883a 	mov	r5,r3
    5c88:	880f883a 	mov	r7,r17
    5c8c:	1009883a 	mov	r4,r2
    5c90:	800d883a 	mov	r6,r16
    5c94:	000a6a40 	call	a6a4 <__gtdf2>
    5c98:	00bc470e 	bge	zero,r2,4db8 <_dtoa_r+0x578>
    5c9c:	00c00c04 	movi	r3,48
    5ca0:	e73fffc4 	addi	fp,fp,-1
    5ca4:	e0800007 	ldb	r2,0(fp)
    5ca8:	10fffd26 	beq	r2,r3,5ca0 <_dtoa_r+0x1460>
    5cac:	d9800417 	ldw	r6,16(sp)
    5cb0:	e7000044 	addi	fp,fp,1
    5cb4:	d9800d15 	stw	r6,52(sp)
    5cb8:	003cab06 	br	4f68 <_dtoa_r+0x728>
    5cbc:	d8c00f17 	ldw	r3,60(sp)
    5cc0:	d9001117 	ldw	r4,68(sp)
    5cc4:	20e1c83a 	sub	r16,r4,r3
    5cc8:	0007883a 	mov	r3,zero
    5ccc:	003d9b06 	br	533c <_dtoa_r+0xafc>
    5cd0:	00800e44 	movi	r2,57
    5cd4:	b0800005 	stb	r2,0(r22)
    5cd8:	b5800044 	addi	r22,r22,1
    5cdc:	003dc106 	br	53e4 <_dtoa_r+0xba4>
    5ce0:	05800084 	movi	r22,2
    5ce4:	003bf706 	br	4cc4 <_dtoa_r+0x484>
    5ce8:	d9000f17 	ldw	r4,60(sp)
    5cec:	013c000e 	bge	zero,r4,4cf0 <_dtoa_r+0x4b0>
    5cf0:	d9800e17 	ldw	r6,56(sp)
    5cf4:	01bc300e 	bge	zero,r6,4db8 <_dtoa_r+0x578>
    5cf8:	0005883a 	mov	r2,zero
    5cfc:	00d00934 	movhi	r3,16420
    5d00:	a80b883a 	mov	r5,r21
    5d04:	180f883a 	mov	r7,r3
    5d08:	a009883a 	mov	r4,r20
    5d0c:	100d883a 	mov	r6,r2
    5d10:	0009f780 	call	9f78 <__muldf3>
    5d14:	b1000044 	addi	r4,r22,1
    5d18:	1021883a 	mov	r16,r2
    5d1c:	1823883a 	mov	r17,r3
    5d20:	000a83c0 	call	a83c <__floatsidf>
    5d24:	880b883a 	mov	r5,r17
    5d28:	8009883a 	mov	r4,r16
    5d2c:	180f883a 	mov	r7,r3
    5d30:	100d883a 	mov	r6,r2
    5d34:	0009f780 	call	9f78 <__muldf3>
    5d38:	0011883a 	mov	r8,zero
    5d3c:	02500734 	movhi	r9,16412
    5d40:	180b883a 	mov	r5,r3
    5d44:	480f883a 	mov	r7,r9
    5d48:	1009883a 	mov	r4,r2
    5d4c:	400d883a 	mov	r6,r8
    5d50:	0009f040 	call	9f04 <__adddf3>
    5d54:	102d883a 	mov	r22,r2
    5d58:	00bf3034 	movhi	r2,64704
    5d5c:	10ef883a 	add	r23,r2,r3
    5d60:	d8800d17 	ldw	r2,52(sp)
    5d64:	d8c00e17 	ldw	r3,56(sp)
    5d68:	8029883a 	mov	r20,r16
    5d6c:	10bfffc4 	addi	r2,r2,-1
    5d70:	882b883a 	mov	r21,r17
    5d74:	d8800415 	stw	r2,16(sp)
    5d78:	d8c00315 	stw	r3,12(sp)
    5d7c:	003e8306 	br	578c <_dtoa_r+0xf4c>
    5d80:	d8800117 	ldw	r2,4(sp)
    5d84:	dc001117 	ldw	r16,68(sp)
    5d88:	dc801017 	ldw	r18,64(sp)
    5d8c:	00c00d84 	movi	r3,54
    5d90:	1887c83a 	sub	r3,r3,r2
    5d94:	003d6906 	br	533c <_dtoa_r+0xafc>
    5d98:	01800044 	movi	r6,1
    5d9c:	3021883a 	mov	r16,r6
    5da0:	d9800f15 	stw	r6,60(sp)
    5da4:	d9802615 	stw	r6,152(sp)
    5da8:	d9800e15 	stw	r6,56(sp)
    5dac:	003b9306 	br	4bfc <_dtoa_r+0x3bc>
    5db0:	b021883a 	mov	r16,r22
    5db4:	dd800f15 	stw	r22,60(sp)
    5db8:	003b9006 	br	4bfc <_dtoa_r+0x3bc>
    5dbc:	103e221e 	bne	r2,zero,5648 <_dtoa_r+0xe08>
    5dc0:	b880004c 	andi	r2,r23,1
    5dc4:	1005003a 	cmpeq	r2,r2,zero
    5dc8:	103e1f1e 	bne	r2,zero,5648 <_dtoa_r+0xe08>
    5dcc:	003e1b06 	br	563c <_dtoa_r+0xdfc>
    5dd0:	d9001617 	ldw	r4,88(sp)
    5dd4:	980b883a 	mov	r5,r19
    5dd8:	01800284 	movi	r6,10
    5ddc:	000f883a 	mov	r7,zero
    5de0:	0007ea80 	call	7ea8 <__multadd>
    5de4:	d8c00e17 	ldw	r3,56(sp)
    5de8:	1027883a 	mov	r19,r2
    5dec:	d8c00f15 	stw	r3,60(sp)
    5df0:	003cd306 	br	5140 <_dtoa_r+0x900>

00005df4 <_fflush_r>:
    5df4:	defffb04 	addi	sp,sp,-20
    5df8:	dcc00315 	stw	r19,12(sp)
    5dfc:	dc800215 	stw	r18,8(sp)
    5e00:	dfc00415 	stw	ra,16(sp)
    5e04:	dc400115 	stw	r17,4(sp)
    5e08:	dc000015 	stw	r16,0(sp)
    5e0c:	2027883a 	mov	r19,r4
    5e10:	2825883a 	mov	r18,r5
    5e14:	20000226 	beq	r4,zero,5e20 <_fflush_r+0x2c>
    5e18:	20800e17 	ldw	r2,56(r4)
    5e1c:	10005626 	beq	r2,zero,5f78 <_fflush_r+0x184>
    5e20:	9100030b 	ldhu	r4,12(r18)
    5e24:	20ffffcc 	andi	r3,r4,65535
    5e28:	18e0001c 	xori	r3,r3,32768
    5e2c:	18e00004 	addi	r3,r3,-32768
    5e30:	1880020c 	andi	r2,r3,8
    5e34:	1000261e 	bne	r2,zero,5ed0 <_fflush_r+0xdc>
    5e38:	90c00117 	ldw	r3,4(r18)
    5e3c:	20820014 	ori	r2,r4,2048
    5e40:	9080030d 	sth	r2,12(r18)
    5e44:	1009883a 	mov	r4,r2
    5e48:	00c0400e 	bge	zero,r3,5f4c <_fflush_r+0x158>
    5e4c:	92000a17 	ldw	r8,40(r18)
    5e50:	40004026 	beq	r8,zero,5f54 <_fflush_r+0x160>
    5e54:	2084000c 	andi	r2,r4,4096
    5e58:	10005326 	beq	r2,zero,5fa8 <_fflush_r+0x1b4>
    5e5c:	94001417 	ldw	r16,80(r18)
    5e60:	9080030b 	ldhu	r2,12(r18)
    5e64:	1080010c 	andi	r2,r2,4
    5e68:	1000481e 	bne	r2,zero,5f8c <_fflush_r+0x198>
    5e6c:	91400717 	ldw	r5,28(r18)
    5e70:	9809883a 	mov	r4,r19
    5e74:	800d883a 	mov	r6,r16
    5e78:	000f883a 	mov	r7,zero
    5e7c:	403ee83a 	callr	r8
    5e80:	8080261e 	bne	r16,r2,5f1c <_fflush_r+0x128>
    5e84:	9080030b 	ldhu	r2,12(r18)
    5e88:	91000417 	ldw	r4,16(r18)
    5e8c:	90000115 	stw	zero,4(r18)
    5e90:	10bdffcc 	andi	r2,r2,63487
    5e94:	10ffffcc 	andi	r3,r2,65535
    5e98:	18c4000c 	andi	r3,r3,4096
    5e9c:	9080030d 	sth	r2,12(r18)
    5ea0:	91000015 	stw	r4,0(r18)
    5ea4:	18002b26 	beq	r3,zero,5f54 <_fflush_r+0x160>
    5ea8:	0007883a 	mov	r3,zero
    5eac:	1805883a 	mov	r2,r3
    5eb0:	94001415 	stw	r16,80(r18)
    5eb4:	dfc00417 	ldw	ra,16(sp)
    5eb8:	dcc00317 	ldw	r19,12(sp)
    5ebc:	dc800217 	ldw	r18,8(sp)
    5ec0:	dc400117 	ldw	r17,4(sp)
    5ec4:	dc000017 	ldw	r16,0(sp)
    5ec8:	dec00504 	addi	sp,sp,20
    5ecc:	f800283a 	ret
    5ed0:	94400417 	ldw	r17,16(r18)
    5ed4:	88001f26 	beq	r17,zero,5f54 <_fflush_r+0x160>
    5ed8:	90800017 	ldw	r2,0(r18)
    5edc:	18c000cc 	andi	r3,r3,3
    5ee0:	94400015 	stw	r17,0(r18)
    5ee4:	1461c83a 	sub	r16,r2,r17
    5ee8:	18002526 	beq	r3,zero,5f80 <_fflush_r+0x18c>
    5eec:	0005883a 	mov	r2,zero
    5ef0:	90800215 	stw	r2,8(r18)
    5ef4:	0400170e 	bge	zero,r16,5f54 <_fflush_r+0x160>
    5ef8:	90c00917 	ldw	r3,36(r18)
    5efc:	91400717 	ldw	r5,28(r18)
    5f00:	880d883a 	mov	r6,r17
    5f04:	800f883a 	mov	r7,r16
    5f08:	9809883a 	mov	r4,r19
    5f0c:	183ee83a 	callr	r3
    5f10:	88a3883a 	add	r17,r17,r2
    5f14:	80a1c83a 	sub	r16,r16,r2
    5f18:	00bff616 	blt	zero,r2,5ef4 <_fflush_r+0x100>
    5f1c:	9080030b 	ldhu	r2,12(r18)
    5f20:	00ffffc4 	movi	r3,-1
    5f24:	10801014 	ori	r2,r2,64
    5f28:	9080030d 	sth	r2,12(r18)
    5f2c:	1805883a 	mov	r2,r3
    5f30:	dfc00417 	ldw	ra,16(sp)
    5f34:	dcc00317 	ldw	r19,12(sp)
    5f38:	dc800217 	ldw	r18,8(sp)
    5f3c:	dc400117 	ldw	r17,4(sp)
    5f40:	dc000017 	ldw	r16,0(sp)
    5f44:	dec00504 	addi	sp,sp,20
    5f48:	f800283a 	ret
    5f4c:	90800f17 	ldw	r2,60(r18)
    5f50:	00bfbe16 	blt	zero,r2,5e4c <_fflush_r+0x58>
    5f54:	0007883a 	mov	r3,zero
    5f58:	1805883a 	mov	r2,r3
    5f5c:	dfc00417 	ldw	ra,16(sp)
    5f60:	dcc00317 	ldw	r19,12(sp)
    5f64:	dc800217 	ldw	r18,8(sp)
    5f68:	dc400117 	ldw	r17,4(sp)
    5f6c:	dc000017 	ldw	r16,0(sp)
    5f70:	dec00504 	addi	sp,sp,20
    5f74:	f800283a 	ret
    5f78:	000608c0 	call	608c <__sinit>
    5f7c:	003fa806 	br	5e20 <_fflush_r+0x2c>
    5f80:	90800517 	ldw	r2,20(r18)
    5f84:	90800215 	stw	r2,8(r18)
    5f88:	003fda06 	br	5ef4 <_fflush_r+0x100>
    5f8c:	90800117 	ldw	r2,4(r18)
    5f90:	90c00c17 	ldw	r3,48(r18)
    5f94:	80a1c83a 	sub	r16,r16,r2
    5f98:	183fb426 	beq	r3,zero,5e6c <_fflush_r+0x78>
    5f9c:	90800f17 	ldw	r2,60(r18)
    5fa0:	80a1c83a 	sub	r16,r16,r2
    5fa4:	003fb106 	br	5e6c <_fflush_r+0x78>
    5fa8:	91400717 	ldw	r5,28(r18)
    5fac:	9809883a 	mov	r4,r19
    5fb0:	000d883a 	mov	r6,zero
    5fb4:	01c00044 	movi	r7,1
    5fb8:	403ee83a 	callr	r8
    5fbc:	1021883a 	mov	r16,r2
    5fc0:	00bfffc4 	movi	r2,-1
    5fc4:	80800226 	beq	r16,r2,5fd0 <_fflush_r+0x1dc>
    5fc8:	92000a17 	ldw	r8,40(r18)
    5fcc:	003fa406 	br	5e60 <_fflush_r+0x6c>
    5fd0:	98c00017 	ldw	r3,0(r19)
    5fd4:	00800744 	movi	r2,29
    5fd8:	18bfde26 	beq	r3,r2,5f54 <_fflush_r+0x160>
    5fdc:	9080030b 	ldhu	r2,12(r18)
    5fe0:	8007883a 	mov	r3,r16
    5fe4:	10801014 	ori	r2,r2,64
    5fe8:	9080030d 	sth	r2,12(r18)
    5fec:	003fcf06 	br	5f2c <_fflush_r+0x138>

00005ff0 <fflush>:
    5ff0:	01400034 	movhi	r5,0
    5ff4:	29577d04 	addi	r5,r5,24052
    5ff8:	2007883a 	mov	r3,r4
    5ffc:	20000526 	beq	r4,zero,6014 <fflush+0x24>
    6000:	00800074 	movhi	r2,1
    6004:	10be9404 	addi	r2,r2,-1456
    6008:	11000017 	ldw	r4,0(r2)
    600c:	180b883a 	mov	r5,r3
    6010:	0005df41 	jmpi	5df4 <_fflush_r>
    6014:	00800074 	movhi	r2,1
    6018:	10be9504 	addi	r2,r2,-1452
    601c:	11000017 	ldw	r4,0(r2)
    6020:	0006bc01 	jmpi	6bc0 <_fwalk_reent>

00006024 <std>:
    6024:	00800074 	movhi	r2,1
    6028:	10a21304 	addi	r2,r2,-30644
    602c:	20800b15 	stw	r2,44(r4)
    6030:	00800074 	movhi	r2,1
    6034:	10a24e04 	addi	r2,r2,-30408
    6038:	20800815 	stw	r2,32(r4)
    603c:	00c00074 	movhi	r3,1
    6040:	18e22f04 	addi	r3,r3,-30532
    6044:	00800074 	movhi	r2,1
    6048:	10a21504 	addi	r2,r2,-30636
    604c:	2140030d 	sth	r5,12(r4)
    6050:	2180038d 	sth	r6,14(r4)
    6054:	20c00915 	stw	r3,36(r4)
    6058:	20800a15 	stw	r2,40(r4)
    605c:	20000015 	stw	zero,0(r4)
    6060:	20000115 	stw	zero,4(r4)
    6064:	20000215 	stw	zero,8(r4)
    6068:	20000415 	stw	zero,16(r4)
    606c:	20000515 	stw	zero,20(r4)
    6070:	20000615 	stw	zero,24(r4)
    6074:	21000715 	stw	r4,28(r4)
    6078:	f800283a 	ret

0000607c <__sfp_lock_acquire>:
    607c:	f800283a 	ret

00006080 <__sfp_lock_release>:
    6080:	f800283a 	ret

00006084 <__sinit_lock_acquire>:
    6084:	f800283a 	ret

00006088 <__sinit_lock_release>:
    6088:	f800283a 	ret

0000608c <__sinit>:
    608c:	20800e17 	ldw	r2,56(r4)
    6090:	defffd04 	addi	sp,sp,-12
    6094:	dc400115 	stw	r17,4(sp)
    6098:	dc000015 	stw	r16,0(sp)
    609c:	dfc00215 	stw	ra,8(sp)
    60a0:	04400044 	movi	r17,1
    60a4:	01400104 	movi	r5,4
    60a8:	000d883a 	mov	r6,zero
    60ac:	2021883a 	mov	r16,r4
    60b0:	2200bb04 	addi	r8,r4,748
    60b4:	200f883a 	mov	r7,r4
    60b8:	10000526 	beq	r2,zero,60d0 <__sinit+0x44>
    60bc:	dfc00217 	ldw	ra,8(sp)
    60c0:	dc400117 	ldw	r17,4(sp)
    60c4:	dc000017 	ldw	r16,0(sp)
    60c8:	dec00304 	addi	sp,sp,12
    60cc:	f800283a 	ret
    60d0:	21000117 	ldw	r4,4(r4)
    60d4:	00800034 	movhi	r2,0
    60d8:	10985c04 	addi	r2,r2,24944
    60dc:	00c000c4 	movi	r3,3
    60e0:	80800f15 	stw	r2,60(r16)
    60e4:	80c0b915 	stw	r3,740(r16)
    60e8:	8200ba15 	stw	r8,744(r16)
    60ec:	84400e15 	stw	r17,56(r16)
    60f0:	8000b815 	stw	zero,736(r16)
    60f4:	00060240 	call	6024 <std>
    60f8:	81000217 	ldw	r4,8(r16)
    60fc:	880d883a 	mov	r6,r17
    6100:	800f883a 	mov	r7,r16
    6104:	01400284 	movi	r5,10
    6108:	00060240 	call	6024 <std>
    610c:	81000317 	ldw	r4,12(r16)
    6110:	800f883a 	mov	r7,r16
    6114:	01400484 	movi	r5,18
    6118:	01800084 	movi	r6,2
    611c:	dfc00217 	ldw	ra,8(sp)
    6120:	dc400117 	ldw	r17,4(sp)
    6124:	dc000017 	ldw	r16,0(sp)
    6128:	dec00304 	addi	sp,sp,12
    612c:	00060241 	jmpi	6024 <std>

00006130 <__fp_lock>:
    6130:	0005883a 	mov	r2,zero
    6134:	f800283a 	ret

00006138 <__fp_unlock>:
    6138:	0005883a 	mov	r2,zero
    613c:	f800283a 	ret

00006140 <__fp_unlock_all>:
    6140:	00800074 	movhi	r2,1
    6144:	10be9404 	addi	r2,r2,-1456
    6148:	11000017 	ldw	r4,0(r2)
    614c:	01400034 	movhi	r5,0
    6150:	29584e04 	addi	r5,r5,24888
    6154:	0006c881 	jmpi	6c88 <_fwalk>

00006158 <__fp_lock_all>:
    6158:	00800074 	movhi	r2,1
    615c:	10be9404 	addi	r2,r2,-1456
    6160:	11000017 	ldw	r4,0(r2)
    6164:	01400034 	movhi	r5,0
    6168:	29584c04 	addi	r5,r5,24880
    616c:	0006c881 	jmpi	6c88 <_fwalk>

00006170 <_cleanup_r>:
    6170:	01400074 	movhi	r5,1
    6174:	29634004 	addi	r5,r5,-29440
    6178:	0006c881 	jmpi	6c88 <_fwalk>

0000617c <_cleanup>:
    617c:	00800074 	movhi	r2,1
    6180:	10be9504 	addi	r2,r2,-1452
    6184:	11000017 	ldw	r4,0(r2)
    6188:	00061701 	jmpi	6170 <_cleanup_r>

0000618c <__sfmoreglue>:
    618c:	defffc04 	addi	sp,sp,-16
    6190:	dc400115 	stw	r17,4(sp)
    6194:	2c401724 	muli	r17,r5,92
    6198:	dc800215 	stw	r18,8(sp)
    619c:	2825883a 	mov	r18,r5
    61a0:	89400304 	addi	r5,r17,12
    61a4:	dc000015 	stw	r16,0(sp)
    61a8:	dfc00315 	stw	ra,12(sp)
    61ac:	0001a200 	call	1a20 <_malloc_r>
    61b0:	0021883a 	mov	r16,zero
    61b4:	880d883a 	mov	r6,r17
    61b8:	000b883a 	mov	r5,zero
    61bc:	10000626 	beq	r2,zero,61d8 <__sfmoreglue+0x4c>
    61c0:	11000304 	addi	r4,r2,12
    61c4:	14800115 	stw	r18,4(r2)
    61c8:	10000015 	stw	zero,0(r2)
    61cc:	11000215 	stw	r4,8(r2)
    61d0:	1021883a 	mov	r16,r2
    61d4:	000715c0 	call	715c <memset>
    61d8:	8005883a 	mov	r2,r16
    61dc:	dfc00317 	ldw	ra,12(sp)
    61e0:	dc800217 	ldw	r18,8(sp)
    61e4:	dc400117 	ldw	r17,4(sp)
    61e8:	dc000017 	ldw	r16,0(sp)
    61ec:	dec00404 	addi	sp,sp,16
    61f0:	f800283a 	ret

000061f4 <__sfp>:
    61f4:	defffd04 	addi	sp,sp,-12
    61f8:	00800074 	movhi	r2,1
    61fc:	10be9504 	addi	r2,r2,-1452
    6200:	dc000015 	stw	r16,0(sp)
    6204:	14000017 	ldw	r16,0(r2)
    6208:	dc400115 	stw	r17,4(sp)
    620c:	dfc00215 	stw	ra,8(sp)
    6210:	80800e17 	ldw	r2,56(r16)
    6214:	2023883a 	mov	r17,r4
    6218:	10002626 	beq	r2,zero,62b4 <__sfp+0xc0>
    621c:	8400b804 	addi	r16,r16,736
    6220:	80800117 	ldw	r2,4(r16)
    6224:	81000217 	ldw	r4,8(r16)
    6228:	10ffffc4 	addi	r3,r2,-1
    622c:	18000916 	blt	r3,zero,6254 <__sfp+0x60>
    6230:	2080030f 	ldh	r2,12(r4)
    6234:	10000b26 	beq	r2,zero,6264 <__sfp+0x70>
    6238:	017fffc4 	movi	r5,-1
    623c:	00000206 	br	6248 <__sfp+0x54>
    6240:	2080030f 	ldh	r2,12(r4)
    6244:	10000726 	beq	r2,zero,6264 <__sfp+0x70>
    6248:	18ffffc4 	addi	r3,r3,-1
    624c:	21001704 	addi	r4,r4,92
    6250:	197ffb1e 	bne	r3,r5,6240 <__sfp+0x4c>
    6254:	80800017 	ldw	r2,0(r16)
    6258:	10001926 	beq	r2,zero,62c0 <__sfp+0xcc>
    625c:	1021883a 	mov	r16,r2
    6260:	003fef06 	br	6220 <__sfp+0x2c>
    6264:	00bfffc4 	movi	r2,-1
    6268:	00c00044 	movi	r3,1
    626c:	2080038d 	sth	r2,14(r4)
    6270:	20c0030d 	sth	r3,12(r4)
    6274:	20000015 	stw	zero,0(r4)
    6278:	20000215 	stw	zero,8(r4)
    627c:	20000115 	stw	zero,4(r4)
    6280:	20000415 	stw	zero,16(r4)
    6284:	20000515 	stw	zero,20(r4)
    6288:	20000615 	stw	zero,24(r4)
    628c:	20000c15 	stw	zero,48(r4)
    6290:	20000d15 	stw	zero,52(r4)
    6294:	20001115 	stw	zero,68(r4)
    6298:	20001215 	stw	zero,72(r4)
    629c:	2005883a 	mov	r2,r4
    62a0:	dfc00217 	ldw	ra,8(sp)
    62a4:	dc400117 	ldw	r17,4(sp)
    62a8:	dc000017 	ldw	r16,0(sp)
    62ac:	dec00304 	addi	sp,sp,12
    62b0:	f800283a 	ret
    62b4:	8009883a 	mov	r4,r16
    62b8:	000608c0 	call	608c <__sinit>
    62bc:	003fd706 	br	621c <__sfp+0x28>
    62c0:	8809883a 	mov	r4,r17
    62c4:	01400104 	movi	r5,4
    62c8:	000618c0 	call	618c <__sfmoreglue>
    62cc:	80800015 	stw	r2,0(r16)
    62d0:	103fe21e 	bne	r2,zero,625c <__sfp+0x68>
    62d4:	00800304 	movi	r2,12
    62d8:	0009883a 	mov	r4,zero
    62dc:	88800015 	stw	r2,0(r17)
    62e0:	003fee06 	br	629c <__sfp+0xa8>

000062e4 <_malloc_trim_r>:
    62e4:	defffb04 	addi	sp,sp,-20
    62e8:	dcc00315 	stw	r19,12(sp)
    62ec:	04c00074 	movhi	r19,1
    62f0:	9cf90c04 	addi	r19,r19,-7120
    62f4:	dc800215 	stw	r18,8(sp)
    62f8:	dc400115 	stw	r17,4(sp)
    62fc:	dc000015 	stw	r16,0(sp)
    6300:	2823883a 	mov	r17,r5
    6304:	2025883a 	mov	r18,r4
    6308:	dfc00415 	stw	ra,16(sp)
    630c:	000ba700 	call	ba70 <__malloc_lock>
    6310:	98800217 	ldw	r2,8(r19)
    6314:	9009883a 	mov	r4,r18
    6318:	000b883a 	mov	r5,zero
    631c:	10c00117 	ldw	r3,4(r2)
    6320:	00bfff04 	movi	r2,-4
    6324:	18a0703a 	and	r16,r3,r2
    6328:	8463c83a 	sub	r17,r16,r17
    632c:	8c43fbc4 	addi	r17,r17,4079
    6330:	8822d33a 	srli	r17,r17,12
    6334:	0083ffc4 	movi	r2,4095
    6338:	8c7fffc4 	addi	r17,r17,-1
    633c:	8822933a 	slli	r17,r17,12
    6340:	1440060e 	bge	r2,r17,635c <_malloc_trim_r+0x78>
    6344:	000232c0 	call	232c <_sbrk_r>
    6348:	98c00217 	ldw	r3,8(r19)
    634c:	9009883a 	mov	r4,r18
    6350:	044bc83a 	sub	r5,zero,r17
    6354:	80c7883a 	add	r3,r16,r3
    6358:	10c00926 	beq	r2,r3,6380 <_malloc_trim_r+0x9c>
    635c:	000ba900 	call	ba90 <__malloc_unlock>
    6360:	0005883a 	mov	r2,zero
    6364:	dfc00417 	ldw	ra,16(sp)
    6368:	dcc00317 	ldw	r19,12(sp)
    636c:	dc800217 	ldw	r18,8(sp)
    6370:	dc400117 	ldw	r17,4(sp)
    6374:	dc000017 	ldw	r16,0(sp)
    6378:	dec00504 	addi	sp,sp,20
    637c:	f800283a 	ret
    6380:	9009883a 	mov	r4,r18
    6384:	000232c0 	call	232c <_sbrk_r>
    6388:	844dc83a 	sub	r6,r16,r17
    638c:	00ffffc4 	movi	r3,-1
    6390:	9009883a 	mov	r4,r18
    6394:	000b883a 	mov	r5,zero
    6398:	01c00074 	movhi	r7,1
    639c:	39c56304 	addi	r7,r7,5516
    63a0:	31800054 	ori	r6,r6,1
    63a4:	10c00926 	beq	r2,r3,63cc <_malloc_trim_r+0xe8>
    63a8:	38800017 	ldw	r2,0(r7)
    63ac:	98c00217 	ldw	r3,8(r19)
    63b0:	9009883a 	mov	r4,r18
    63b4:	1445c83a 	sub	r2,r2,r17
    63b8:	38800015 	stw	r2,0(r7)
    63bc:	19800115 	stw	r6,4(r3)
    63c0:	000ba900 	call	ba90 <__malloc_unlock>
    63c4:	00800044 	movi	r2,1
    63c8:	003fe606 	br	6364 <_malloc_trim_r+0x80>
    63cc:	000232c0 	call	232c <_sbrk_r>
    63d0:	99800217 	ldw	r6,8(r19)
    63d4:	100f883a 	mov	r7,r2
    63d8:	9009883a 	mov	r4,r18
    63dc:	1187c83a 	sub	r3,r2,r6
    63e0:	008003c4 	movi	r2,15
    63e4:	19400054 	ori	r5,r3,1
    63e8:	10ffdc0e 	bge	r2,r3,635c <_malloc_trim_r+0x78>
    63ec:	00800074 	movhi	r2,1
    63f0:	10be9704 	addi	r2,r2,-1444
    63f4:	10c00017 	ldw	r3,0(r2)
    63f8:	00800074 	movhi	r2,1
    63fc:	10856304 	addi	r2,r2,5516
    6400:	31400115 	stw	r5,4(r6)
    6404:	38c7c83a 	sub	r3,r7,r3
    6408:	10c00015 	stw	r3,0(r2)
    640c:	003fd306 	br	635c <_malloc_trim_r+0x78>

00006410 <_free_r>:
    6410:	defffd04 	addi	sp,sp,-12
    6414:	dc400115 	stw	r17,4(sp)
    6418:	dc000015 	stw	r16,0(sp)
    641c:	dfc00215 	stw	ra,8(sp)
    6420:	2821883a 	mov	r16,r5
    6424:	2023883a 	mov	r17,r4
    6428:	28005a26 	beq	r5,zero,6594 <_free_r+0x184>
    642c:	000ba700 	call	ba70 <__malloc_lock>
    6430:	823ffe04 	addi	r8,r16,-8
    6434:	41400117 	ldw	r5,4(r8)
    6438:	00bfff84 	movi	r2,-2
    643c:	02800074 	movhi	r10,1
    6440:	52b90c04 	addi	r10,r10,-7120
    6444:	288e703a 	and	r7,r5,r2
    6448:	41cd883a 	add	r6,r8,r7
    644c:	30c00117 	ldw	r3,4(r6)
    6450:	51000217 	ldw	r4,8(r10)
    6454:	00bfff04 	movi	r2,-4
    6458:	1892703a 	and	r9,r3,r2
    645c:	5017883a 	mov	r11,r10
    6460:	31006726 	beq	r6,r4,6600 <_free_r+0x1f0>
    6464:	2880004c 	andi	r2,r5,1
    6468:	1005003a 	cmpeq	r2,r2,zero
    646c:	32400115 	stw	r9,4(r6)
    6470:	10001a1e 	bne	r2,zero,64dc <_free_r+0xcc>
    6474:	000b883a 	mov	r5,zero
    6478:	3247883a 	add	r3,r6,r9
    647c:	18800117 	ldw	r2,4(r3)
    6480:	1080004c 	andi	r2,r2,1
    6484:	1000231e 	bne	r2,zero,6514 <_free_r+0x104>
    6488:	280ac03a 	cmpne	r5,r5,zero
    648c:	3a4f883a 	add	r7,r7,r9
    6490:	2800451e 	bne	r5,zero,65a8 <_free_r+0x198>
    6494:	31000217 	ldw	r4,8(r6)
    6498:	00800074 	movhi	r2,1
    649c:	10b90e04 	addi	r2,r2,-7112
    64a0:	20807b26 	beq	r4,r2,6690 <_free_r+0x280>
    64a4:	30800317 	ldw	r2,12(r6)
    64a8:	3a07883a 	add	r3,r7,r8
    64ac:	19c00015 	stw	r7,0(r3)
    64b0:	11000215 	stw	r4,8(r2)
    64b4:	20800315 	stw	r2,12(r4)
    64b8:	38800054 	ori	r2,r7,1
    64bc:	40800115 	stw	r2,4(r8)
    64c0:	28001a26 	beq	r5,zero,652c <_free_r+0x11c>
    64c4:	8809883a 	mov	r4,r17
    64c8:	dfc00217 	ldw	ra,8(sp)
    64cc:	dc400117 	ldw	r17,4(sp)
    64d0:	dc000017 	ldw	r16,0(sp)
    64d4:	dec00304 	addi	sp,sp,12
    64d8:	000ba901 	jmpi	ba90 <__malloc_unlock>
    64dc:	80bffe17 	ldw	r2,-8(r16)
    64e0:	50c00204 	addi	r3,r10,8
    64e4:	4091c83a 	sub	r8,r8,r2
    64e8:	41000217 	ldw	r4,8(r8)
    64ec:	388f883a 	add	r7,r7,r2
    64f0:	20c06126 	beq	r4,r3,6678 <_free_r+0x268>
    64f4:	40800317 	ldw	r2,12(r8)
    64f8:	3247883a 	add	r3,r6,r9
    64fc:	000b883a 	mov	r5,zero
    6500:	11000215 	stw	r4,8(r2)
    6504:	20800315 	stw	r2,12(r4)
    6508:	18800117 	ldw	r2,4(r3)
    650c:	1080004c 	andi	r2,r2,1
    6510:	103fdd26 	beq	r2,zero,6488 <_free_r+0x78>
    6514:	38800054 	ori	r2,r7,1
    6518:	3a07883a 	add	r3,r7,r8
    651c:	280ac03a 	cmpne	r5,r5,zero
    6520:	40800115 	stw	r2,4(r8)
    6524:	19c00015 	stw	r7,0(r3)
    6528:	283fe61e 	bne	r5,zero,64c4 <_free_r+0xb4>
    652c:	00807fc4 	movi	r2,511
    6530:	11c01f2e 	bgeu	r2,r7,65b0 <_free_r+0x1a0>
    6534:	3806d27a 	srli	r3,r7,9
    6538:	1800481e 	bne	r3,zero,665c <_free_r+0x24c>
    653c:	3804d0fa 	srli	r2,r7,3
    6540:	100690fa 	slli	r3,r2,3
    6544:	1acd883a 	add	r6,r3,r11
    6548:	31400217 	ldw	r5,8(r6)
    654c:	31405926 	beq	r6,r5,66b4 <_free_r+0x2a4>
    6550:	28800117 	ldw	r2,4(r5)
    6554:	00ffff04 	movi	r3,-4
    6558:	10c4703a 	and	r2,r2,r3
    655c:	3880022e 	bgeu	r7,r2,6568 <_free_r+0x158>
    6560:	29400217 	ldw	r5,8(r5)
    6564:	317ffa1e 	bne	r6,r5,6550 <_free_r+0x140>
    6568:	29800317 	ldw	r6,12(r5)
    656c:	41800315 	stw	r6,12(r8)
    6570:	41400215 	stw	r5,8(r8)
    6574:	8809883a 	mov	r4,r17
    6578:	2a000315 	stw	r8,12(r5)
    657c:	32000215 	stw	r8,8(r6)
    6580:	dfc00217 	ldw	ra,8(sp)
    6584:	dc400117 	ldw	r17,4(sp)
    6588:	dc000017 	ldw	r16,0(sp)
    658c:	dec00304 	addi	sp,sp,12
    6590:	000ba901 	jmpi	ba90 <__malloc_unlock>
    6594:	dfc00217 	ldw	ra,8(sp)
    6598:	dc400117 	ldw	r17,4(sp)
    659c:	dc000017 	ldw	r16,0(sp)
    65a0:	dec00304 	addi	sp,sp,12
    65a4:	f800283a 	ret
    65a8:	31000217 	ldw	r4,8(r6)
    65ac:	003fbd06 	br	64a4 <_free_r+0x94>
    65b0:	3806d0fa 	srli	r3,r7,3
    65b4:	00800044 	movi	r2,1
    65b8:	51400117 	ldw	r5,4(r10)
    65bc:	180890fa 	slli	r4,r3,3
    65c0:	1807d0ba 	srai	r3,r3,2
    65c4:	22c9883a 	add	r4,r4,r11
    65c8:	21800217 	ldw	r6,8(r4)
    65cc:	10c4983a 	sll	r2,r2,r3
    65d0:	41000315 	stw	r4,12(r8)
    65d4:	41800215 	stw	r6,8(r8)
    65d8:	288ab03a 	or	r5,r5,r2
    65dc:	22000215 	stw	r8,8(r4)
    65e0:	8809883a 	mov	r4,r17
    65e4:	51400115 	stw	r5,4(r10)
    65e8:	32000315 	stw	r8,12(r6)
    65ec:	dfc00217 	ldw	ra,8(sp)
    65f0:	dc400117 	ldw	r17,4(sp)
    65f4:	dc000017 	ldw	r16,0(sp)
    65f8:	dec00304 	addi	sp,sp,12
    65fc:	000ba901 	jmpi	ba90 <__malloc_unlock>
    6600:	2880004c 	andi	r2,r5,1
    6604:	3a4d883a 	add	r6,r7,r9
    6608:	1000071e 	bne	r2,zero,6628 <_free_r+0x218>
    660c:	80bffe17 	ldw	r2,-8(r16)
    6610:	4091c83a 	sub	r8,r8,r2
    6614:	41000317 	ldw	r4,12(r8)
    6618:	40c00217 	ldw	r3,8(r8)
    661c:	308d883a 	add	r6,r6,r2
    6620:	20c00215 	stw	r3,8(r4)
    6624:	19000315 	stw	r4,12(r3)
    6628:	00800074 	movhi	r2,1
    662c:	10be9604 	addi	r2,r2,-1448
    6630:	11000017 	ldw	r4,0(r2)
    6634:	30c00054 	ori	r3,r6,1
    6638:	52000215 	stw	r8,8(r10)
    663c:	40c00115 	stw	r3,4(r8)
    6640:	313fa036 	bltu	r6,r4,64c4 <_free_r+0xb4>
    6644:	00800074 	movhi	r2,1
    6648:	10854404 	addi	r2,r2,5392
    664c:	11400017 	ldw	r5,0(r2)
    6650:	8809883a 	mov	r4,r17
    6654:	00062e40 	call	62e4 <_malloc_trim_r>
    6658:	003f9a06 	br	64c4 <_free_r+0xb4>
    665c:	00800104 	movi	r2,4
    6660:	10c0072e 	bgeu	r2,r3,6680 <_free_r+0x270>
    6664:	00800504 	movi	r2,20
    6668:	10c01936 	bltu	r2,r3,66d0 <_free_r+0x2c0>
    666c:	188016c4 	addi	r2,r3,91
    6670:	100690fa 	slli	r3,r2,3
    6674:	003fb306 	br	6544 <_free_r+0x134>
    6678:	01400044 	movi	r5,1
    667c:	003f7e06 	br	6478 <_free_r+0x68>
    6680:	3804d1ba 	srli	r2,r7,6
    6684:	10800e04 	addi	r2,r2,56
    6688:	100690fa 	slli	r3,r2,3
    668c:	003fad06 	br	6544 <_free_r+0x134>
    6690:	22000315 	stw	r8,12(r4)
    6694:	22000215 	stw	r8,8(r4)
    6698:	3a05883a 	add	r2,r7,r8
    669c:	38c00054 	ori	r3,r7,1
    66a0:	11c00015 	stw	r7,0(r2)
    66a4:	41000215 	stw	r4,8(r8)
    66a8:	40c00115 	stw	r3,4(r8)
    66ac:	41000315 	stw	r4,12(r8)
    66b0:	003f8406 	br	64c4 <_free_r+0xb4>
    66b4:	1005d0ba 	srai	r2,r2,2
    66b8:	00c00044 	movi	r3,1
    66bc:	51000117 	ldw	r4,4(r10)
    66c0:	1886983a 	sll	r3,r3,r2
    66c4:	20c8b03a 	or	r4,r4,r3
    66c8:	51000115 	stw	r4,4(r10)
    66cc:	003fa706 	br	656c <_free_r+0x15c>
    66d0:	00801504 	movi	r2,84
    66d4:	10c00436 	bltu	r2,r3,66e8 <_free_r+0x2d8>
    66d8:	3804d33a 	srli	r2,r7,12
    66dc:	10801b84 	addi	r2,r2,110
    66e0:	100690fa 	slli	r3,r2,3
    66e4:	003f9706 	br	6544 <_free_r+0x134>
    66e8:	00805504 	movi	r2,340
    66ec:	10c00436 	bltu	r2,r3,6700 <_free_r+0x2f0>
    66f0:	3804d3fa 	srli	r2,r7,15
    66f4:	10801dc4 	addi	r2,r2,119
    66f8:	100690fa 	slli	r3,r2,3
    66fc:	003f9106 	br	6544 <_free_r+0x134>
    6700:	00815504 	movi	r2,1364
    6704:	10c0032e 	bgeu	r2,r3,6714 <_free_r+0x304>
    6708:	00801f84 	movi	r2,126
    670c:	00c0fc04 	movi	r3,1008
    6710:	003f8c06 	br	6544 <_free_r+0x134>
    6714:	3804d4ba 	srli	r2,r7,18
    6718:	10801f04 	addi	r2,r2,124
    671c:	100690fa 	slli	r3,r2,3
    6720:	003f8806 	br	6544 <_free_r+0x134>

00006724 <__sfvwrite_r>:
    6724:	30800217 	ldw	r2,8(r6)
    6728:	defff504 	addi	sp,sp,-44
    672c:	df000915 	stw	fp,36(sp)
    6730:	dd800715 	stw	r22,28(sp)
    6734:	dc800315 	stw	r18,12(sp)
    6738:	dfc00a15 	stw	ra,40(sp)
    673c:	ddc00815 	stw	r23,32(sp)
    6740:	dd400615 	stw	r21,24(sp)
    6744:	dd000515 	stw	r20,20(sp)
    6748:	dcc00415 	stw	r19,16(sp)
    674c:	dc400215 	stw	r17,8(sp)
    6750:	dc000115 	stw	r16,4(sp)
    6754:	302d883a 	mov	r22,r6
    6758:	2039883a 	mov	fp,r4
    675c:	2825883a 	mov	r18,r5
    6760:	10001c26 	beq	r2,zero,67d4 <__sfvwrite_r+0xb0>
    6764:	29c0030b 	ldhu	r7,12(r5)
    6768:	3880020c 	andi	r2,r7,8
    676c:	10002726 	beq	r2,zero,680c <__sfvwrite_r+0xe8>
    6770:	28800417 	ldw	r2,16(r5)
    6774:	10002526 	beq	r2,zero,680c <__sfvwrite_r+0xe8>
    6778:	3880008c 	andi	r2,r7,2
    677c:	b5400017 	ldw	r21,0(r22)
    6780:	10002826 	beq	r2,zero,6824 <__sfvwrite_r+0x100>
    6784:	0021883a 	mov	r16,zero
    6788:	0023883a 	mov	r17,zero
    678c:	880d883a 	mov	r6,r17
    6790:	e009883a 	mov	r4,fp
    6794:	00810004 	movi	r2,1024
    6798:	80006e26 	beq	r16,zero,6954 <__sfvwrite_r+0x230>
    679c:	800f883a 	mov	r7,r16
    67a0:	91400717 	ldw	r5,28(r18)
    67a4:	1400012e 	bgeu	r2,r16,67ac <__sfvwrite_r+0x88>
    67a8:	100f883a 	mov	r7,r2
    67ac:	90c00917 	ldw	r3,36(r18)
    67b0:	183ee83a 	callr	r3
    67b4:	1007883a 	mov	r3,r2
    67b8:	80a1c83a 	sub	r16,r16,r2
    67bc:	88a3883a 	add	r17,r17,r2
    67c0:	00806d0e 	bge	zero,r2,6978 <__sfvwrite_r+0x254>
    67c4:	b0800217 	ldw	r2,8(r22)
    67c8:	10c5c83a 	sub	r2,r2,r3
    67cc:	b0800215 	stw	r2,8(r22)
    67d0:	103fee1e 	bne	r2,zero,678c <__sfvwrite_r+0x68>
    67d4:	0009883a 	mov	r4,zero
    67d8:	2005883a 	mov	r2,r4
    67dc:	dfc00a17 	ldw	ra,40(sp)
    67e0:	df000917 	ldw	fp,36(sp)
    67e4:	ddc00817 	ldw	r23,32(sp)
    67e8:	dd800717 	ldw	r22,28(sp)
    67ec:	dd400617 	ldw	r21,24(sp)
    67f0:	dd000517 	ldw	r20,20(sp)
    67f4:	dcc00417 	ldw	r19,16(sp)
    67f8:	dc800317 	ldw	r18,12(sp)
    67fc:	dc400217 	ldw	r17,8(sp)
    6800:	dc000117 	ldw	r16,4(sp)
    6804:	dec00b04 	addi	sp,sp,44
    6808:	f800283a 	ret
    680c:	00043380 	call	4338 <__swsetup_r>
    6810:	1000e41e 	bne	r2,zero,6ba4 <__sfvwrite_r+0x480>
    6814:	91c0030b 	ldhu	r7,12(r18)
    6818:	b5400017 	ldw	r21,0(r22)
    681c:	3880008c 	andi	r2,r7,2
    6820:	103fd81e 	bne	r2,zero,6784 <__sfvwrite_r+0x60>
    6824:	3880004c 	andi	r2,r7,1
    6828:	1005003a 	cmpeq	r2,r2,zero
    682c:	10005726 	beq	r2,zero,698c <__sfvwrite_r+0x268>
    6830:	0029883a 	mov	r20,zero
    6834:	002f883a 	mov	r23,zero
    6838:	a0004226 	beq	r20,zero,6944 <__sfvwrite_r+0x220>
    683c:	3880800c 	andi	r2,r7,512
    6840:	94000217 	ldw	r16,8(r18)
    6844:	10008b26 	beq	r2,zero,6a74 <__sfvwrite_r+0x350>
    6848:	800d883a 	mov	r6,r16
    684c:	a400a536 	bltu	r20,r16,6ae4 <__sfvwrite_r+0x3c0>
    6850:	3881200c 	andi	r2,r7,1152
    6854:	10002726 	beq	r2,zero,68f4 <__sfvwrite_r+0x1d0>
    6858:	90800517 	ldw	r2,20(r18)
    685c:	92000417 	ldw	r8,16(r18)
    6860:	91400017 	ldw	r5,0(r18)
    6864:	1087883a 	add	r3,r2,r2
    6868:	1887883a 	add	r3,r3,r2
    686c:	1808d7fa 	srli	r4,r3,31
    6870:	2a21c83a 	sub	r16,r5,r8
    6874:	80800044 	addi	r2,r16,1
    6878:	20c9883a 	add	r4,r4,r3
    687c:	2027d07a 	srai	r19,r4,1
    6880:	a085883a 	add	r2,r20,r2
    6884:	980d883a 	mov	r6,r19
    6888:	9880022e 	bgeu	r19,r2,6894 <__sfvwrite_r+0x170>
    688c:	1027883a 	mov	r19,r2
    6890:	100d883a 	mov	r6,r2
    6894:	3881000c 	andi	r2,r7,1024
    6898:	1000b826 	beq	r2,zero,6b7c <__sfvwrite_r+0x458>
    689c:	300b883a 	mov	r5,r6
    68a0:	e009883a 	mov	r4,fp
    68a4:	0001a200 	call	1a20 <_malloc_r>
    68a8:	10003126 	beq	r2,zero,6970 <__sfvwrite_r+0x24c>
    68ac:	91400417 	ldw	r5,16(r18)
    68b0:	1009883a 	mov	r4,r2
    68b4:	800d883a 	mov	r6,r16
    68b8:	1023883a 	mov	r17,r2
    68bc:	00021600 	call	2160 <memcpy>
    68c0:	90c0030b 	ldhu	r3,12(r18)
    68c4:	00beffc4 	movi	r2,-1025
    68c8:	1886703a 	and	r3,r3,r2
    68cc:	18c02014 	ori	r3,r3,128
    68d0:	90c0030d 	sth	r3,12(r18)
    68d4:	9c07c83a 	sub	r3,r19,r16
    68d8:	8c05883a 	add	r2,r17,r16
    68dc:	a00d883a 	mov	r6,r20
    68e0:	a021883a 	mov	r16,r20
    68e4:	90800015 	stw	r2,0(r18)
    68e8:	90c00215 	stw	r3,8(r18)
    68ec:	94400415 	stw	r17,16(r18)
    68f0:	94c00515 	stw	r19,20(r18)
    68f4:	91000017 	ldw	r4,0(r18)
    68f8:	b80b883a 	mov	r5,r23
    68fc:	a023883a 	mov	r17,r20
    6900:	000707c0 	call	707c <memmove>
    6904:	90c00217 	ldw	r3,8(r18)
    6908:	90800017 	ldw	r2,0(r18)
    690c:	a027883a 	mov	r19,r20
    6910:	1c07c83a 	sub	r3,r3,r16
    6914:	1405883a 	add	r2,r2,r16
    6918:	90c00215 	stw	r3,8(r18)
    691c:	a021883a 	mov	r16,r20
    6920:	90800015 	stw	r2,0(r18)
    6924:	b0800217 	ldw	r2,8(r22)
    6928:	1405c83a 	sub	r2,r2,r16
    692c:	b0800215 	stw	r2,8(r22)
    6930:	103fa826 	beq	r2,zero,67d4 <__sfvwrite_r+0xb0>
    6934:	a469c83a 	sub	r20,r20,r17
    6938:	91c0030b 	ldhu	r7,12(r18)
    693c:	bcef883a 	add	r23,r23,r19
    6940:	a03fbe1e 	bne	r20,zero,683c <__sfvwrite_r+0x118>
    6944:	adc00017 	ldw	r23,0(r21)
    6948:	ad000117 	ldw	r20,4(r21)
    694c:	ad400204 	addi	r21,r21,8
    6950:	003fb906 	br	6838 <__sfvwrite_r+0x114>
    6954:	ac400017 	ldw	r17,0(r21)
    6958:	ac000117 	ldw	r16,4(r21)
    695c:	ad400204 	addi	r21,r21,8
    6960:	003f8a06 	br	678c <__sfvwrite_r+0x68>
    6964:	91400417 	ldw	r5,16(r18)
    6968:	e009883a 	mov	r4,fp
    696c:	00064100 	call	6410 <_free_r>
    6970:	00800304 	movi	r2,12
    6974:	e0800015 	stw	r2,0(fp)
    6978:	9080030b 	ldhu	r2,12(r18)
    697c:	013fffc4 	movi	r4,-1
    6980:	10801014 	ori	r2,r2,64
    6984:	9080030d 	sth	r2,12(r18)
    6988:	003f9306 	br	67d8 <__sfvwrite_r+0xb4>
    698c:	0027883a 	mov	r19,zero
    6990:	002f883a 	mov	r23,zero
    6994:	d8000015 	stw	zero,0(sp)
    6998:	0029883a 	mov	r20,zero
    699c:	98001e26 	beq	r19,zero,6a18 <__sfvwrite_r+0x2f4>
    69a0:	d8c00017 	ldw	r3,0(sp)
    69a4:	1804c03a 	cmpne	r2,r3,zero
    69a8:	10005e26 	beq	r2,zero,6b24 <__sfvwrite_r+0x400>
    69ac:	9821883a 	mov	r16,r19
    69b0:	a4c0012e 	bgeu	r20,r19,69b8 <__sfvwrite_r+0x294>
    69b4:	a021883a 	mov	r16,r20
    69b8:	91000017 	ldw	r4,0(r18)
    69bc:	90800417 	ldw	r2,16(r18)
    69c0:	91800217 	ldw	r6,8(r18)
    69c4:	91c00517 	ldw	r7,20(r18)
    69c8:	1100022e 	bgeu	r2,r4,69d4 <__sfvwrite_r+0x2b0>
    69cc:	31e3883a 	add	r17,r6,r7
    69d0:	8c001616 	blt	r17,r16,6a2c <__sfvwrite_r+0x308>
    69d4:	81c03816 	blt	r16,r7,6ab8 <__sfvwrite_r+0x394>
    69d8:	90c00917 	ldw	r3,36(r18)
    69dc:	91400717 	ldw	r5,28(r18)
    69e0:	e009883a 	mov	r4,fp
    69e4:	b80d883a 	mov	r6,r23
    69e8:	183ee83a 	callr	r3
    69ec:	1023883a 	mov	r17,r2
    69f0:	00bfe10e 	bge	zero,r2,6978 <__sfvwrite_r+0x254>
    69f4:	a469c83a 	sub	r20,r20,r17
    69f8:	a0001826 	beq	r20,zero,6a5c <__sfvwrite_r+0x338>
    69fc:	b0800217 	ldw	r2,8(r22)
    6a00:	1445c83a 	sub	r2,r2,r17
    6a04:	b0800215 	stw	r2,8(r22)
    6a08:	103f7226 	beq	r2,zero,67d4 <__sfvwrite_r+0xb0>
    6a0c:	9c67c83a 	sub	r19,r19,r17
    6a10:	bc6f883a 	add	r23,r23,r17
    6a14:	983fe21e 	bne	r19,zero,69a0 <__sfvwrite_r+0x27c>
    6a18:	adc00017 	ldw	r23,0(r21)
    6a1c:	acc00117 	ldw	r19,4(r21)
    6a20:	ad400204 	addi	r21,r21,8
    6a24:	d8000015 	stw	zero,0(sp)
    6a28:	003fdc06 	br	699c <__sfvwrite_r+0x278>
    6a2c:	b80b883a 	mov	r5,r23
    6a30:	880d883a 	mov	r6,r17
    6a34:	000707c0 	call	707c <memmove>
    6a38:	90c00017 	ldw	r3,0(r18)
    6a3c:	e009883a 	mov	r4,fp
    6a40:	900b883a 	mov	r5,r18
    6a44:	1c47883a 	add	r3,r3,r17
    6a48:	90c00015 	stw	r3,0(r18)
    6a4c:	0005df40 	call	5df4 <_fflush_r>
    6a50:	103fc91e 	bne	r2,zero,6978 <__sfvwrite_r+0x254>
    6a54:	a469c83a 	sub	r20,r20,r17
    6a58:	a03fe81e 	bne	r20,zero,69fc <__sfvwrite_r+0x2d8>
    6a5c:	e009883a 	mov	r4,fp
    6a60:	900b883a 	mov	r5,r18
    6a64:	0005df40 	call	5df4 <_fflush_r>
    6a68:	103fc31e 	bne	r2,zero,6978 <__sfvwrite_r+0x254>
    6a6c:	d8000015 	stw	zero,0(sp)
    6a70:	003fe206 	br	69fc <__sfvwrite_r+0x2d8>
    6a74:	91000017 	ldw	r4,0(r18)
    6a78:	90800417 	ldw	r2,16(r18)
    6a7c:	1100022e 	bgeu	r2,r4,6a88 <__sfvwrite_r+0x364>
    6a80:	8023883a 	mov	r17,r16
    6a84:	85003136 	bltu	r16,r20,6b4c <__sfvwrite_r+0x428>
    6a88:	91c00517 	ldw	r7,20(r18)
    6a8c:	a1c01836 	bltu	r20,r7,6af0 <__sfvwrite_r+0x3cc>
    6a90:	90c00917 	ldw	r3,36(r18)
    6a94:	91400717 	ldw	r5,28(r18)
    6a98:	e009883a 	mov	r4,fp
    6a9c:	b80d883a 	mov	r6,r23
    6aa0:	183ee83a 	callr	r3
    6aa4:	1021883a 	mov	r16,r2
    6aa8:	00bfb30e 	bge	zero,r2,6978 <__sfvwrite_r+0x254>
    6aac:	1023883a 	mov	r17,r2
    6ab0:	1027883a 	mov	r19,r2
    6ab4:	003f9b06 	br	6924 <__sfvwrite_r+0x200>
    6ab8:	b80b883a 	mov	r5,r23
    6abc:	800d883a 	mov	r6,r16
    6ac0:	000707c0 	call	707c <memmove>
    6ac4:	90c00217 	ldw	r3,8(r18)
    6ac8:	90800017 	ldw	r2,0(r18)
    6acc:	8023883a 	mov	r17,r16
    6ad0:	1c07c83a 	sub	r3,r3,r16
    6ad4:	1405883a 	add	r2,r2,r16
    6ad8:	90c00215 	stw	r3,8(r18)
    6adc:	90800015 	stw	r2,0(r18)
    6ae0:	003fc406 	br	69f4 <__sfvwrite_r+0x2d0>
    6ae4:	a00d883a 	mov	r6,r20
    6ae8:	a021883a 	mov	r16,r20
    6aec:	003f8106 	br	68f4 <__sfvwrite_r+0x1d0>
    6af0:	b80b883a 	mov	r5,r23
    6af4:	a00d883a 	mov	r6,r20
    6af8:	000707c0 	call	707c <memmove>
    6afc:	90c00217 	ldw	r3,8(r18)
    6b00:	90800017 	ldw	r2,0(r18)
    6b04:	a021883a 	mov	r16,r20
    6b08:	1d07c83a 	sub	r3,r3,r20
    6b0c:	1505883a 	add	r2,r2,r20
    6b10:	a023883a 	mov	r17,r20
    6b14:	a027883a 	mov	r19,r20
    6b18:	90c00215 	stw	r3,8(r18)
    6b1c:	90800015 	stw	r2,0(r18)
    6b20:	003f8006 	br	6924 <__sfvwrite_r+0x200>
    6b24:	b809883a 	mov	r4,r23
    6b28:	01400284 	movi	r5,10
    6b2c:	980d883a 	mov	r6,r19
    6b30:	0006f980 	call	6f98 <memchr>
    6b34:	10001726 	beq	r2,zero,6b94 <__sfvwrite_r+0x470>
    6b38:	15c5c83a 	sub	r2,r2,r23
    6b3c:	15000044 	addi	r20,r2,1
    6b40:	00800044 	movi	r2,1
    6b44:	d8800015 	stw	r2,0(sp)
    6b48:	003f9806 	br	69ac <__sfvwrite_r+0x288>
    6b4c:	b80b883a 	mov	r5,r23
    6b50:	800d883a 	mov	r6,r16
    6b54:	000707c0 	call	707c <memmove>
    6b58:	90c00017 	ldw	r3,0(r18)
    6b5c:	e009883a 	mov	r4,fp
    6b60:	900b883a 	mov	r5,r18
    6b64:	1c07883a 	add	r3,r3,r16
    6b68:	90c00015 	stw	r3,0(r18)
    6b6c:	8027883a 	mov	r19,r16
    6b70:	0005df40 	call	5df4 <_fflush_r>
    6b74:	103f6b26 	beq	r2,zero,6924 <__sfvwrite_r+0x200>
    6b78:	003f7f06 	br	6978 <__sfvwrite_r+0x254>
    6b7c:	400b883a 	mov	r5,r8
    6b80:	e009883a 	mov	r4,fp
    6b84:	00081e80 	call	81e8 <_realloc_r>
    6b88:	103f7626 	beq	r2,zero,6964 <__sfvwrite_r+0x240>
    6b8c:	1023883a 	mov	r17,r2
    6b90:	003f5006 	br	68d4 <__sfvwrite_r+0x1b0>
    6b94:	00c00044 	movi	r3,1
    6b98:	9d000044 	addi	r20,r19,1
    6b9c:	d8c00015 	stw	r3,0(sp)
    6ba0:	003f8206 	br	69ac <__sfvwrite_r+0x288>
    6ba4:	9080030b 	ldhu	r2,12(r18)
    6ba8:	00c00244 	movi	r3,9
    6bac:	013fffc4 	movi	r4,-1
    6bb0:	10801014 	ori	r2,r2,64
    6bb4:	9080030d 	sth	r2,12(r18)
    6bb8:	e0c00015 	stw	r3,0(fp)
    6bbc:	003f0606 	br	67d8 <__sfvwrite_r+0xb4>

00006bc0 <_fwalk_reent>:
    6bc0:	defff704 	addi	sp,sp,-36
    6bc4:	dcc00315 	stw	r19,12(sp)
    6bc8:	24c0b804 	addi	r19,r4,736
    6bcc:	dd800615 	stw	r22,24(sp)
    6bd0:	dd400515 	stw	r21,20(sp)
    6bd4:	dfc00815 	stw	ra,32(sp)
    6bd8:	ddc00715 	stw	r23,28(sp)
    6bdc:	dd000415 	stw	r20,16(sp)
    6be0:	dc800215 	stw	r18,8(sp)
    6be4:	dc400115 	stw	r17,4(sp)
    6be8:	dc000015 	stw	r16,0(sp)
    6bec:	202b883a 	mov	r21,r4
    6bf0:	282d883a 	mov	r22,r5
    6bf4:	000607c0 	call	607c <__sfp_lock_acquire>
    6bf8:	98002126 	beq	r19,zero,6c80 <_fwalk_reent+0xc0>
    6bfc:	002f883a 	mov	r23,zero
    6c00:	9c800117 	ldw	r18,4(r19)
    6c04:	9c000217 	ldw	r16,8(r19)
    6c08:	90bfffc4 	addi	r2,r18,-1
    6c0c:	10000d16 	blt	r2,zero,6c44 <_fwalk_reent+0x84>
    6c10:	0023883a 	mov	r17,zero
    6c14:	053fffc4 	movi	r20,-1
    6c18:	8080030f 	ldh	r2,12(r16)
    6c1c:	8c400044 	addi	r17,r17,1
    6c20:	10000626 	beq	r2,zero,6c3c <_fwalk_reent+0x7c>
    6c24:	8080038f 	ldh	r2,14(r16)
    6c28:	800b883a 	mov	r5,r16
    6c2c:	a809883a 	mov	r4,r21
    6c30:	15000226 	beq	r2,r20,6c3c <_fwalk_reent+0x7c>
    6c34:	b03ee83a 	callr	r22
    6c38:	b8aeb03a 	or	r23,r23,r2
    6c3c:	84001704 	addi	r16,r16,92
    6c40:	947ff51e 	bne	r18,r17,6c18 <_fwalk_reent+0x58>
    6c44:	9cc00017 	ldw	r19,0(r19)
    6c48:	983fed1e 	bne	r19,zero,6c00 <_fwalk_reent+0x40>
    6c4c:	00060800 	call	6080 <__sfp_lock_release>
    6c50:	b805883a 	mov	r2,r23
    6c54:	dfc00817 	ldw	ra,32(sp)
    6c58:	ddc00717 	ldw	r23,28(sp)
    6c5c:	dd800617 	ldw	r22,24(sp)
    6c60:	dd400517 	ldw	r21,20(sp)
    6c64:	dd000417 	ldw	r20,16(sp)
    6c68:	dcc00317 	ldw	r19,12(sp)
    6c6c:	dc800217 	ldw	r18,8(sp)
    6c70:	dc400117 	ldw	r17,4(sp)
    6c74:	dc000017 	ldw	r16,0(sp)
    6c78:	dec00904 	addi	sp,sp,36
    6c7c:	f800283a 	ret
    6c80:	002f883a 	mov	r23,zero
    6c84:	003ff106 	br	6c4c <_fwalk_reent+0x8c>

00006c88 <_fwalk>:
    6c88:	defff804 	addi	sp,sp,-32
    6c8c:	dcc00315 	stw	r19,12(sp)
    6c90:	24c0b804 	addi	r19,r4,736
    6c94:	dd400515 	stw	r21,20(sp)
    6c98:	dfc00715 	stw	ra,28(sp)
    6c9c:	dd800615 	stw	r22,24(sp)
    6ca0:	dd000415 	stw	r20,16(sp)
    6ca4:	dc800215 	stw	r18,8(sp)
    6ca8:	dc400115 	stw	r17,4(sp)
    6cac:	dc000015 	stw	r16,0(sp)
    6cb0:	282b883a 	mov	r21,r5
    6cb4:	000607c0 	call	607c <__sfp_lock_acquire>
    6cb8:	98001f26 	beq	r19,zero,6d38 <_fwalk+0xb0>
    6cbc:	002d883a 	mov	r22,zero
    6cc0:	9c800117 	ldw	r18,4(r19)
    6cc4:	9c000217 	ldw	r16,8(r19)
    6cc8:	90bfffc4 	addi	r2,r18,-1
    6ccc:	10000c16 	blt	r2,zero,6d00 <_fwalk+0x78>
    6cd0:	0023883a 	mov	r17,zero
    6cd4:	053fffc4 	movi	r20,-1
    6cd8:	8080030f 	ldh	r2,12(r16)
    6cdc:	8c400044 	addi	r17,r17,1
    6ce0:	10000526 	beq	r2,zero,6cf8 <_fwalk+0x70>
    6ce4:	8080038f 	ldh	r2,14(r16)
    6ce8:	8009883a 	mov	r4,r16
    6cec:	15000226 	beq	r2,r20,6cf8 <_fwalk+0x70>
    6cf0:	a83ee83a 	callr	r21
    6cf4:	b0acb03a 	or	r22,r22,r2
    6cf8:	84001704 	addi	r16,r16,92
    6cfc:	947ff61e 	bne	r18,r17,6cd8 <_fwalk+0x50>
    6d00:	9cc00017 	ldw	r19,0(r19)
    6d04:	983fee1e 	bne	r19,zero,6cc0 <_fwalk+0x38>
    6d08:	00060800 	call	6080 <__sfp_lock_release>
    6d0c:	b005883a 	mov	r2,r22
    6d10:	dfc00717 	ldw	ra,28(sp)
    6d14:	dd800617 	ldw	r22,24(sp)
    6d18:	dd400517 	ldw	r21,20(sp)
    6d1c:	dd000417 	ldw	r20,16(sp)
    6d20:	dcc00317 	ldw	r19,12(sp)
    6d24:	dc800217 	ldw	r18,8(sp)
    6d28:	dc400117 	ldw	r17,4(sp)
    6d2c:	dc000017 	ldw	r16,0(sp)
    6d30:	dec00804 	addi	sp,sp,32
    6d34:	f800283a 	ret
    6d38:	002d883a 	mov	r22,zero
    6d3c:	003ff206 	br	6d08 <_fwalk+0x80>

00006d40 <__locale_charset>:
    6d40:	d0a00617 	ldw	r2,-32744(gp)
    6d44:	f800283a 	ret

00006d48 <_localeconv_r>:
    6d48:	00800074 	movhi	r2,1
    6d4c:	10b76504 	addi	r2,r2,-8812
    6d50:	f800283a 	ret

00006d54 <localeconv>:
    6d54:	00800074 	movhi	r2,1
    6d58:	10be9404 	addi	r2,r2,-1456
    6d5c:	11000017 	ldw	r4,0(r2)
    6d60:	0006d481 	jmpi	6d48 <_localeconv_r>

00006d64 <_setlocale_r>:
    6d64:	defffc04 	addi	sp,sp,-16
    6d68:	00c00074 	movhi	r3,1
    6d6c:	18f73b04 	addi	r3,r3,-8980
    6d70:	dc800215 	stw	r18,8(sp)
    6d74:	dc400115 	stw	r17,4(sp)
    6d78:	dc000015 	stw	r16,0(sp)
    6d7c:	2023883a 	mov	r17,r4
    6d80:	2825883a 	mov	r18,r5
    6d84:	dfc00315 	stw	ra,12(sp)
    6d88:	3021883a 	mov	r16,r6
    6d8c:	3009883a 	mov	r4,r6
    6d90:	180b883a 	mov	r5,r3
    6d94:	30000926 	beq	r6,zero,6dbc <_setlocale_r+0x58>
    6d98:	00089980 	call	8998 <strcmp>
    6d9c:	8009883a 	mov	r4,r16
    6da0:	01400074 	movhi	r5,1
    6da4:	29774c04 	addi	r5,r5,-8912
    6da8:	10000b1e 	bne	r2,zero,6dd8 <_setlocale_r+0x74>
    6dac:	8c000d15 	stw	r16,52(r17)
    6db0:	8c800c15 	stw	r18,48(r17)
    6db4:	00c00074 	movhi	r3,1
    6db8:	18f73b04 	addi	r3,r3,-8980
    6dbc:	1805883a 	mov	r2,r3
    6dc0:	dfc00317 	ldw	ra,12(sp)
    6dc4:	dc800217 	ldw	r18,8(sp)
    6dc8:	dc400117 	ldw	r17,4(sp)
    6dcc:	dc000017 	ldw	r16,0(sp)
    6dd0:	dec00404 	addi	sp,sp,16
    6dd4:	f800283a 	ret
    6dd8:	00089980 	call	8998 <strcmp>
    6ddc:	0007883a 	mov	r3,zero
    6de0:	103ff226 	beq	r2,zero,6dac <_setlocale_r+0x48>
    6de4:	003ff506 	br	6dbc <_setlocale_r+0x58>

00006de8 <setlocale>:
    6de8:	01800074 	movhi	r6,1
    6dec:	31be9404 	addi	r6,r6,-1456
    6df0:	2007883a 	mov	r3,r4
    6df4:	31000017 	ldw	r4,0(r6)
    6df8:	280d883a 	mov	r6,r5
    6dfc:	180b883a 	mov	r5,r3
    6e00:	0006d641 	jmpi	6d64 <_setlocale_r>

00006e04 <__smakebuf_r>:
    6e04:	2880030b 	ldhu	r2,12(r5)
    6e08:	deffed04 	addi	sp,sp,-76
    6e0c:	dc401015 	stw	r17,64(sp)
    6e10:	1080008c 	andi	r2,r2,2
    6e14:	dc000f15 	stw	r16,60(sp)
    6e18:	dfc01215 	stw	ra,72(sp)
    6e1c:	dc801115 	stw	r18,68(sp)
    6e20:	2821883a 	mov	r16,r5
    6e24:	2023883a 	mov	r17,r4
    6e28:	10000b26 	beq	r2,zero,6e58 <__smakebuf_r+0x54>
    6e2c:	28c010c4 	addi	r3,r5,67
    6e30:	00800044 	movi	r2,1
    6e34:	28800515 	stw	r2,20(r5)
    6e38:	28c00415 	stw	r3,16(r5)
    6e3c:	28c00015 	stw	r3,0(r5)
    6e40:	dfc01217 	ldw	ra,72(sp)
    6e44:	dc801117 	ldw	r18,68(sp)
    6e48:	dc401017 	ldw	r17,64(sp)
    6e4c:	dc000f17 	ldw	r16,60(sp)
    6e50:	dec01304 	addi	sp,sp,76
    6e54:	f800283a 	ret
    6e58:	2940038f 	ldh	r5,14(r5)
    6e5c:	28002116 	blt	r5,zero,6ee4 <__smakebuf_r+0xe0>
    6e60:	d80d883a 	mov	r6,sp
    6e64:	0008d140 	call	8d14 <_fstat_r>
    6e68:	10001e16 	blt	r2,zero,6ee4 <__smakebuf_r+0xe0>
    6e6c:	d8800117 	ldw	r2,4(sp)
    6e70:	00e00014 	movui	r3,32768
    6e74:	113c000c 	andi	r4,r2,61440
    6e78:	20c03126 	beq	r4,r3,6f40 <__smakebuf_r+0x13c>
    6e7c:	8080030b 	ldhu	r2,12(r16)
    6e80:	00c80004 	movi	r3,8192
    6e84:	10820014 	ori	r2,r2,2048
    6e88:	8080030d 	sth	r2,12(r16)
    6e8c:	20c01e26 	beq	r4,r3,6f08 <__smakebuf_r+0x104>
    6e90:	04810004 	movi	r18,1024
    6e94:	8809883a 	mov	r4,r17
    6e98:	900b883a 	mov	r5,r18
    6e9c:	0001a200 	call	1a20 <_malloc_r>
    6ea0:	1009883a 	mov	r4,r2
    6ea4:	10003126 	beq	r2,zero,6f6c <__smakebuf_r+0x168>
    6ea8:	80c0030b 	ldhu	r3,12(r16)
    6eac:	00800034 	movhi	r2,0
    6eb0:	10985c04 	addi	r2,r2,24944
    6eb4:	88800f15 	stw	r2,60(r17)
    6eb8:	18c02014 	ori	r3,r3,128
    6ebc:	84800515 	stw	r18,20(r16)
    6ec0:	80c0030d 	sth	r3,12(r16)
    6ec4:	81000415 	stw	r4,16(r16)
    6ec8:	81000015 	stw	r4,0(r16)
    6ecc:	dfc01217 	ldw	ra,72(sp)
    6ed0:	dc801117 	ldw	r18,68(sp)
    6ed4:	dc401017 	ldw	r17,64(sp)
    6ed8:	dc000f17 	ldw	r16,60(sp)
    6edc:	dec01304 	addi	sp,sp,76
    6ee0:	f800283a 	ret
    6ee4:	80c0030b 	ldhu	r3,12(r16)
    6ee8:	1880200c 	andi	r2,r3,128
    6eec:	10000426 	beq	r2,zero,6f00 <__smakebuf_r+0xfc>
    6ef0:	04801004 	movi	r18,64
    6ef4:	18820014 	ori	r2,r3,2048
    6ef8:	8080030d 	sth	r2,12(r16)
    6efc:	003fe506 	br	6e94 <__smakebuf_r+0x90>
    6f00:	04810004 	movi	r18,1024
    6f04:	003ffb06 	br	6ef4 <__smakebuf_r+0xf0>
    6f08:	8140038f 	ldh	r5,14(r16)
    6f0c:	8809883a 	mov	r4,r17
    6f10:	0008d880 	call	8d88 <_isatty_r>
    6f14:	103fde26 	beq	r2,zero,6e90 <__smakebuf_r+0x8c>
    6f18:	8080030b 	ldhu	r2,12(r16)
    6f1c:	80c010c4 	addi	r3,r16,67
    6f20:	04810004 	movi	r18,1024
    6f24:	10800054 	ori	r2,r2,1
    6f28:	8080030d 	sth	r2,12(r16)
    6f2c:	00800044 	movi	r2,1
    6f30:	80c00415 	stw	r3,16(r16)
    6f34:	80800515 	stw	r2,20(r16)
    6f38:	80c00015 	stw	r3,0(r16)
    6f3c:	003fd506 	br	6e94 <__smakebuf_r+0x90>
    6f40:	80c00a17 	ldw	r3,40(r16)
    6f44:	00800074 	movhi	r2,1
    6f48:	10a21504 	addi	r2,r2,-30636
    6f4c:	18bfcb1e 	bne	r3,r2,6e7c <__smakebuf_r+0x78>
    6f50:	8080030b 	ldhu	r2,12(r16)
    6f54:	00c10004 	movi	r3,1024
    6f58:	1825883a 	mov	r18,r3
    6f5c:	10c4b03a 	or	r2,r2,r3
    6f60:	8080030d 	sth	r2,12(r16)
    6f64:	80c01315 	stw	r3,76(r16)
    6f68:	003fca06 	br	6e94 <__smakebuf_r+0x90>
    6f6c:	8100030b 	ldhu	r4,12(r16)
    6f70:	2080800c 	andi	r2,r4,512
    6f74:	103fb21e 	bne	r2,zero,6e40 <__smakebuf_r+0x3c>
    6f78:	80c010c4 	addi	r3,r16,67
    6f7c:	21000094 	ori	r4,r4,2
    6f80:	00800044 	movi	r2,1
    6f84:	80800515 	stw	r2,20(r16)
    6f88:	8100030d 	sth	r4,12(r16)
    6f8c:	80c00415 	stw	r3,16(r16)
    6f90:	80c00015 	stw	r3,0(r16)
    6f94:	003faa06 	br	6e40 <__smakebuf_r+0x3c>

00006f98 <memchr>:
    6f98:	008000c4 	movi	r2,3
    6f9c:	29403fcc 	andi	r5,r5,255
    6fa0:	2007883a 	mov	r3,r4
    6fa4:	1180022e 	bgeu	r2,r6,6fb0 <memchr+0x18>
    6fa8:	2084703a 	and	r2,r4,r2
    6fac:	10000b26 	beq	r2,zero,6fdc <memchr+0x44>
    6fb0:	313fffc4 	addi	r4,r6,-1
    6fb4:	3000051e 	bne	r6,zero,6fcc <memchr+0x34>
    6fb8:	00002c06 	br	706c <memchr+0xd4>
    6fbc:	213fffc4 	addi	r4,r4,-1
    6fc0:	00bfffc4 	movi	r2,-1
    6fc4:	18c00044 	addi	r3,r3,1
    6fc8:	20802826 	beq	r4,r2,706c <memchr+0xd4>
    6fcc:	18800003 	ldbu	r2,0(r3)
    6fd0:	28bffa1e 	bne	r5,r2,6fbc <memchr+0x24>
    6fd4:	1805883a 	mov	r2,r3
    6fd8:	f800283a 	ret
    6fdc:	0011883a 	mov	r8,zero
    6fe0:	0007883a 	mov	r3,zero
    6fe4:	01c00104 	movi	r7,4
    6fe8:	4004923a 	slli	r2,r8,8
    6fec:	18c00044 	addi	r3,r3,1
    6ff0:	1151883a 	add	r8,r2,r5
    6ff4:	19fffc1e 	bne	r3,r7,6fe8 <memchr+0x50>
    6ff8:	02bfbff4 	movhi	r10,65279
    6ffc:	52bfbfc4 	addi	r10,r10,-257
    7000:	02602074 	movhi	r9,32897
    7004:	4a602004 	addi	r9,r9,-32640
    7008:	02c000c4 	movi	r11,3
    700c:	20800017 	ldw	r2,0(r4)
    7010:	31bfff04 	addi	r6,r6,-4
    7014:	200f883a 	mov	r7,r4
    7018:	1204f03a 	xor	r2,r2,r8
    701c:	1287883a 	add	r3,r2,r10
    7020:	1a46703a 	and	r3,r3,r9
    7024:	0084303a 	nor	r2,zero,r2
    7028:	10c4703a 	and	r2,r2,r3
    702c:	10000b26 	beq	r2,zero,705c <memchr+0xc4>
    7030:	20800003 	ldbu	r2,0(r4)
    7034:	28800f26 	beq	r5,r2,7074 <memchr+0xdc>
    7038:	20800043 	ldbu	r2,1(r4)
    703c:	21c00044 	addi	r7,r4,1
    7040:	28800c26 	beq	r5,r2,7074 <memchr+0xdc>
    7044:	20800083 	ldbu	r2,2(r4)
    7048:	21c00084 	addi	r7,r4,2
    704c:	28800926 	beq	r5,r2,7074 <memchr+0xdc>
    7050:	208000c3 	ldbu	r2,3(r4)
    7054:	21c000c4 	addi	r7,r4,3
    7058:	28800626 	beq	r5,r2,7074 <memchr+0xdc>
    705c:	21000104 	addi	r4,r4,4
    7060:	59bfea36 	bltu	r11,r6,700c <memchr+0x74>
    7064:	2007883a 	mov	r3,r4
    7068:	003fd106 	br	6fb0 <memchr+0x18>
    706c:	0005883a 	mov	r2,zero
    7070:	f800283a 	ret
    7074:	3805883a 	mov	r2,r7
    7078:	f800283a 	ret

0000707c <memmove>:
    707c:	2807883a 	mov	r3,r5
    7080:	2011883a 	mov	r8,r4
    7084:	29000c2e 	bgeu	r5,r4,70b8 <memmove+0x3c>
    7088:	298f883a 	add	r7,r5,r6
    708c:	21c00a2e 	bgeu	r4,r7,70b8 <memmove+0x3c>
    7090:	30000726 	beq	r6,zero,70b0 <memmove+0x34>
    7094:	2187883a 	add	r3,r4,r6
    7098:	198dc83a 	sub	r6,r3,r6
    709c:	39ffffc4 	addi	r7,r7,-1
    70a0:	38800003 	ldbu	r2,0(r7)
    70a4:	18ffffc4 	addi	r3,r3,-1
    70a8:	18800005 	stb	r2,0(r3)
    70ac:	19bffb1e 	bne	r3,r6,709c <memmove+0x20>
    70b0:	2005883a 	mov	r2,r4
    70b4:	f800283a 	ret
    70b8:	01c003c4 	movi	r7,15
    70bc:	39800a36 	bltu	r7,r6,70e8 <memmove+0x6c>
    70c0:	303ffb26 	beq	r6,zero,70b0 <memmove+0x34>
    70c4:	400f883a 	mov	r7,r8
    70c8:	320d883a 	add	r6,r6,r8
    70cc:	28800003 	ldbu	r2,0(r5)
    70d0:	29400044 	addi	r5,r5,1
    70d4:	38800005 	stb	r2,0(r7)
    70d8:	39c00044 	addi	r7,r7,1
    70dc:	39bffb1e 	bne	r7,r6,70cc <memmove+0x50>
    70e0:	2005883a 	mov	r2,r4
    70e4:	f800283a 	ret
    70e8:	1904b03a 	or	r2,r3,r4
    70ec:	108000cc 	andi	r2,r2,3
    70f0:	103ff31e 	bne	r2,zero,70c0 <memmove+0x44>
    70f4:	3811883a 	mov	r8,r7
    70f8:	180b883a 	mov	r5,r3
    70fc:	200f883a 	mov	r7,r4
    7100:	28c00017 	ldw	r3,0(r5)
    7104:	31bffc04 	addi	r6,r6,-16
    7108:	38c00015 	stw	r3,0(r7)
    710c:	28800117 	ldw	r2,4(r5)
    7110:	38800115 	stw	r2,4(r7)
    7114:	28c00217 	ldw	r3,8(r5)
    7118:	38c00215 	stw	r3,8(r7)
    711c:	28800317 	ldw	r2,12(r5)
    7120:	29400404 	addi	r5,r5,16
    7124:	38800315 	stw	r2,12(r7)
    7128:	39c00404 	addi	r7,r7,16
    712c:	41bff436 	bltu	r8,r6,7100 <memmove+0x84>
    7130:	008000c4 	movi	r2,3
    7134:	1180072e 	bgeu	r2,r6,7154 <memmove+0xd8>
    7138:	1007883a 	mov	r3,r2
    713c:	28800017 	ldw	r2,0(r5)
    7140:	31bfff04 	addi	r6,r6,-4
    7144:	29400104 	addi	r5,r5,4
    7148:	38800015 	stw	r2,0(r7)
    714c:	39c00104 	addi	r7,r7,4
    7150:	19bffa36 	bltu	r3,r6,713c <memmove+0xc0>
    7154:	3811883a 	mov	r8,r7
    7158:	003fd906 	br	70c0 <memmove+0x44>

0000715c <memset>:
    715c:	008000c4 	movi	r2,3
    7160:	29403fcc 	andi	r5,r5,255
    7164:	2007883a 	mov	r3,r4
    7168:	1180022e 	bgeu	r2,r6,7174 <memset+0x18>
    716c:	2084703a 	and	r2,r4,r2
    7170:	10000826 	beq	r2,zero,7194 <memset+0x38>
    7174:	30000526 	beq	r6,zero,718c <memset+0x30>
    7178:	2805883a 	mov	r2,r5
    717c:	30cd883a 	add	r6,r6,r3
    7180:	18800005 	stb	r2,0(r3)
    7184:	18c00044 	addi	r3,r3,1
    7188:	19bffd1e 	bne	r3,r6,7180 <memset+0x24>
    718c:	2005883a 	mov	r2,r4
    7190:	f800283a 	ret
    7194:	2804923a 	slli	r2,r5,8
    7198:	020003c4 	movi	r8,15
    719c:	200f883a 	mov	r7,r4
    71a0:	2884b03a 	or	r2,r5,r2
    71a4:	1006943a 	slli	r3,r2,16
    71a8:	10c6b03a 	or	r3,r2,r3
    71ac:	41800a2e 	bgeu	r8,r6,71d8 <memset+0x7c>
    71b0:	4005883a 	mov	r2,r8
    71b4:	31bffc04 	addi	r6,r6,-16
    71b8:	38c00015 	stw	r3,0(r7)
    71bc:	38c00115 	stw	r3,4(r7)
    71c0:	38c00215 	stw	r3,8(r7)
    71c4:	38c00315 	stw	r3,12(r7)
    71c8:	39c00404 	addi	r7,r7,16
    71cc:	11bff936 	bltu	r2,r6,71b4 <memset+0x58>
    71d0:	008000c4 	movi	r2,3
    71d4:	1180052e 	bgeu	r2,r6,71ec <memset+0x90>
    71d8:	31bfff04 	addi	r6,r6,-4
    71dc:	008000c4 	movi	r2,3
    71e0:	38c00015 	stw	r3,0(r7)
    71e4:	39c00104 	addi	r7,r7,4
    71e8:	11bffb36 	bltu	r2,r6,71d8 <memset+0x7c>
    71ec:	3807883a 	mov	r3,r7
    71f0:	003fe006 	br	7174 <memset+0x18>

000071f4 <_Bfree>:
    71f4:	28000826 	beq	r5,zero,7218 <_Bfree+0x24>
    71f8:	28800117 	ldw	r2,4(r5)
    71fc:	21001317 	ldw	r4,76(r4)
    7200:	1085883a 	add	r2,r2,r2
    7204:	1085883a 	add	r2,r2,r2
    7208:	1105883a 	add	r2,r2,r4
    720c:	10c00017 	ldw	r3,0(r2)
    7210:	28c00015 	stw	r3,0(r5)
    7214:	11400015 	stw	r5,0(r2)
    7218:	f800283a 	ret

0000721c <__hi0bits>:
    721c:	20bfffec 	andhi	r2,r4,65535
    7220:	10001426 	beq	r2,zero,7274 <__hi0bits+0x58>
    7224:	0007883a 	mov	r3,zero
    7228:	20bfc02c 	andhi	r2,r4,65280
    722c:	1000021e 	bne	r2,zero,7238 <__hi0bits+0x1c>
    7230:	2008923a 	slli	r4,r4,8
    7234:	18c00204 	addi	r3,r3,8
    7238:	20bc002c 	andhi	r2,r4,61440
    723c:	1000021e 	bne	r2,zero,7248 <__hi0bits+0x2c>
    7240:	2008913a 	slli	r4,r4,4
    7244:	18c00104 	addi	r3,r3,4
    7248:	20b0002c 	andhi	r2,r4,49152
    724c:	1000031e 	bne	r2,zero,725c <__hi0bits+0x40>
    7250:	2105883a 	add	r2,r4,r4
    7254:	18c00084 	addi	r3,r3,2
    7258:	1089883a 	add	r4,r2,r2
    725c:	20000316 	blt	r4,zero,726c <__hi0bits+0x50>
    7260:	2090002c 	andhi	r2,r4,16384
    7264:	10000626 	beq	r2,zero,7280 <__hi0bits+0x64>
    7268:	18c00044 	addi	r3,r3,1
    726c:	1805883a 	mov	r2,r3
    7270:	f800283a 	ret
    7274:	2008943a 	slli	r4,r4,16
    7278:	00c00404 	movi	r3,16
    727c:	003fea06 	br	7228 <__hi0bits+0xc>
    7280:	00c00804 	movi	r3,32
    7284:	1805883a 	mov	r2,r3
    7288:	f800283a 	ret

0000728c <__lo0bits>:
    728c:	20c00017 	ldw	r3,0(r4)
    7290:	188001cc 	andi	r2,r3,7
    7294:	10000a26 	beq	r2,zero,72c0 <__lo0bits+0x34>
    7298:	1880004c 	andi	r2,r3,1
    729c:	1005003a 	cmpeq	r2,r2,zero
    72a0:	10002126 	beq	r2,zero,7328 <__lo0bits+0x9c>
    72a4:	1880008c 	andi	r2,r3,2
    72a8:	1000251e 	bne	r2,zero,7340 <__lo0bits+0xb4>
    72ac:	1804d0ba 	srli	r2,r3,2
    72b0:	01400084 	movi	r5,2
    72b4:	20800015 	stw	r2,0(r4)
    72b8:	2805883a 	mov	r2,r5
    72bc:	f800283a 	ret
    72c0:	18bfffcc 	andi	r2,r3,65535
    72c4:	10001526 	beq	r2,zero,731c <__lo0bits+0x90>
    72c8:	000b883a 	mov	r5,zero
    72cc:	18803fcc 	andi	r2,r3,255
    72d0:	1000021e 	bne	r2,zero,72dc <__lo0bits+0x50>
    72d4:	1806d23a 	srli	r3,r3,8
    72d8:	29400204 	addi	r5,r5,8
    72dc:	188003cc 	andi	r2,r3,15
    72e0:	1000021e 	bne	r2,zero,72ec <__lo0bits+0x60>
    72e4:	1806d13a 	srli	r3,r3,4
    72e8:	29400104 	addi	r5,r5,4
    72ec:	188000cc 	andi	r2,r3,3
    72f0:	1000021e 	bne	r2,zero,72fc <__lo0bits+0x70>
    72f4:	1806d0ba 	srli	r3,r3,2
    72f8:	29400084 	addi	r5,r5,2
    72fc:	1880004c 	andi	r2,r3,1
    7300:	1000031e 	bne	r2,zero,7310 <__lo0bits+0x84>
    7304:	1806d07a 	srli	r3,r3,1
    7308:	18000a26 	beq	r3,zero,7334 <__lo0bits+0xa8>
    730c:	29400044 	addi	r5,r5,1
    7310:	2805883a 	mov	r2,r5
    7314:	20c00015 	stw	r3,0(r4)
    7318:	f800283a 	ret
    731c:	1806d43a 	srli	r3,r3,16
    7320:	01400404 	movi	r5,16
    7324:	003fe906 	br	72cc <__lo0bits+0x40>
    7328:	000b883a 	mov	r5,zero
    732c:	2805883a 	mov	r2,r5
    7330:	f800283a 	ret
    7334:	01400804 	movi	r5,32
    7338:	2805883a 	mov	r2,r5
    733c:	f800283a 	ret
    7340:	1804d07a 	srli	r2,r3,1
    7344:	01400044 	movi	r5,1
    7348:	20800015 	stw	r2,0(r4)
    734c:	003fda06 	br	72b8 <__lo0bits+0x2c>

00007350 <__mcmp>:
    7350:	20800417 	ldw	r2,16(r4)
    7354:	28c00417 	ldw	r3,16(r5)
    7358:	10cfc83a 	sub	r7,r2,r3
    735c:	38000c1e 	bne	r7,zero,7390 <__mcmp+0x40>
    7360:	18c5883a 	add	r2,r3,r3
    7364:	1085883a 	add	r2,r2,r2
    7368:	10c00504 	addi	r3,r2,20
    736c:	21000504 	addi	r4,r4,20
    7370:	28cb883a 	add	r5,r5,r3
    7374:	2085883a 	add	r2,r4,r2
    7378:	10bfff04 	addi	r2,r2,-4
    737c:	297fff04 	addi	r5,r5,-4
    7380:	11800017 	ldw	r6,0(r2)
    7384:	28c00017 	ldw	r3,0(r5)
    7388:	30c0031e 	bne	r6,r3,7398 <__mcmp+0x48>
    738c:	20bffa36 	bltu	r4,r2,7378 <__mcmp+0x28>
    7390:	3805883a 	mov	r2,r7
    7394:	f800283a 	ret
    7398:	30c00336 	bltu	r6,r3,73a8 <__mcmp+0x58>
    739c:	01c00044 	movi	r7,1
    73a0:	3805883a 	mov	r2,r7
    73a4:	f800283a 	ret
    73a8:	01ffffc4 	movi	r7,-1
    73ac:	003ff806 	br	7390 <__mcmp+0x40>

000073b0 <__ulp>:
    73b0:	295ffc2c 	andhi	r5,r5,32752
    73b4:	013f3034 	movhi	r4,64704
    73b8:	290b883a 	add	r5,r5,r4
    73bc:	0145c83a 	sub	r2,zero,r5
    73c0:	1007d53a 	srai	r3,r2,20
    73c4:	000d883a 	mov	r6,zero
    73c8:	0140040e 	bge	zero,r5,73dc <__ulp+0x2c>
    73cc:	280f883a 	mov	r7,r5
    73d0:	3807883a 	mov	r3,r7
    73d4:	3005883a 	mov	r2,r6
    73d8:	f800283a 	ret
    73dc:	008004c4 	movi	r2,19
    73e0:	193ffb04 	addi	r4,r3,-20
    73e4:	10c00c0e 	bge	r2,r3,7418 <__ulp+0x68>
    73e8:	008007c4 	movi	r2,31
    73ec:	1107c83a 	sub	r3,r2,r4
    73f0:	00800784 	movi	r2,30
    73f4:	01400044 	movi	r5,1
    73f8:	11000216 	blt	r2,r4,7404 <__ulp+0x54>
    73fc:	00800044 	movi	r2,1
    7400:	10ca983a 	sll	r5,r2,r3
    7404:	000f883a 	mov	r7,zero
    7408:	280d883a 	mov	r6,r5
    740c:	3807883a 	mov	r3,r7
    7410:	3005883a 	mov	r2,r6
    7414:	f800283a 	ret
    7418:	00800234 	movhi	r2,8
    741c:	10cfd83a 	sra	r7,r2,r3
    7420:	000d883a 	mov	r6,zero
    7424:	3005883a 	mov	r2,r6
    7428:	3807883a 	mov	r3,r7
    742c:	f800283a 	ret

00007430 <__b2d>:
    7430:	20800417 	ldw	r2,16(r4)
    7434:	defff904 	addi	sp,sp,-28
    7438:	dd000415 	stw	r20,16(sp)
    743c:	1085883a 	add	r2,r2,r2
    7440:	25000504 	addi	r20,r4,20
    7444:	1085883a 	add	r2,r2,r2
    7448:	dc000015 	stw	r16,0(sp)
    744c:	a0a1883a 	add	r16,r20,r2
    7450:	dd400515 	stw	r21,20(sp)
    7454:	857fff17 	ldw	r21,-4(r16)
    7458:	dc400115 	stw	r17,4(sp)
    745c:	dfc00615 	stw	ra,24(sp)
    7460:	a809883a 	mov	r4,r21
    7464:	2823883a 	mov	r17,r5
    7468:	dcc00315 	stw	r19,12(sp)
    746c:	dc800215 	stw	r18,8(sp)
    7470:	000721c0 	call	721c <__hi0bits>
    7474:	100b883a 	mov	r5,r2
    7478:	00800804 	movi	r2,32
    747c:	1145c83a 	sub	r2,r2,r5
    7480:	88800015 	stw	r2,0(r17)
    7484:	00800284 	movi	r2,10
    7488:	80ffff04 	addi	r3,r16,-4
    748c:	11401416 	blt	r2,r5,74e0 <__b2d+0xb0>
    7490:	008002c4 	movi	r2,11
    7494:	1149c83a 	sub	r4,r2,r5
    7498:	a0c02736 	bltu	r20,r3,7538 <__b2d+0x108>
    749c:	000d883a 	mov	r6,zero
    74a0:	28800544 	addi	r2,r5,21
    74a4:	a906d83a 	srl	r3,r21,r4
    74a8:	a884983a 	sll	r2,r21,r2
    74ac:	1ccffc34 	orhi	r19,r3,16368
    74b0:	11a4b03a 	or	r18,r2,r6
    74b4:	9005883a 	mov	r2,r18
    74b8:	9807883a 	mov	r3,r19
    74bc:	dfc00617 	ldw	ra,24(sp)
    74c0:	dd400517 	ldw	r21,20(sp)
    74c4:	dd000417 	ldw	r20,16(sp)
    74c8:	dcc00317 	ldw	r19,12(sp)
    74cc:	dc800217 	ldw	r18,8(sp)
    74d0:	dc400117 	ldw	r17,4(sp)
    74d4:	dc000017 	ldw	r16,0(sp)
    74d8:	dec00704 	addi	sp,sp,28
    74dc:	f800283a 	ret
    74e0:	a0c00e36 	bltu	r20,r3,751c <__b2d+0xec>
    74e4:	293ffd44 	addi	r4,r5,-11
    74e8:	000d883a 	mov	r6,zero
    74ec:	20000f26 	beq	r4,zero,752c <__b2d+0xfc>
    74f0:	00800804 	movi	r2,32
    74f4:	110bc83a 	sub	r5,r2,r4
    74f8:	a0c01236 	bltu	r20,r3,7544 <__b2d+0x114>
    74fc:	000f883a 	mov	r7,zero
    7500:	a904983a 	sll	r2,r21,r4
    7504:	3146d83a 	srl	r3,r6,r5
    7508:	3108983a 	sll	r4,r6,r4
    750c:	108ffc34 	orhi	r2,r2,16368
    7510:	18a6b03a 	or	r19,r3,r2
    7514:	3924b03a 	or	r18,r7,r4
    7518:	003fe606 	br	74b4 <__b2d+0x84>
    751c:	293ffd44 	addi	r4,r5,-11
    7520:	81bffe17 	ldw	r6,-8(r16)
    7524:	80fffe04 	addi	r3,r16,-8
    7528:	203ff11e 	bne	r4,zero,74f0 <__b2d+0xc0>
    752c:	accffc34 	orhi	r19,r21,16368
    7530:	3025883a 	mov	r18,r6
    7534:	003fdf06 	br	74b4 <__b2d+0x84>
    7538:	18bfff17 	ldw	r2,-4(r3)
    753c:	110cd83a 	srl	r6,r2,r4
    7540:	003fd706 	br	74a0 <__b2d+0x70>
    7544:	18bfff17 	ldw	r2,-4(r3)
    7548:	114ed83a 	srl	r7,r2,r5
    754c:	003fec06 	br	7500 <__b2d+0xd0>

00007550 <__ratio>:
    7550:	defff904 	addi	sp,sp,-28
    7554:	dc400215 	stw	r17,8(sp)
    7558:	2823883a 	mov	r17,r5
    755c:	d80b883a 	mov	r5,sp
    7560:	dfc00615 	stw	ra,24(sp)
    7564:	dd000515 	stw	r20,20(sp)
    7568:	dcc00415 	stw	r19,16(sp)
    756c:	dc800315 	stw	r18,12(sp)
    7570:	2025883a 	mov	r18,r4
    7574:	00074300 	call	7430 <__b2d>
    7578:	8809883a 	mov	r4,r17
    757c:	d9400104 	addi	r5,sp,4
    7580:	1027883a 	mov	r19,r2
    7584:	1829883a 	mov	r20,r3
    7588:	00074300 	call	7430 <__b2d>
    758c:	89000417 	ldw	r4,16(r17)
    7590:	91c00417 	ldw	r7,16(r18)
    7594:	d9800117 	ldw	r6,4(sp)
    7598:	180b883a 	mov	r5,r3
    759c:	390fc83a 	sub	r7,r7,r4
    75a0:	1009883a 	mov	r4,r2
    75a4:	d8800017 	ldw	r2,0(sp)
    75a8:	380e917a 	slli	r7,r7,5
    75ac:	2011883a 	mov	r8,r4
    75b0:	1185c83a 	sub	r2,r2,r6
    75b4:	11c5883a 	add	r2,r2,r7
    75b8:	1006953a 	slli	r3,r2,20
    75bc:	2813883a 	mov	r9,r5
    75c0:	00800d0e 	bge	zero,r2,75f8 <__ratio+0xa8>
    75c4:	1d29883a 	add	r20,r3,r20
    75c8:	a00b883a 	mov	r5,r20
    75cc:	480f883a 	mov	r7,r9
    75d0:	9809883a 	mov	r4,r19
    75d4:	400d883a 	mov	r6,r8
    75d8:	000a33c0 	call	a33c <__divdf3>
    75dc:	dfc00617 	ldw	ra,24(sp)
    75e0:	dd000517 	ldw	r20,20(sp)
    75e4:	dcc00417 	ldw	r19,16(sp)
    75e8:	dc800317 	ldw	r18,12(sp)
    75ec:	dc400217 	ldw	r17,8(sp)
    75f0:	dec00704 	addi	sp,sp,28
    75f4:	f800283a 	ret
    75f8:	28d3c83a 	sub	r9,r5,r3
    75fc:	003ff206 	br	75c8 <__ratio+0x78>

00007600 <_mprec_log10>:
    7600:	defffe04 	addi	sp,sp,-8
    7604:	008005c4 	movi	r2,23
    7608:	dc000015 	stw	r16,0(sp)
    760c:	dfc00115 	stw	ra,4(sp)
    7610:	2021883a 	mov	r16,r4
    7614:	11000c16 	blt	r2,r4,7648 <_mprec_log10+0x48>
    7618:	200490fa 	slli	r2,r4,3
    761c:	00c00074 	movhi	r3,1
    7620:	18f77104 	addi	r3,r3,-8764
    7624:	10c5883a 	add	r2,r2,r3
    7628:	12400117 	ldw	r9,4(r2)
    762c:	12000017 	ldw	r8,0(r2)
    7630:	4807883a 	mov	r3,r9
    7634:	4005883a 	mov	r2,r8
    7638:	dfc00117 	ldw	ra,4(sp)
    763c:	dc000017 	ldw	r16,0(sp)
    7640:	dec00204 	addi	sp,sp,8
    7644:	f800283a 	ret
    7648:	0011883a 	mov	r8,zero
    764c:	024ffc34 	movhi	r9,16368
    7650:	0005883a 	mov	r2,zero
    7654:	00d00934 	movhi	r3,16420
    7658:	480b883a 	mov	r5,r9
    765c:	4009883a 	mov	r4,r8
    7660:	180f883a 	mov	r7,r3
    7664:	100d883a 	mov	r6,r2
    7668:	0009f780 	call	9f78 <__muldf3>
    766c:	843fffc4 	addi	r16,r16,-1
    7670:	1011883a 	mov	r8,r2
    7674:	1813883a 	mov	r9,r3
    7678:	803ff51e 	bne	r16,zero,7650 <_mprec_log10+0x50>
    767c:	4005883a 	mov	r2,r8
    7680:	4807883a 	mov	r3,r9
    7684:	dfc00117 	ldw	ra,4(sp)
    7688:	dc000017 	ldw	r16,0(sp)
    768c:	dec00204 	addi	sp,sp,8
    7690:	f800283a 	ret

00007694 <__copybits>:
    7694:	297fffc4 	addi	r5,r5,-1
    7698:	30800417 	ldw	r2,16(r6)
    769c:	280bd17a 	srai	r5,r5,5
    76a0:	31800504 	addi	r6,r6,20
    76a4:	1085883a 	add	r2,r2,r2
    76a8:	294b883a 	add	r5,r5,r5
    76ac:	294b883a 	add	r5,r5,r5
    76b0:	1085883a 	add	r2,r2,r2
    76b4:	290b883a 	add	r5,r5,r4
    76b8:	3087883a 	add	r3,r6,r2
    76bc:	29400104 	addi	r5,r5,4
    76c0:	30c0052e 	bgeu	r6,r3,76d8 <__copybits+0x44>
    76c4:	30800017 	ldw	r2,0(r6)
    76c8:	31800104 	addi	r6,r6,4
    76cc:	20800015 	stw	r2,0(r4)
    76d0:	21000104 	addi	r4,r4,4
    76d4:	30fffb36 	bltu	r6,r3,76c4 <__copybits+0x30>
    76d8:	2140032e 	bgeu	r4,r5,76e8 <__copybits+0x54>
    76dc:	20000015 	stw	zero,0(r4)
    76e0:	21000104 	addi	r4,r4,4
    76e4:	217ffd36 	bltu	r4,r5,76dc <__copybits+0x48>
    76e8:	f800283a 	ret

000076ec <__any_on>:
    76ec:	20800417 	ldw	r2,16(r4)
    76f0:	2807d17a 	srai	r3,r5,5
    76f4:	21000504 	addi	r4,r4,20
    76f8:	10c00d0e 	bge	r2,r3,7730 <__any_on+0x44>
    76fc:	1085883a 	add	r2,r2,r2
    7700:	1085883a 	add	r2,r2,r2
    7704:	208d883a 	add	r6,r4,r2
    7708:	2180182e 	bgeu	r4,r6,776c <__any_on+0x80>
    770c:	30bfff17 	ldw	r2,-4(r6)
    7710:	30ffff04 	addi	r3,r6,-4
    7714:	1000041e 	bne	r2,zero,7728 <__any_on+0x3c>
    7718:	20c0142e 	bgeu	r4,r3,776c <__any_on+0x80>
    771c:	18ffff04 	addi	r3,r3,-4
    7720:	18800017 	ldw	r2,0(r3)
    7724:	103ffc26 	beq	r2,zero,7718 <__any_on+0x2c>
    7728:	00800044 	movi	r2,1
    772c:	f800283a 	ret
    7730:	18800a0e 	bge	r3,r2,775c <__any_on+0x70>
    7734:	294007cc 	andi	r5,r5,31
    7738:	28000826 	beq	r5,zero,775c <__any_on+0x70>
    773c:	18c5883a 	add	r2,r3,r3
    7740:	1085883a 	add	r2,r2,r2
    7744:	208d883a 	add	r6,r4,r2
    7748:	30c00017 	ldw	r3,0(r6)
    774c:	1944d83a 	srl	r2,r3,r5
    7750:	1144983a 	sll	r2,r2,r5
    7754:	18bff41e 	bne	r3,r2,7728 <__any_on+0x3c>
    7758:	003feb06 	br	7708 <__any_on+0x1c>
    775c:	18c5883a 	add	r2,r3,r3
    7760:	1085883a 	add	r2,r2,r2
    7764:	208d883a 	add	r6,r4,r2
    7768:	003fe706 	br	7708 <__any_on+0x1c>
    776c:	0005883a 	mov	r2,zero
    7770:	f800283a 	ret

00007774 <_Balloc>:
    7774:	20c01317 	ldw	r3,76(r4)
    7778:	defffb04 	addi	sp,sp,-20
    777c:	dcc00315 	stw	r19,12(sp)
    7780:	dc800215 	stw	r18,8(sp)
    7784:	dfc00415 	stw	ra,16(sp)
    7788:	2825883a 	mov	r18,r5
    778c:	dc400115 	stw	r17,4(sp)
    7790:	dc000015 	stw	r16,0(sp)
    7794:	2027883a 	mov	r19,r4
    7798:	01800404 	movi	r6,16
    779c:	01400104 	movi	r5,4
    77a0:	18001726 	beq	r3,zero,7800 <_Balloc+0x8c>
    77a4:	01400044 	movi	r5,1
    77a8:	9485883a 	add	r2,r18,r18
    77ac:	2ca2983a 	sll	r17,r5,r18
    77b0:	1085883a 	add	r2,r2,r2
    77b4:	10c7883a 	add	r3,r2,r3
    77b8:	1c000017 	ldw	r16,0(r3)
    77bc:	8c4d883a 	add	r6,r17,r17
    77c0:	318d883a 	add	r6,r6,r6
    77c4:	9809883a 	mov	r4,r19
    77c8:	31800504 	addi	r6,r6,20
    77cc:	80001226 	beq	r16,zero,7818 <_Balloc+0xa4>
    77d0:	80800017 	ldw	r2,0(r16)
    77d4:	18800015 	stw	r2,0(r3)
    77d8:	80000415 	stw	zero,16(r16)
    77dc:	80000315 	stw	zero,12(r16)
    77e0:	8005883a 	mov	r2,r16
    77e4:	dfc00417 	ldw	ra,16(sp)
    77e8:	dcc00317 	ldw	r19,12(sp)
    77ec:	dc800217 	ldw	r18,8(sp)
    77f0:	dc400117 	ldw	r17,4(sp)
    77f4:	dc000017 	ldw	r16,0(sp)
    77f8:	dec00504 	addi	sp,sp,20
    77fc:	f800283a 	ret
    7800:	0008acc0 	call	8acc <_calloc_r>
    7804:	1007883a 	mov	r3,r2
    7808:	0021883a 	mov	r16,zero
    780c:	98801315 	stw	r2,76(r19)
    7810:	103fe41e 	bne	r2,zero,77a4 <_Balloc+0x30>
    7814:	003ff206 	br	77e0 <_Balloc+0x6c>
    7818:	0008acc0 	call	8acc <_calloc_r>
    781c:	103ff026 	beq	r2,zero,77e0 <_Balloc+0x6c>
    7820:	1021883a 	mov	r16,r2
    7824:	14800115 	stw	r18,4(r2)
    7828:	14400215 	stw	r17,8(r2)
    782c:	003fea06 	br	77d8 <_Balloc+0x64>

00007830 <__d2b>:
    7830:	defff504 	addi	sp,sp,-44
    7834:	dcc00515 	stw	r19,20(sp)
    7838:	04c00044 	movi	r19,1
    783c:	dc000215 	stw	r16,8(sp)
    7840:	2821883a 	mov	r16,r5
    7844:	980b883a 	mov	r5,r19
    7848:	ddc00915 	stw	r23,36(sp)
    784c:	dd800815 	stw	r22,32(sp)
    7850:	dd400715 	stw	r21,28(sp)
    7854:	dd000615 	stw	r20,24(sp)
    7858:	dc800415 	stw	r18,16(sp)
    785c:	dc400315 	stw	r17,12(sp)
    7860:	dfc00a15 	stw	ra,40(sp)
    7864:	3023883a 	mov	r17,r6
    7868:	382d883a 	mov	r22,r7
    786c:	ddc00b17 	ldw	r23,44(sp)
    7870:	00077740 	call	7774 <_Balloc>
    7874:	1025883a 	mov	r18,r2
    7878:	00a00034 	movhi	r2,32768
    787c:	10bfffc4 	addi	r2,r2,-1
    7880:	8888703a 	and	r4,r17,r2
    7884:	202ad53a 	srli	r21,r4,20
    7888:	00800434 	movhi	r2,16
    788c:	10bfffc4 	addi	r2,r2,-1
    7890:	8886703a 	and	r3,r17,r2
    7894:	a829003a 	cmpeq	r20,r21,zero
    7898:	800b883a 	mov	r5,r16
    789c:	d8c00115 	stw	r3,4(sp)
    78a0:	94000504 	addi	r16,r18,20
    78a4:	a000021e 	bne	r20,zero,78b0 <__d2b+0x80>
    78a8:	18c00434 	orhi	r3,r3,16
    78ac:	d8c00115 	stw	r3,4(sp)
    78b0:	28002726 	beq	r5,zero,7950 <__d2b+0x120>
    78b4:	d809883a 	mov	r4,sp
    78b8:	d9400015 	stw	r5,0(sp)
    78bc:	000728c0 	call	728c <__lo0bits>
    78c0:	100d883a 	mov	r6,r2
    78c4:	10003526 	beq	r2,zero,799c <__d2b+0x16c>
    78c8:	d8c00117 	ldw	r3,4(sp)
    78cc:	00800804 	movi	r2,32
    78d0:	1185c83a 	sub	r2,r2,r6
    78d4:	d9000017 	ldw	r4,0(sp)
    78d8:	1886983a 	sll	r3,r3,r2
    78dc:	1906b03a 	or	r3,r3,r4
    78e0:	90c00515 	stw	r3,20(r18)
    78e4:	d8c00117 	ldw	r3,4(sp)
    78e8:	1986d83a 	srl	r3,r3,r6
    78ec:	d8c00115 	stw	r3,4(sp)
    78f0:	180b003a 	cmpeq	r5,r3,zero
    78f4:	00800084 	movi	r2,2
    78f8:	114bc83a 	sub	r5,r2,r5
    78fc:	80c00115 	stw	r3,4(r16)
    7900:	91400415 	stw	r5,16(r18)
    7904:	a0001a1e 	bne	r20,zero,7970 <__d2b+0x140>
    7908:	3545883a 	add	r2,r6,r21
    790c:	10bef344 	addi	r2,r2,-1075
    7910:	00c00d44 	movi	r3,53
    7914:	b0800015 	stw	r2,0(r22)
    7918:	1987c83a 	sub	r3,r3,r6
    791c:	b8c00015 	stw	r3,0(r23)
    7920:	9005883a 	mov	r2,r18
    7924:	dfc00a17 	ldw	ra,40(sp)
    7928:	ddc00917 	ldw	r23,36(sp)
    792c:	dd800817 	ldw	r22,32(sp)
    7930:	dd400717 	ldw	r21,28(sp)
    7934:	dd000617 	ldw	r20,24(sp)
    7938:	dcc00517 	ldw	r19,20(sp)
    793c:	dc800417 	ldw	r18,16(sp)
    7940:	dc400317 	ldw	r17,12(sp)
    7944:	dc000217 	ldw	r16,8(sp)
    7948:	dec00b04 	addi	sp,sp,44
    794c:	f800283a 	ret
    7950:	d9000104 	addi	r4,sp,4
    7954:	000728c0 	call	728c <__lo0bits>
    7958:	11800804 	addi	r6,r2,32
    795c:	d8800117 	ldw	r2,4(sp)
    7960:	94c00415 	stw	r19,16(r18)
    7964:	980b883a 	mov	r5,r19
    7968:	90800515 	stw	r2,20(r18)
    796c:	a03fe626 	beq	r20,zero,7908 <__d2b+0xd8>
    7970:	2945883a 	add	r2,r5,r5
    7974:	1085883a 	add	r2,r2,r2
    7978:	1405883a 	add	r2,r2,r16
    797c:	113fff17 	ldw	r4,-4(r2)
    7980:	30fef384 	addi	r3,r6,-1074
    7984:	2820917a 	slli	r16,r5,5
    7988:	b0c00015 	stw	r3,0(r22)
    798c:	000721c0 	call	721c <__hi0bits>
    7990:	80a1c83a 	sub	r16,r16,r2
    7994:	bc000015 	stw	r16,0(r23)
    7998:	003fe106 	br	7920 <__d2b+0xf0>
    799c:	d8800017 	ldw	r2,0(sp)
    79a0:	90800515 	stw	r2,20(r18)
    79a4:	d8c00117 	ldw	r3,4(sp)
    79a8:	003fd106 	br	78f0 <__d2b+0xc0>

000079ac <__mdiff>:
    79ac:	defffb04 	addi	sp,sp,-20
    79b0:	dc000015 	stw	r16,0(sp)
    79b4:	2821883a 	mov	r16,r5
    79b8:	dc800215 	stw	r18,8(sp)
    79bc:	300b883a 	mov	r5,r6
    79c0:	2025883a 	mov	r18,r4
    79c4:	8009883a 	mov	r4,r16
    79c8:	dc400115 	stw	r17,4(sp)
    79cc:	dfc00415 	stw	ra,16(sp)
    79d0:	dcc00315 	stw	r19,12(sp)
    79d4:	3023883a 	mov	r17,r6
    79d8:	00073500 	call	7350 <__mcmp>
    79dc:	10004226 	beq	r2,zero,7ae8 <__mdiff+0x13c>
    79e0:	10005016 	blt	r2,zero,7b24 <__mdiff+0x178>
    79e4:	0027883a 	mov	r19,zero
    79e8:	81400117 	ldw	r5,4(r16)
    79ec:	9009883a 	mov	r4,r18
    79f0:	00077740 	call	7774 <_Balloc>
    79f4:	1019883a 	mov	r12,r2
    79f8:	82800417 	ldw	r10,16(r16)
    79fc:	88800417 	ldw	r2,16(r17)
    7a00:	81800504 	addi	r6,r16,20
    7a04:	5287883a 	add	r3,r10,r10
    7a08:	1085883a 	add	r2,r2,r2
    7a0c:	18c7883a 	add	r3,r3,r3
    7a10:	1085883a 	add	r2,r2,r2
    7a14:	8a000504 	addi	r8,r17,20
    7a18:	64c00315 	stw	r19,12(r12)
    7a1c:	30db883a 	add	r13,r6,r3
    7a20:	4097883a 	add	r11,r8,r2
    7a24:	61c00504 	addi	r7,r12,20
    7a28:	0013883a 	mov	r9,zero
    7a2c:	31000017 	ldw	r4,0(r6)
    7a30:	41400017 	ldw	r5,0(r8)
    7a34:	42000104 	addi	r8,r8,4
    7a38:	20bfffcc 	andi	r2,r4,65535
    7a3c:	28ffffcc 	andi	r3,r5,65535
    7a40:	10c5c83a 	sub	r2,r2,r3
    7a44:	1245883a 	add	r2,r2,r9
    7a48:	2008d43a 	srli	r4,r4,16
    7a4c:	280ad43a 	srli	r5,r5,16
    7a50:	1007d43a 	srai	r3,r2,16
    7a54:	3880000d 	sth	r2,0(r7)
    7a58:	2149c83a 	sub	r4,r4,r5
    7a5c:	20c9883a 	add	r4,r4,r3
    7a60:	3900008d 	sth	r4,2(r7)
    7a64:	31800104 	addi	r6,r6,4
    7a68:	39c00104 	addi	r7,r7,4
    7a6c:	2013d43a 	srai	r9,r4,16
    7a70:	42ffee36 	bltu	r8,r11,7a2c <__mdiff+0x80>
    7a74:	33400c2e 	bgeu	r6,r13,7aa8 <__mdiff+0xfc>
    7a78:	30800017 	ldw	r2,0(r6)
    7a7c:	31800104 	addi	r6,r6,4
    7a80:	10ffffcc 	andi	r3,r2,65535
    7a84:	1a47883a 	add	r3,r3,r9
    7a88:	1004d43a 	srli	r2,r2,16
    7a8c:	1809d43a 	srai	r4,r3,16
    7a90:	38c0000d 	sth	r3,0(r7)
    7a94:	1105883a 	add	r2,r2,r4
    7a98:	3880008d 	sth	r2,2(r7)
    7a9c:	1013d43a 	srai	r9,r2,16
    7aa0:	39c00104 	addi	r7,r7,4
    7aa4:	337ff436 	bltu	r6,r13,7a78 <__mdiff+0xcc>
    7aa8:	38bfff17 	ldw	r2,-4(r7)
    7aac:	38ffff04 	addi	r3,r7,-4
    7ab0:	1000041e 	bne	r2,zero,7ac4 <__mdiff+0x118>
    7ab4:	18ffff04 	addi	r3,r3,-4
    7ab8:	18800017 	ldw	r2,0(r3)
    7abc:	52bfffc4 	addi	r10,r10,-1
    7ac0:	103ffc26 	beq	r2,zero,7ab4 <__mdiff+0x108>
    7ac4:	6005883a 	mov	r2,r12
    7ac8:	62800415 	stw	r10,16(r12)
    7acc:	dfc00417 	ldw	ra,16(sp)
    7ad0:	dcc00317 	ldw	r19,12(sp)
    7ad4:	dc800217 	ldw	r18,8(sp)
    7ad8:	dc400117 	ldw	r17,4(sp)
    7adc:	dc000017 	ldw	r16,0(sp)
    7ae0:	dec00504 	addi	sp,sp,20
    7ae4:	f800283a 	ret
    7ae8:	9009883a 	mov	r4,r18
    7aec:	000b883a 	mov	r5,zero
    7af0:	00077740 	call	7774 <_Balloc>
    7af4:	1019883a 	mov	r12,r2
    7af8:	00800044 	movi	r2,1
    7afc:	60800415 	stw	r2,16(r12)
    7b00:	6005883a 	mov	r2,r12
    7b04:	60000515 	stw	zero,20(r12)
    7b08:	dfc00417 	ldw	ra,16(sp)
    7b0c:	dcc00317 	ldw	r19,12(sp)
    7b10:	dc800217 	ldw	r18,8(sp)
    7b14:	dc400117 	ldw	r17,4(sp)
    7b18:	dc000017 	ldw	r16,0(sp)
    7b1c:	dec00504 	addi	sp,sp,20
    7b20:	f800283a 	ret
    7b24:	880d883a 	mov	r6,r17
    7b28:	04c00044 	movi	r19,1
    7b2c:	8023883a 	mov	r17,r16
    7b30:	3021883a 	mov	r16,r6
    7b34:	003fac06 	br	79e8 <__mdiff+0x3c>

00007b38 <__lshift>:
    7b38:	defff904 	addi	sp,sp,-28
    7b3c:	28800417 	ldw	r2,16(r5)
    7b40:	dc000015 	stw	r16,0(sp)
    7b44:	3021d17a 	srai	r16,r6,5
    7b48:	28c00217 	ldw	r3,8(r5)
    7b4c:	10800044 	addi	r2,r2,1
    7b50:	dc400115 	stw	r17,4(sp)
    7b54:	80a3883a 	add	r17,r16,r2
    7b58:	dd400515 	stw	r21,20(sp)
    7b5c:	dd000415 	stw	r20,16(sp)
    7b60:	dc800215 	stw	r18,8(sp)
    7b64:	dfc00615 	stw	ra,24(sp)
    7b68:	2825883a 	mov	r18,r5
    7b6c:	dcc00315 	stw	r19,12(sp)
    7b70:	3029883a 	mov	r20,r6
    7b74:	202b883a 	mov	r21,r4
    7b78:	29400117 	ldw	r5,4(r5)
    7b7c:	1c40030e 	bge	r3,r17,7b8c <__lshift+0x54>
    7b80:	18c7883a 	add	r3,r3,r3
    7b84:	29400044 	addi	r5,r5,1
    7b88:	1c7ffd16 	blt	r3,r17,7b80 <__lshift+0x48>
    7b8c:	a809883a 	mov	r4,r21
    7b90:	00077740 	call	7774 <_Balloc>
    7b94:	1027883a 	mov	r19,r2
    7b98:	11400504 	addi	r5,r2,20
    7b9c:	0400090e 	bge	zero,r16,7bc4 <__lshift+0x8c>
    7ba0:	2805883a 	mov	r2,r5
    7ba4:	0007883a 	mov	r3,zero
    7ba8:	18c00044 	addi	r3,r3,1
    7bac:	10000015 	stw	zero,0(r2)
    7bb0:	10800104 	addi	r2,r2,4
    7bb4:	80fffc1e 	bne	r16,r3,7ba8 <__lshift+0x70>
    7bb8:	8405883a 	add	r2,r16,r16
    7bbc:	1085883a 	add	r2,r2,r2
    7bc0:	288b883a 	add	r5,r5,r2
    7bc4:	90800417 	ldw	r2,16(r18)
    7bc8:	91000504 	addi	r4,r18,20
    7bcc:	a18007cc 	andi	r6,r20,31
    7bd0:	1085883a 	add	r2,r2,r2
    7bd4:	1085883a 	add	r2,r2,r2
    7bd8:	208f883a 	add	r7,r4,r2
    7bdc:	30001e26 	beq	r6,zero,7c58 <__lshift+0x120>
    7be0:	00800804 	movi	r2,32
    7be4:	1191c83a 	sub	r8,r2,r6
    7be8:	0007883a 	mov	r3,zero
    7bec:	20800017 	ldw	r2,0(r4)
    7bf0:	1184983a 	sll	r2,r2,r6
    7bf4:	1884b03a 	or	r2,r3,r2
    7bf8:	28800015 	stw	r2,0(r5)
    7bfc:	20c00017 	ldw	r3,0(r4)
    7c00:	21000104 	addi	r4,r4,4
    7c04:	29400104 	addi	r5,r5,4
    7c08:	1a06d83a 	srl	r3,r3,r8
    7c0c:	21fff736 	bltu	r4,r7,7bec <__lshift+0xb4>
    7c10:	28c00015 	stw	r3,0(r5)
    7c14:	18000126 	beq	r3,zero,7c1c <__lshift+0xe4>
    7c18:	8c400044 	addi	r17,r17,1
    7c1c:	88bfffc4 	addi	r2,r17,-1
    7c20:	98800415 	stw	r2,16(r19)
    7c24:	a809883a 	mov	r4,r21
    7c28:	900b883a 	mov	r5,r18
    7c2c:	00071f40 	call	71f4 <_Bfree>
    7c30:	9805883a 	mov	r2,r19
    7c34:	dfc00617 	ldw	ra,24(sp)
    7c38:	dd400517 	ldw	r21,20(sp)
    7c3c:	dd000417 	ldw	r20,16(sp)
    7c40:	dcc00317 	ldw	r19,12(sp)
    7c44:	dc800217 	ldw	r18,8(sp)
    7c48:	dc400117 	ldw	r17,4(sp)
    7c4c:	dc000017 	ldw	r16,0(sp)
    7c50:	dec00704 	addi	sp,sp,28
    7c54:	f800283a 	ret
    7c58:	20800017 	ldw	r2,0(r4)
    7c5c:	21000104 	addi	r4,r4,4
    7c60:	28800015 	stw	r2,0(r5)
    7c64:	29400104 	addi	r5,r5,4
    7c68:	21ffec2e 	bgeu	r4,r7,7c1c <__lshift+0xe4>
    7c6c:	20800017 	ldw	r2,0(r4)
    7c70:	21000104 	addi	r4,r4,4
    7c74:	28800015 	stw	r2,0(r5)
    7c78:	29400104 	addi	r5,r5,4
    7c7c:	21fff636 	bltu	r4,r7,7c58 <__lshift+0x120>
    7c80:	003fe606 	br	7c1c <__lshift+0xe4>

00007c84 <__multiply>:
    7c84:	defff904 	addi	sp,sp,-28
    7c88:	dcc00315 	stw	r19,12(sp)
    7c8c:	dc800215 	stw	r18,8(sp)
    7c90:	2cc00417 	ldw	r19,16(r5)
    7c94:	34800417 	ldw	r18,16(r6)
    7c98:	dd000415 	stw	r20,16(sp)
    7c9c:	dc400115 	stw	r17,4(sp)
    7ca0:	dfc00615 	stw	ra,24(sp)
    7ca4:	dd400515 	stw	r21,20(sp)
    7ca8:	dc000015 	stw	r16,0(sp)
    7cac:	2823883a 	mov	r17,r5
    7cb0:	3029883a 	mov	r20,r6
    7cb4:	9c80040e 	bge	r19,r18,7cc8 <__multiply+0x44>
    7cb8:	9027883a 	mov	r19,r18
    7cbc:	2c800417 	ldw	r18,16(r5)
    7cc0:	2829883a 	mov	r20,r5
    7cc4:	3023883a 	mov	r17,r6
    7cc8:	88800217 	ldw	r2,8(r17)
    7ccc:	9ca1883a 	add	r16,r19,r18
    7cd0:	89400117 	ldw	r5,4(r17)
    7cd4:	1400010e 	bge	r2,r16,7cdc <__multiply+0x58>
    7cd8:	29400044 	addi	r5,r5,1
    7cdc:	00077740 	call	7774 <_Balloc>
    7ce0:	102b883a 	mov	r21,r2
    7ce4:	8405883a 	add	r2,r16,r16
    7ce8:	1085883a 	add	r2,r2,r2
    7cec:	a9000504 	addi	r4,r21,20
    7cf0:	209d883a 	add	r14,r4,r2
    7cf4:	2380042e 	bgeu	r4,r14,7d08 <__multiply+0x84>
    7cf8:	2005883a 	mov	r2,r4
    7cfc:	10000015 	stw	zero,0(r2)
    7d00:	10800104 	addi	r2,r2,4
    7d04:	13bffd36 	bltu	r2,r14,7cfc <__multiply+0x78>
    7d08:	9485883a 	add	r2,r18,r18
    7d0c:	9cc7883a 	add	r3,r19,r19
    7d10:	a1800504 	addi	r6,r20,20
    7d14:	1085883a 	add	r2,r2,r2
    7d18:	8b400504 	addi	r13,r17,20
    7d1c:	18c7883a 	add	r3,r3,r3
    7d20:	309f883a 	add	r15,r6,r2
    7d24:	68d7883a 	add	r11,r13,r3
    7d28:	33c03b2e 	bgeu	r6,r15,7e18 <__multiply+0x194>
    7d2c:	2019883a 	mov	r12,r4
    7d30:	30800017 	ldw	r2,0(r6)
    7d34:	127fffcc 	andi	r9,r2,65535
    7d38:	48001826 	beq	r9,zero,7d9c <__multiply+0x118>
    7d3c:	6811883a 	mov	r8,r13
    7d40:	600f883a 	mov	r7,r12
    7d44:	0015883a 	mov	r10,zero
    7d48:	40c00017 	ldw	r3,0(r8)
    7d4c:	39400017 	ldw	r5,0(r7)
    7d50:	42000104 	addi	r8,r8,4
    7d54:	193fffcc 	andi	r4,r3,65535
    7d58:	4909383a 	mul	r4,r9,r4
    7d5c:	1806d43a 	srli	r3,r3,16
    7d60:	28bfffcc 	andi	r2,r5,65535
    7d64:	5085883a 	add	r2,r10,r2
    7d68:	2089883a 	add	r4,r4,r2
    7d6c:	48c7383a 	mul	r3,r9,r3
    7d70:	280ad43a 	srli	r5,r5,16
    7d74:	2004d43a 	srli	r2,r4,16
    7d78:	3900000d 	sth	r4,0(r7)
    7d7c:	1947883a 	add	r3,r3,r5
    7d80:	10c5883a 	add	r2,r2,r3
    7d84:	3880008d 	sth	r2,2(r7)
    7d88:	1014d43a 	srli	r10,r2,16
    7d8c:	39c00104 	addi	r7,r7,4
    7d90:	42ffed36 	bltu	r8,r11,7d48 <__multiply+0xc4>
    7d94:	3a800015 	stw	r10,0(r7)
    7d98:	30800017 	ldw	r2,0(r6)
    7d9c:	1012d43a 	srli	r9,r2,16
    7da0:	48001926 	beq	r9,zero,7e08 <__multiply+0x184>
    7da4:	60800017 	ldw	r2,0(r12)
    7da8:	6811883a 	mov	r8,r13
    7dac:	600f883a 	mov	r7,r12
    7db0:	0015883a 	mov	r10,zero
    7db4:	100b883a 	mov	r5,r2
    7db8:	41000017 	ldw	r4,0(r8)
    7dbc:	2806d43a 	srli	r3,r5,16
    7dc0:	3880000d 	sth	r2,0(r7)
    7dc4:	20bfffcc 	andi	r2,r4,65535
    7dc8:	4885383a 	mul	r2,r9,r2
    7dcc:	50c7883a 	add	r3,r10,r3
    7dd0:	2008d43a 	srli	r4,r4,16
    7dd4:	10c5883a 	add	r2,r2,r3
    7dd8:	3880008d 	sth	r2,2(r7)
    7ddc:	39c00104 	addi	r7,r7,4
    7de0:	39400017 	ldw	r5,0(r7)
    7de4:	4909383a 	mul	r4,r9,r4
    7de8:	1004d43a 	srli	r2,r2,16
    7dec:	28ffffcc 	andi	r3,r5,65535
    7df0:	20c9883a 	add	r4,r4,r3
    7df4:	1105883a 	add	r2,r2,r4
    7df8:	42000104 	addi	r8,r8,4
    7dfc:	1014d43a 	srli	r10,r2,16
    7e00:	42ffed36 	bltu	r8,r11,7db8 <__multiply+0x134>
    7e04:	38800015 	stw	r2,0(r7)
    7e08:	31800104 	addi	r6,r6,4
    7e0c:	33c0022e 	bgeu	r6,r15,7e18 <__multiply+0x194>
    7e10:	63000104 	addi	r12,r12,4
    7e14:	003fc606 	br	7d30 <__multiply+0xac>
    7e18:	0400090e 	bge	zero,r16,7e40 <__multiply+0x1bc>
    7e1c:	70bfff17 	ldw	r2,-4(r14)
    7e20:	70ffff04 	addi	r3,r14,-4
    7e24:	10000326 	beq	r2,zero,7e34 <__multiply+0x1b0>
    7e28:	00000506 	br	7e40 <__multiply+0x1bc>
    7e2c:	18800017 	ldw	r2,0(r3)
    7e30:	1000031e 	bne	r2,zero,7e40 <__multiply+0x1bc>
    7e34:	843fffc4 	addi	r16,r16,-1
    7e38:	18ffff04 	addi	r3,r3,-4
    7e3c:	803ffb1e 	bne	r16,zero,7e2c <__multiply+0x1a8>
    7e40:	a805883a 	mov	r2,r21
    7e44:	ac000415 	stw	r16,16(r21)
    7e48:	dfc00617 	ldw	ra,24(sp)
    7e4c:	dd400517 	ldw	r21,20(sp)
    7e50:	dd000417 	ldw	r20,16(sp)
    7e54:	dcc00317 	ldw	r19,12(sp)
    7e58:	dc800217 	ldw	r18,8(sp)
    7e5c:	dc400117 	ldw	r17,4(sp)
    7e60:	dc000017 	ldw	r16,0(sp)
    7e64:	dec00704 	addi	sp,sp,28
    7e68:	f800283a 	ret

00007e6c <__i2b>:
    7e6c:	defffd04 	addi	sp,sp,-12
    7e70:	dc000015 	stw	r16,0(sp)
    7e74:	04000044 	movi	r16,1
    7e78:	dc800115 	stw	r18,4(sp)
    7e7c:	2825883a 	mov	r18,r5
    7e80:	800b883a 	mov	r5,r16
    7e84:	dfc00215 	stw	ra,8(sp)
    7e88:	00077740 	call	7774 <_Balloc>
    7e8c:	14000415 	stw	r16,16(r2)
    7e90:	14800515 	stw	r18,20(r2)
    7e94:	dfc00217 	ldw	ra,8(sp)
    7e98:	dc800117 	ldw	r18,4(sp)
    7e9c:	dc000017 	ldw	r16,0(sp)
    7ea0:	dec00304 	addi	sp,sp,12
    7ea4:	f800283a 	ret

00007ea8 <__multadd>:
    7ea8:	defffa04 	addi	sp,sp,-24
    7eac:	dc800215 	stw	r18,8(sp)
    7eb0:	2c800417 	ldw	r18,16(r5)
    7eb4:	dd000415 	stw	r20,16(sp)
    7eb8:	dcc00315 	stw	r19,12(sp)
    7ebc:	dc000015 	stw	r16,0(sp)
    7ec0:	dfc00515 	stw	ra,20(sp)
    7ec4:	3821883a 	mov	r16,r7
    7ec8:	dc400115 	stw	r17,4(sp)
    7ecc:	2827883a 	mov	r19,r5
    7ed0:	2029883a 	mov	r20,r4
    7ed4:	2a000504 	addi	r8,r5,20
    7ed8:	000f883a 	mov	r7,zero
    7edc:	40800017 	ldw	r2,0(r8)
    7ee0:	39c00044 	addi	r7,r7,1
    7ee4:	10ffffcc 	andi	r3,r2,65535
    7ee8:	1987383a 	mul	r3,r3,r6
    7eec:	1004d43a 	srli	r2,r2,16
    7ef0:	1c07883a 	add	r3,r3,r16
    7ef4:	180ad43a 	srli	r5,r3,16
    7ef8:	1185383a 	mul	r2,r2,r6
    7efc:	18ffffcc 	andi	r3,r3,65535
    7f00:	1145883a 	add	r2,r2,r5
    7f04:	1008943a 	slli	r4,r2,16
    7f08:	1020d43a 	srli	r16,r2,16
    7f0c:	20c9883a 	add	r4,r4,r3
    7f10:	41000015 	stw	r4,0(r8)
    7f14:	42000104 	addi	r8,r8,4
    7f18:	3cbff016 	blt	r7,r18,7edc <__multadd+0x34>
    7f1c:	80000826 	beq	r16,zero,7f40 <__multadd+0x98>
    7f20:	98800217 	ldw	r2,8(r19)
    7f24:	90800f0e 	bge	r18,r2,7f64 <__multadd+0xbc>
    7f28:	9485883a 	add	r2,r18,r18
    7f2c:	1085883a 	add	r2,r2,r2
    7f30:	14c5883a 	add	r2,r2,r19
    7f34:	90c00044 	addi	r3,r18,1
    7f38:	14000515 	stw	r16,20(r2)
    7f3c:	98c00415 	stw	r3,16(r19)
    7f40:	9805883a 	mov	r2,r19
    7f44:	dfc00517 	ldw	ra,20(sp)
    7f48:	dd000417 	ldw	r20,16(sp)
    7f4c:	dcc00317 	ldw	r19,12(sp)
    7f50:	dc800217 	ldw	r18,8(sp)
    7f54:	dc400117 	ldw	r17,4(sp)
    7f58:	dc000017 	ldw	r16,0(sp)
    7f5c:	dec00604 	addi	sp,sp,24
    7f60:	f800283a 	ret
    7f64:	99400117 	ldw	r5,4(r19)
    7f68:	a009883a 	mov	r4,r20
    7f6c:	29400044 	addi	r5,r5,1
    7f70:	00077740 	call	7774 <_Balloc>
    7f74:	99800417 	ldw	r6,16(r19)
    7f78:	99400304 	addi	r5,r19,12
    7f7c:	11000304 	addi	r4,r2,12
    7f80:	318d883a 	add	r6,r6,r6
    7f84:	318d883a 	add	r6,r6,r6
    7f88:	31800204 	addi	r6,r6,8
    7f8c:	1023883a 	mov	r17,r2
    7f90:	00021600 	call	2160 <memcpy>
    7f94:	980b883a 	mov	r5,r19
    7f98:	a009883a 	mov	r4,r20
    7f9c:	00071f40 	call	71f4 <_Bfree>
    7fa0:	8827883a 	mov	r19,r17
    7fa4:	003fe006 	br	7f28 <__multadd+0x80>

00007fa8 <__pow5mult>:
    7fa8:	defffa04 	addi	sp,sp,-24
    7fac:	308000cc 	andi	r2,r6,3
    7fb0:	dd000415 	stw	r20,16(sp)
    7fb4:	dcc00315 	stw	r19,12(sp)
    7fb8:	dc000015 	stw	r16,0(sp)
    7fbc:	dfc00515 	stw	ra,20(sp)
    7fc0:	dc800215 	stw	r18,8(sp)
    7fc4:	dc400115 	stw	r17,4(sp)
    7fc8:	3021883a 	mov	r16,r6
    7fcc:	2027883a 	mov	r19,r4
    7fd0:	2829883a 	mov	r20,r5
    7fd4:	10002b1e 	bne	r2,zero,8084 <__pow5mult+0xdc>
    7fd8:	8025d0ba 	srai	r18,r16,2
    7fdc:	90001b26 	beq	r18,zero,804c <__pow5mult+0xa4>
    7fe0:	9c001217 	ldw	r16,72(r19)
    7fe4:	8000081e 	bne	r16,zero,8008 <__pow5mult+0x60>
    7fe8:	00003006 	br	80ac <__pow5mult+0x104>
    7fec:	800b883a 	mov	r5,r16
    7ff0:	800d883a 	mov	r6,r16
    7ff4:	9809883a 	mov	r4,r19
    7ff8:	90001426 	beq	r18,zero,804c <__pow5mult+0xa4>
    7ffc:	80800017 	ldw	r2,0(r16)
    8000:	10001b26 	beq	r2,zero,8070 <__pow5mult+0xc8>
    8004:	1021883a 	mov	r16,r2
    8008:	9080004c 	andi	r2,r18,1
    800c:	1005003a 	cmpeq	r2,r2,zero
    8010:	9025d07a 	srai	r18,r18,1
    8014:	800d883a 	mov	r6,r16
    8018:	9809883a 	mov	r4,r19
    801c:	a00b883a 	mov	r5,r20
    8020:	103ff21e 	bne	r2,zero,7fec <__pow5mult+0x44>
    8024:	0007c840 	call	7c84 <__multiply>
    8028:	a00b883a 	mov	r5,r20
    802c:	9809883a 	mov	r4,r19
    8030:	1023883a 	mov	r17,r2
    8034:	00071f40 	call	71f4 <_Bfree>
    8038:	8829883a 	mov	r20,r17
    803c:	800b883a 	mov	r5,r16
    8040:	800d883a 	mov	r6,r16
    8044:	9809883a 	mov	r4,r19
    8048:	903fec1e 	bne	r18,zero,7ffc <__pow5mult+0x54>
    804c:	a005883a 	mov	r2,r20
    8050:	dfc00517 	ldw	ra,20(sp)
    8054:	dd000417 	ldw	r20,16(sp)
    8058:	dcc00317 	ldw	r19,12(sp)
    805c:	dc800217 	ldw	r18,8(sp)
    8060:	dc400117 	ldw	r17,4(sp)
    8064:	dc000017 	ldw	r16,0(sp)
    8068:	dec00604 	addi	sp,sp,24
    806c:	f800283a 	ret
    8070:	0007c840 	call	7c84 <__multiply>
    8074:	80800015 	stw	r2,0(r16)
    8078:	1021883a 	mov	r16,r2
    807c:	10000015 	stw	zero,0(r2)
    8080:	003fe106 	br	8008 <__pow5mult+0x60>
    8084:	1085883a 	add	r2,r2,r2
    8088:	00c00074 	movhi	r3,1
    808c:	18f7b704 	addi	r3,r3,-8484
    8090:	1085883a 	add	r2,r2,r2
    8094:	10c5883a 	add	r2,r2,r3
    8098:	11bfff17 	ldw	r6,-4(r2)
    809c:	000f883a 	mov	r7,zero
    80a0:	0007ea80 	call	7ea8 <__multadd>
    80a4:	1029883a 	mov	r20,r2
    80a8:	003fcb06 	br	7fd8 <__pow5mult+0x30>
    80ac:	9809883a 	mov	r4,r19
    80b0:	01409c44 	movi	r5,625
    80b4:	0007e6c0 	call	7e6c <__i2b>
    80b8:	98801215 	stw	r2,72(r19)
    80bc:	1021883a 	mov	r16,r2
    80c0:	10000015 	stw	zero,0(r2)
    80c4:	003fd006 	br	8008 <__pow5mult+0x60>

000080c8 <__s2b>:
    80c8:	defff904 	addi	sp,sp,-28
    80cc:	dcc00315 	stw	r19,12(sp)
    80d0:	dc800215 	stw	r18,8(sp)
    80d4:	2827883a 	mov	r19,r5
    80d8:	2025883a 	mov	r18,r4
    80dc:	01400244 	movi	r5,9
    80e0:	39000204 	addi	r4,r7,8
    80e4:	dd000415 	stw	r20,16(sp)
    80e8:	dc400115 	stw	r17,4(sp)
    80ec:	dfc00615 	stw	ra,24(sp)
    80f0:	dd400515 	stw	r21,20(sp)
    80f4:	dc000015 	stw	r16,0(sp)
    80f8:	3829883a 	mov	r20,r7
    80fc:	3023883a 	mov	r17,r6
    8100:	00018f00 	call	18f0 <__divsi3>
    8104:	00c00044 	movi	r3,1
    8108:	1880350e 	bge	r3,r2,81e0 <__s2b+0x118>
    810c:	000b883a 	mov	r5,zero
    8110:	18c7883a 	add	r3,r3,r3
    8114:	29400044 	addi	r5,r5,1
    8118:	18bffd16 	blt	r3,r2,8110 <__s2b+0x48>
    811c:	9009883a 	mov	r4,r18
    8120:	00077740 	call	7774 <_Balloc>
    8124:	1011883a 	mov	r8,r2
    8128:	d8800717 	ldw	r2,28(sp)
    812c:	00c00044 	movi	r3,1
    8130:	01800244 	movi	r6,9
    8134:	40800515 	stw	r2,20(r8)
    8138:	40c00415 	stw	r3,16(r8)
    813c:	3440260e 	bge	r6,r17,81d8 <__s2b+0x110>
    8140:	3021883a 	mov	r16,r6
    8144:	99ab883a 	add	r21,r19,r6
    8148:	9c05883a 	add	r2,r19,r16
    814c:	11c00007 	ldb	r7,0(r2)
    8150:	400b883a 	mov	r5,r8
    8154:	9009883a 	mov	r4,r18
    8158:	39fff404 	addi	r7,r7,-48
    815c:	01800284 	movi	r6,10
    8160:	0007ea80 	call	7ea8 <__multadd>
    8164:	84000044 	addi	r16,r16,1
    8168:	1011883a 	mov	r8,r2
    816c:	8c3ff61e 	bne	r17,r16,8148 <__s2b+0x80>
    8170:	ac45883a 	add	r2,r21,r17
    8174:	117ffe04 	addi	r5,r2,-8
    8178:	880d883a 	mov	r6,r17
    817c:	35000c0e 	bge	r6,r20,81b0 <__s2b+0xe8>
    8180:	a185c83a 	sub	r2,r20,r6
    8184:	2821883a 	mov	r16,r5
    8188:	28a3883a 	add	r17,r5,r2
    818c:	81c00007 	ldb	r7,0(r16)
    8190:	400b883a 	mov	r5,r8
    8194:	9009883a 	mov	r4,r18
    8198:	39fff404 	addi	r7,r7,-48
    819c:	01800284 	movi	r6,10
    81a0:	0007ea80 	call	7ea8 <__multadd>
    81a4:	84000044 	addi	r16,r16,1
    81a8:	1011883a 	mov	r8,r2
    81ac:	847ff71e 	bne	r16,r17,818c <__s2b+0xc4>
    81b0:	4005883a 	mov	r2,r8
    81b4:	dfc00617 	ldw	ra,24(sp)
    81b8:	dd400517 	ldw	r21,20(sp)
    81bc:	dd000417 	ldw	r20,16(sp)
    81c0:	dcc00317 	ldw	r19,12(sp)
    81c4:	dc800217 	ldw	r18,8(sp)
    81c8:	dc400117 	ldw	r17,4(sp)
    81cc:	dc000017 	ldw	r16,0(sp)
    81d0:	dec00704 	addi	sp,sp,28
    81d4:	f800283a 	ret
    81d8:	99400284 	addi	r5,r19,10
    81dc:	003fe706 	br	817c <__s2b+0xb4>
    81e0:	000b883a 	mov	r5,zero
    81e4:	003fcd06 	br	811c <__s2b+0x54>

000081e8 <_realloc_r>:
    81e8:	defff404 	addi	sp,sp,-48
    81ec:	dd800815 	stw	r22,32(sp)
    81f0:	dc800415 	stw	r18,16(sp)
    81f4:	dc400315 	stw	r17,12(sp)
    81f8:	dfc00b15 	stw	ra,44(sp)
    81fc:	df000a15 	stw	fp,40(sp)
    8200:	ddc00915 	stw	r23,36(sp)
    8204:	dd400715 	stw	r21,28(sp)
    8208:	dd000615 	stw	r20,24(sp)
    820c:	dcc00515 	stw	r19,20(sp)
    8210:	dc000215 	stw	r16,8(sp)
    8214:	2825883a 	mov	r18,r5
    8218:	3023883a 	mov	r17,r6
    821c:	202d883a 	mov	r22,r4
    8220:	2800c926 	beq	r5,zero,8548 <_realloc_r+0x360>
    8224:	000ba700 	call	ba70 <__malloc_lock>
    8228:	943ffe04 	addi	r16,r18,-8
    822c:	88c002c4 	addi	r3,r17,11
    8230:	00800584 	movi	r2,22
    8234:	82000117 	ldw	r8,4(r16)
    8238:	10c01b2e 	bgeu	r2,r3,82a8 <_realloc_r+0xc0>
    823c:	00bffe04 	movi	r2,-8
    8240:	188e703a 	and	r7,r3,r2
    8244:	3839883a 	mov	fp,r7
    8248:	38001a16 	blt	r7,zero,82b4 <_realloc_r+0xcc>
    824c:	e4401936 	bltu	fp,r17,82b4 <_realloc_r+0xcc>
    8250:	013fff04 	movi	r4,-4
    8254:	4126703a 	and	r19,r8,r4
    8258:	99c02616 	blt	r19,r7,82f4 <_realloc_r+0x10c>
    825c:	802b883a 	mov	r21,r16
    8260:	9829883a 	mov	r20,r19
    8264:	84000204 	addi	r16,r16,8
    8268:	a80f883a 	mov	r7,r21
    826c:	a70dc83a 	sub	r6,r20,fp
    8270:	008003c4 	movi	r2,15
    8274:	1180c136 	bltu	r2,r6,857c <_realloc_r+0x394>
    8278:	38800117 	ldw	r2,4(r7)
    827c:	a549883a 	add	r4,r20,r21
    8280:	1080004c 	andi	r2,r2,1
    8284:	a084b03a 	or	r2,r20,r2
    8288:	38800115 	stw	r2,4(r7)
    828c:	20c00117 	ldw	r3,4(r4)
    8290:	18c00054 	ori	r3,r3,1
    8294:	20c00115 	stw	r3,4(r4)
    8298:	b009883a 	mov	r4,r22
    829c:	000ba900 	call	ba90 <__malloc_unlock>
    82a0:	8023883a 	mov	r17,r16
    82a4:	00000606 	br	82c0 <_realloc_r+0xd8>
    82a8:	01c00404 	movi	r7,16
    82ac:	3839883a 	mov	fp,r7
    82b0:	e47fe72e 	bgeu	fp,r17,8250 <_realloc_r+0x68>
    82b4:	00800304 	movi	r2,12
    82b8:	0023883a 	mov	r17,zero
    82bc:	b0800015 	stw	r2,0(r22)
    82c0:	8805883a 	mov	r2,r17
    82c4:	dfc00b17 	ldw	ra,44(sp)
    82c8:	df000a17 	ldw	fp,40(sp)
    82cc:	ddc00917 	ldw	r23,36(sp)
    82d0:	dd800817 	ldw	r22,32(sp)
    82d4:	dd400717 	ldw	r21,28(sp)
    82d8:	dd000617 	ldw	r20,24(sp)
    82dc:	dcc00517 	ldw	r19,20(sp)
    82e0:	dc800417 	ldw	r18,16(sp)
    82e4:	dc400317 	ldw	r17,12(sp)
    82e8:	dc000217 	ldw	r16,8(sp)
    82ec:	dec00c04 	addi	sp,sp,48
    82f0:	f800283a 	ret
    82f4:	00800074 	movhi	r2,1
    82f8:	10b90c04 	addi	r2,r2,-7120
    82fc:	12400217 	ldw	r9,8(r2)
    8300:	84cd883a 	add	r6,r16,r19
    8304:	802b883a 	mov	r21,r16
    8308:	3240b926 	beq	r6,r9,85f0 <_realloc_r+0x408>
    830c:	31400117 	ldw	r5,4(r6)
    8310:	00bfff84 	movi	r2,-2
    8314:	2884703a 	and	r2,r5,r2
    8318:	1185883a 	add	r2,r2,r6
    831c:	10c00117 	ldw	r3,4(r2)
    8320:	18c0004c 	andi	r3,r3,1
    8324:	1807003a 	cmpeq	r3,r3,zero
    8328:	1800a326 	beq	r3,zero,85b8 <_realloc_r+0x3d0>
    832c:	2908703a 	and	r4,r5,r4
    8330:	9929883a 	add	r20,r19,r4
    8334:	a1c0a30e 	bge	r20,r7,85c4 <_realloc_r+0x3dc>
    8338:	4080004c 	andi	r2,r8,1
    833c:	1000551e 	bne	r2,zero,8494 <_realloc_r+0x2ac>
    8340:	80800017 	ldw	r2,0(r16)
    8344:	80afc83a 	sub	r23,r16,r2
    8348:	b8c00117 	ldw	r3,4(r23)
    834c:	00bfff04 	movi	r2,-4
    8350:	1884703a 	and	r2,r3,r2
    8354:	30002e26 	beq	r6,zero,8410 <_realloc_r+0x228>
    8358:	3240b926 	beq	r6,r9,8640 <_realloc_r+0x458>
    835c:	98a9883a 	add	r20,r19,r2
    8360:	2509883a 	add	r4,r4,r20
    8364:	d9000015 	stw	r4,0(sp)
    8368:	21c02a16 	blt	r4,r7,8414 <_realloc_r+0x22c>
    836c:	30800317 	ldw	r2,12(r6)
    8370:	30c00217 	ldw	r3,8(r6)
    8374:	01400904 	movi	r5,36
    8378:	99bfff04 	addi	r6,r19,-4
    837c:	18800315 	stw	r2,12(r3)
    8380:	10c00215 	stw	r3,8(r2)
    8384:	b9000317 	ldw	r4,12(r23)
    8388:	b8800217 	ldw	r2,8(r23)
    838c:	b82b883a 	mov	r21,r23
    8390:	bc000204 	addi	r16,r23,8
    8394:	20800215 	stw	r2,8(r4)
    8398:	11000315 	stw	r4,12(r2)
    839c:	2980e436 	bltu	r5,r6,8730 <_realloc_r+0x548>
    83a0:	008004c4 	movi	r2,19
    83a4:	9009883a 	mov	r4,r18
    83a8:	8011883a 	mov	r8,r16
    83ac:	11800f2e 	bgeu	r2,r6,83ec <_realloc_r+0x204>
    83b0:	90800017 	ldw	r2,0(r18)
    83b4:	ba000404 	addi	r8,r23,16
    83b8:	91000204 	addi	r4,r18,8
    83bc:	b8800215 	stw	r2,8(r23)
    83c0:	90c00117 	ldw	r3,4(r18)
    83c4:	008006c4 	movi	r2,27
    83c8:	b8c00315 	stw	r3,12(r23)
    83cc:	1180072e 	bgeu	r2,r6,83ec <_realloc_r+0x204>
    83d0:	90c00217 	ldw	r3,8(r18)
    83d4:	ba000604 	addi	r8,r23,24
    83d8:	91000404 	addi	r4,r18,16
    83dc:	b8c00415 	stw	r3,16(r23)
    83e0:	90800317 	ldw	r2,12(r18)
    83e4:	b8800515 	stw	r2,20(r23)
    83e8:	3140e726 	beq	r6,r5,8788 <_realloc_r+0x5a0>
    83ec:	20800017 	ldw	r2,0(r4)
    83f0:	dd000017 	ldw	r20,0(sp)
    83f4:	b80f883a 	mov	r7,r23
    83f8:	40800015 	stw	r2,0(r8)
    83fc:	20c00117 	ldw	r3,4(r4)
    8400:	40c00115 	stw	r3,4(r8)
    8404:	20800217 	ldw	r2,8(r4)
    8408:	40800215 	stw	r2,8(r8)
    840c:	003f9706 	br	826c <_realloc_r+0x84>
    8410:	98a9883a 	add	r20,r19,r2
    8414:	a1c01f16 	blt	r20,r7,8494 <_realloc_r+0x2ac>
    8418:	b8c00317 	ldw	r3,12(r23)
    841c:	b8800217 	ldw	r2,8(r23)
    8420:	99bfff04 	addi	r6,r19,-4
    8424:	01400904 	movi	r5,36
    8428:	b82b883a 	mov	r21,r23
    842c:	18800215 	stw	r2,8(r3)
    8430:	10c00315 	stw	r3,12(r2)
    8434:	bc000204 	addi	r16,r23,8
    8438:	2980c336 	bltu	r5,r6,8748 <_realloc_r+0x560>
    843c:	008004c4 	movi	r2,19
    8440:	9009883a 	mov	r4,r18
    8444:	8011883a 	mov	r8,r16
    8448:	11800f2e 	bgeu	r2,r6,8488 <_realloc_r+0x2a0>
    844c:	90800017 	ldw	r2,0(r18)
    8450:	ba000404 	addi	r8,r23,16
    8454:	91000204 	addi	r4,r18,8
    8458:	b8800215 	stw	r2,8(r23)
    845c:	90c00117 	ldw	r3,4(r18)
    8460:	008006c4 	movi	r2,27
    8464:	b8c00315 	stw	r3,12(r23)
    8468:	1180072e 	bgeu	r2,r6,8488 <_realloc_r+0x2a0>
    846c:	90c00217 	ldw	r3,8(r18)
    8470:	ba000604 	addi	r8,r23,24
    8474:	91000404 	addi	r4,r18,16
    8478:	b8c00415 	stw	r3,16(r23)
    847c:	90800317 	ldw	r2,12(r18)
    8480:	b8800515 	stw	r2,20(r23)
    8484:	3140c726 	beq	r6,r5,87a4 <_realloc_r+0x5bc>
    8488:	20800017 	ldw	r2,0(r4)
    848c:	b80f883a 	mov	r7,r23
    8490:	003fd906 	br	83f8 <_realloc_r+0x210>
    8494:	880b883a 	mov	r5,r17
    8498:	b009883a 	mov	r4,r22
    849c:	0001a200 	call	1a20 <_malloc_r>
    84a0:	1023883a 	mov	r17,r2
    84a4:	10002526 	beq	r2,zero,853c <_realloc_r+0x354>
    84a8:	80800117 	ldw	r2,4(r16)
    84ac:	00ffff84 	movi	r3,-2
    84b0:	893ffe04 	addi	r4,r17,-8
    84b4:	10c4703a 	and	r2,r2,r3
    84b8:	8085883a 	add	r2,r16,r2
    84bc:	20809526 	beq	r4,r2,8714 <_realloc_r+0x52c>
    84c0:	99bfff04 	addi	r6,r19,-4
    84c4:	01c00904 	movi	r7,36
    84c8:	39804536 	bltu	r7,r6,85e0 <_realloc_r+0x3f8>
    84cc:	008004c4 	movi	r2,19
    84d0:	9009883a 	mov	r4,r18
    84d4:	880b883a 	mov	r5,r17
    84d8:	11800f2e 	bgeu	r2,r6,8518 <_realloc_r+0x330>
    84dc:	90800017 	ldw	r2,0(r18)
    84e0:	89400204 	addi	r5,r17,8
    84e4:	91000204 	addi	r4,r18,8
    84e8:	88800015 	stw	r2,0(r17)
    84ec:	90c00117 	ldw	r3,4(r18)
    84f0:	008006c4 	movi	r2,27
    84f4:	88c00115 	stw	r3,4(r17)
    84f8:	1180072e 	bgeu	r2,r6,8518 <_realloc_r+0x330>
    84fc:	90c00217 	ldw	r3,8(r18)
    8500:	89400404 	addi	r5,r17,16
    8504:	91000404 	addi	r4,r18,16
    8508:	88c00215 	stw	r3,8(r17)
    850c:	90800317 	ldw	r2,12(r18)
    8510:	88800315 	stw	r2,12(r17)
    8514:	31c09126 	beq	r6,r7,875c <_realloc_r+0x574>
    8518:	20800017 	ldw	r2,0(r4)
    851c:	28800015 	stw	r2,0(r5)
    8520:	20c00117 	ldw	r3,4(r4)
    8524:	28c00115 	stw	r3,4(r5)
    8528:	20800217 	ldw	r2,8(r4)
    852c:	28800215 	stw	r2,8(r5)
    8530:	900b883a 	mov	r5,r18
    8534:	b009883a 	mov	r4,r22
    8538:	00064100 	call	6410 <_free_r>
    853c:	b009883a 	mov	r4,r22
    8540:	000ba900 	call	ba90 <__malloc_unlock>
    8544:	003f5e06 	br	82c0 <_realloc_r+0xd8>
    8548:	300b883a 	mov	r5,r6
    854c:	dfc00b17 	ldw	ra,44(sp)
    8550:	df000a17 	ldw	fp,40(sp)
    8554:	ddc00917 	ldw	r23,36(sp)
    8558:	dd800817 	ldw	r22,32(sp)
    855c:	dd400717 	ldw	r21,28(sp)
    8560:	dd000617 	ldw	r20,24(sp)
    8564:	dcc00517 	ldw	r19,20(sp)
    8568:	dc800417 	ldw	r18,16(sp)
    856c:	dc400317 	ldw	r17,12(sp)
    8570:	dc000217 	ldw	r16,8(sp)
    8574:	dec00c04 	addi	sp,sp,48
    8578:	0001a201 	jmpi	1a20 <_malloc_r>
    857c:	38800117 	ldw	r2,4(r7)
    8580:	e54b883a 	add	r5,fp,r21
    8584:	31000054 	ori	r4,r6,1
    8588:	1080004c 	andi	r2,r2,1
    858c:	1704b03a 	or	r2,r2,fp
    8590:	38800115 	stw	r2,4(r7)
    8594:	29000115 	stw	r4,4(r5)
    8598:	2987883a 	add	r3,r5,r6
    859c:	18800117 	ldw	r2,4(r3)
    85a0:	29400204 	addi	r5,r5,8
    85a4:	b009883a 	mov	r4,r22
    85a8:	10800054 	ori	r2,r2,1
    85ac:	18800115 	stw	r2,4(r3)
    85b0:	00064100 	call	6410 <_free_r>
    85b4:	003f3806 	br	8298 <_realloc_r+0xb0>
    85b8:	000d883a 	mov	r6,zero
    85bc:	0009883a 	mov	r4,zero
    85c0:	003f5d06 	br	8338 <_realloc_r+0x150>
    85c4:	30c00217 	ldw	r3,8(r6)
    85c8:	30800317 	ldw	r2,12(r6)
    85cc:	800f883a 	mov	r7,r16
    85d0:	84000204 	addi	r16,r16,8
    85d4:	10c00215 	stw	r3,8(r2)
    85d8:	18800315 	stw	r2,12(r3)
    85dc:	003f2306 	br	826c <_realloc_r+0x84>
    85e0:	8809883a 	mov	r4,r17
    85e4:	900b883a 	mov	r5,r18
    85e8:	000707c0 	call	707c <memmove>
    85ec:	003fd006 	br	8530 <_realloc_r+0x348>
    85f0:	30800117 	ldw	r2,4(r6)
    85f4:	e0c00404 	addi	r3,fp,16
    85f8:	1108703a 	and	r4,r2,r4
    85fc:	9905883a 	add	r2,r19,r4
    8600:	10ff4d16 	blt	r2,r3,8338 <_realloc_r+0x150>
    8604:	1705c83a 	sub	r2,r2,fp
    8608:	870b883a 	add	r5,r16,fp
    860c:	10800054 	ori	r2,r2,1
    8610:	28800115 	stw	r2,4(r5)
    8614:	80c00117 	ldw	r3,4(r16)
    8618:	00800074 	movhi	r2,1
    861c:	10b90c04 	addi	r2,r2,-7120
    8620:	b009883a 	mov	r4,r22
    8624:	18c0004c 	andi	r3,r3,1
    8628:	e0c6b03a 	or	r3,fp,r3
    862c:	11400215 	stw	r5,8(r2)
    8630:	80c00115 	stw	r3,4(r16)
    8634:	000ba900 	call	ba90 <__malloc_unlock>
    8638:	84400204 	addi	r17,r16,8
    863c:	003f2006 	br	82c0 <_realloc_r+0xd8>
    8640:	98a9883a 	add	r20,r19,r2
    8644:	2509883a 	add	r4,r4,r20
    8648:	e0800404 	addi	r2,fp,16
    864c:	d9000115 	stw	r4,4(sp)
    8650:	20bf7016 	blt	r4,r2,8414 <_realloc_r+0x22c>
    8654:	b8c00317 	ldw	r3,12(r23)
    8658:	b8800217 	ldw	r2,8(r23)
    865c:	99bfff04 	addi	r6,r19,-4
    8660:	01400904 	movi	r5,36
    8664:	18800215 	stw	r2,8(r3)
    8668:	10c00315 	stw	r3,12(r2)
    866c:	bc400204 	addi	r17,r23,8
    8670:	29804136 	bltu	r5,r6,8778 <_realloc_r+0x590>
    8674:	008004c4 	movi	r2,19
    8678:	9009883a 	mov	r4,r18
    867c:	880f883a 	mov	r7,r17
    8680:	11800f2e 	bgeu	r2,r6,86c0 <_realloc_r+0x4d8>
    8684:	90800017 	ldw	r2,0(r18)
    8688:	b9c00404 	addi	r7,r23,16
    868c:	91000204 	addi	r4,r18,8
    8690:	b8800215 	stw	r2,8(r23)
    8694:	90c00117 	ldw	r3,4(r18)
    8698:	008006c4 	movi	r2,27
    869c:	b8c00315 	stw	r3,12(r23)
    86a0:	1180072e 	bgeu	r2,r6,86c0 <_realloc_r+0x4d8>
    86a4:	90c00217 	ldw	r3,8(r18)
    86a8:	b9c00604 	addi	r7,r23,24
    86ac:	91000404 	addi	r4,r18,16
    86b0:	b8c00415 	stw	r3,16(r23)
    86b4:	90800317 	ldw	r2,12(r18)
    86b8:	b8800515 	stw	r2,20(r23)
    86bc:	31404026 	beq	r6,r5,87c0 <_realloc_r+0x5d8>
    86c0:	20800017 	ldw	r2,0(r4)
    86c4:	38800015 	stw	r2,0(r7)
    86c8:	20c00117 	ldw	r3,4(r4)
    86cc:	38c00115 	stw	r3,4(r7)
    86d0:	20800217 	ldw	r2,8(r4)
    86d4:	38800215 	stw	r2,8(r7)
    86d8:	d8c00117 	ldw	r3,4(sp)
    86dc:	bf0b883a 	add	r5,r23,fp
    86e0:	b009883a 	mov	r4,r22
    86e4:	1f05c83a 	sub	r2,r3,fp
    86e8:	10800054 	ori	r2,r2,1
    86ec:	28800115 	stw	r2,4(r5)
    86f0:	b8c00117 	ldw	r3,4(r23)
    86f4:	00800074 	movhi	r2,1
    86f8:	10b90c04 	addi	r2,r2,-7120
    86fc:	11400215 	stw	r5,8(r2)
    8700:	18c0004c 	andi	r3,r3,1
    8704:	e0c6b03a 	or	r3,fp,r3
    8708:	b8c00115 	stw	r3,4(r23)
    870c:	000ba900 	call	ba90 <__malloc_unlock>
    8710:	003eeb06 	br	82c0 <_realloc_r+0xd8>
    8714:	20800117 	ldw	r2,4(r4)
    8718:	00ffff04 	movi	r3,-4
    871c:	800f883a 	mov	r7,r16
    8720:	10c4703a 	and	r2,r2,r3
    8724:	98a9883a 	add	r20,r19,r2
    8728:	84000204 	addi	r16,r16,8
    872c:	003ecf06 	br	826c <_realloc_r+0x84>
    8730:	900b883a 	mov	r5,r18
    8734:	8009883a 	mov	r4,r16
    8738:	000707c0 	call	707c <memmove>
    873c:	dd000017 	ldw	r20,0(sp)
    8740:	b80f883a 	mov	r7,r23
    8744:	003ec906 	br	826c <_realloc_r+0x84>
    8748:	900b883a 	mov	r5,r18
    874c:	8009883a 	mov	r4,r16
    8750:	000707c0 	call	707c <memmove>
    8754:	b80f883a 	mov	r7,r23
    8758:	003ec406 	br	826c <_realloc_r+0x84>
    875c:	90c00417 	ldw	r3,16(r18)
    8760:	89400604 	addi	r5,r17,24
    8764:	91000604 	addi	r4,r18,24
    8768:	88c00415 	stw	r3,16(r17)
    876c:	90800517 	ldw	r2,20(r18)
    8770:	88800515 	stw	r2,20(r17)
    8774:	003f6806 	br	8518 <_realloc_r+0x330>
    8778:	900b883a 	mov	r5,r18
    877c:	8809883a 	mov	r4,r17
    8780:	000707c0 	call	707c <memmove>
    8784:	003fd406 	br	86d8 <_realloc_r+0x4f0>
    8788:	90c00417 	ldw	r3,16(r18)
    878c:	91000604 	addi	r4,r18,24
    8790:	ba000804 	addi	r8,r23,32
    8794:	b8c00615 	stw	r3,24(r23)
    8798:	90800517 	ldw	r2,20(r18)
    879c:	b8800715 	stw	r2,28(r23)
    87a0:	003f1206 	br	83ec <_realloc_r+0x204>
    87a4:	90c00417 	ldw	r3,16(r18)
    87a8:	91000604 	addi	r4,r18,24
    87ac:	ba000804 	addi	r8,r23,32
    87b0:	b8c00615 	stw	r3,24(r23)
    87b4:	90800517 	ldw	r2,20(r18)
    87b8:	b8800715 	stw	r2,28(r23)
    87bc:	003f3206 	br	8488 <_realloc_r+0x2a0>
    87c0:	90c00417 	ldw	r3,16(r18)
    87c4:	91000604 	addi	r4,r18,24
    87c8:	b9c00804 	addi	r7,r23,32
    87cc:	b8c00615 	stw	r3,24(r23)
    87d0:	90800517 	ldw	r2,20(r18)
    87d4:	b8800715 	stw	r2,28(r23)
    87d8:	003fb906 	br	86c0 <_realloc_r+0x4d8>

000087dc <__isinfd>:
    87dc:	200d883a 	mov	r6,r4
    87e0:	0109c83a 	sub	r4,zero,r4
    87e4:	2188b03a 	or	r4,r4,r6
    87e8:	2008d7fa 	srli	r4,r4,31
    87ec:	00a00034 	movhi	r2,32768
    87f0:	10bfffc4 	addi	r2,r2,-1
    87f4:	1144703a 	and	r2,r2,r5
    87f8:	2088b03a 	or	r4,r4,r2
    87fc:	009ffc34 	movhi	r2,32752
    8800:	1105c83a 	sub	r2,r2,r4
    8804:	0087c83a 	sub	r3,zero,r2
    8808:	10c4b03a 	or	r2,r2,r3
    880c:	1004d7fa 	srli	r2,r2,31
    8810:	00c00044 	movi	r3,1
    8814:	1885c83a 	sub	r2,r3,r2
    8818:	f800283a 	ret

0000881c <__isnand>:
    881c:	200d883a 	mov	r6,r4
    8820:	0109c83a 	sub	r4,zero,r4
    8824:	2188b03a 	or	r4,r4,r6
    8828:	2008d7fa 	srli	r4,r4,31
    882c:	00a00034 	movhi	r2,32768
    8830:	10bfffc4 	addi	r2,r2,-1
    8834:	1144703a 	and	r2,r2,r5
    8838:	2088b03a 	or	r4,r4,r2
    883c:	009ffc34 	movhi	r2,32752
    8840:	1105c83a 	sub	r2,r2,r4
    8844:	1004d7fa 	srli	r2,r2,31
    8848:	f800283a 	ret

0000884c <__sclose>:
    884c:	2940038f 	ldh	r5,14(r5)
    8850:	0008b801 	jmpi	8b80 <_close_r>

00008854 <__sseek>:
    8854:	defffe04 	addi	sp,sp,-8
    8858:	dc000015 	stw	r16,0(sp)
    885c:	2821883a 	mov	r16,r5
    8860:	2940038f 	ldh	r5,14(r5)
    8864:	dfc00115 	stw	ra,4(sp)
    8868:	0008df80 	call	8df8 <_lseek_r>
    886c:	1007883a 	mov	r3,r2
    8870:	00bfffc4 	movi	r2,-1
    8874:	18800926 	beq	r3,r2,889c <__sseek+0x48>
    8878:	8080030b 	ldhu	r2,12(r16)
    887c:	80c01415 	stw	r3,80(r16)
    8880:	10840014 	ori	r2,r2,4096
    8884:	8080030d 	sth	r2,12(r16)
    8888:	1805883a 	mov	r2,r3
    888c:	dfc00117 	ldw	ra,4(sp)
    8890:	dc000017 	ldw	r16,0(sp)
    8894:	dec00204 	addi	sp,sp,8
    8898:	f800283a 	ret
    889c:	8080030b 	ldhu	r2,12(r16)
    88a0:	10bbffcc 	andi	r2,r2,61439
    88a4:	8080030d 	sth	r2,12(r16)
    88a8:	1805883a 	mov	r2,r3
    88ac:	dfc00117 	ldw	ra,4(sp)
    88b0:	dc000017 	ldw	r16,0(sp)
    88b4:	dec00204 	addi	sp,sp,8
    88b8:	f800283a 	ret

000088bc <__swrite>:
    88bc:	2880030b 	ldhu	r2,12(r5)
    88c0:	defffb04 	addi	sp,sp,-20
    88c4:	dcc00315 	stw	r19,12(sp)
    88c8:	1080400c 	andi	r2,r2,256
    88cc:	dc800215 	stw	r18,8(sp)
    88d0:	dc400115 	stw	r17,4(sp)
    88d4:	dc000015 	stw	r16,0(sp)
    88d8:	3027883a 	mov	r19,r6
    88dc:	3825883a 	mov	r18,r7
    88e0:	dfc00415 	stw	ra,16(sp)
    88e4:	2821883a 	mov	r16,r5
    88e8:	000d883a 	mov	r6,zero
    88ec:	01c00084 	movi	r7,2
    88f0:	2023883a 	mov	r17,r4
    88f4:	10000226 	beq	r2,zero,8900 <__swrite+0x44>
    88f8:	2940038f 	ldh	r5,14(r5)
    88fc:	0008df80 	call	8df8 <_lseek_r>
    8900:	8080030b 	ldhu	r2,12(r16)
    8904:	8140038f 	ldh	r5,14(r16)
    8908:	8809883a 	mov	r4,r17
    890c:	10bbffcc 	andi	r2,r2,61439
    8910:	980d883a 	mov	r6,r19
    8914:	900f883a 	mov	r7,r18
    8918:	8080030d 	sth	r2,12(r16)
    891c:	dfc00417 	ldw	ra,16(sp)
    8920:	dcc00317 	ldw	r19,12(sp)
    8924:	dc800217 	ldw	r18,8(sp)
    8928:	dc400117 	ldw	r17,4(sp)
    892c:	dc000017 	ldw	r16,0(sp)
    8930:	dec00504 	addi	sp,sp,20
    8934:	0008a541 	jmpi	8a54 <_write_r>

00008938 <__sread>:
    8938:	defffe04 	addi	sp,sp,-8
    893c:	dc000015 	stw	r16,0(sp)
    8940:	2821883a 	mov	r16,r5
    8944:	2940038f 	ldh	r5,14(r5)
    8948:	dfc00115 	stw	ra,4(sp)
    894c:	0008e700 	call	8e70 <_read_r>
    8950:	1007883a 	mov	r3,r2
    8954:	10000816 	blt	r2,zero,8978 <__sread+0x40>
    8958:	80801417 	ldw	r2,80(r16)
    895c:	10c5883a 	add	r2,r2,r3
    8960:	80801415 	stw	r2,80(r16)
    8964:	1805883a 	mov	r2,r3
    8968:	dfc00117 	ldw	ra,4(sp)
    896c:	dc000017 	ldw	r16,0(sp)
    8970:	dec00204 	addi	sp,sp,8
    8974:	f800283a 	ret
    8978:	8080030b 	ldhu	r2,12(r16)
    897c:	10bbffcc 	andi	r2,r2,61439
    8980:	8080030d 	sth	r2,12(r16)
    8984:	1805883a 	mov	r2,r3
    8988:	dfc00117 	ldw	ra,4(sp)
    898c:	dc000017 	ldw	r16,0(sp)
    8990:	dec00204 	addi	sp,sp,8
    8994:	f800283a 	ret

00008998 <strcmp>:
    8998:	2144b03a 	or	r2,r4,r5
    899c:	108000cc 	andi	r2,r2,3
    89a0:	10001d1e 	bne	r2,zero,8a18 <strcmp+0x80>
    89a4:	200f883a 	mov	r7,r4
    89a8:	28800017 	ldw	r2,0(r5)
    89ac:	21000017 	ldw	r4,0(r4)
    89b0:	280d883a 	mov	r6,r5
    89b4:	2080161e 	bne	r4,r2,8a10 <strcmp+0x78>
    89b8:	023fbff4 	movhi	r8,65279
    89bc:	423fbfc4 	addi	r8,r8,-257
    89c0:	2207883a 	add	r3,r4,r8
    89c4:	01602074 	movhi	r5,32897
    89c8:	29602004 	addi	r5,r5,-32640
    89cc:	1946703a 	and	r3,r3,r5
    89d0:	0104303a 	nor	r2,zero,r4
    89d4:	10c4703a 	and	r2,r2,r3
    89d8:	10001c1e 	bne	r2,zero,8a4c <strcmp+0xb4>
    89dc:	4013883a 	mov	r9,r8
    89e0:	2811883a 	mov	r8,r5
    89e4:	00000106 	br	89ec <strcmp+0x54>
    89e8:	1800181e 	bne	r3,zero,8a4c <strcmp+0xb4>
    89ec:	39c00104 	addi	r7,r7,4
    89f0:	39000017 	ldw	r4,0(r7)
    89f4:	31800104 	addi	r6,r6,4
    89f8:	31400017 	ldw	r5,0(r6)
    89fc:	2245883a 	add	r2,r4,r9
    8a00:	1204703a 	and	r2,r2,r8
    8a04:	0106303a 	nor	r3,zero,r4
    8a08:	1886703a 	and	r3,r3,r2
    8a0c:	217ff626 	beq	r4,r5,89e8 <strcmp+0x50>
    8a10:	3809883a 	mov	r4,r7
    8a14:	300b883a 	mov	r5,r6
    8a18:	20c00007 	ldb	r3,0(r4)
    8a1c:	1800051e 	bne	r3,zero,8a34 <strcmp+0x9c>
    8a20:	00000606 	br	8a3c <strcmp+0xa4>
    8a24:	21000044 	addi	r4,r4,1
    8a28:	20c00007 	ldb	r3,0(r4)
    8a2c:	29400044 	addi	r5,r5,1
    8a30:	18000226 	beq	r3,zero,8a3c <strcmp+0xa4>
    8a34:	28800007 	ldb	r2,0(r5)
    8a38:	18bffa26 	beq	r3,r2,8a24 <strcmp+0x8c>
    8a3c:	20c00003 	ldbu	r3,0(r4)
    8a40:	28800003 	ldbu	r2,0(r5)
    8a44:	1885c83a 	sub	r2,r3,r2
    8a48:	f800283a 	ret
    8a4c:	0005883a 	mov	r2,zero
    8a50:	f800283a 	ret

00008a54 <_write_r>:
    8a54:	defffd04 	addi	sp,sp,-12
    8a58:	dc000015 	stw	r16,0(sp)
    8a5c:	04000074 	movhi	r16,1
    8a60:	84054704 	addi	r16,r16,5404
    8a64:	dc400115 	stw	r17,4(sp)
    8a68:	80000015 	stw	zero,0(r16)
    8a6c:	2023883a 	mov	r17,r4
    8a70:	2809883a 	mov	r4,r5
    8a74:	300b883a 	mov	r5,r6
    8a78:	380d883a 	mov	r6,r7
    8a7c:	dfc00215 	stw	ra,8(sp)
    8a80:	000bd4c0 	call	bd4c <write>
    8a84:	1007883a 	mov	r3,r2
    8a88:	00bfffc4 	movi	r2,-1
    8a8c:	18800626 	beq	r3,r2,8aa8 <_write_r+0x54>
    8a90:	1805883a 	mov	r2,r3
    8a94:	dfc00217 	ldw	ra,8(sp)
    8a98:	dc400117 	ldw	r17,4(sp)
    8a9c:	dc000017 	ldw	r16,0(sp)
    8aa0:	dec00304 	addi	sp,sp,12
    8aa4:	f800283a 	ret
    8aa8:	80800017 	ldw	r2,0(r16)
    8aac:	103ff826 	beq	r2,zero,8a90 <_write_r+0x3c>
    8ab0:	88800015 	stw	r2,0(r17)
    8ab4:	1805883a 	mov	r2,r3
    8ab8:	dfc00217 	ldw	ra,8(sp)
    8abc:	dc400117 	ldw	r17,4(sp)
    8ac0:	dc000017 	ldw	r16,0(sp)
    8ac4:	dec00304 	addi	sp,sp,12
    8ac8:	f800283a 	ret

00008acc <_calloc_r>:
    8acc:	298b383a 	mul	r5,r5,r6
    8ad0:	defffe04 	addi	sp,sp,-8
    8ad4:	dc000015 	stw	r16,0(sp)
    8ad8:	dfc00115 	stw	ra,4(sp)
    8adc:	0001a200 	call	1a20 <_malloc_r>
    8ae0:	1021883a 	mov	r16,r2
    8ae4:	01c00904 	movi	r7,36
    8ae8:	10000d26 	beq	r2,zero,8b20 <_calloc_r+0x54>
    8aec:	10ffff17 	ldw	r3,-4(r2)
    8af0:	1009883a 	mov	r4,r2
    8af4:	00bfff04 	movi	r2,-4
    8af8:	1886703a 	and	r3,r3,r2
    8afc:	1887883a 	add	r3,r3,r2
    8b00:	180d883a 	mov	r6,r3
    8b04:	000b883a 	mov	r5,zero
    8b08:	38c01736 	bltu	r7,r3,8b68 <_calloc_r+0x9c>
    8b0c:	008004c4 	movi	r2,19
    8b10:	10c00836 	bltu	r2,r3,8b34 <_calloc_r+0x68>
    8b14:	20000215 	stw	zero,8(r4)
    8b18:	20000015 	stw	zero,0(r4)
    8b1c:	20000115 	stw	zero,4(r4)
    8b20:	8005883a 	mov	r2,r16
    8b24:	dfc00117 	ldw	ra,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00204 	addi	sp,sp,8
    8b30:	f800283a 	ret
    8b34:	008006c4 	movi	r2,27
    8b38:	80000015 	stw	zero,0(r16)
    8b3c:	80000115 	stw	zero,4(r16)
    8b40:	81000204 	addi	r4,r16,8
    8b44:	10fff32e 	bgeu	r2,r3,8b14 <_calloc_r+0x48>
    8b48:	80000215 	stw	zero,8(r16)
    8b4c:	80000315 	stw	zero,12(r16)
    8b50:	81000404 	addi	r4,r16,16
    8b54:	19ffef1e 	bne	r3,r7,8b14 <_calloc_r+0x48>
    8b58:	81000604 	addi	r4,r16,24
    8b5c:	80000415 	stw	zero,16(r16)
    8b60:	80000515 	stw	zero,20(r16)
    8b64:	003feb06 	br	8b14 <_calloc_r+0x48>
    8b68:	000715c0 	call	715c <memset>
    8b6c:	8005883a 	mov	r2,r16
    8b70:	dfc00117 	ldw	ra,4(sp)
    8b74:	dc000017 	ldw	r16,0(sp)
    8b78:	dec00204 	addi	sp,sp,8
    8b7c:	f800283a 	ret

00008b80 <_close_r>:
    8b80:	defffd04 	addi	sp,sp,-12
    8b84:	dc000015 	stw	r16,0(sp)
    8b88:	04000074 	movhi	r16,1
    8b8c:	84054704 	addi	r16,r16,5404
    8b90:	dc400115 	stw	r17,4(sp)
    8b94:	80000015 	stw	zero,0(r16)
    8b98:	2023883a 	mov	r17,r4
    8b9c:	2809883a 	mov	r4,r5
    8ba0:	dfc00215 	stw	ra,8(sp)
    8ba4:	000b1cc0 	call	b1cc <close>
    8ba8:	1007883a 	mov	r3,r2
    8bac:	00bfffc4 	movi	r2,-1
    8bb0:	18800626 	beq	r3,r2,8bcc <_close_r+0x4c>
    8bb4:	1805883a 	mov	r2,r3
    8bb8:	dfc00217 	ldw	ra,8(sp)
    8bbc:	dc400117 	ldw	r17,4(sp)
    8bc0:	dc000017 	ldw	r16,0(sp)
    8bc4:	dec00304 	addi	sp,sp,12
    8bc8:	f800283a 	ret
    8bcc:	80800017 	ldw	r2,0(r16)
    8bd0:	103ff826 	beq	r2,zero,8bb4 <_close_r+0x34>
    8bd4:	88800015 	stw	r2,0(r17)
    8bd8:	1805883a 	mov	r2,r3
    8bdc:	dfc00217 	ldw	ra,8(sp)
    8be0:	dc400117 	ldw	r17,4(sp)
    8be4:	dc000017 	ldw	r16,0(sp)
    8be8:	dec00304 	addi	sp,sp,12
    8bec:	f800283a 	ret

00008bf0 <_fclose_r>:
    8bf0:	defffc04 	addi	sp,sp,-16
    8bf4:	dc400115 	stw	r17,4(sp)
    8bf8:	dc000015 	stw	r16,0(sp)
    8bfc:	dfc00315 	stw	ra,12(sp)
    8c00:	dc800215 	stw	r18,8(sp)
    8c04:	2821883a 	mov	r16,r5
    8c08:	2023883a 	mov	r17,r4
    8c0c:	28002926 	beq	r5,zero,8cb4 <_fclose_r+0xc4>
    8c10:	000607c0 	call	607c <__sfp_lock_acquire>
    8c14:	88000226 	beq	r17,zero,8c20 <_fclose_r+0x30>
    8c18:	88800e17 	ldw	r2,56(r17)
    8c1c:	10002d26 	beq	r2,zero,8cd4 <_fclose_r+0xe4>
    8c20:	8080030f 	ldh	r2,12(r16)
    8c24:	10002226 	beq	r2,zero,8cb0 <_fclose_r+0xc0>
    8c28:	8809883a 	mov	r4,r17
    8c2c:	800b883a 	mov	r5,r16
    8c30:	0005df40 	call	5df4 <_fflush_r>
    8c34:	1025883a 	mov	r18,r2
    8c38:	80800b17 	ldw	r2,44(r16)
    8c3c:	10000426 	beq	r2,zero,8c50 <_fclose_r+0x60>
    8c40:	81400717 	ldw	r5,28(r16)
    8c44:	8809883a 	mov	r4,r17
    8c48:	103ee83a 	callr	r2
    8c4c:	10002a16 	blt	r2,zero,8cf8 <_fclose_r+0x108>
    8c50:	8080030b 	ldhu	r2,12(r16)
    8c54:	1080200c 	andi	r2,r2,128
    8c58:	1000231e 	bne	r2,zero,8ce8 <_fclose_r+0xf8>
    8c5c:	81400c17 	ldw	r5,48(r16)
    8c60:	28000526 	beq	r5,zero,8c78 <_fclose_r+0x88>
    8c64:	80801004 	addi	r2,r16,64
    8c68:	28800226 	beq	r5,r2,8c74 <_fclose_r+0x84>
    8c6c:	8809883a 	mov	r4,r17
    8c70:	00064100 	call	6410 <_free_r>
    8c74:	80000c15 	stw	zero,48(r16)
    8c78:	81401117 	ldw	r5,68(r16)
    8c7c:	28000326 	beq	r5,zero,8c8c <_fclose_r+0x9c>
    8c80:	8809883a 	mov	r4,r17
    8c84:	00064100 	call	6410 <_free_r>
    8c88:	80001115 	stw	zero,68(r16)
    8c8c:	8000030d 	sth	zero,12(r16)
    8c90:	00060800 	call	6080 <__sfp_lock_release>
    8c94:	9005883a 	mov	r2,r18
    8c98:	dfc00317 	ldw	ra,12(sp)
    8c9c:	dc800217 	ldw	r18,8(sp)
    8ca0:	dc400117 	ldw	r17,4(sp)
    8ca4:	dc000017 	ldw	r16,0(sp)
    8ca8:	dec00404 	addi	sp,sp,16
    8cac:	f800283a 	ret
    8cb0:	00060800 	call	6080 <__sfp_lock_release>
    8cb4:	0025883a 	mov	r18,zero
    8cb8:	9005883a 	mov	r2,r18
    8cbc:	dfc00317 	ldw	ra,12(sp)
    8cc0:	dc800217 	ldw	r18,8(sp)
    8cc4:	dc400117 	ldw	r17,4(sp)
    8cc8:	dc000017 	ldw	r16,0(sp)
    8ccc:	dec00404 	addi	sp,sp,16
    8cd0:	f800283a 	ret
    8cd4:	8809883a 	mov	r4,r17
    8cd8:	000608c0 	call	608c <__sinit>
    8cdc:	8080030f 	ldh	r2,12(r16)
    8ce0:	103fd11e 	bne	r2,zero,8c28 <_fclose_r+0x38>
    8ce4:	003ff206 	br	8cb0 <_fclose_r+0xc0>
    8ce8:	81400417 	ldw	r5,16(r16)
    8cec:	8809883a 	mov	r4,r17
    8cf0:	00064100 	call	6410 <_free_r>
    8cf4:	003fd906 	br	8c5c <_fclose_r+0x6c>
    8cf8:	04bfffc4 	movi	r18,-1
    8cfc:	003fd406 	br	8c50 <_fclose_r+0x60>

00008d00 <fclose>:
    8d00:	00800074 	movhi	r2,1
    8d04:	10be9404 	addi	r2,r2,-1456
    8d08:	200b883a 	mov	r5,r4
    8d0c:	11000017 	ldw	r4,0(r2)
    8d10:	0008bf01 	jmpi	8bf0 <_fclose_r>

00008d14 <_fstat_r>:
    8d14:	defffd04 	addi	sp,sp,-12
    8d18:	dc000015 	stw	r16,0(sp)
    8d1c:	04000074 	movhi	r16,1
    8d20:	84054704 	addi	r16,r16,5404
    8d24:	dc400115 	stw	r17,4(sp)
    8d28:	80000015 	stw	zero,0(r16)
    8d2c:	2023883a 	mov	r17,r4
    8d30:	2809883a 	mov	r4,r5
    8d34:	300b883a 	mov	r5,r6
    8d38:	dfc00215 	stw	ra,8(sp)
    8d3c:	000b3b40 	call	b3b4 <fstat>
    8d40:	1007883a 	mov	r3,r2
    8d44:	00bfffc4 	movi	r2,-1
    8d48:	18800626 	beq	r3,r2,8d64 <_fstat_r+0x50>
    8d4c:	1805883a 	mov	r2,r3
    8d50:	dfc00217 	ldw	ra,8(sp)
    8d54:	dc400117 	ldw	r17,4(sp)
    8d58:	dc000017 	ldw	r16,0(sp)
    8d5c:	dec00304 	addi	sp,sp,12
    8d60:	f800283a 	ret
    8d64:	80800017 	ldw	r2,0(r16)
    8d68:	103ff826 	beq	r2,zero,8d4c <_fstat_r+0x38>
    8d6c:	88800015 	stw	r2,0(r17)
    8d70:	1805883a 	mov	r2,r3
    8d74:	dfc00217 	ldw	ra,8(sp)
    8d78:	dc400117 	ldw	r17,4(sp)
    8d7c:	dc000017 	ldw	r16,0(sp)
    8d80:	dec00304 	addi	sp,sp,12
    8d84:	f800283a 	ret

00008d88 <_isatty_r>:
    8d88:	defffd04 	addi	sp,sp,-12
    8d8c:	dc000015 	stw	r16,0(sp)
    8d90:	04000074 	movhi	r16,1
    8d94:	84054704 	addi	r16,r16,5404
    8d98:	dc400115 	stw	r17,4(sp)
    8d9c:	80000015 	stw	zero,0(r16)
    8da0:	2023883a 	mov	r17,r4
    8da4:	2809883a 	mov	r4,r5
    8da8:	dfc00215 	stw	ra,8(sp)
    8dac:	000b6a80 	call	b6a8 <isatty>
    8db0:	1007883a 	mov	r3,r2
    8db4:	00bfffc4 	movi	r2,-1
    8db8:	18800626 	beq	r3,r2,8dd4 <_isatty_r+0x4c>
    8dbc:	1805883a 	mov	r2,r3
    8dc0:	dfc00217 	ldw	ra,8(sp)
    8dc4:	dc400117 	ldw	r17,4(sp)
    8dc8:	dc000017 	ldw	r16,0(sp)
    8dcc:	dec00304 	addi	sp,sp,12
    8dd0:	f800283a 	ret
    8dd4:	80800017 	ldw	r2,0(r16)
    8dd8:	103ff826 	beq	r2,zero,8dbc <_isatty_r+0x34>
    8ddc:	88800015 	stw	r2,0(r17)
    8de0:	1805883a 	mov	r2,r3
    8de4:	dfc00217 	ldw	ra,8(sp)
    8de8:	dc400117 	ldw	r17,4(sp)
    8dec:	dc000017 	ldw	r16,0(sp)
    8df0:	dec00304 	addi	sp,sp,12
    8df4:	f800283a 	ret

00008df8 <_lseek_r>:
    8df8:	defffd04 	addi	sp,sp,-12
    8dfc:	dc000015 	stw	r16,0(sp)
    8e00:	04000074 	movhi	r16,1
    8e04:	84054704 	addi	r16,r16,5404
    8e08:	dc400115 	stw	r17,4(sp)
    8e0c:	80000015 	stw	zero,0(r16)
    8e10:	2023883a 	mov	r17,r4
    8e14:	2809883a 	mov	r4,r5
    8e18:	300b883a 	mov	r5,r6
    8e1c:	380d883a 	mov	r6,r7
    8e20:	dfc00215 	stw	ra,8(sp)
    8e24:	000b8b40 	call	b8b4 <lseek>
    8e28:	1007883a 	mov	r3,r2
    8e2c:	00bfffc4 	movi	r2,-1
    8e30:	18800626 	beq	r3,r2,8e4c <_lseek_r+0x54>
    8e34:	1805883a 	mov	r2,r3
    8e38:	dfc00217 	ldw	ra,8(sp)
    8e3c:	dc400117 	ldw	r17,4(sp)
    8e40:	dc000017 	ldw	r16,0(sp)
    8e44:	dec00304 	addi	sp,sp,12
    8e48:	f800283a 	ret
    8e4c:	80800017 	ldw	r2,0(r16)
    8e50:	103ff826 	beq	r2,zero,8e34 <_lseek_r+0x3c>
    8e54:	88800015 	stw	r2,0(r17)
    8e58:	1805883a 	mov	r2,r3
    8e5c:	dfc00217 	ldw	ra,8(sp)
    8e60:	dc400117 	ldw	r17,4(sp)
    8e64:	dc000017 	ldw	r16,0(sp)
    8e68:	dec00304 	addi	sp,sp,12
    8e6c:	f800283a 	ret

00008e70 <_read_r>:
    8e70:	defffd04 	addi	sp,sp,-12
    8e74:	dc000015 	stw	r16,0(sp)
    8e78:	04000074 	movhi	r16,1
    8e7c:	84054704 	addi	r16,r16,5404
    8e80:	dc400115 	stw	r17,4(sp)
    8e84:	80000015 	stw	zero,0(r16)
    8e88:	2023883a 	mov	r17,r4
    8e8c:	2809883a 	mov	r4,r5
    8e90:	300b883a 	mov	r5,r6
    8e94:	380d883a 	mov	r6,r7
    8e98:	dfc00215 	stw	ra,8(sp)
    8e9c:	000bab00 	call	bab0 <read>
    8ea0:	1007883a 	mov	r3,r2
    8ea4:	00bfffc4 	movi	r2,-1
    8ea8:	18800626 	beq	r3,r2,8ec4 <_read_r+0x54>
    8eac:	1805883a 	mov	r2,r3
    8eb0:	dfc00217 	ldw	ra,8(sp)
    8eb4:	dc400117 	ldw	r17,4(sp)
    8eb8:	dc000017 	ldw	r16,0(sp)
    8ebc:	dec00304 	addi	sp,sp,12
    8ec0:	f800283a 	ret
    8ec4:	80800017 	ldw	r2,0(r16)
    8ec8:	103ff826 	beq	r2,zero,8eac <_read_r+0x3c>
    8ecc:	88800015 	stw	r2,0(r17)
    8ed0:	1805883a 	mov	r2,r3
    8ed4:	dfc00217 	ldw	ra,8(sp)
    8ed8:	dc400117 	ldw	r17,4(sp)
    8edc:	dc000017 	ldw	r16,0(sp)
    8ee0:	dec00304 	addi	sp,sp,12
    8ee4:	f800283a 	ret

00008ee8 <__udivdi3>:
    8ee8:	defff004 	addi	sp,sp,-64
    8eec:	2005883a 	mov	r2,r4
    8ef0:	3011883a 	mov	r8,r6
    8ef4:	df000e15 	stw	fp,56(sp)
    8ef8:	dd000a15 	stw	r20,40(sp)
    8efc:	dc000615 	stw	r16,24(sp)
    8f00:	dfc00f15 	stw	ra,60(sp)
    8f04:	ddc00d15 	stw	r23,52(sp)
    8f08:	dd800c15 	stw	r22,48(sp)
    8f0c:	dd400b15 	stw	r21,44(sp)
    8f10:	dcc00915 	stw	r19,36(sp)
    8f14:	dc800815 	stw	r18,32(sp)
    8f18:	dc400715 	stw	r17,28(sp)
    8f1c:	4021883a 	mov	r16,r8
    8f20:	1039883a 	mov	fp,r2
    8f24:	2829883a 	mov	r20,r5
    8f28:	38003b1e 	bne	r7,zero,9018 <__udivdi3+0x130>
    8f2c:	2a005c36 	bltu	r5,r8,90a0 <__udivdi3+0x1b8>
    8f30:	4000a626 	beq	r8,zero,91cc <__udivdi3+0x2e4>
    8f34:	00bfffd4 	movui	r2,65535
    8f38:	14009e36 	bltu	r2,r16,91b4 <__udivdi3+0x2cc>
    8f3c:	00803fc4 	movi	r2,255
    8f40:	14013d36 	bltu	r2,r16,9438 <__udivdi3+0x550>
    8f44:	000b883a 	mov	r5,zero
    8f48:	0005883a 	mov	r2,zero
    8f4c:	8084d83a 	srl	r2,r16,r2
    8f50:	01000074 	movhi	r4,1
    8f54:	2137bf04 	addi	r4,r4,-8452
    8f58:	01800804 	movi	r6,32
    8f5c:	1105883a 	add	r2,r2,r4
    8f60:	10c00003 	ldbu	r3,0(r2)
    8f64:	28c7883a 	add	r3,r5,r3
    8f68:	30edc83a 	sub	r22,r6,r3
    8f6c:	b000ee1e 	bne	r22,zero,9328 <__udivdi3+0x440>
    8f70:	802ad43a 	srli	r21,r16,16
    8f74:	00800044 	movi	r2,1
    8f78:	a423c83a 	sub	r17,r20,r16
    8f7c:	85ffffcc 	andi	r23,r16,65535
    8f80:	d8800315 	stw	r2,12(sp)
    8f84:	8809883a 	mov	r4,r17
    8f88:	a80b883a 	mov	r5,r21
    8f8c:	00019b00 	call	19b0 <__udivsi3>
    8f90:	8809883a 	mov	r4,r17
    8f94:	a80b883a 	mov	r5,r21
    8f98:	102d883a 	mov	r22,r2
    8f9c:	00019b80 	call	19b8 <__umodsi3>
    8fa0:	1004943a 	slli	r2,r2,16
    8fa4:	e006d43a 	srli	r3,fp,16
    8fa8:	bda3383a 	mul	r17,r23,r22
    8fac:	10c4b03a 	or	r2,r2,r3
    8fb0:	1440042e 	bgeu	r2,r17,8fc4 <__udivdi3+0xdc>
    8fb4:	1405883a 	add	r2,r2,r16
    8fb8:	b5bfffc4 	addi	r22,r22,-1
    8fbc:	14000136 	bltu	r2,r16,8fc4 <__udivdi3+0xdc>
    8fc0:	14413d36 	bltu	r2,r17,94b8 <__udivdi3+0x5d0>
    8fc4:	1463c83a 	sub	r17,r2,r17
    8fc8:	8809883a 	mov	r4,r17
    8fcc:	a80b883a 	mov	r5,r21
    8fd0:	00019b00 	call	19b0 <__udivsi3>
    8fd4:	8809883a 	mov	r4,r17
    8fd8:	a80b883a 	mov	r5,r21
    8fdc:	1029883a 	mov	r20,r2
    8fe0:	00019b80 	call	19b8 <__umodsi3>
    8fe4:	1004943a 	slli	r2,r2,16
    8fe8:	bd09383a 	mul	r4,r23,r20
    8fec:	e0ffffcc 	andi	r3,fp,65535
    8ff0:	10c4b03a 	or	r2,r2,r3
    8ff4:	1100042e 	bgeu	r2,r4,9008 <__udivdi3+0x120>
    8ff8:	8085883a 	add	r2,r16,r2
    8ffc:	a53fffc4 	addi	r20,r20,-1
    9000:	14000136 	bltu	r2,r16,9008 <__udivdi3+0x120>
    9004:	11012036 	bltu	r2,r4,9488 <__udivdi3+0x5a0>
    9008:	b004943a 	slli	r2,r22,16
    900c:	d9000317 	ldw	r4,12(sp)
    9010:	a084b03a 	or	r2,r20,r2
    9014:	00001506 	br	906c <__udivdi3+0x184>
    9018:	380d883a 	mov	r6,r7
    901c:	29c06236 	bltu	r5,r7,91a8 <__udivdi3+0x2c0>
    9020:	00bfffd4 	movui	r2,65535
    9024:	11c05a36 	bltu	r2,r7,9190 <__udivdi3+0x2a8>
    9028:	00803fc4 	movi	r2,255
    902c:	11c0fc36 	bltu	r2,r7,9420 <__udivdi3+0x538>
    9030:	000b883a 	mov	r5,zero
    9034:	0005883a 	mov	r2,zero
    9038:	3084d83a 	srl	r2,r6,r2
    903c:	01000074 	movhi	r4,1
    9040:	2137bf04 	addi	r4,r4,-8452
    9044:	01c00804 	movi	r7,32
    9048:	1105883a 	add	r2,r2,r4
    904c:	10c00003 	ldbu	r3,0(r2)
    9050:	28c7883a 	add	r3,r5,r3
    9054:	38efc83a 	sub	r23,r7,r3
    9058:	b800691e 	bne	r23,zero,9200 <__udivdi3+0x318>
    905c:	35000136 	bltu	r6,r20,9064 <__udivdi3+0x17c>
    9060:	e4005136 	bltu	fp,r16,91a8 <__udivdi3+0x2c0>
    9064:	00800044 	movi	r2,1
    9068:	0009883a 	mov	r4,zero
    906c:	2007883a 	mov	r3,r4
    9070:	dfc00f17 	ldw	ra,60(sp)
    9074:	df000e17 	ldw	fp,56(sp)
    9078:	ddc00d17 	ldw	r23,52(sp)
    907c:	dd800c17 	ldw	r22,48(sp)
    9080:	dd400b17 	ldw	r21,44(sp)
    9084:	dd000a17 	ldw	r20,40(sp)
    9088:	dcc00917 	ldw	r19,36(sp)
    908c:	dc800817 	ldw	r18,32(sp)
    9090:	dc400717 	ldw	r17,28(sp)
    9094:	dc000617 	ldw	r16,24(sp)
    9098:	dec01004 	addi	sp,sp,64
    909c:	f800283a 	ret
    90a0:	00bfffd4 	movui	r2,65535
    90a4:	12005036 	bltu	r2,r8,91e8 <__udivdi3+0x300>
    90a8:	00803fc4 	movi	r2,255
    90ac:	1200e836 	bltu	r2,r8,9450 <__udivdi3+0x568>
    90b0:	000b883a 	mov	r5,zero
    90b4:	0005883a 	mov	r2,zero
    90b8:	8084d83a 	srl	r2,r16,r2
    90bc:	01000074 	movhi	r4,1
    90c0:	2137bf04 	addi	r4,r4,-8452
    90c4:	01800804 	movi	r6,32
    90c8:	1105883a 	add	r2,r2,r4
    90cc:	10c00003 	ldbu	r3,0(r2)
    90d0:	28c7883a 	add	r3,r5,r3
    90d4:	30cbc83a 	sub	r5,r6,r3
    90d8:	28000626 	beq	r5,zero,90f4 <__udivdi3+0x20c>
    90dc:	3145c83a 	sub	r2,r6,r5
    90e0:	e084d83a 	srl	r2,fp,r2
    90e4:	a146983a 	sll	r3,r20,r5
    90e8:	e178983a 	sll	fp,fp,r5
    90ec:	8160983a 	sll	r16,r16,r5
    90f0:	18a8b03a 	or	r20,r3,r2
    90f4:	802ad43a 	srli	r21,r16,16
    90f8:	a009883a 	mov	r4,r20
    90fc:	85ffffcc 	andi	r23,r16,65535
    9100:	a80b883a 	mov	r5,r21
    9104:	00019b00 	call	19b0 <__udivsi3>
    9108:	a009883a 	mov	r4,r20
    910c:	a80b883a 	mov	r5,r21
    9110:	102d883a 	mov	r22,r2
    9114:	00019b80 	call	19b8 <__umodsi3>
    9118:	1004943a 	slli	r2,r2,16
    911c:	e006d43a 	srli	r3,fp,16
    9120:	bda3383a 	mul	r17,r23,r22
    9124:	10c4b03a 	or	r2,r2,r3
    9128:	1440042e 	bgeu	r2,r17,913c <__udivdi3+0x254>
    912c:	1405883a 	add	r2,r2,r16
    9130:	b5bfffc4 	addi	r22,r22,-1
    9134:	14000136 	bltu	r2,r16,913c <__udivdi3+0x254>
    9138:	1440d536 	bltu	r2,r17,9490 <__udivdi3+0x5a8>
    913c:	1463c83a 	sub	r17,r2,r17
    9140:	8809883a 	mov	r4,r17
    9144:	a80b883a 	mov	r5,r21
    9148:	00019b00 	call	19b0 <__udivsi3>
    914c:	8809883a 	mov	r4,r17
    9150:	a80b883a 	mov	r5,r21
    9154:	1029883a 	mov	r20,r2
    9158:	00019b80 	call	19b8 <__umodsi3>
    915c:	1004943a 	slli	r2,r2,16
    9160:	bd09383a 	mul	r4,r23,r20
    9164:	e0ffffcc 	andi	r3,fp,65535
    9168:	10c4b03a 	or	r2,r2,r3
    916c:	1100042e 	bgeu	r2,r4,9180 <__udivdi3+0x298>
    9170:	8085883a 	add	r2,r16,r2
    9174:	a53fffc4 	addi	r20,r20,-1
    9178:	14000136 	bltu	r2,r16,9180 <__udivdi3+0x298>
    917c:	1100c736 	bltu	r2,r4,949c <__udivdi3+0x5b4>
    9180:	b004943a 	slli	r2,r22,16
    9184:	0009883a 	mov	r4,zero
    9188:	a084b03a 	or	r2,r20,r2
    918c:	003fb706 	br	906c <__udivdi3+0x184>
    9190:	00804034 	movhi	r2,256
    9194:	10bfffc4 	addi	r2,r2,-1
    9198:	11c0a436 	bltu	r2,r7,942c <__udivdi3+0x544>
    919c:	01400404 	movi	r5,16
    91a0:	2805883a 	mov	r2,r5
    91a4:	003fa406 	br	9038 <__udivdi3+0x150>
    91a8:	0005883a 	mov	r2,zero
    91ac:	0009883a 	mov	r4,zero
    91b0:	003fae06 	br	906c <__udivdi3+0x184>
    91b4:	00804034 	movhi	r2,256
    91b8:	10bfffc4 	addi	r2,r2,-1
    91bc:	1400a136 	bltu	r2,r16,9444 <__udivdi3+0x55c>
    91c0:	01400404 	movi	r5,16
    91c4:	2805883a 	mov	r2,r5
    91c8:	003f6006 	br	8f4c <__udivdi3+0x64>
    91cc:	01000044 	movi	r4,1
    91d0:	000b883a 	mov	r5,zero
    91d4:	00019b00 	call	19b0 <__udivsi3>
    91d8:	1021883a 	mov	r16,r2
    91dc:	00bfffd4 	movui	r2,65535
    91e0:	143ff436 	bltu	r2,r16,91b4 <__udivdi3+0x2cc>
    91e4:	003f5506 	br	8f3c <__udivdi3+0x54>
    91e8:	00804034 	movhi	r2,256
    91ec:	10bfffc4 	addi	r2,r2,-1
    91f0:	12009a36 	bltu	r2,r8,945c <__udivdi3+0x574>
    91f4:	01400404 	movi	r5,16
    91f8:	2805883a 	mov	r2,r5
    91fc:	003fae06 	br	90b8 <__udivdi3+0x1d0>
    9200:	3dc5c83a 	sub	r2,r7,r23
    9204:	35c8983a 	sll	r4,r6,r23
    9208:	8086d83a 	srl	r3,r16,r2
    920c:	a0a2d83a 	srl	r17,r20,r2
    9210:	e084d83a 	srl	r2,fp,r2
    9214:	20eab03a 	or	r21,r4,r3
    9218:	a82cd43a 	srli	r22,r21,16
    921c:	a5c6983a 	sll	r3,r20,r23
    9220:	8809883a 	mov	r4,r17
    9224:	b00b883a 	mov	r5,r22
    9228:	1886b03a 	or	r3,r3,r2
    922c:	d8c00215 	stw	r3,8(sp)
    9230:	00019b00 	call	19b0 <__udivsi3>
    9234:	8809883a 	mov	r4,r17
    9238:	b00b883a 	mov	r5,r22
    923c:	1029883a 	mov	r20,r2
    9240:	00019b80 	call	19b8 <__umodsi3>
    9244:	a8ffffcc 	andi	r3,r21,65535
    9248:	d8c00515 	stw	r3,20(sp)
    924c:	d9000217 	ldw	r4,8(sp)
    9250:	d9400517 	ldw	r5,20(sp)
    9254:	1004943a 	slli	r2,r2,16
    9258:	2006d43a 	srli	r3,r4,16
    925c:	85e0983a 	sll	r16,r16,r23
    9260:	2d23383a 	mul	r17,r5,r20
    9264:	10c4b03a 	or	r2,r2,r3
    9268:	dc000015 	stw	r16,0(sp)
    926c:	1440032e 	bgeu	r2,r17,927c <__udivdi3+0x394>
    9270:	1545883a 	add	r2,r2,r21
    9274:	a53fffc4 	addi	r20,r20,-1
    9278:	15407f2e 	bgeu	r2,r21,9478 <__udivdi3+0x590>
    927c:	1463c83a 	sub	r17,r2,r17
    9280:	8809883a 	mov	r4,r17
    9284:	b00b883a 	mov	r5,r22
    9288:	00019b00 	call	19b0 <__udivsi3>
    928c:	8809883a 	mov	r4,r17
    9290:	b00b883a 	mov	r5,r22
    9294:	1021883a 	mov	r16,r2
    9298:	00019b80 	call	19b8 <__umodsi3>
    929c:	d8c00517 	ldw	r3,20(sp)
    92a0:	d9000217 	ldw	r4,8(sp)
    92a4:	1004943a 	slli	r2,r2,16
    92a8:	1c0f383a 	mul	r7,r3,r16
    92ac:	20ffffcc 	andi	r3,r4,65535
    92b0:	10e2b03a 	or	r17,r2,r3
    92b4:	89c0032e 	bgeu	r17,r7,92c4 <__udivdi3+0x3dc>
    92b8:	8d63883a 	add	r17,r17,r21
    92bc:	843fffc4 	addi	r16,r16,-1
    92c0:	8d40692e 	bgeu	r17,r21,9468 <__udivdi3+0x580>
    92c4:	a008943a 	slli	r4,r20,16
    92c8:	d9400017 	ldw	r5,0(sp)
    92cc:	89e3c83a 	sub	r17,r17,r7
    92d0:	8110b03a 	or	r8,r16,r4
    92d4:	280cd43a 	srli	r6,r5,16
    92d8:	28ffffcc 	andi	r3,r5,65535
    92dc:	40bfffcc 	andi	r2,r8,65535
    92e0:	400ad43a 	srli	r5,r8,16
    92e4:	10d3383a 	mul	r9,r2,r3
    92e8:	1185383a 	mul	r2,r2,r6
    92ec:	28c7383a 	mul	r3,r5,r3
    92f0:	4808d43a 	srli	r4,r9,16
    92f4:	298b383a 	mul	r5,r5,r6
    92f8:	10c5883a 	add	r2,r2,r3
    92fc:	2089883a 	add	r4,r4,r2
    9300:	20c0022e 	bgeu	r4,r3,930c <__udivdi3+0x424>
    9304:	00800074 	movhi	r2,1
    9308:	288b883a 	add	r5,r5,r2
    930c:	2004d43a 	srli	r2,r4,16
    9310:	288b883a 	add	r5,r5,r2
    9314:	89403f36 	bltu	r17,r5,9414 <__udivdi3+0x52c>
    9318:	89403926 	beq	r17,r5,9400 <__udivdi3+0x518>
    931c:	4005883a 	mov	r2,r8
    9320:	0009883a 	mov	r4,zero
    9324:	003f5106 	br	906c <__udivdi3+0x184>
    9328:	85a0983a 	sll	r16,r16,r22
    932c:	3585c83a 	sub	r2,r6,r22
    9330:	a0a2d83a 	srl	r17,r20,r2
    9334:	802ad43a 	srli	r21,r16,16
    9338:	e084d83a 	srl	r2,fp,r2
    933c:	a586983a 	sll	r3,r20,r22
    9340:	8809883a 	mov	r4,r17
    9344:	a80b883a 	mov	r5,r21
    9348:	1886b03a 	or	r3,r3,r2
    934c:	d8c00115 	stw	r3,4(sp)
    9350:	00019b00 	call	19b0 <__udivsi3>
    9354:	8809883a 	mov	r4,r17
    9358:	a80b883a 	mov	r5,r21
    935c:	d8800415 	stw	r2,16(sp)
    9360:	00019b80 	call	19b8 <__umodsi3>
    9364:	d9000117 	ldw	r4,4(sp)
    9368:	d9400417 	ldw	r5,16(sp)
    936c:	1004943a 	slli	r2,r2,16
    9370:	85ffffcc 	andi	r23,r16,65535
    9374:	2006d43a 	srli	r3,r4,16
    9378:	b963383a 	mul	r17,r23,r5
    937c:	10c4b03a 	or	r2,r2,r3
    9380:	1440042e 	bgeu	r2,r17,9394 <__udivdi3+0x4ac>
    9384:	297fffc4 	addi	r5,r5,-1
    9388:	1405883a 	add	r2,r2,r16
    938c:	d9400415 	stw	r5,16(sp)
    9390:	1400442e 	bgeu	r2,r16,94a4 <__udivdi3+0x5bc>
    9394:	1463c83a 	sub	r17,r2,r17
    9398:	8809883a 	mov	r4,r17
    939c:	a80b883a 	mov	r5,r21
    93a0:	00019b00 	call	19b0 <__udivsi3>
    93a4:	8809883a 	mov	r4,r17
    93a8:	a80b883a 	mov	r5,r21
    93ac:	1029883a 	mov	r20,r2
    93b0:	00019b80 	call	19b8 <__umodsi3>
    93b4:	d9400117 	ldw	r5,4(sp)
    93b8:	1004943a 	slli	r2,r2,16
    93bc:	bd09383a 	mul	r4,r23,r20
    93c0:	28ffffcc 	andi	r3,r5,65535
    93c4:	10c6b03a 	or	r3,r2,r3
    93c8:	1900062e 	bgeu	r3,r4,93e4 <__udivdi3+0x4fc>
    93cc:	1c07883a 	add	r3,r3,r16
    93d0:	a53fffc4 	addi	r20,r20,-1
    93d4:	1c000336 	bltu	r3,r16,93e4 <__udivdi3+0x4fc>
    93d8:	1900022e 	bgeu	r3,r4,93e4 <__udivdi3+0x4fc>
    93dc:	a53fffc4 	addi	r20,r20,-1
    93e0:	1c07883a 	add	r3,r3,r16
    93e4:	d9400417 	ldw	r5,16(sp)
    93e8:	e5b8983a 	sll	fp,fp,r22
    93ec:	1923c83a 	sub	r17,r3,r4
    93f0:	2804943a 	slli	r2,r5,16
    93f4:	a0a8b03a 	or	r20,r20,r2
    93f8:	dd000315 	stw	r20,12(sp)
    93fc:	003ee106 	br	8f84 <__udivdi3+0x9c>
    9400:	2004943a 	slli	r2,r4,16
    9404:	e5c8983a 	sll	r4,fp,r23
    9408:	48ffffcc 	andi	r3,r9,65535
    940c:	10c5883a 	add	r2,r2,r3
    9410:	20bfc22e 	bgeu	r4,r2,931c <__udivdi3+0x434>
    9414:	40bfffc4 	addi	r2,r8,-1
    9418:	0009883a 	mov	r4,zero
    941c:	003f1306 	br	906c <__udivdi3+0x184>
    9420:	01400204 	movi	r5,8
    9424:	2805883a 	mov	r2,r5
    9428:	003f0306 	br	9038 <__udivdi3+0x150>
    942c:	01400604 	movi	r5,24
    9430:	2805883a 	mov	r2,r5
    9434:	003f0006 	br	9038 <__udivdi3+0x150>
    9438:	01400204 	movi	r5,8
    943c:	2805883a 	mov	r2,r5
    9440:	003ec206 	br	8f4c <__udivdi3+0x64>
    9444:	01400604 	movi	r5,24
    9448:	2805883a 	mov	r2,r5
    944c:	003ebf06 	br	8f4c <__udivdi3+0x64>
    9450:	01400204 	movi	r5,8
    9454:	2805883a 	mov	r2,r5
    9458:	003f1706 	br	90b8 <__udivdi3+0x1d0>
    945c:	01400604 	movi	r5,24
    9460:	2805883a 	mov	r2,r5
    9464:	003f1406 	br	90b8 <__udivdi3+0x1d0>
    9468:	89ff962e 	bgeu	r17,r7,92c4 <__udivdi3+0x3dc>
    946c:	8d63883a 	add	r17,r17,r21
    9470:	843fffc4 	addi	r16,r16,-1
    9474:	003f9306 	br	92c4 <__udivdi3+0x3dc>
    9478:	147f802e 	bgeu	r2,r17,927c <__udivdi3+0x394>
    947c:	a53fffc4 	addi	r20,r20,-1
    9480:	1545883a 	add	r2,r2,r21
    9484:	003f7d06 	br	927c <__udivdi3+0x394>
    9488:	a53fffc4 	addi	r20,r20,-1
    948c:	003ede06 	br	9008 <__udivdi3+0x120>
    9490:	b5bfffc4 	addi	r22,r22,-1
    9494:	1405883a 	add	r2,r2,r16
    9498:	003f2806 	br	913c <__udivdi3+0x254>
    949c:	a53fffc4 	addi	r20,r20,-1
    94a0:	003f3706 	br	9180 <__udivdi3+0x298>
    94a4:	147fbb2e 	bgeu	r2,r17,9394 <__udivdi3+0x4ac>
    94a8:	297fffc4 	addi	r5,r5,-1
    94ac:	1405883a 	add	r2,r2,r16
    94b0:	d9400415 	stw	r5,16(sp)
    94b4:	003fb706 	br	9394 <__udivdi3+0x4ac>
    94b8:	b5bfffc4 	addi	r22,r22,-1
    94bc:	1405883a 	add	r2,r2,r16
    94c0:	003ec006 	br	8fc4 <__udivdi3+0xdc>

000094c4 <__umoddi3>:
    94c4:	defff104 	addi	sp,sp,-60
    94c8:	dd800b15 	stw	r22,44(sp)
    94cc:	dd000915 	stw	r20,36(sp)
    94d0:	dc000515 	stw	r16,20(sp)
    94d4:	dfc00e15 	stw	ra,56(sp)
    94d8:	df000d15 	stw	fp,52(sp)
    94dc:	ddc00c15 	stw	r23,48(sp)
    94e0:	dd400a15 	stw	r21,40(sp)
    94e4:	dcc00815 	stw	r19,32(sp)
    94e8:	dc800715 	stw	r18,28(sp)
    94ec:	dc400615 	stw	r17,24(sp)
    94f0:	3021883a 	mov	r16,r6
    94f4:	202d883a 	mov	r22,r4
    94f8:	2829883a 	mov	r20,r5
    94fc:	38002b1e 	bne	r7,zero,95ac <__umoddi3+0xe8>
    9500:	29805036 	bltu	r5,r6,9644 <__umoddi3+0x180>
    9504:	30008a26 	beq	r6,zero,9730 <__umoddi3+0x26c>
    9508:	00bfffd4 	movui	r2,65535
    950c:	14008236 	bltu	r2,r16,9718 <__umoddi3+0x254>
    9510:	00803fc4 	movi	r2,255
    9514:	14013636 	bltu	r2,r16,99f0 <__umoddi3+0x52c>
    9518:	000b883a 	mov	r5,zero
    951c:	0005883a 	mov	r2,zero
    9520:	8084d83a 	srl	r2,r16,r2
    9524:	01000074 	movhi	r4,1
    9528:	2137bf04 	addi	r4,r4,-8452
    952c:	01800804 	movi	r6,32
    9530:	1105883a 	add	r2,r2,r4
    9534:	10c00003 	ldbu	r3,0(r2)
    9538:	28c7883a 	add	r3,r5,r3
    953c:	30efc83a 	sub	r23,r6,r3
    9540:	b800941e 	bne	r23,zero,9794 <__umoddi3+0x2d0>
    9544:	802ad43a 	srli	r21,r16,16
    9548:	a423c83a 	sub	r17,r20,r16
    954c:	0039883a 	mov	fp,zero
    9550:	853fffcc 	andi	r20,r16,65535
    9554:	8809883a 	mov	r4,r17
    9558:	a80b883a 	mov	r5,r21
    955c:	00019b00 	call	19b0 <__udivsi3>
    9560:	8809883a 	mov	r4,r17
    9564:	a80b883a 	mov	r5,r21
    9568:	a0a3383a 	mul	r17,r20,r2
    956c:	00019b80 	call	19b8 <__umodsi3>
    9570:	1004943a 	slli	r2,r2,16
    9574:	b006d43a 	srli	r3,r22,16
    9578:	10c4b03a 	or	r2,r2,r3
    957c:	1440032e 	bgeu	r2,r17,958c <__umoddi3+0xc8>
    9580:	1405883a 	add	r2,r2,r16
    9584:	14000136 	bltu	r2,r16,958c <__umoddi3+0xc8>
    9588:	14413536 	bltu	r2,r17,9a60 <__umoddi3+0x59c>
    958c:	1463c83a 	sub	r17,r2,r17
    9590:	8809883a 	mov	r4,r17
    9594:	a80b883a 	mov	r5,r21
    9598:	00019b00 	call	19b0 <__udivsi3>
    959c:	8809883a 	mov	r4,r17
    95a0:	a0a3383a 	mul	r17,r20,r2
    95a4:	a80b883a 	mov	r5,r21
    95a8:	00004d06 	br	96e0 <__umoddi3+0x21c>
    95ac:	380d883a 	mov	r6,r7
    95b0:	29c0102e 	bgeu	r5,r7,95f4 <__umoddi3+0x130>
    95b4:	2011883a 	mov	r8,r4
    95b8:	2813883a 	mov	r9,r5
    95bc:	4005883a 	mov	r2,r8
    95c0:	4807883a 	mov	r3,r9
    95c4:	dfc00e17 	ldw	ra,56(sp)
    95c8:	df000d17 	ldw	fp,52(sp)
    95cc:	ddc00c17 	ldw	r23,48(sp)
    95d0:	dd800b17 	ldw	r22,44(sp)
    95d4:	dd400a17 	ldw	r21,40(sp)
    95d8:	dd000917 	ldw	r20,36(sp)
    95dc:	dcc00817 	ldw	r19,32(sp)
    95e0:	dc800717 	ldw	r18,28(sp)
    95e4:	dc400617 	ldw	r17,24(sp)
    95e8:	dc000517 	ldw	r16,20(sp)
    95ec:	dec00f04 	addi	sp,sp,60
    95f0:	f800283a 	ret
    95f4:	00bfffd4 	movui	r2,65535
    95f8:	11c05a36 	bltu	r2,r7,9764 <__umoddi3+0x2a0>
    95fc:	00803fc4 	movi	r2,255
    9600:	11c0fe36 	bltu	r2,r7,99fc <__umoddi3+0x538>
    9604:	000b883a 	mov	r5,zero
    9608:	0005883a 	mov	r2,zero
    960c:	3084d83a 	srl	r2,r6,r2
    9610:	01000074 	movhi	r4,1
    9614:	2137bf04 	addi	r4,r4,-8452
    9618:	01c00804 	movi	r7,32
    961c:	1105883a 	add	r2,r2,r4
    9620:	10c00003 	ldbu	r3,0(r2)
    9624:	28c7883a 	add	r3,r5,r3
    9628:	38ebc83a 	sub	r21,r7,r3
    962c:	a800851e 	bne	r21,zero,9844 <__umoddi3+0x380>
    9630:	35005236 	bltu	r6,r20,977c <__umoddi3+0x2b8>
    9634:	b400512e 	bgeu	r22,r16,977c <__umoddi3+0x2b8>
    9638:	b011883a 	mov	r8,r22
    963c:	a013883a 	mov	r9,r20
    9640:	003fde06 	br	95bc <__umoddi3+0xf8>
    9644:	00bfffd4 	movui	r2,65535
    9648:	11804036 	bltu	r2,r6,974c <__umoddi3+0x288>
    964c:	00803fc4 	movi	r2,255
    9650:	1180ed36 	bltu	r2,r6,9a08 <__umoddi3+0x544>
    9654:	000b883a 	mov	r5,zero
    9658:	0005883a 	mov	r2,zero
    965c:	8084d83a 	srl	r2,r16,r2
    9660:	01000074 	movhi	r4,1
    9664:	2137bf04 	addi	r4,r4,-8452
    9668:	01800804 	movi	r6,32
    966c:	1105883a 	add	r2,r2,r4
    9670:	10c00003 	ldbu	r3,0(r2)
    9674:	28c7883a 	add	r3,r5,r3
    9678:	30c7c83a 	sub	r3,r6,r3
    967c:	1800bf1e 	bne	r3,zero,997c <__umoddi3+0x4b8>
    9680:	0039883a 	mov	fp,zero
    9684:	802ad43a 	srli	r21,r16,16
    9688:	a009883a 	mov	r4,r20
    968c:	85ffffcc 	andi	r23,r16,65535
    9690:	a80b883a 	mov	r5,r21
    9694:	00019b00 	call	19b0 <__udivsi3>
    9698:	a009883a 	mov	r4,r20
    969c:	a80b883a 	mov	r5,r21
    96a0:	b8a3383a 	mul	r17,r23,r2
    96a4:	00019b80 	call	19b8 <__umodsi3>
    96a8:	1004943a 	slli	r2,r2,16
    96ac:	b006d43a 	srli	r3,r22,16
    96b0:	10c4b03a 	or	r2,r2,r3
    96b4:	1440032e 	bgeu	r2,r17,96c4 <__umoddi3+0x200>
    96b8:	1405883a 	add	r2,r2,r16
    96bc:	14000136 	bltu	r2,r16,96c4 <__umoddi3+0x200>
    96c0:	1440e536 	bltu	r2,r17,9a58 <__umoddi3+0x594>
    96c4:	1463c83a 	sub	r17,r2,r17
    96c8:	8809883a 	mov	r4,r17
    96cc:	a80b883a 	mov	r5,r21
    96d0:	00019b00 	call	19b0 <__udivsi3>
    96d4:	8809883a 	mov	r4,r17
    96d8:	b8a3383a 	mul	r17,r23,r2
    96dc:	a80b883a 	mov	r5,r21
    96e0:	00019b80 	call	19b8 <__umodsi3>
    96e4:	1004943a 	slli	r2,r2,16
    96e8:	b0ffffcc 	andi	r3,r22,65535
    96ec:	10c4b03a 	or	r2,r2,r3
    96f0:	1440042e 	bgeu	r2,r17,9704 <__umoddi3+0x240>
    96f4:	1405883a 	add	r2,r2,r16
    96f8:	14000236 	bltu	r2,r16,9704 <__umoddi3+0x240>
    96fc:	1440012e 	bgeu	r2,r17,9704 <__umoddi3+0x240>
    9700:	1405883a 	add	r2,r2,r16
    9704:	1445c83a 	sub	r2,r2,r17
    9708:	1724d83a 	srl	r18,r2,fp
    970c:	0013883a 	mov	r9,zero
    9710:	9011883a 	mov	r8,r18
    9714:	003fa906 	br	95bc <__umoddi3+0xf8>
    9718:	00804034 	movhi	r2,256
    971c:	10bfffc4 	addi	r2,r2,-1
    9720:	1400b036 	bltu	r2,r16,99e4 <__umoddi3+0x520>
    9724:	01400404 	movi	r5,16
    9728:	2805883a 	mov	r2,r5
    972c:	003f7c06 	br	9520 <__umoddi3+0x5c>
    9730:	01000044 	movi	r4,1
    9734:	000b883a 	mov	r5,zero
    9738:	00019b00 	call	19b0 <__udivsi3>
    973c:	1021883a 	mov	r16,r2
    9740:	00bfffd4 	movui	r2,65535
    9744:	143ff436 	bltu	r2,r16,9718 <__umoddi3+0x254>
    9748:	003f7106 	br	9510 <__umoddi3+0x4c>
    974c:	00804034 	movhi	r2,256
    9750:	10bfffc4 	addi	r2,r2,-1
    9754:	1180af36 	bltu	r2,r6,9a14 <__umoddi3+0x550>
    9758:	01400404 	movi	r5,16
    975c:	2805883a 	mov	r2,r5
    9760:	003fbe06 	br	965c <__umoddi3+0x198>
    9764:	00804034 	movhi	r2,256
    9768:	10bfffc4 	addi	r2,r2,-1
    976c:	11c0ac36 	bltu	r2,r7,9a20 <__umoddi3+0x55c>
    9770:	01400404 	movi	r5,16
    9774:	2805883a 	mov	r2,r5
    9778:	003fa406 	br	960c <__umoddi3+0x148>
    977c:	b409c83a 	sub	r4,r22,r16
    9780:	b105803a 	cmpltu	r2,r22,r4
    9784:	a187c83a 	sub	r3,r20,r6
    9788:	18a9c83a 	sub	r20,r3,r2
    978c:	202d883a 	mov	r22,r4
    9790:	003fa906 	br	9638 <__umoddi3+0x174>
    9794:	85e0983a 	sll	r16,r16,r23
    9798:	35c5c83a 	sub	r2,r6,r23
    979c:	a0a2d83a 	srl	r17,r20,r2
    97a0:	802ad43a 	srli	r21,r16,16
    97a4:	b084d83a 	srl	r2,r22,r2
    97a8:	a5c6983a 	sll	r3,r20,r23
    97ac:	8809883a 	mov	r4,r17
    97b0:	a80b883a 	mov	r5,r21
    97b4:	1886b03a 	or	r3,r3,r2
    97b8:	d8c00115 	stw	r3,4(sp)
    97bc:	853fffcc 	andi	r20,r16,65535
    97c0:	00019b00 	call	19b0 <__udivsi3>
    97c4:	8809883a 	mov	r4,r17
    97c8:	a80b883a 	mov	r5,r21
    97cc:	a0a3383a 	mul	r17,r20,r2
    97d0:	00019b80 	call	19b8 <__umodsi3>
    97d4:	d9000117 	ldw	r4,4(sp)
    97d8:	1004943a 	slli	r2,r2,16
    97dc:	b839883a 	mov	fp,r23
    97e0:	2006d43a 	srli	r3,r4,16
    97e4:	10c4b03a 	or	r2,r2,r3
    97e8:	1440022e 	bgeu	r2,r17,97f4 <__umoddi3+0x330>
    97ec:	1405883a 	add	r2,r2,r16
    97f0:	1400962e 	bgeu	r2,r16,9a4c <__umoddi3+0x588>
    97f4:	1463c83a 	sub	r17,r2,r17
    97f8:	8809883a 	mov	r4,r17
    97fc:	a80b883a 	mov	r5,r21
    9800:	00019b00 	call	19b0 <__udivsi3>
    9804:	8809883a 	mov	r4,r17
    9808:	a80b883a 	mov	r5,r21
    980c:	a0a3383a 	mul	r17,r20,r2
    9810:	00019b80 	call	19b8 <__umodsi3>
    9814:	d9400117 	ldw	r5,4(sp)
    9818:	1004943a 	slli	r2,r2,16
    981c:	28ffffcc 	andi	r3,r5,65535
    9820:	10c4b03a 	or	r2,r2,r3
    9824:	1440042e 	bgeu	r2,r17,9838 <__umoddi3+0x374>
    9828:	1405883a 	add	r2,r2,r16
    982c:	14000236 	bltu	r2,r16,9838 <__umoddi3+0x374>
    9830:	1440012e 	bgeu	r2,r17,9838 <__umoddi3+0x374>
    9834:	1405883a 	add	r2,r2,r16
    9838:	b5ec983a 	sll	r22,r22,r23
    983c:	1463c83a 	sub	r17,r2,r17
    9840:	003f4406 	br	9554 <__umoddi3+0x90>
    9844:	3d4fc83a 	sub	r7,r7,r21
    9848:	3546983a 	sll	r3,r6,r21
    984c:	81c4d83a 	srl	r2,r16,r7
    9850:	a1e2d83a 	srl	r17,r20,r7
    9854:	a54c983a 	sll	r6,r20,r21
    9858:	18aeb03a 	or	r23,r3,r2
    985c:	b828d43a 	srli	r20,r23,16
    9860:	b1c4d83a 	srl	r2,r22,r7
    9864:	8809883a 	mov	r4,r17
    9868:	a00b883a 	mov	r5,r20
    986c:	308cb03a 	or	r6,r6,r2
    9870:	d9c00315 	stw	r7,12(sp)
    9874:	d9800215 	stw	r6,8(sp)
    9878:	00019b00 	call	19b0 <__udivsi3>
    987c:	8809883a 	mov	r4,r17
    9880:	a00b883a 	mov	r5,r20
    9884:	1039883a 	mov	fp,r2
    9888:	00019b80 	call	19b8 <__umodsi3>
    988c:	b8ffffcc 	andi	r3,r23,65535
    9890:	d8c00415 	stw	r3,16(sp)
    9894:	d9000217 	ldw	r4,8(sp)
    9898:	d9400417 	ldw	r5,16(sp)
    989c:	1004943a 	slli	r2,r2,16
    98a0:	2006d43a 	srli	r3,r4,16
    98a4:	8560983a 	sll	r16,r16,r21
    98a8:	2f23383a 	mul	r17,r5,fp
    98ac:	10c4b03a 	or	r2,r2,r3
    98b0:	dc000015 	stw	r16,0(sp)
    98b4:	b56c983a 	sll	r22,r22,r21
    98b8:	1440032e 	bgeu	r2,r17,98c8 <__umoddi3+0x404>
    98bc:	15c5883a 	add	r2,r2,r23
    98c0:	e73fffc4 	addi	fp,fp,-1
    98c4:	15c05d2e 	bgeu	r2,r23,9a3c <__umoddi3+0x578>
    98c8:	1463c83a 	sub	r17,r2,r17
    98cc:	8809883a 	mov	r4,r17
    98d0:	a00b883a 	mov	r5,r20
    98d4:	00019b00 	call	19b0 <__udivsi3>
    98d8:	8809883a 	mov	r4,r17
    98dc:	a00b883a 	mov	r5,r20
    98e0:	1021883a 	mov	r16,r2
    98e4:	00019b80 	call	19b8 <__umodsi3>
    98e8:	d8c00417 	ldw	r3,16(sp)
    98ec:	d9000217 	ldw	r4,8(sp)
    98f0:	1004943a 	slli	r2,r2,16
    98f4:	1c23383a 	mul	r17,r3,r16
    98f8:	20ffffcc 	andi	r3,r4,65535
    98fc:	10ceb03a 	or	r7,r2,r3
    9900:	3c40032e 	bgeu	r7,r17,9910 <__umoddi3+0x44c>
    9904:	3dcf883a 	add	r7,r7,r23
    9908:	843fffc4 	addi	r16,r16,-1
    990c:	3dc0472e 	bgeu	r7,r23,9a2c <__umoddi3+0x568>
    9910:	e004943a 	slli	r2,fp,16
    9914:	d9400017 	ldw	r5,0(sp)
    9918:	3c4fc83a 	sub	r7,r7,r17
    991c:	8084b03a 	or	r2,r16,r2
    9920:	28ffffcc 	andi	r3,r5,65535
    9924:	280cd43a 	srli	r6,r5,16
    9928:	100ad43a 	srli	r5,r2,16
    992c:	10bfffcc 	andi	r2,r2,65535
    9930:	10d1383a 	mul	r8,r2,r3
    9934:	28c7383a 	mul	r3,r5,r3
    9938:	1185383a 	mul	r2,r2,r6
    993c:	4008d43a 	srli	r4,r8,16
    9940:	298b383a 	mul	r5,r5,r6
    9944:	10c5883a 	add	r2,r2,r3
    9948:	2089883a 	add	r4,r4,r2
    994c:	20c0022e 	bgeu	r4,r3,9958 <__umoddi3+0x494>
    9950:	00800074 	movhi	r2,1
    9954:	288b883a 	add	r5,r5,r2
    9958:	2004d43a 	srli	r2,r4,16
    995c:	2008943a 	slli	r4,r4,16
    9960:	40ffffcc 	andi	r3,r8,65535
    9964:	288b883a 	add	r5,r5,r2
    9968:	20c9883a 	add	r4,r4,r3
    996c:	39400b36 	bltu	r7,r5,999c <__umoddi3+0x4d8>
    9970:	39403d26 	beq	r7,r5,9a68 <__umoddi3+0x5a4>
    9974:	394bc83a 	sub	r5,r7,r5
    9978:	00000f06 	br	99b8 <__umoddi3+0x4f4>
    997c:	30c5c83a 	sub	r2,r6,r3
    9980:	1839883a 	mov	fp,r3
    9984:	b084d83a 	srl	r2,r22,r2
    9988:	a0c6983a 	sll	r3,r20,r3
    998c:	8720983a 	sll	r16,r16,fp
    9990:	b72c983a 	sll	r22,r22,fp
    9994:	18a8b03a 	or	r20,r3,r2
    9998:	003f3a06 	br	9684 <__umoddi3+0x1c0>
    999c:	d8c00017 	ldw	r3,0(sp)
    99a0:	20c5c83a 	sub	r2,r4,r3
    99a4:	2089803a 	cmpltu	r4,r4,r2
    99a8:	2dc7c83a 	sub	r3,r5,r23
    99ac:	1907c83a 	sub	r3,r3,r4
    99b0:	38cbc83a 	sub	r5,r7,r3
    99b4:	1009883a 	mov	r4,r2
    99b8:	b105c83a 	sub	r2,r22,r4
    99bc:	b087803a 	cmpltu	r3,r22,r2
    99c0:	28c7c83a 	sub	r3,r5,r3
    99c4:	d9400317 	ldw	r5,12(sp)
    99c8:	1544d83a 	srl	r2,r2,r21
    99cc:	1948983a 	sll	r4,r3,r5
    99d0:	1d46d83a 	srl	r3,r3,r21
    99d4:	20a4b03a 	or	r18,r4,r2
    99d8:	9011883a 	mov	r8,r18
    99dc:	1813883a 	mov	r9,r3
    99e0:	003ef606 	br	95bc <__umoddi3+0xf8>
    99e4:	01400604 	movi	r5,24
    99e8:	2805883a 	mov	r2,r5
    99ec:	003ecc06 	br	9520 <__umoddi3+0x5c>
    99f0:	01400204 	movi	r5,8
    99f4:	2805883a 	mov	r2,r5
    99f8:	003ec906 	br	9520 <__umoddi3+0x5c>
    99fc:	01400204 	movi	r5,8
    9a00:	2805883a 	mov	r2,r5
    9a04:	003f0106 	br	960c <__umoddi3+0x148>
    9a08:	01400204 	movi	r5,8
    9a0c:	2805883a 	mov	r2,r5
    9a10:	003f1206 	br	965c <__umoddi3+0x198>
    9a14:	01400604 	movi	r5,24
    9a18:	2805883a 	mov	r2,r5
    9a1c:	003f0f06 	br	965c <__umoddi3+0x198>
    9a20:	01400604 	movi	r5,24
    9a24:	2805883a 	mov	r2,r5
    9a28:	003ef806 	br	960c <__umoddi3+0x148>
    9a2c:	3c7fb82e 	bgeu	r7,r17,9910 <__umoddi3+0x44c>
    9a30:	843fffc4 	addi	r16,r16,-1
    9a34:	3dcf883a 	add	r7,r7,r23
    9a38:	003fb506 	br	9910 <__umoddi3+0x44c>
    9a3c:	147fa22e 	bgeu	r2,r17,98c8 <__umoddi3+0x404>
    9a40:	e73fffc4 	addi	fp,fp,-1
    9a44:	15c5883a 	add	r2,r2,r23
    9a48:	003f9f06 	br	98c8 <__umoddi3+0x404>
    9a4c:	147f692e 	bgeu	r2,r17,97f4 <__umoddi3+0x330>
    9a50:	1405883a 	add	r2,r2,r16
    9a54:	003f6706 	br	97f4 <__umoddi3+0x330>
    9a58:	1405883a 	add	r2,r2,r16
    9a5c:	003f1906 	br	96c4 <__umoddi3+0x200>
    9a60:	1405883a 	add	r2,r2,r16
    9a64:	003ec906 	br	958c <__umoddi3+0xc8>
    9a68:	b13fcc36 	bltu	r22,r4,999c <__umoddi3+0x4d8>
    9a6c:	000b883a 	mov	r5,zero
    9a70:	003fd106 	br	99b8 <__umoddi3+0x4f4>

00009a74 <_fpadd_parts>:
    9a74:	defff804 	addi	sp,sp,-32
    9a78:	dcc00315 	stw	r19,12(sp)
    9a7c:	2027883a 	mov	r19,r4
    9a80:	21000017 	ldw	r4,0(r4)
    9a84:	00c00044 	movi	r3,1
    9a88:	dd400515 	stw	r21,20(sp)
    9a8c:	dd000415 	stw	r20,16(sp)
    9a90:	ddc00715 	stw	r23,28(sp)
    9a94:	dd800615 	stw	r22,24(sp)
    9a98:	dc800215 	stw	r18,8(sp)
    9a9c:	dc400115 	stw	r17,4(sp)
    9aa0:	dc000015 	stw	r16,0(sp)
    9aa4:	282b883a 	mov	r21,r5
    9aa8:	3029883a 	mov	r20,r6
    9aac:	1900632e 	bgeu	r3,r4,9c3c <_fpadd_parts+0x1c8>
    9ab0:	28800017 	ldw	r2,0(r5)
    9ab4:	1880812e 	bgeu	r3,r2,9cbc <_fpadd_parts+0x248>
    9ab8:	00c00104 	movi	r3,4
    9abc:	20c0dc26 	beq	r4,r3,9e30 <_fpadd_parts+0x3bc>
    9ac0:	10c07e26 	beq	r2,r3,9cbc <_fpadd_parts+0x248>
    9ac4:	00c00084 	movi	r3,2
    9ac8:	10c06726 	beq	r2,r3,9c68 <_fpadd_parts+0x1f4>
    9acc:	20c07b26 	beq	r4,r3,9cbc <_fpadd_parts+0x248>
    9ad0:	9dc00217 	ldw	r23,8(r19)
    9ad4:	28c00217 	ldw	r3,8(r5)
    9ad8:	9c400317 	ldw	r17,12(r19)
    9adc:	2bc00317 	ldw	r15,12(r5)
    9ae0:	b8cdc83a 	sub	r6,r23,r3
    9ae4:	9c800417 	ldw	r18,16(r19)
    9ae8:	2c000417 	ldw	r16,16(r5)
    9aec:	3009883a 	mov	r4,r6
    9af0:	30009716 	blt	r6,zero,9d50 <_fpadd_parts+0x2dc>
    9af4:	00800fc4 	movi	r2,63
    9af8:	11806b16 	blt	r2,r6,9ca8 <_fpadd_parts+0x234>
    9afc:	0100a40e 	bge	zero,r4,9d90 <_fpadd_parts+0x31c>
    9b00:	35bff804 	addi	r22,r6,-32
    9b04:	b000bc16 	blt	r22,zero,9df8 <_fpadd_parts+0x384>
    9b08:	8596d83a 	srl	r11,r16,r22
    9b0c:	0019883a 	mov	r12,zero
    9b10:	0013883a 	mov	r9,zero
    9b14:	01000044 	movi	r4,1
    9b18:	0015883a 	mov	r10,zero
    9b1c:	b000be16 	blt	r22,zero,9e18 <_fpadd_parts+0x3a4>
    9b20:	2590983a 	sll	r8,r4,r22
    9b24:	000f883a 	mov	r7,zero
    9b28:	00bfffc4 	movi	r2,-1
    9b2c:	3889883a 	add	r4,r7,r2
    9b30:	408b883a 	add	r5,r8,r2
    9b34:	21cd803a 	cmpltu	r6,r4,r7
    9b38:	314b883a 	add	r5,r6,r5
    9b3c:	7904703a 	and	r2,r15,r4
    9b40:	8146703a 	and	r3,r16,r5
    9b44:	10c4b03a 	or	r2,r2,r3
    9b48:	10000226 	beq	r2,zero,9b54 <_fpadd_parts+0xe0>
    9b4c:	02400044 	movi	r9,1
    9b50:	0015883a 	mov	r10,zero
    9b54:	5a5eb03a 	or	r15,r11,r9
    9b58:	62a0b03a 	or	r16,r12,r10
    9b5c:	99400117 	ldw	r5,4(r19)
    9b60:	a8800117 	ldw	r2,4(r21)
    9b64:	28806e26 	beq	r5,r2,9d20 <_fpadd_parts+0x2ac>
    9b68:	28006626 	beq	r5,zero,9d04 <_fpadd_parts+0x290>
    9b6c:	7c45c83a 	sub	r2,r15,r17
    9b70:	7889803a 	cmpltu	r4,r15,r2
    9b74:	8487c83a 	sub	r3,r16,r18
    9b78:	1909c83a 	sub	r4,r3,r4
    9b7c:	100d883a 	mov	r6,r2
    9b80:	200f883a 	mov	r7,r4
    9b84:	38007716 	blt	r7,zero,9d64 <_fpadd_parts+0x2f0>
    9b88:	a5c00215 	stw	r23,8(r20)
    9b8c:	a1c00415 	stw	r7,16(r20)
    9b90:	a0000115 	stw	zero,4(r20)
    9b94:	a1800315 	stw	r6,12(r20)
    9b98:	a2000317 	ldw	r8,12(r20)
    9b9c:	a2400417 	ldw	r9,16(r20)
    9ba0:	00bfffc4 	movi	r2,-1
    9ba4:	408b883a 	add	r5,r8,r2
    9ba8:	2a09803a 	cmpltu	r4,r5,r8
    9bac:	488d883a 	add	r6,r9,r2
    9bb0:	01c40034 	movhi	r7,4096
    9bb4:	39ffffc4 	addi	r7,r7,-1
    9bb8:	218d883a 	add	r6,r4,r6
    9bbc:	39801736 	bltu	r7,r6,9c1c <_fpadd_parts+0x1a8>
    9bc0:	31c06526 	beq	r6,r7,9d58 <_fpadd_parts+0x2e4>
    9bc4:	a3000217 	ldw	r12,8(r20)
    9bc8:	4209883a 	add	r4,r8,r8
    9bcc:	00bfffc4 	movi	r2,-1
    9bd0:	220f803a 	cmpltu	r7,r4,r8
    9bd4:	4a4b883a 	add	r5,r9,r9
    9bd8:	394f883a 	add	r7,r7,r5
    9bdc:	2095883a 	add	r10,r4,r2
    9be0:	3897883a 	add	r11,r7,r2
    9be4:	510d803a 	cmpltu	r6,r10,r4
    9be8:	6099883a 	add	r12,r12,r2
    9bec:	32d7883a 	add	r11,r6,r11
    9bf0:	00840034 	movhi	r2,4096
    9bf4:	10bfffc4 	addi	r2,r2,-1
    9bf8:	2011883a 	mov	r8,r4
    9bfc:	3813883a 	mov	r9,r7
    9c00:	a1000315 	stw	r4,12(r20)
    9c04:	a1c00415 	stw	r7,16(r20)
    9c08:	a3000215 	stw	r12,8(r20)
    9c0c:	12c00336 	bltu	r2,r11,9c1c <_fpadd_parts+0x1a8>
    9c10:	58bfed1e 	bne	r11,r2,9bc8 <_fpadd_parts+0x154>
    9c14:	00bfff84 	movi	r2,-2
    9c18:	12bfeb2e 	bgeu	r2,r10,9bc8 <_fpadd_parts+0x154>
    9c1c:	a2800417 	ldw	r10,16(r20)
    9c20:	008000c4 	movi	r2,3
    9c24:	00c80034 	movhi	r3,8192
    9c28:	18ffffc4 	addi	r3,r3,-1
    9c2c:	a2400317 	ldw	r9,12(r20)
    9c30:	a0800015 	stw	r2,0(r20)
    9c34:	1a802336 	bltu	r3,r10,9cc4 <_fpadd_parts+0x250>
    9c38:	a027883a 	mov	r19,r20
    9c3c:	9805883a 	mov	r2,r19
    9c40:	ddc00717 	ldw	r23,28(sp)
    9c44:	dd800617 	ldw	r22,24(sp)
    9c48:	dd400517 	ldw	r21,20(sp)
    9c4c:	dd000417 	ldw	r20,16(sp)
    9c50:	dcc00317 	ldw	r19,12(sp)
    9c54:	dc800217 	ldw	r18,8(sp)
    9c58:	dc400117 	ldw	r17,4(sp)
    9c5c:	dc000017 	ldw	r16,0(sp)
    9c60:	dec00804 	addi	sp,sp,32
    9c64:	f800283a 	ret
    9c68:	20fff41e 	bne	r4,r3,9c3c <_fpadd_parts+0x1c8>
    9c6c:	31000015 	stw	r4,0(r6)
    9c70:	98800117 	ldw	r2,4(r19)
    9c74:	30800115 	stw	r2,4(r6)
    9c78:	98c00217 	ldw	r3,8(r19)
    9c7c:	30c00215 	stw	r3,8(r6)
    9c80:	98800317 	ldw	r2,12(r19)
    9c84:	30800315 	stw	r2,12(r6)
    9c88:	98c00417 	ldw	r3,16(r19)
    9c8c:	30c00415 	stw	r3,16(r6)
    9c90:	98800117 	ldw	r2,4(r19)
    9c94:	28c00117 	ldw	r3,4(r5)
    9c98:	3027883a 	mov	r19,r6
    9c9c:	10c4703a 	and	r2,r2,r3
    9ca0:	30800115 	stw	r2,4(r6)
    9ca4:	003fe506 	br	9c3c <_fpadd_parts+0x1c8>
    9ca8:	1dc02616 	blt	r3,r23,9d44 <_fpadd_parts+0x2d0>
    9cac:	0023883a 	mov	r17,zero
    9cb0:	182f883a 	mov	r23,r3
    9cb4:	0025883a 	mov	r18,zero
    9cb8:	003fa806 	br	9b5c <_fpadd_parts+0xe8>
    9cbc:	a827883a 	mov	r19,r21
    9cc0:	003fde06 	br	9c3c <_fpadd_parts+0x1c8>
    9cc4:	01800044 	movi	r6,1
    9cc8:	500497fa 	slli	r2,r10,31
    9ccc:	4808d07a 	srli	r4,r9,1
    9cd0:	518ad83a 	srl	r5,r10,r6
    9cd4:	a2000217 	ldw	r8,8(r20)
    9cd8:	1108b03a 	or	r4,r2,r4
    9cdc:	0007883a 	mov	r3,zero
    9ce0:	4984703a 	and	r2,r9,r6
    9ce4:	208cb03a 	or	r6,r4,r2
    9ce8:	28ceb03a 	or	r7,r5,r3
    9cec:	42000044 	addi	r8,r8,1
    9cf0:	a027883a 	mov	r19,r20
    9cf4:	a1c00415 	stw	r7,16(r20)
    9cf8:	a2000215 	stw	r8,8(r20)
    9cfc:	a1800315 	stw	r6,12(r20)
    9d00:	003fce06 	br	9c3c <_fpadd_parts+0x1c8>
    9d04:	8bc5c83a 	sub	r2,r17,r15
    9d08:	8889803a 	cmpltu	r4,r17,r2
    9d0c:	9407c83a 	sub	r3,r18,r16
    9d10:	1909c83a 	sub	r4,r3,r4
    9d14:	100d883a 	mov	r6,r2
    9d18:	200f883a 	mov	r7,r4
    9d1c:	003f9906 	br	9b84 <_fpadd_parts+0x110>
    9d20:	7c45883a 	add	r2,r15,r17
    9d24:	13c9803a 	cmpltu	r4,r2,r15
    9d28:	8487883a 	add	r3,r16,r18
    9d2c:	20c9883a 	add	r4,r4,r3
    9d30:	a1400115 	stw	r5,4(r20)
    9d34:	a5c00215 	stw	r23,8(r20)
    9d38:	a0800315 	stw	r2,12(r20)
    9d3c:	a1000415 	stw	r4,16(r20)
    9d40:	003fb606 	br	9c1c <_fpadd_parts+0x1a8>
    9d44:	001f883a 	mov	r15,zero
    9d48:	0021883a 	mov	r16,zero
    9d4c:	003f8306 	br	9b5c <_fpadd_parts+0xe8>
    9d50:	018dc83a 	sub	r6,zero,r6
    9d54:	003f6706 	br	9af4 <_fpadd_parts+0x80>
    9d58:	00bfff84 	movi	r2,-2
    9d5c:	117faf36 	bltu	r2,r5,9c1c <_fpadd_parts+0x1a8>
    9d60:	003f9806 	br	9bc4 <_fpadd_parts+0x150>
    9d64:	0005883a 	mov	r2,zero
    9d68:	1189c83a 	sub	r4,r2,r6
    9d6c:	1105803a 	cmpltu	r2,r2,r4
    9d70:	01cbc83a 	sub	r5,zero,r7
    9d74:	2885c83a 	sub	r2,r5,r2
    9d78:	01800044 	movi	r6,1
    9d7c:	a1800115 	stw	r6,4(r20)
    9d80:	a5c00215 	stw	r23,8(r20)
    9d84:	a1000315 	stw	r4,12(r20)
    9d88:	a0800415 	stw	r2,16(r20)
    9d8c:	003f8206 	br	9b98 <_fpadd_parts+0x124>
    9d90:	203f7226 	beq	r4,zero,9b5c <_fpadd_parts+0xe8>
    9d94:	35bff804 	addi	r22,r6,-32
    9d98:	b9af883a 	add	r23,r23,r6
    9d9c:	b0003116 	blt	r22,zero,9e64 <_fpadd_parts+0x3f0>
    9da0:	959ad83a 	srl	r13,r18,r22
    9da4:	001d883a 	mov	r14,zero
    9da8:	000f883a 	mov	r7,zero
    9dac:	01000044 	movi	r4,1
    9db0:	0011883a 	mov	r8,zero
    9db4:	b0002516 	blt	r22,zero,9e4c <_fpadd_parts+0x3d8>
    9db8:	2594983a 	sll	r10,r4,r22
    9dbc:	0013883a 	mov	r9,zero
    9dc0:	00bfffc4 	movi	r2,-1
    9dc4:	4889883a 	add	r4,r9,r2
    9dc8:	508b883a 	add	r5,r10,r2
    9dcc:	224d803a 	cmpltu	r6,r4,r9
    9dd0:	314b883a 	add	r5,r6,r5
    9dd4:	8904703a 	and	r2,r17,r4
    9dd8:	9146703a 	and	r3,r18,r5
    9ddc:	10c4b03a 	or	r2,r2,r3
    9de0:	10000226 	beq	r2,zero,9dec <_fpadd_parts+0x378>
    9de4:	01c00044 	movi	r7,1
    9de8:	0011883a 	mov	r8,zero
    9dec:	69e2b03a 	or	r17,r13,r7
    9df0:	7224b03a 	or	r18,r14,r8
    9df4:	003f5906 	br	9b5c <_fpadd_parts+0xe8>
    9df8:	8407883a 	add	r3,r16,r16
    9dfc:	008007c4 	movi	r2,31
    9e00:	1185c83a 	sub	r2,r2,r6
    9e04:	1886983a 	sll	r3,r3,r2
    9e08:	7996d83a 	srl	r11,r15,r6
    9e0c:	8198d83a 	srl	r12,r16,r6
    9e10:	1ad6b03a 	or	r11,r3,r11
    9e14:	003f3e06 	br	9b10 <_fpadd_parts+0x9c>
    9e18:	2006d07a 	srli	r3,r4,1
    9e1c:	008007c4 	movi	r2,31
    9e20:	1185c83a 	sub	r2,r2,r6
    9e24:	1890d83a 	srl	r8,r3,r2
    9e28:	218e983a 	sll	r7,r4,r6
    9e2c:	003f3e06 	br	9b28 <_fpadd_parts+0xb4>
    9e30:	113f821e 	bne	r2,r4,9c3c <_fpadd_parts+0x1c8>
    9e34:	28c00117 	ldw	r3,4(r5)
    9e38:	98800117 	ldw	r2,4(r19)
    9e3c:	10ff7f26 	beq	r2,r3,9c3c <_fpadd_parts+0x1c8>
    9e40:	04c00074 	movhi	r19,1
    9e44:	9cf7ba04 	addi	r19,r19,-8472
    9e48:	003f7c06 	br	9c3c <_fpadd_parts+0x1c8>
    9e4c:	2006d07a 	srli	r3,r4,1
    9e50:	008007c4 	movi	r2,31
    9e54:	1185c83a 	sub	r2,r2,r6
    9e58:	1894d83a 	srl	r10,r3,r2
    9e5c:	2192983a 	sll	r9,r4,r6
    9e60:	003fd706 	br	9dc0 <_fpadd_parts+0x34c>
    9e64:	9487883a 	add	r3,r18,r18
    9e68:	008007c4 	movi	r2,31
    9e6c:	1185c83a 	sub	r2,r2,r6
    9e70:	1886983a 	sll	r3,r3,r2
    9e74:	899ad83a 	srl	r13,r17,r6
    9e78:	919cd83a 	srl	r14,r18,r6
    9e7c:	1b5ab03a 	or	r13,r3,r13
    9e80:	003fc906 	br	9da8 <_fpadd_parts+0x334>

00009e84 <__subdf3>:
    9e84:	deffea04 	addi	sp,sp,-88
    9e88:	dcc01415 	stw	r19,80(sp)
    9e8c:	dcc00404 	addi	r19,sp,16
    9e90:	2011883a 	mov	r8,r4
    9e94:	2813883a 	mov	r9,r5
    9e98:	dc401315 	stw	r17,76(sp)
    9e9c:	d809883a 	mov	r4,sp
    9ea0:	980b883a 	mov	r5,r19
    9ea4:	dc400904 	addi	r17,sp,36
    9ea8:	dfc01515 	stw	ra,84(sp)
    9eac:	da400115 	stw	r9,4(sp)
    9eb0:	d9c00315 	stw	r7,12(sp)
    9eb4:	da000015 	stw	r8,0(sp)
    9eb8:	d9800215 	stw	r6,8(sp)
    9ebc:	000afcc0 	call	afcc <__unpack_d>
    9ec0:	d9000204 	addi	r4,sp,8
    9ec4:	880b883a 	mov	r5,r17
    9ec8:	000afcc0 	call	afcc <__unpack_d>
    9ecc:	d8800a17 	ldw	r2,40(sp)
    9ed0:	880b883a 	mov	r5,r17
    9ed4:	9809883a 	mov	r4,r19
    9ed8:	d9800e04 	addi	r6,sp,56
    9edc:	1080005c 	xori	r2,r2,1
    9ee0:	d8800a15 	stw	r2,40(sp)
    9ee4:	0009a740 	call	9a74 <_fpadd_parts>
    9ee8:	1009883a 	mov	r4,r2
    9eec:	000acb80 	call	acb8 <__pack_d>
    9ef0:	dfc01517 	ldw	ra,84(sp)
    9ef4:	dcc01417 	ldw	r19,80(sp)
    9ef8:	dc401317 	ldw	r17,76(sp)
    9efc:	dec01604 	addi	sp,sp,88
    9f00:	f800283a 	ret

00009f04 <__adddf3>:
    9f04:	deffea04 	addi	sp,sp,-88
    9f08:	dcc01415 	stw	r19,80(sp)
    9f0c:	dcc00404 	addi	r19,sp,16
    9f10:	2011883a 	mov	r8,r4
    9f14:	2813883a 	mov	r9,r5
    9f18:	dc401315 	stw	r17,76(sp)
    9f1c:	d809883a 	mov	r4,sp
    9f20:	980b883a 	mov	r5,r19
    9f24:	dc400904 	addi	r17,sp,36
    9f28:	dfc01515 	stw	ra,84(sp)
    9f2c:	da400115 	stw	r9,4(sp)
    9f30:	d9c00315 	stw	r7,12(sp)
    9f34:	da000015 	stw	r8,0(sp)
    9f38:	d9800215 	stw	r6,8(sp)
    9f3c:	000afcc0 	call	afcc <__unpack_d>
    9f40:	d9000204 	addi	r4,sp,8
    9f44:	880b883a 	mov	r5,r17
    9f48:	000afcc0 	call	afcc <__unpack_d>
    9f4c:	d9800e04 	addi	r6,sp,56
    9f50:	9809883a 	mov	r4,r19
    9f54:	880b883a 	mov	r5,r17
    9f58:	0009a740 	call	9a74 <_fpadd_parts>
    9f5c:	1009883a 	mov	r4,r2
    9f60:	000acb80 	call	acb8 <__pack_d>
    9f64:	dfc01517 	ldw	ra,84(sp)
    9f68:	dcc01417 	ldw	r19,80(sp)
    9f6c:	dc401317 	ldw	r17,76(sp)
    9f70:	dec01604 	addi	sp,sp,88
    9f74:	f800283a 	ret

00009f78 <__muldf3>:
    9f78:	deffe004 	addi	sp,sp,-128
    9f7c:	dc401815 	stw	r17,96(sp)
    9f80:	dc400404 	addi	r17,sp,16
    9f84:	2011883a 	mov	r8,r4
    9f88:	2813883a 	mov	r9,r5
    9f8c:	dc001715 	stw	r16,92(sp)
    9f90:	d809883a 	mov	r4,sp
    9f94:	880b883a 	mov	r5,r17
    9f98:	dc000904 	addi	r16,sp,36
    9f9c:	dfc01f15 	stw	ra,124(sp)
    9fa0:	da400115 	stw	r9,4(sp)
    9fa4:	d9c00315 	stw	r7,12(sp)
    9fa8:	da000015 	stw	r8,0(sp)
    9fac:	d9800215 	stw	r6,8(sp)
    9fb0:	ddc01e15 	stw	r23,120(sp)
    9fb4:	dd801d15 	stw	r22,116(sp)
    9fb8:	dd401c15 	stw	r21,112(sp)
    9fbc:	dd001b15 	stw	r20,108(sp)
    9fc0:	dcc01a15 	stw	r19,104(sp)
    9fc4:	dc801915 	stw	r18,100(sp)
    9fc8:	000afcc0 	call	afcc <__unpack_d>
    9fcc:	d9000204 	addi	r4,sp,8
    9fd0:	800b883a 	mov	r5,r16
    9fd4:	000afcc0 	call	afcc <__unpack_d>
    9fd8:	d9000417 	ldw	r4,16(sp)
    9fdc:	00800044 	movi	r2,1
    9fe0:	1100102e 	bgeu	r2,r4,a024 <__muldf3+0xac>
    9fe4:	d8c00917 	ldw	r3,36(sp)
    9fe8:	10c0062e 	bgeu	r2,r3,a004 <__muldf3+0x8c>
    9fec:	00800104 	movi	r2,4
    9ff0:	20800a26 	beq	r4,r2,a01c <__muldf3+0xa4>
    9ff4:	1880cc26 	beq	r3,r2,a328 <__muldf3+0x3b0>
    9ff8:	00800084 	movi	r2,2
    9ffc:	20800926 	beq	r4,r2,a024 <__muldf3+0xac>
    a000:	1880191e 	bne	r3,r2,a068 <__muldf3+0xf0>
    a004:	d8c00a17 	ldw	r3,40(sp)
    a008:	d8800517 	ldw	r2,20(sp)
    a00c:	8009883a 	mov	r4,r16
    a010:	10c4c03a 	cmpne	r2,r2,r3
    a014:	d8800a15 	stw	r2,40(sp)
    a018:	00000706 	br	a038 <__muldf3+0xc0>
    a01c:	00800084 	movi	r2,2
    a020:	1880c326 	beq	r3,r2,a330 <__muldf3+0x3b8>
    a024:	d8800517 	ldw	r2,20(sp)
    a028:	d8c00a17 	ldw	r3,40(sp)
    a02c:	8809883a 	mov	r4,r17
    a030:	10c4c03a 	cmpne	r2,r2,r3
    a034:	d8800515 	stw	r2,20(sp)
    a038:	000acb80 	call	acb8 <__pack_d>
    a03c:	dfc01f17 	ldw	ra,124(sp)
    a040:	ddc01e17 	ldw	r23,120(sp)
    a044:	dd801d17 	ldw	r22,116(sp)
    a048:	dd401c17 	ldw	r21,112(sp)
    a04c:	dd001b17 	ldw	r20,108(sp)
    a050:	dcc01a17 	ldw	r19,104(sp)
    a054:	dc801917 	ldw	r18,100(sp)
    a058:	dc401817 	ldw	r17,96(sp)
    a05c:	dc001717 	ldw	r16,92(sp)
    a060:	dec02004 	addi	sp,sp,128
    a064:	f800283a 	ret
    a068:	dd800717 	ldw	r22,28(sp)
    a06c:	dc800c17 	ldw	r18,48(sp)
    a070:	002b883a 	mov	r21,zero
    a074:	0023883a 	mov	r17,zero
    a078:	a80b883a 	mov	r5,r21
    a07c:	b00d883a 	mov	r6,r22
    a080:	880f883a 	mov	r7,r17
    a084:	ddc00817 	ldw	r23,32(sp)
    a088:	dcc00d17 	ldw	r19,52(sp)
    a08c:	9009883a 	mov	r4,r18
    a090:	000aba00 	call	aba0 <__muldi3>
    a094:	001b883a 	mov	r13,zero
    a098:	680f883a 	mov	r7,r13
    a09c:	b009883a 	mov	r4,r22
    a0a0:	000b883a 	mov	r5,zero
    a0a4:	980d883a 	mov	r6,r19
    a0a8:	b82d883a 	mov	r22,r23
    a0ac:	002f883a 	mov	r23,zero
    a0b0:	db401615 	stw	r13,88(sp)
    a0b4:	d8801315 	stw	r2,76(sp)
    a0b8:	d8c01415 	stw	r3,80(sp)
    a0bc:	dcc01515 	stw	r19,84(sp)
    a0c0:	000aba00 	call	aba0 <__muldi3>
    a0c4:	b00d883a 	mov	r6,r22
    a0c8:	000b883a 	mov	r5,zero
    a0cc:	9009883a 	mov	r4,r18
    a0d0:	b80f883a 	mov	r7,r23
    a0d4:	1021883a 	mov	r16,r2
    a0d8:	1823883a 	mov	r17,r3
    a0dc:	000aba00 	call	aba0 <__muldi3>
    a0e0:	8085883a 	add	r2,r16,r2
    a0e4:	140d803a 	cmpltu	r6,r2,r16
    a0e8:	88c7883a 	add	r3,r17,r3
    a0ec:	30cd883a 	add	r6,r6,r3
    a0f0:	1029883a 	mov	r20,r2
    a0f4:	302b883a 	mov	r21,r6
    a0f8:	da801317 	ldw	r10,76(sp)
    a0fc:	dac01417 	ldw	r11,80(sp)
    a100:	db001517 	ldw	r12,84(sp)
    a104:	db401617 	ldw	r13,88(sp)
    a108:	3440612e 	bgeu	r6,r17,a290 <__muldf3+0x318>
    a10c:	0009883a 	mov	r4,zero
    a110:	5105883a 	add	r2,r10,r4
    a114:	128d803a 	cmpltu	r6,r2,r10
    a118:	5d07883a 	add	r3,r11,r20
    a11c:	30cd883a 	add	r6,r6,r3
    a120:	0021883a 	mov	r16,zero
    a124:	04400044 	movi	r17,1
    a128:	1025883a 	mov	r18,r2
    a12c:	3027883a 	mov	r19,r6
    a130:	32c06236 	bltu	r6,r11,a2bc <__muldf3+0x344>
    a134:	59807a26 	beq	r11,r6,a320 <__muldf3+0x3a8>
    a138:	680b883a 	mov	r5,r13
    a13c:	b80f883a 	mov	r7,r23
    a140:	6009883a 	mov	r4,r12
    a144:	b00d883a 	mov	r6,r22
    a148:	000aba00 	call	aba0 <__muldi3>
    a14c:	1009883a 	mov	r4,r2
    a150:	000f883a 	mov	r7,zero
    a154:	1545883a 	add	r2,r2,r21
    a158:	1111803a 	cmpltu	r8,r2,r4
    a15c:	19c7883a 	add	r3,r3,r7
    a160:	40c7883a 	add	r3,r8,r3
    a164:	88cb883a 	add	r5,r17,r3
    a168:	d8c00617 	ldw	r3,24(sp)
    a16c:	8089883a 	add	r4,r16,r2
    a170:	d8800b17 	ldw	r2,44(sp)
    a174:	18c00104 	addi	r3,r3,4
    a178:	240d803a 	cmpltu	r6,r4,r16
    a17c:	10c7883a 	add	r3,r2,r3
    a180:	2013883a 	mov	r9,r4
    a184:	d8800a17 	ldw	r2,40(sp)
    a188:	d9000517 	ldw	r4,20(sp)
    a18c:	314d883a 	add	r6,r6,r5
    a190:	3015883a 	mov	r10,r6
    a194:	2088c03a 	cmpne	r4,r4,r2
    a198:	00880034 	movhi	r2,8192
    a19c:	10bfffc4 	addi	r2,r2,-1
    a1a0:	d9000f15 	stw	r4,60(sp)
    a1a4:	d8c01015 	stw	r3,64(sp)
    a1a8:	1180162e 	bgeu	r2,r6,a204 <__muldf3+0x28c>
    a1ac:	1811883a 	mov	r8,r3
    a1b0:	101f883a 	mov	r15,r2
    a1b4:	980497fa 	slli	r2,r19,31
    a1b8:	9016d07a 	srli	r11,r18,1
    a1bc:	500697fa 	slli	r3,r10,31
    a1c0:	480cd07a 	srli	r6,r9,1
    a1c4:	500ed07a 	srli	r7,r10,1
    a1c8:	12d6b03a 	or	r11,r2,r11
    a1cc:	00800044 	movi	r2,1
    a1d0:	198cb03a 	or	r6,r3,r6
    a1d4:	4888703a 	and	r4,r9,r2
    a1d8:	9818d07a 	srli	r12,r19,1
    a1dc:	001b883a 	mov	r13,zero
    a1e0:	03a00034 	movhi	r14,32768
    a1e4:	3013883a 	mov	r9,r6
    a1e8:	3815883a 	mov	r10,r7
    a1ec:	4091883a 	add	r8,r8,r2
    a1f0:	20000226 	beq	r4,zero,a1fc <__muldf3+0x284>
    a1f4:	5b64b03a 	or	r18,r11,r13
    a1f8:	63a6b03a 	or	r19,r12,r14
    a1fc:	7abfed36 	bltu	r15,r10,a1b4 <__muldf3+0x23c>
    a200:	da001015 	stw	r8,64(sp)
    a204:	00840034 	movhi	r2,4096
    a208:	10bfffc4 	addi	r2,r2,-1
    a20c:	12801436 	bltu	r2,r10,a260 <__muldf3+0x2e8>
    a210:	da001017 	ldw	r8,64(sp)
    a214:	101f883a 	mov	r15,r2
    a218:	4a45883a 	add	r2,r9,r9
    a21c:	124d803a 	cmpltu	r6,r2,r9
    a220:	5287883a 	add	r3,r10,r10
    a224:	9497883a 	add	r11,r18,r18
    a228:	5c8f803a 	cmpltu	r7,r11,r18
    a22c:	9cd9883a 	add	r12,r19,r19
    a230:	01000044 	movi	r4,1
    a234:	30cd883a 	add	r6,r6,r3
    a238:	3b0f883a 	add	r7,r7,r12
    a23c:	423fffc4 	addi	r8,r8,-1
    a240:	1013883a 	mov	r9,r2
    a244:	3015883a 	mov	r10,r6
    a248:	111ab03a 	or	r13,r2,r4
    a24c:	98003016 	blt	r19,zero,a310 <__muldf3+0x398>
    a250:	5825883a 	mov	r18,r11
    a254:	3827883a 	mov	r19,r7
    a258:	7abfef2e 	bgeu	r15,r10,a218 <__muldf3+0x2a0>
    a25c:	da001015 	stw	r8,64(sp)
    a260:	00803fc4 	movi	r2,255
    a264:	488e703a 	and	r7,r9,r2
    a268:	00802004 	movi	r2,128
    a26c:	0007883a 	mov	r3,zero
    a270:	0011883a 	mov	r8,zero
    a274:	38801826 	beq	r7,r2,a2d8 <__muldf3+0x360>
    a278:	008000c4 	movi	r2,3
    a27c:	d9000e04 	addi	r4,sp,56
    a280:	da801215 	stw	r10,72(sp)
    a284:	d8800e15 	stw	r2,56(sp)
    a288:	da401115 	stw	r9,68(sp)
    a28c:	003f6a06 	br	a038 <__muldf3+0xc0>
    a290:	89802126 	beq	r17,r6,a318 <__muldf3+0x3a0>
    a294:	0009883a 	mov	r4,zero
    a298:	5105883a 	add	r2,r10,r4
    a29c:	128d803a 	cmpltu	r6,r2,r10
    a2a0:	5d07883a 	add	r3,r11,r20
    a2a4:	30cd883a 	add	r6,r6,r3
    a2a8:	0021883a 	mov	r16,zero
    a2ac:	0023883a 	mov	r17,zero
    a2b0:	1025883a 	mov	r18,r2
    a2b4:	3027883a 	mov	r19,r6
    a2b8:	32ff9e2e 	bgeu	r6,r11,a134 <__muldf3+0x1bc>
    a2bc:	00800044 	movi	r2,1
    a2c0:	8089883a 	add	r4,r16,r2
    a2c4:	240d803a 	cmpltu	r6,r4,r16
    a2c8:	344d883a 	add	r6,r6,r17
    a2cc:	2021883a 	mov	r16,r4
    a2d0:	3023883a 	mov	r17,r6
    a2d4:	003f9806 	br	a138 <__muldf3+0x1c0>
    a2d8:	403fe71e 	bne	r8,zero,a278 <__muldf3+0x300>
    a2dc:	01004004 	movi	r4,256
    a2e0:	4904703a 	and	r2,r9,r4
    a2e4:	10c4b03a 	or	r2,r2,r3
    a2e8:	103fe31e 	bne	r2,zero,a278 <__muldf3+0x300>
    a2ec:	94c4b03a 	or	r2,r18,r19
    a2f0:	103fe126 	beq	r2,zero,a278 <__muldf3+0x300>
    a2f4:	49c5883a 	add	r2,r9,r7
    a2f8:	1251803a 	cmpltu	r8,r2,r9
    a2fc:	4291883a 	add	r8,r8,r10
    a300:	013fc004 	movi	r4,-256
    a304:	1112703a 	and	r9,r2,r4
    a308:	4015883a 	mov	r10,r8
    a30c:	003fda06 	br	a278 <__muldf3+0x300>
    a310:	6813883a 	mov	r9,r13
    a314:	003fce06 	br	a250 <__muldf3+0x2d8>
    a318:	143f7c36 	bltu	r2,r16,a10c <__muldf3+0x194>
    a31c:	003fdd06 	br	a294 <__muldf3+0x31c>
    a320:	12bf852e 	bgeu	r2,r10,a138 <__muldf3+0x1c0>
    a324:	003fe506 	br	a2bc <__muldf3+0x344>
    a328:	00800084 	movi	r2,2
    a32c:	20bf351e 	bne	r4,r2,a004 <__muldf3+0x8c>
    a330:	01000074 	movhi	r4,1
    a334:	2137ba04 	addi	r4,r4,-8472
    a338:	003f3f06 	br	a038 <__muldf3+0xc0>

0000a33c <__divdf3>:
    a33c:	deffed04 	addi	sp,sp,-76
    a340:	dcc01115 	stw	r19,68(sp)
    a344:	dcc00404 	addi	r19,sp,16
    a348:	2011883a 	mov	r8,r4
    a34c:	2813883a 	mov	r9,r5
    a350:	dc000e15 	stw	r16,56(sp)
    a354:	d809883a 	mov	r4,sp
    a358:	980b883a 	mov	r5,r19
    a35c:	dc000904 	addi	r16,sp,36
    a360:	dfc01215 	stw	ra,72(sp)
    a364:	da400115 	stw	r9,4(sp)
    a368:	d9c00315 	stw	r7,12(sp)
    a36c:	da000015 	stw	r8,0(sp)
    a370:	d9800215 	stw	r6,8(sp)
    a374:	dc801015 	stw	r18,64(sp)
    a378:	dc400f15 	stw	r17,60(sp)
    a37c:	000afcc0 	call	afcc <__unpack_d>
    a380:	d9000204 	addi	r4,sp,8
    a384:	800b883a 	mov	r5,r16
    a388:	000afcc0 	call	afcc <__unpack_d>
    a38c:	d9000417 	ldw	r4,16(sp)
    a390:	00800044 	movi	r2,1
    a394:	11000b2e 	bgeu	r2,r4,a3c4 <__divdf3+0x88>
    a398:	d9400917 	ldw	r5,36(sp)
    a39c:	1140762e 	bgeu	r2,r5,a578 <__divdf3+0x23c>
    a3a0:	d8800517 	ldw	r2,20(sp)
    a3a4:	d8c00a17 	ldw	r3,40(sp)
    a3a8:	01800104 	movi	r6,4
    a3ac:	10c4f03a 	xor	r2,r2,r3
    a3b0:	d8800515 	stw	r2,20(sp)
    a3b4:	21800226 	beq	r4,r6,a3c0 <__divdf3+0x84>
    a3b8:	00800084 	movi	r2,2
    a3bc:	2080141e 	bne	r4,r2,a410 <__divdf3+0xd4>
    a3c0:	29000926 	beq	r5,r4,a3e8 <__divdf3+0xac>
    a3c4:	9809883a 	mov	r4,r19
    a3c8:	000acb80 	call	acb8 <__pack_d>
    a3cc:	dfc01217 	ldw	ra,72(sp)
    a3d0:	dcc01117 	ldw	r19,68(sp)
    a3d4:	dc801017 	ldw	r18,64(sp)
    a3d8:	dc400f17 	ldw	r17,60(sp)
    a3dc:	dc000e17 	ldw	r16,56(sp)
    a3e0:	dec01304 	addi	sp,sp,76
    a3e4:	f800283a 	ret
    a3e8:	01000074 	movhi	r4,1
    a3ec:	2137ba04 	addi	r4,r4,-8472
    a3f0:	000acb80 	call	acb8 <__pack_d>
    a3f4:	dfc01217 	ldw	ra,72(sp)
    a3f8:	dcc01117 	ldw	r19,68(sp)
    a3fc:	dc801017 	ldw	r18,64(sp)
    a400:	dc400f17 	ldw	r17,60(sp)
    a404:	dc000e17 	ldw	r16,56(sp)
    a408:	dec01304 	addi	sp,sp,76
    a40c:	f800283a 	ret
    a410:	29805b26 	beq	r5,r6,a580 <__divdf3+0x244>
    a414:	28802d26 	beq	r5,r2,a4cc <__divdf3+0x190>
    a418:	d8c00617 	ldw	r3,24(sp)
    a41c:	d8800b17 	ldw	r2,44(sp)
    a420:	d9c00817 	ldw	r7,32(sp)
    a424:	dc400d17 	ldw	r17,52(sp)
    a428:	188bc83a 	sub	r5,r3,r2
    a42c:	d9800717 	ldw	r6,28(sp)
    a430:	dc000c17 	ldw	r16,48(sp)
    a434:	d9400615 	stw	r5,24(sp)
    a438:	3c403836 	bltu	r7,r17,a51c <__divdf3+0x1e0>
    a43c:	89c03626 	beq	r17,r7,a518 <__divdf3+0x1dc>
    a440:	0015883a 	mov	r10,zero
    a444:	001d883a 	mov	r14,zero
    a448:	02c40034 	movhi	r11,4096
    a44c:	001f883a 	mov	r15,zero
    a450:	003f883a 	mov	ra,zero
    a454:	04800f44 	movi	r18,61
    a458:	00000f06 	br	a498 <__divdf3+0x15c>
    a45c:	601d883a 	mov	r14,r12
    a460:	681f883a 	mov	r15,r13
    a464:	400d883a 	mov	r6,r8
    a468:	100f883a 	mov	r7,r2
    a46c:	3191883a 	add	r8,r6,r6
    a470:	5808d07a 	srli	r4,r11,1
    a474:	4185803a 	cmpltu	r2,r8,r6
    a478:	39d3883a 	add	r9,r7,r7
    a47c:	28c6b03a 	or	r3,r5,r3
    a480:	1245883a 	add	r2,r2,r9
    a484:	1815883a 	mov	r10,r3
    a488:	2017883a 	mov	r11,r4
    a48c:	400d883a 	mov	r6,r8
    a490:	100f883a 	mov	r7,r2
    a494:	fc801726 	beq	ra,r18,a4f4 <__divdf3+0x1b8>
    a498:	580a97fa 	slli	r5,r11,31
    a49c:	5006d07a 	srli	r3,r10,1
    a4a0:	ffc00044 	addi	ra,ra,1
    a4a4:	3c7ff136 	bltu	r7,r17,a46c <__divdf3+0x130>
    a4a8:	3411c83a 	sub	r8,r6,r16
    a4ac:	3205803a 	cmpltu	r2,r6,r8
    a4b0:	3c53c83a 	sub	r9,r7,r17
    a4b4:	7298b03a 	or	r12,r14,r10
    a4b8:	7adab03a 	or	r13,r15,r11
    a4bc:	4885c83a 	sub	r2,r9,r2
    a4c0:	89ffe61e 	bne	r17,r7,a45c <__divdf3+0x120>
    a4c4:	343fe936 	bltu	r6,r16,a46c <__divdf3+0x130>
    a4c8:	003fe406 	br	a45c <__divdf3+0x120>
    a4cc:	9809883a 	mov	r4,r19
    a4d0:	d9800415 	stw	r6,16(sp)
    a4d4:	000acb80 	call	acb8 <__pack_d>
    a4d8:	dfc01217 	ldw	ra,72(sp)
    a4dc:	dcc01117 	ldw	r19,68(sp)
    a4e0:	dc801017 	ldw	r18,64(sp)
    a4e4:	dc400f17 	ldw	r17,60(sp)
    a4e8:	dc000e17 	ldw	r16,56(sp)
    a4ec:	dec01304 	addi	sp,sp,76
    a4f0:	f800283a 	ret
    a4f4:	00803fc4 	movi	r2,255
    a4f8:	7090703a 	and	r8,r14,r2
    a4fc:	00802004 	movi	r2,128
    a500:	0007883a 	mov	r3,zero
    a504:	0013883a 	mov	r9,zero
    a508:	40800d26 	beq	r8,r2,a540 <__divdf3+0x204>
    a50c:	dbc00815 	stw	r15,32(sp)
    a510:	db800715 	stw	r14,28(sp)
    a514:	003fab06 	br	a3c4 <__divdf3+0x88>
    a518:	343fc92e 	bgeu	r6,r16,a440 <__divdf3+0x104>
    a51c:	3185883a 	add	r2,r6,r6
    a520:	1189803a 	cmpltu	r4,r2,r6
    a524:	39c7883a 	add	r3,r7,r7
    a528:	20c9883a 	add	r4,r4,r3
    a52c:	297fffc4 	addi	r5,r5,-1
    a530:	100d883a 	mov	r6,r2
    a534:	200f883a 	mov	r7,r4
    a538:	d9400615 	stw	r5,24(sp)
    a53c:	003fc006 	br	a440 <__divdf3+0x104>
    a540:	483ff21e 	bne	r9,zero,a50c <__divdf3+0x1d0>
    a544:	01004004 	movi	r4,256
    a548:	7104703a 	and	r2,r14,r4
    a54c:	10c4b03a 	or	r2,r2,r3
    a550:	103fee1e 	bne	r2,zero,a50c <__divdf3+0x1d0>
    a554:	31c4b03a 	or	r2,r6,r7
    a558:	103fec26 	beq	r2,zero,a50c <__divdf3+0x1d0>
    a55c:	7205883a 	add	r2,r14,r8
    a560:	1391803a 	cmpltu	r8,r2,r14
    a564:	43d1883a 	add	r8,r8,r15
    a568:	013fc004 	movi	r4,-256
    a56c:	111c703a 	and	r14,r2,r4
    a570:	401f883a 	mov	r15,r8
    a574:	003fe506 	br	a50c <__divdf3+0x1d0>
    a578:	8009883a 	mov	r4,r16
    a57c:	003f9206 	br	a3c8 <__divdf3+0x8c>
    a580:	9809883a 	mov	r4,r19
    a584:	d8000715 	stw	zero,28(sp)
    a588:	d8000815 	stw	zero,32(sp)
    a58c:	d8000615 	stw	zero,24(sp)
    a590:	003f8d06 	br	a3c8 <__divdf3+0x8c>

0000a594 <__eqdf2>:
    a594:	deffef04 	addi	sp,sp,-68
    a598:	dc400f15 	stw	r17,60(sp)
    a59c:	dc400404 	addi	r17,sp,16
    a5a0:	2005883a 	mov	r2,r4
    a5a4:	2807883a 	mov	r3,r5
    a5a8:	dc000e15 	stw	r16,56(sp)
    a5ac:	d809883a 	mov	r4,sp
    a5b0:	880b883a 	mov	r5,r17
    a5b4:	dc000904 	addi	r16,sp,36
    a5b8:	d8c00115 	stw	r3,4(sp)
    a5bc:	d8800015 	stw	r2,0(sp)
    a5c0:	d9800215 	stw	r6,8(sp)
    a5c4:	dfc01015 	stw	ra,64(sp)
    a5c8:	d9c00315 	stw	r7,12(sp)
    a5cc:	000afcc0 	call	afcc <__unpack_d>
    a5d0:	d9000204 	addi	r4,sp,8
    a5d4:	800b883a 	mov	r5,r16
    a5d8:	000afcc0 	call	afcc <__unpack_d>
    a5dc:	d8800417 	ldw	r2,16(sp)
    a5e0:	00c00044 	movi	r3,1
    a5e4:	180d883a 	mov	r6,r3
    a5e8:	1880062e 	bgeu	r3,r2,a604 <__eqdf2+0x70>
    a5ec:	d8800917 	ldw	r2,36(sp)
    a5f0:	8809883a 	mov	r4,r17
    a5f4:	800b883a 	mov	r5,r16
    a5f8:	1880022e 	bgeu	r3,r2,a604 <__eqdf2+0x70>
    a5fc:	000b1040 	call	b104 <__fpcmp_parts_d>
    a600:	100d883a 	mov	r6,r2
    a604:	3005883a 	mov	r2,r6
    a608:	dfc01017 	ldw	ra,64(sp)
    a60c:	dc400f17 	ldw	r17,60(sp)
    a610:	dc000e17 	ldw	r16,56(sp)
    a614:	dec01104 	addi	sp,sp,68
    a618:	f800283a 	ret

0000a61c <__nedf2>:
    a61c:	deffef04 	addi	sp,sp,-68
    a620:	dc400f15 	stw	r17,60(sp)
    a624:	dc400404 	addi	r17,sp,16
    a628:	2005883a 	mov	r2,r4
    a62c:	2807883a 	mov	r3,r5
    a630:	dc000e15 	stw	r16,56(sp)
    a634:	d809883a 	mov	r4,sp
    a638:	880b883a 	mov	r5,r17
    a63c:	dc000904 	addi	r16,sp,36
    a640:	d8c00115 	stw	r3,4(sp)
    a644:	d8800015 	stw	r2,0(sp)
    a648:	d9800215 	stw	r6,8(sp)
    a64c:	dfc01015 	stw	ra,64(sp)
    a650:	d9c00315 	stw	r7,12(sp)
    a654:	000afcc0 	call	afcc <__unpack_d>
    a658:	d9000204 	addi	r4,sp,8
    a65c:	800b883a 	mov	r5,r16
    a660:	000afcc0 	call	afcc <__unpack_d>
    a664:	d8800417 	ldw	r2,16(sp)
    a668:	00c00044 	movi	r3,1
    a66c:	180d883a 	mov	r6,r3
    a670:	1880062e 	bgeu	r3,r2,a68c <__nedf2+0x70>
    a674:	d8800917 	ldw	r2,36(sp)
    a678:	8809883a 	mov	r4,r17
    a67c:	800b883a 	mov	r5,r16
    a680:	1880022e 	bgeu	r3,r2,a68c <__nedf2+0x70>
    a684:	000b1040 	call	b104 <__fpcmp_parts_d>
    a688:	100d883a 	mov	r6,r2
    a68c:	3005883a 	mov	r2,r6
    a690:	dfc01017 	ldw	ra,64(sp)
    a694:	dc400f17 	ldw	r17,60(sp)
    a698:	dc000e17 	ldw	r16,56(sp)
    a69c:	dec01104 	addi	sp,sp,68
    a6a0:	f800283a 	ret

0000a6a4 <__gtdf2>:
    a6a4:	deffef04 	addi	sp,sp,-68
    a6a8:	dc400f15 	stw	r17,60(sp)
    a6ac:	dc400404 	addi	r17,sp,16
    a6b0:	2005883a 	mov	r2,r4
    a6b4:	2807883a 	mov	r3,r5
    a6b8:	dc000e15 	stw	r16,56(sp)
    a6bc:	d809883a 	mov	r4,sp
    a6c0:	880b883a 	mov	r5,r17
    a6c4:	dc000904 	addi	r16,sp,36
    a6c8:	d8c00115 	stw	r3,4(sp)
    a6cc:	d8800015 	stw	r2,0(sp)
    a6d0:	d9800215 	stw	r6,8(sp)
    a6d4:	dfc01015 	stw	ra,64(sp)
    a6d8:	d9c00315 	stw	r7,12(sp)
    a6dc:	000afcc0 	call	afcc <__unpack_d>
    a6e0:	d9000204 	addi	r4,sp,8
    a6e4:	800b883a 	mov	r5,r16
    a6e8:	000afcc0 	call	afcc <__unpack_d>
    a6ec:	d8800417 	ldw	r2,16(sp)
    a6f0:	00c00044 	movi	r3,1
    a6f4:	01bfffc4 	movi	r6,-1
    a6f8:	1880062e 	bgeu	r3,r2,a714 <__gtdf2+0x70>
    a6fc:	d8800917 	ldw	r2,36(sp)
    a700:	8809883a 	mov	r4,r17
    a704:	800b883a 	mov	r5,r16
    a708:	1880022e 	bgeu	r3,r2,a714 <__gtdf2+0x70>
    a70c:	000b1040 	call	b104 <__fpcmp_parts_d>
    a710:	100d883a 	mov	r6,r2
    a714:	3005883a 	mov	r2,r6
    a718:	dfc01017 	ldw	ra,64(sp)
    a71c:	dc400f17 	ldw	r17,60(sp)
    a720:	dc000e17 	ldw	r16,56(sp)
    a724:	dec01104 	addi	sp,sp,68
    a728:	f800283a 	ret

0000a72c <__gedf2>:
    a72c:	deffef04 	addi	sp,sp,-68
    a730:	dc400f15 	stw	r17,60(sp)
    a734:	dc400404 	addi	r17,sp,16
    a738:	2005883a 	mov	r2,r4
    a73c:	2807883a 	mov	r3,r5
    a740:	dc000e15 	stw	r16,56(sp)
    a744:	d809883a 	mov	r4,sp
    a748:	880b883a 	mov	r5,r17
    a74c:	dc000904 	addi	r16,sp,36
    a750:	d8c00115 	stw	r3,4(sp)
    a754:	d8800015 	stw	r2,0(sp)
    a758:	d9800215 	stw	r6,8(sp)
    a75c:	dfc01015 	stw	ra,64(sp)
    a760:	d9c00315 	stw	r7,12(sp)
    a764:	000afcc0 	call	afcc <__unpack_d>
    a768:	d9000204 	addi	r4,sp,8
    a76c:	800b883a 	mov	r5,r16
    a770:	000afcc0 	call	afcc <__unpack_d>
    a774:	d8800417 	ldw	r2,16(sp)
    a778:	00c00044 	movi	r3,1
    a77c:	01bfffc4 	movi	r6,-1
    a780:	1880062e 	bgeu	r3,r2,a79c <__gedf2+0x70>
    a784:	d8800917 	ldw	r2,36(sp)
    a788:	8809883a 	mov	r4,r17
    a78c:	800b883a 	mov	r5,r16
    a790:	1880022e 	bgeu	r3,r2,a79c <__gedf2+0x70>
    a794:	000b1040 	call	b104 <__fpcmp_parts_d>
    a798:	100d883a 	mov	r6,r2
    a79c:	3005883a 	mov	r2,r6
    a7a0:	dfc01017 	ldw	ra,64(sp)
    a7a4:	dc400f17 	ldw	r17,60(sp)
    a7a8:	dc000e17 	ldw	r16,56(sp)
    a7ac:	dec01104 	addi	sp,sp,68
    a7b0:	f800283a 	ret

0000a7b4 <__ltdf2>:
    a7b4:	deffef04 	addi	sp,sp,-68
    a7b8:	dc400f15 	stw	r17,60(sp)
    a7bc:	dc400404 	addi	r17,sp,16
    a7c0:	2005883a 	mov	r2,r4
    a7c4:	2807883a 	mov	r3,r5
    a7c8:	dc000e15 	stw	r16,56(sp)
    a7cc:	d809883a 	mov	r4,sp
    a7d0:	880b883a 	mov	r5,r17
    a7d4:	dc000904 	addi	r16,sp,36
    a7d8:	d8c00115 	stw	r3,4(sp)
    a7dc:	d8800015 	stw	r2,0(sp)
    a7e0:	d9800215 	stw	r6,8(sp)
    a7e4:	dfc01015 	stw	ra,64(sp)
    a7e8:	d9c00315 	stw	r7,12(sp)
    a7ec:	000afcc0 	call	afcc <__unpack_d>
    a7f0:	d9000204 	addi	r4,sp,8
    a7f4:	800b883a 	mov	r5,r16
    a7f8:	000afcc0 	call	afcc <__unpack_d>
    a7fc:	d8800417 	ldw	r2,16(sp)
    a800:	00c00044 	movi	r3,1
    a804:	180d883a 	mov	r6,r3
    a808:	1880062e 	bgeu	r3,r2,a824 <__ltdf2+0x70>
    a80c:	d8800917 	ldw	r2,36(sp)
    a810:	8809883a 	mov	r4,r17
    a814:	800b883a 	mov	r5,r16
    a818:	1880022e 	bgeu	r3,r2,a824 <__ltdf2+0x70>
    a81c:	000b1040 	call	b104 <__fpcmp_parts_d>
    a820:	100d883a 	mov	r6,r2
    a824:	3005883a 	mov	r2,r6
    a828:	dfc01017 	ldw	ra,64(sp)
    a82c:	dc400f17 	ldw	r17,60(sp)
    a830:	dc000e17 	ldw	r16,56(sp)
    a834:	dec01104 	addi	sp,sp,68
    a838:	f800283a 	ret

0000a83c <__floatsidf>:
    a83c:	2006d7fa 	srli	r3,r4,31
    a840:	defff604 	addi	sp,sp,-40
    a844:	008000c4 	movi	r2,3
    a848:	dfc00915 	stw	ra,36(sp)
    a84c:	dcc00815 	stw	r19,32(sp)
    a850:	dc800715 	stw	r18,28(sp)
    a854:	dc400615 	stw	r17,24(sp)
    a858:	dc000515 	stw	r16,20(sp)
    a85c:	d8800015 	stw	r2,0(sp)
    a860:	d8c00115 	stw	r3,4(sp)
    a864:	20000f1e 	bne	r4,zero,a8a4 <__floatsidf+0x68>
    a868:	00800084 	movi	r2,2
    a86c:	d8800015 	stw	r2,0(sp)
    a870:	d809883a 	mov	r4,sp
    a874:	000acb80 	call	acb8 <__pack_d>
    a878:	1009883a 	mov	r4,r2
    a87c:	180b883a 	mov	r5,r3
    a880:	2005883a 	mov	r2,r4
    a884:	2807883a 	mov	r3,r5
    a888:	dfc00917 	ldw	ra,36(sp)
    a88c:	dcc00817 	ldw	r19,32(sp)
    a890:	dc800717 	ldw	r18,28(sp)
    a894:	dc400617 	ldw	r17,24(sp)
    a898:	dc000517 	ldw	r16,20(sp)
    a89c:	dec00a04 	addi	sp,sp,40
    a8a0:	f800283a 	ret
    a8a4:	00800f04 	movi	r2,60
    a8a8:	1807003a 	cmpeq	r3,r3,zero
    a8ac:	d8800215 	stw	r2,8(sp)
    a8b0:	18001126 	beq	r3,zero,a8f8 <__floatsidf+0xbc>
    a8b4:	0027883a 	mov	r19,zero
    a8b8:	2025883a 	mov	r18,r4
    a8bc:	d9000315 	stw	r4,12(sp)
    a8c0:	dcc00415 	stw	r19,16(sp)
    a8c4:	000ac380 	call	ac38 <__clzsi2>
    a8c8:	11000744 	addi	r4,r2,29
    a8cc:	013fe80e 	bge	zero,r4,a870 <__floatsidf+0x34>
    a8d0:	10bfff44 	addi	r2,r2,-3
    a8d4:	10000c16 	blt	r2,zero,a908 <__floatsidf+0xcc>
    a8d8:	90a2983a 	sll	r17,r18,r2
    a8dc:	0021883a 	mov	r16,zero
    a8e0:	d8800217 	ldw	r2,8(sp)
    a8e4:	dc400415 	stw	r17,16(sp)
    a8e8:	dc000315 	stw	r16,12(sp)
    a8ec:	1105c83a 	sub	r2,r2,r4
    a8f0:	d8800215 	stw	r2,8(sp)
    a8f4:	003fde06 	br	a870 <__floatsidf+0x34>
    a8f8:	00a00034 	movhi	r2,32768
    a8fc:	20800a26 	beq	r4,r2,a928 <__floatsidf+0xec>
    a900:	0109c83a 	sub	r4,zero,r4
    a904:	003feb06 	br	a8b4 <__floatsidf+0x78>
    a908:	9006d07a 	srli	r3,r18,1
    a90c:	008007c4 	movi	r2,31
    a910:	1105c83a 	sub	r2,r2,r4
    a914:	1886d83a 	srl	r3,r3,r2
    a918:	9922983a 	sll	r17,r19,r4
    a91c:	9120983a 	sll	r16,r18,r4
    a920:	1c62b03a 	or	r17,r3,r17
    a924:	003fee06 	br	a8e0 <__floatsidf+0xa4>
    a928:	0009883a 	mov	r4,zero
    a92c:	01707834 	movhi	r5,49632
    a930:	003fd306 	br	a880 <__floatsidf+0x44>

0000a934 <__fixdfsi>:
    a934:	defff804 	addi	sp,sp,-32
    a938:	2005883a 	mov	r2,r4
    a93c:	2807883a 	mov	r3,r5
    a940:	d809883a 	mov	r4,sp
    a944:	d9400204 	addi	r5,sp,8
    a948:	d8c00115 	stw	r3,4(sp)
    a94c:	d8800015 	stw	r2,0(sp)
    a950:	dfc00715 	stw	ra,28(sp)
    a954:	000afcc0 	call	afcc <__unpack_d>
    a958:	d8c00217 	ldw	r3,8(sp)
    a95c:	00800084 	movi	r2,2
    a960:	1880051e 	bne	r3,r2,a978 <__fixdfsi+0x44>
    a964:	0007883a 	mov	r3,zero
    a968:	1805883a 	mov	r2,r3
    a96c:	dfc00717 	ldw	ra,28(sp)
    a970:	dec00804 	addi	sp,sp,32
    a974:	f800283a 	ret
    a978:	00800044 	movi	r2,1
    a97c:	10fff92e 	bgeu	r2,r3,a964 <__fixdfsi+0x30>
    a980:	00800104 	movi	r2,4
    a984:	18800426 	beq	r3,r2,a998 <__fixdfsi+0x64>
    a988:	d8c00417 	ldw	r3,16(sp)
    a98c:	183ff516 	blt	r3,zero,a964 <__fixdfsi+0x30>
    a990:	00800784 	movi	r2,30
    a994:	10c0080e 	bge	r2,r3,a9b8 <__fixdfsi+0x84>
    a998:	d8800317 	ldw	r2,12(sp)
    a99c:	1000121e 	bne	r2,zero,a9e8 <__fixdfsi+0xb4>
    a9a0:	00e00034 	movhi	r3,32768
    a9a4:	18ffffc4 	addi	r3,r3,-1
    a9a8:	1805883a 	mov	r2,r3
    a9ac:	dfc00717 	ldw	ra,28(sp)
    a9b0:	dec00804 	addi	sp,sp,32
    a9b4:	f800283a 	ret
    a9b8:	00800f04 	movi	r2,60
    a9bc:	10d1c83a 	sub	r8,r2,r3
    a9c0:	40bff804 	addi	r2,r8,-32
    a9c4:	d9800517 	ldw	r6,20(sp)
    a9c8:	d9c00617 	ldw	r7,24(sp)
    a9cc:	10000816 	blt	r2,zero,a9f0 <__fixdfsi+0xbc>
    a9d0:	3888d83a 	srl	r4,r7,r2
    a9d4:	d8800317 	ldw	r2,12(sp)
    a9d8:	2007883a 	mov	r3,r4
    a9dc:	103fe226 	beq	r2,zero,a968 <__fixdfsi+0x34>
    a9e0:	0107c83a 	sub	r3,zero,r4
    a9e4:	003fe006 	br	a968 <__fixdfsi+0x34>
    a9e8:	00e00034 	movhi	r3,32768
    a9ec:	003fde06 	br	a968 <__fixdfsi+0x34>
    a9f0:	39c7883a 	add	r3,r7,r7
    a9f4:	008007c4 	movi	r2,31
    a9f8:	1205c83a 	sub	r2,r2,r8
    a9fc:	1886983a 	sll	r3,r3,r2
    aa00:	3208d83a 	srl	r4,r6,r8
    aa04:	1908b03a 	or	r4,r3,r4
    aa08:	003ff206 	br	a9d4 <__fixdfsi+0xa0>

0000aa0c <__floatunsidf>:
    aa0c:	defff204 	addi	sp,sp,-56
    aa10:	dfc00d15 	stw	ra,52(sp)
    aa14:	ddc00c15 	stw	r23,48(sp)
    aa18:	dd800b15 	stw	r22,44(sp)
    aa1c:	dd400a15 	stw	r21,40(sp)
    aa20:	dd000915 	stw	r20,36(sp)
    aa24:	dcc00815 	stw	r19,32(sp)
    aa28:	dc800715 	stw	r18,28(sp)
    aa2c:	dc400615 	stw	r17,24(sp)
    aa30:	dc000515 	stw	r16,20(sp)
    aa34:	d8000115 	stw	zero,4(sp)
    aa38:	20000f1e 	bne	r4,zero,aa78 <__floatunsidf+0x6c>
    aa3c:	00800084 	movi	r2,2
    aa40:	d8800015 	stw	r2,0(sp)
    aa44:	d809883a 	mov	r4,sp
    aa48:	000acb80 	call	acb8 <__pack_d>
    aa4c:	dfc00d17 	ldw	ra,52(sp)
    aa50:	ddc00c17 	ldw	r23,48(sp)
    aa54:	dd800b17 	ldw	r22,44(sp)
    aa58:	dd400a17 	ldw	r21,40(sp)
    aa5c:	dd000917 	ldw	r20,36(sp)
    aa60:	dcc00817 	ldw	r19,32(sp)
    aa64:	dc800717 	ldw	r18,28(sp)
    aa68:	dc400617 	ldw	r17,24(sp)
    aa6c:	dc000517 	ldw	r16,20(sp)
    aa70:	dec00e04 	addi	sp,sp,56
    aa74:	f800283a 	ret
    aa78:	008000c4 	movi	r2,3
    aa7c:	00c00f04 	movi	r3,60
    aa80:	002f883a 	mov	r23,zero
    aa84:	202d883a 	mov	r22,r4
    aa88:	d8800015 	stw	r2,0(sp)
    aa8c:	d8c00215 	stw	r3,8(sp)
    aa90:	d9000315 	stw	r4,12(sp)
    aa94:	ddc00415 	stw	r23,16(sp)
    aa98:	000ac380 	call	ac38 <__clzsi2>
    aa9c:	12400744 	addi	r9,r2,29
    aaa0:	48000b16 	blt	r9,zero,aad0 <__floatunsidf+0xc4>
    aaa4:	483fe726 	beq	r9,zero,aa44 <__floatunsidf+0x38>
    aaa8:	10bfff44 	addi	r2,r2,-3
    aaac:	10002e16 	blt	r2,zero,ab68 <__floatunsidf+0x15c>
    aab0:	b0a2983a 	sll	r17,r22,r2
    aab4:	0021883a 	mov	r16,zero
    aab8:	d8800217 	ldw	r2,8(sp)
    aabc:	dc400415 	stw	r17,16(sp)
    aac0:	dc000315 	stw	r16,12(sp)
    aac4:	1245c83a 	sub	r2,r2,r9
    aac8:	d8800215 	stw	r2,8(sp)
    aacc:	003fdd06 	br	aa44 <__floatunsidf+0x38>
    aad0:	0255c83a 	sub	r10,zero,r9
    aad4:	51bff804 	addi	r6,r10,-32
    aad8:	30001b16 	blt	r6,zero,ab48 <__floatunsidf+0x13c>
    aadc:	b9a8d83a 	srl	r20,r23,r6
    aae0:	002b883a 	mov	r21,zero
    aae4:	000f883a 	mov	r7,zero
    aae8:	01000044 	movi	r4,1
    aaec:	0011883a 	mov	r8,zero
    aaf0:	30002516 	blt	r6,zero,ab88 <__floatunsidf+0x17c>
    aaf4:	21a6983a 	sll	r19,r4,r6
    aaf8:	0025883a 	mov	r18,zero
    aafc:	00bfffc4 	movi	r2,-1
    ab00:	9089883a 	add	r4,r18,r2
    ab04:	988b883a 	add	r5,r19,r2
    ab08:	248d803a 	cmpltu	r6,r4,r18
    ab0c:	314b883a 	add	r5,r6,r5
    ab10:	b104703a 	and	r2,r22,r4
    ab14:	b946703a 	and	r3,r23,r5
    ab18:	10c4b03a 	or	r2,r2,r3
    ab1c:	10000226 	beq	r2,zero,ab28 <__floatunsidf+0x11c>
    ab20:	01c00044 	movi	r7,1
    ab24:	0011883a 	mov	r8,zero
    ab28:	d9000217 	ldw	r4,8(sp)
    ab2c:	a1c4b03a 	or	r2,r20,r7
    ab30:	aa06b03a 	or	r3,r21,r8
    ab34:	2249c83a 	sub	r4,r4,r9
    ab38:	d8c00415 	stw	r3,16(sp)
    ab3c:	d9000215 	stw	r4,8(sp)
    ab40:	d8800315 	stw	r2,12(sp)
    ab44:	003fbf06 	br	aa44 <__floatunsidf+0x38>
    ab48:	bdc7883a 	add	r3,r23,r23
    ab4c:	008007c4 	movi	r2,31
    ab50:	1285c83a 	sub	r2,r2,r10
    ab54:	1886983a 	sll	r3,r3,r2
    ab58:	b2a8d83a 	srl	r20,r22,r10
    ab5c:	baaad83a 	srl	r21,r23,r10
    ab60:	1d28b03a 	or	r20,r3,r20
    ab64:	003fdf06 	br	aae4 <__floatunsidf+0xd8>
    ab68:	b006d07a 	srli	r3,r22,1
    ab6c:	008007c4 	movi	r2,31
    ab70:	1245c83a 	sub	r2,r2,r9
    ab74:	1886d83a 	srl	r3,r3,r2
    ab78:	ba62983a 	sll	r17,r23,r9
    ab7c:	b260983a 	sll	r16,r22,r9
    ab80:	1c62b03a 	or	r17,r3,r17
    ab84:	003fcc06 	br	aab8 <__floatunsidf+0xac>
    ab88:	2006d07a 	srli	r3,r4,1
    ab8c:	008007c4 	movi	r2,31
    ab90:	1285c83a 	sub	r2,r2,r10
    ab94:	18a6d83a 	srl	r19,r3,r2
    ab98:	22a4983a 	sll	r18,r4,r10
    ab9c:	003fd706 	br	aafc <__floatunsidf+0xf0>

0000aba0 <__muldi3>:
    aba0:	2011883a 	mov	r8,r4
    aba4:	427fffcc 	andi	r9,r8,65535
    aba8:	4018d43a 	srli	r12,r8,16
    abac:	32bfffcc 	andi	r10,r6,65535
    abb0:	3016d43a 	srli	r11,r6,16
    abb4:	4a85383a 	mul	r2,r9,r10
    abb8:	6295383a 	mul	r10,r12,r10
    abbc:	4ad3383a 	mul	r9,r9,r11
    abc0:	113fffcc 	andi	r4,r2,65535
    abc4:	1004d43a 	srli	r2,r2,16
    abc8:	4a93883a 	add	r9,r9,r10
    abcc:	3807883a 	mov	r3,r7
    abd0:	1245883a 	add	r2,r2,r9
    abd4:	280f883a 	mov	r7,r5
    abd8:	180b883a 	mov	r5,r3
    abdc:	1006943a 	slli	r3,r2,16
    abe0:	defffd04 	addi	sp,sp,-12
    abe4:	dc800215 	stw	r18,8(sp)
    abe8:	1907883a 	add	r3,r3,r4
    abec:	dc400115 	stw	r17,4(sp)
    abf0:	dc000015 	stw	r16,0(sp)
    abf4:	4165383a 	mul	r18,r8,r5
    abf8:	31e3383a 	mul	r17,r6,r7
    abfc:	1012d43a 	srli	r9,r2,16
    ac00:	62d9383a 	mul	r12,r12,r11
    ac04:	181f883a 	mov	r15,r3
    ac08:	1280022e 	bgeu	r2,r10,ac14 <__muldi3+0x74>
    ac0c:	00800074 	movhi	r2,1
    ac10:	6099883a 	add	r12,r12,r2
    ac14:	624d883a 	add	r6,r12,r9
    ac18:	9187883a 	add	r3,r18,r6
    ac1c:	88c7883a 	add	r3,r17,r3
    ac20:	7805883a 	mov	r2,r15
    ac24:	dc800217 	ldw	r18,8(sp)
    ac28:	dc400117 	ldw	r17,4(sp)
    ac2c:	dc000017 	ldw	r16,0(sp)
    ac30:	dec00304 	addi	sp,sp,12
    ac34:	f800283a 	ret

0000ac38 <__clzsi2>:
    ac38:	00bfffd4 	movui	r2,65535
    ac3c:	11000e36 	bltu	r2,r4,ac78 <__clzsi2+0x40>
    ac40:	00803fc4 	movi	r2,255
    ac44:	01400204 	movi	r5,8
    ac48:	0007883a 	mov	r3,zero
    ac4c:	11001036 	bltu	r2,r4,ac90 <__clzsi2+0x58>
    ac50:	000b883a 	mov	r5,zero
    ac54:	20c6d83a 	srl	r3,r4,r3
    ac58:	00800074 	movhi	r2,1
    ac5c:	10b7bf04 	addi	r2,r2,-8452
    ac60:	1887883a 	add	r3,r3,r2
    ac64:	18800003 	ldbu	r2,0(r3)
    ac68:	00c00804 	movi	r3,32
    ac6c:	2885883a 	add	r2,r5,r2
    ac70:	1885c83a 	sub	r2,r3,r2
    ac74:	f800283a 	ret
    ac78:	01400404 	movi	r5,16
    ac7c:	00804034 	movhi	r2,256
    ac80:	10bfffc4 	addi	r2,r2,-1
    ac84:	2807883a 	mov	r3,r5
    ac88:	113ff22e 	bgeu	r2,r4,ac54 <__clzsi2+0x1c>
    ac8c:	01400604 	movi	r5,24
    ac90:	2807883a 	mov	r3,r5
    ac94:	20c6d83a 	srl	r3,r4,r3
    ac98:	00800074 	movhi	r2,1
    ac9c:	10b7bf04 	addi	r2,r2,-8452
    aca0:	1887883a 	add	r3,r3,r2
    aca4:	18800003 	ldbu	r2,0(r3)
    aca8:	00c00804 	movi	r3,32
    acac:	2885883a 	add	r2,r5,r2
    acb0:	1885c83a 	sub	r2,r3,r2
    acb4:	f800283a 	ret

0000acb8 <__pack_d>:
    acb8:	20c00017 	ldw	r3,0(r4)
    acbc:	defffd04 	addi	sp,sp,-12
    acc0:	dc000015 	stw	r16,0(sp)
    acc4:	dc800215 	stw	r18,8(sp)
    acc8:	dc400115 	stw	r17,4(sp)
    accc:	00800044 	movi	r2,1
    acd0:	22000317 	ldw	r8,12(r4)
    acd4:	001f883a 	mov	r15,zero
    acd8:	22400417 	ldw	r9,16(r4)
    acdc:	24000117 	ldw	r16,4(r4)
    ace0:	10c0552e 	bgeu	r2,r3,ae38 <__pack_d+0x180>
    ace4:	00800104 	movi	r2,4
    ace8:	18804f26 	beq	r3,r2,ae28 <__pack_d+0x170>
    acec:	00800084 	movi	r2,2
    acf0:	18800226 	beq	r3,r2,acfc <__pack_d+0x44>
    acf4:	4244b03a 	or	r2,r8,r9
    acf8:	10001a1e 	bne	r2,zero,ad64 <__pack_d+0xac>
    acfc:	000d883a 	mov	r6,zero
    ad00:	000f883a 	mov	r7,zero
    ad04:	0011883a 	mov	r8,zero
    ad08:	00800434 	movhi	r2,16
    ad0c:	10bfffc4 	addi	r2,r2,-1
    ad10:	301d883a 	mov	r14,r6
    ad14:	3884703a 	and	r2,r7,r2
    ad18:	400a953a 	slli	r5,r8,20
    ad1c:	79bffc2c 	andhi	r6,r15,65520
    ad20:	308cb03a 	or	r6,r6,r2
    ad24:	00e00434 	movhi	r3,32784
    ad28:	18ffffc4 	addi	r3,r3,-1
    ad2c:	800497fa 	slli	r2,r16,31
    ad30:	30c6703a 	and	r3,r6,r3
    ad34:	1946b03a 	or	r3,r3,r5
    ad38:	01600034 	movhi	r5,32768
    ad3c:	297fffc4 	addi	r5,r5,-1
    ad40:	194a703a 	and	r5,r3,r5
    ad44:	288ab03a 	or	r5,r5,r2
    ad48:	2807883a 	mov	r3,r5
    ad4c:	7005883a 	mov	r2,r14
    ad50:	dc800217 	ldw	r18,8(sp)
    ad54:	dc400117 	ldw	r17,4(sp)
    ad58:	dc000017 	ldw	r16,0(sp)
    ad5c:	dec00304 	addi	sp,sp,12
    ad60:	f800283a 	ret
    ad64:	21000217 	ldw	r4,8(r4)
    ad68:	00bf0084 	movi	r2,-1022
    ad6c:	20803f16 	blt	r4,r2,ae6c <__pack_d+0x1b4>
    ad70:	0080ffc4 	movi	r2,1023
    ad74:	11002c16 	blt	r2,r4,ae28 <__pack_d+0x170>
    ad78:	00803fc4 	movi	r2,255
    ad7c:	408c703a 	and	r6,r8,r2
    ad80:	00802004 	movi	r2,128
    ad84:	0007883a 	mov	r3,zero
    ad88:	000f883a 	mov	r7,zero
    ad8c:	2280ffc4 	addi	r10,r4,1023
    ad90:	30801e26 	beq	r6,r2,ae0c <__pack_d+0x154>
    ad94:	00801fc4 	movi	r2,127
    ad98:	4089883a 	add	r4,r8,r2
    ad9c:	220d803a 	cmpltu	r6,r4,r8
    ada0:	324d883a 	add	r6,r6,r9
    ada4:	2011883a 	mov	r8,r4
    ada8:	3013883a 	mov	r9,r6
    adac:	00880034 	movhi	r2,8192
    adb0:	10bfffc4 	addi	r2,r2,-1
    adb4:	12400d36 	bltu	r2,r9,adec <__pack_d+0x134>
    adb8:	4804963a 	slli	r2,r9,24
    adbc:	400cd23a 	srli	r6,r8,8
    adc0:	480ed23a 	srli	r7,r9,8
    adc4:	013fffc4 	movi	r4,-1
    adc8:	118cb03a 	or	r6,r2,r6
    adcc:	01400434 	movhi	r5,16
    add0:	297fffc4 	addi	r5,r5,-1
    add4:	3104703a 	and	r2,r6,r4
    add8:	3946703a 	and	r3,r7,r5
    addc:	5201ffcc 	andi	r8,r10,2047
    ade0:	100d883a 	mov	r6,r2
    ade4:	180f883a 	mov	r7,r3
    ade8:	003fc706 	br	ad08 <__pack_d+0x50>
    adec:	480897fa 	slli	r4,r9,31
    adf0:	4004d07a 	srli	r2,r8,1
    adf4:	4806d07a 	srli	r3,r9,1
    adf8:	52800044 	addi	r10,r10,1
    adfc:	2084b03a 	or	r2,r4,r2
    ae00:	1011883a 	mov	r8,r2
    ae04:	1813883a 	mov	r9,r3
    ae08:	003feb06 	br	adb8 <__pack_d+0x100>
    ae0c:	383fe11e 	bne	r7,zero,ad94 <__pack_d+0xdc>
    ae10:	01004004 	movi	r4,256
    ae14:	4104703a 	and	r2,r8,r4
    ae18:	10c4b03a 	or	r2,r2,r3
    ae1c:	103fe326 	beq	r2,zero,adac <__pack_d+0xf4>
    ae20:	3005883a 	mov	r2,r6
    ae24:	003fdc06 	br	ad98 <__pack_d+0xe0>
    ae28:	000d883a 	mov	r6,zero
    ae2c:	000f883a 	mov	r7,zero
    ae30:	0201ffc4 	movi	r8,2047
    ae34:	003fb406 	br	ad08 <__pack_d+0x50>
    ae38:	0005883a 	mov	r2,zero
    ae3c:	00c00234 	movhi	r3,8
    ae40:	408cb03a 	or	r6,r8,r2
    ae44:	48ceb03a 	or	r7,r9,r3
    ae48:	013fffc4 	movi	r4,-1
    ae4c:	01400434 	movhi	r5,16
    ae50:	297fffc4 	addi	r5,r5,-1
    ae54:	3104703a 	and	r2,r6,r4
    ae58:	3946703a 	and	r3,r7,r5
    ae5c:	100d883a 	mov	r6,r2
    ae60:	180f883a 	mov	r7,r3
    ae64:	0201ffc4 	movi	r8,2047
    ae68:	003fa706 	br	ad08 <__pack_d+0x50>
    ae6c:	1109c83a 	sub	r4,r2,r4
    ae70:	00800e04 	movi	r2,56
    ae74:	11004316 	blt	r2,r4,af84 <__pack_d+0x2cc>
    ae78:	21fff804 	addi	r7,r4,-32
    ae7c:	38004516 	blt	r7,zero,af94 <__pack_d+0x2dc>
    ae80:	49d8d83a 	srl	r12,r9,r7
    ae84:	001b883a 	mov	r13,zero
    ae88:	0023883a 	mov	r17,zero
    ae8c:	01400044 	movi	r5,1
    ae90:	0025883a 	mov	r18,zero
    ae94:	38004716 	blt	r7,zero,afb4 <__pack_d+0x2fc>
    ae98:	29d6983a 	sll	r11,r5,r7
    ae9c:	0015883a 	mov	r10,zero
    aea0:	00bfffc4 	movi	r2,-1
    aea4:	5089883a 	add	r4,r10,r2
    aea8:	588b883a 	add	r5,r11,r2
    aeac:	228d803a 	cmpltu	r6,r4,r10
    aeb0:	314b883a 	add	r5,r6,r5
    aeb4:	4104703a 	and	r2,r8,r4
    aeb8:	4946703a 	and	r3,r9,r5
    aebc:	10c4b03a 	or	r2,r2,r3
    aec0:	10000226 	beq	r2,zero,aecc <__pack_d+0x214>
    aec4:	04400044 	movi	r17,1
    aec8:	0025883a 	mov	r18,zero
    aecc:	00803fc4 	movi	r2,255
    aed0:	644eb03a 	or	r7,r12,r17
    aed4:	3892703a 	and	r9,r7,r2
    aed8:	00802004 	movi	r2,128
    aedc:	6c90b03a 	or	r8,r13,r18
    aee0:	0015883a 	mov	r10,zero
    aee4:	48801626 	beq	r9,r2,af40 <__pack_d+0x288>
    aee8:	01001fc4 	movi	r4,127
    aeec:	3905883a 	add	r2,r7,r4
    aef0:	11cd803a 	cmpltu	r6,r2,r7
    aef4:	320d883a 	add	r6,r6,r8
    aef8:	100f883a 	mov	r7,r2
    aefc:	00840034 	movhi	r2,4096
    af00:	10bfffc4 	addi	r2,r2,-1
    af04:	3011883a 	mov	r8,r6
    af08:	0007883a 	mov	r3,zero
    af0c:	11801b36 	bltu	r2,r6,af7c <__pack_d+0x2c4>
    af10:	4004963a 	slli	r2,r8,24
    af14:	3808d23a 	srli	r4,r7,8
    af18:	400ad23a 	srli	r5,r8,8
    af1c:	1813883a 	mov	r9,r3
    af20:	1108b03a 	or	r4,r2,r4
    af24:	00bfffc4 	movi	r2,-1
    af28:	00c00434 	movhi	r3,16
    af2c:	18ffffc4 	addi	r3,r3,-1
    af30:	208c703a 	and	r6,r4,r2
    af34:	28ce703a 	and	r7,r5,r3
    af38:	4a01ffcc 	andi	r8,r9,2047
    af3c:	003f7206 	br	ad08 <__pack_d+0x50>
    af40:	503fe91e 	bne	r10,zero,aee8 <__pack_d+0x230>
    af44:	01004004 	movi	r4,256
    af48:	3904703a 	and	r2,r7,r4
    af4c:	0007883a 	mov	r3,zero
    af50:	10c4b03a 	or	r2,r2,r3
    af54:	10000626 	beq	r2,zero,af70 <__pack_d+0x2b8>
    af58:	3a45883a 	add	r2,r7,r9
    af5c:	11cd803a 	cmpltu	r6,r2,r7
    af60:	320d883a 	add	r6,r6,r8
    af64:	100f883a 	mov	r7,r2
    af68:	3011883a 	mov	r8,r6
    af6c:	0007883a 	mov	r3,zero
    af70:	00840034 	movhi	r2,4096
    af74:	10bfffc4 	addi	r2,r2,-1
    af78:	123fe52e 	bgeu	r2,r8,af10 <__pack_d+0x258>
    af7c:	00c00044 	movi	r3,1
    af80:	003fe306 	br	af10 <__pack_d+0x258>
    af84:	0009883a 	mov	r4,zero
    af88:	0013883a 	mov	r9,zero
    af8c:	000b883a 	mov	r5,zero
    af90:	003fe406 	br	af24 <__pack_d+0x26c>
    af94:	4a47883a 	add	r3,r9,r9
    af98:	008007c4 	movi	r2,31
    af9c:	1105c83a 	sub	r2,r2,r4
    afa0:	1886983a 	sll	r3,r3,r2
    afa4:	4118d83a 	srl	r12,r8,r4
    afa8:	491ad83a 	srl	r13,r9,r4
    afac:	1b18b03a 	or	r12,r3,r12
    afb0:	003fb506 	br	ae88 <__pack_d+0x1d0>
    afb4:	2806d07a 	srli	r3,r5,1
    afb8:	008007c4 	movi	r2,31
    afbc:	1105c83a 	sub	r2,r2,r4
    afc0:	1896d83a 	srl	r11,r3,r2
    afc4:	2914983a 	sll	r10,r5,r4
    afc8:	003fb506 	br	aea0 <__pack_d+0x1e8>

0000afcc <__unpack_d>:
    afcc:	20c00117 	ldw	r3,4(r4)
    afd0:	22400017 	ldw	r9,0(r4)
    afd4:	00800434 	movhi	r2,16
    afd8:	10bfffc4 	addi	r2,r2,-1
    afdc:	1808d53a 	srli	r4,r3,20
    afe0:	180cd7fa 	srli	r6,r3,31
    afe4:	1894703a 	and	r10,r3,r2
    afe8:	2201ffcc 	andi	r8,r4,2047
    afec:	281b883a 	mov	r13,r5
    aff0:	4817883a 	mov	r11,r9
    aff4:	29800115 	stw	r6,4(r5)
    aff8:	5019883a 	mov	r12,r10
    affc:	40001e1e 	bne	r8,zero,b078 <__unpack_d+0xac>
    b000:	4a84b03a 	or	r2,r9,r10
    b004:	10001926 	beq	r2,zero,b06c <__unpack_d+0xa0>
    b008:	4804d63a 	srli	r2,r9,24
    b00c:	500c923a 	slli	r6,r10,8
    b010:	013f0084 	movi	r4,-1022
    b014:	00c40034 	movhi	r3,4096
    b018:	18ffffc4 	addi	r3,r3,-1
    b01c:	118cb03a 	or	r6,r2,r6
    b020:	008000c4 	movi	r2,3
    b024:	480a923a 	slli	r5,r9,8
    b028:	68800015 	stw	r2,0(r13)
    b02c:	69000215 	stw	r4,8(r13)
    b030:	19800b36 	bltu	r3,r6,b060 <__unpack_d+0x94>
    b034:	200f883a 	mov	r7,r4
    b038:	1811883a 	mov	r8,r3
    b03c:	2945883a 	add	r2,r5,r5
    b040:	1149803a 	cmpltu	r4,r2,r5
    b044:	3187883a 	add	r3,r6,r6
    b048:	20c9883a 	add	r4,r4,r3
    b04c:	100b883a 	mov	r5,r2
    b050:	200d883a 	mov	r6,r4
    b054:	39ffffc4 	addi	r7,r7,-1
    b058:	413ff82e 	bgeu	r8,r4,b03c <__unpack_d+0x70>
    b05c:	69c00215 	stw	r7,8(r13)
    b060:	69800415 	stw	r6,16(r13)
    b064:	69400315 	stw	r5,12(r13)
    b068:	f800283a 	ret
    b06c:	00800084 	movi	r2,2
    b070:	28800015 	stw	r2,0(r5)
    b074:	f800283a 	ret
    b078:	0081ffc4 	movi	r2,2047
    b07c:	40800f26 	beq	r8,r2,b0bc <__unpack_d+0xf0>
    b080:	480cd63a 	srli	r6,r9,24
    b084:	5006923a 	slli	r3,r10,8
    b088:	4804923a 	slli	r2,r9,8
    b08c:	0009883a 	mov	r4,zero
    b090:	30c6b03a 	or	r3,r6,r3
    b094:	01440034 	movhi	r5,4096
    b098:	110cb03a 	or	r6,r2,r4
    b09c:	423f0044 	addi	r8,r8,-1023
    b0a0:	194eb03a 	or	r7,r3,r5
    b0a4:	008000c4 	movi	r2,3
    b0a8:	69c00415 	stw	r7,16(r13)
    b0ac:	6a000215 	stw	r8,8(r13)
    b0b0:	68800015 	stw	r2,0(r13)
    b0b4:	69800315 	stw	r6,12(r13)
    b0b8:	f800283a 	ret
    b0bc:	4a84b03a 	or	r2,r9,r10
    b0c0:	1000031e 	bne	r2,zero,b0d0 <__unpack_d+0x104>
    b0c4:	00800104 	movi	r2,4
    b0c8:	28800015 	stw	r2,0(r5)
    b0cc:	f800283a 	ret
    b0d0:	0009883a 	mov	r4,zero
    b0d4:	01400234 	movhi	r5,8
    b0d8:	4904703a 	and	r2,r9,r4
    b0dc:	5146703a 	and	r3,r10,r5
    b0e0:	10c4b03a 	or	r2,r2,r3
    b0e4:	10000526 	beq	r2,zero,b0fc <__unpack_d+0x130>
    b0e8:	00800044 	movi	r2,1
    b0ec:	68800015 	stw	r2,0(r13)
    b0f0:	6b000415 	stw	r12,16(r13)
    b0f4:	6ac00315 	stw	r11,12(r13)
    b0f8:	f800283a 	ret
    b0fc:	68000015 	stw	zero,0(r13)
    b100:	003ffb06 	br	b0f0 <__unpack_d+0x124>

0000b104 <__fpcmp_parts_d>:
    b104:	21800017 	ldw	r6,0(r4)
    b108:	00c00044 	movi	r3,1
    b10c:	19800a2e 	bgeu	r3,r6,b138 <__fpcmp_parts_d+0x34>
    b110:	28800017 	ldw	r2,0(r5)
    b114:	1880082e 	bgeu	r3,r2,b138 <__fpcmp_parts_d+0x34>
    b118:	00c00104 	movi	r3,4
    b11c:	30c02626 	beq	r6,r3,b1b8 <__fpcmp_parts_d+0xb4>
    b120:	10c02226 	beq	r2,r3,b1ac <__fpcmp_parts_d+0xa8>
    b124:	00c00084 	movi	r3,2
    b128:	30c00526 	beq	r6,r3,b140 <__fpcmp_parts_d+0x3c>
    b12c:	10c0071e 	bne	r2,r3,b14c <__fpcmp_parts_d+0x48>
    b130:	20800117 	ldw	r2,4(r4)
    b134:	1000091e 	bne	r2,zero,b15c <__fpcmp_parts_d+0x58>
    b138:	00800044 	movi	r2,1
    b13c:	f800283a 	ret
    b140:	10c01a1e 	bne	r2,r3,b1ac <__fpcmp_parts_d+0xa8>
    b144:	0005883a 	mov	r2,zero
    b148:	f800283a 	ret
    b14c:	22000117 	ldw	r8,4(r4)
    b150:	28800117 	ldw	r2,4(r5)
    b154:	40800326 	beq	r8,r2,b164 <__fpcmp_parts_d+0x60>
    b158:	403ff726 	beq	r8,zero,b138 <__fpcmp_parts_d+0x34>
    b15c:	00bfffc4 	movi	r2,-1
    b160:	f800283a 	ret
    b164:	20c00217 	ldw	r3,8(r4)
    b168:	28800217 	ldw	r2,8(r5)
    b16c:	10fffa16 	blt	r2,r3,b158 <__fpcmp_parts_d+0x54>
    b170:	18800916 	blt	r3,r2,b198 <__fpcmp_parts_d+0x94>
    b174:	21c00417 	ldw	r7,16(r4)
    b178:	28c00417 	ldw	r3,16(r5)
    b17c:	21800317 	ldw	r6,12(r4)
    b180:	28800317 	ldw	r2,12(r5)
    b184:	19fff436 	bltu	r3,r7,b158 <__fpcmp_parts_d+0x54>
    b188:	38c00526 	beq	r7,r3,b1a0 <__fpcmp_parts_d+0x9c>
    b18c:	38c00236 	bltu	r7,r3,b198 <__fpcmp_parts_d+0x94>
    b190:	19ffec1e 	bne	r3,r7,b144 <__fpcmp_parts_d+0x40>
    b194:	30bfeb2e 	bgeu	r6,r2,b144 <__fpcmp_parts_d+0x40>
    b198:	403fe71e 	bne	r8,zero,b138 <__fpcmp_parts_d+0x34>
    b19c:	003fef06 	br	b15c <__fpcmp_parts_d+0x58>
    b1a0:	11bffa2e 	bgeu	r2,r6,b18c <__fpcmp_parts_d+0x88>
    b1a4:	403fe426 	beq	r8,zero,b138 <__fpcmp_parts_d+0x34>
    b1a8:	003fec06 	br	b15c <__fpcmp_parts_d+0x58>
    b1ac:	28800117 	ldw	r2,4(r5)
    b1b0:	103fe11e 	bne	r2,zero,b138 <__fpcmp_parts_d+0x34>
    b1b4:	003fe906 	br	b15c <__fpcmp_parts_d+0x58>
    b1b8:	11bfdd1e 	bne	r2,r6,b130 <__fpcmp_parts_d+0x2c>
    b1bc:	28c00117 	ldw	r3,4(r5)
    b1c0:	20800117 	ldw	r2,4(r4)
    b1c4:	1885c83a 	sub	r2,r3,r2
    b1c8:	f800283a 	ret

0000b1cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b1cc:	defff804 	addi	sp,sp,-32
    b1d0:	dfc00715 	stw	ra,28(sp)
    b1d4:	df000615 	stw	fp,24(sp)
    b1d8:	df000604 	addi	fp,sp,24
    b1dc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b1e0:	e0bffc17 	ldw	r2,-16(fp)
    b1e4:	1004803a 	cmplt	r2,r2,zero
    b1e8:	1000081e 	bne	r2,zero,b20c <close+0x40>
    b1ec:	e0bffc17 	ldw	r2,-16(fp)
    b1f0:	10800324 	muli	r2,r2,12
    b1f4:	1007883a 	mov	r3,r2
    b1f8:	00800074 	movhi	r2,1
    b1fc:	10ba1b04 	addi	r2,r2,-6036
    b200:	1887883a 	add	r3,r3,r2
    b204:	e0ffff15 	stw	r3,-4(fp)
    b208:	00000106 	br	b210 <close+0x44>
    b20c:	e03fff15 	stw	zero,-4(fp)
    b210:	e0bfff17 	ldw	r2,-4(fp)
    b214:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b218:	e0bffb17 	ldw	r2,-20(fp)
    b21c:	1005003a 	cmpeq	r2,r2,zero
    b220:	10001d1e 	bne	r2,zero,b298 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b224:	e0bffb17 	ldw	r2,-20(fp)
    b228:	10800017 	ldw	r2,0(r2)
    b22c:	10800417 	ldw	r2,16(r2)
    b230:	1005003a 	cmpeq	r2,r2,zero
    b234:	1000071e 	bne	r2,zero,b254 <close+0x88>
    b238:	e0bffb17 	ldw	r2,-20(fp)
    b23c:	10800017 	ldw	r2,0(r2)
    b240:	10800417 	ldw	r2,16(r2)
    b244:	e13ffb17 	ldw	r4,-20(fp)
    b248:	103ee83a 	callr	r2
    b24c:	e0bffe15 	stw	r2,-8(fp)
    b250:	00000106 	br	b258 <close+0x8c>
    b254:	e03ffe15 	stw	zero,-8(fp)
    b258:	e0bffe17 	ldw	r2,-8(fp)
    b25c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b260:	e13ffc17 	ldw	r4,-16(fp)
    b264:	000bc300 	call	bc30 <alt_release_fd>
    if (rval < 0)
    b268:	e0bffa17 	ldw	r2,-24(fp)
    b26c:	1004403a 	cmpge	r2,r2,zero
    b270:	1000071e 	bne	r2,zero,b290 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b274:	000b2c80 	call	b2c8 <alt_get_errno>
    b278:	e0fffa17 	ldw	r3,-24(fp)
    b27c:	00c7c83a 	sub	r3,zero,r3
    b280:	10c00015 	stw	r3,0(r2)
      return -1;
    b284:	00bfffc4 	movi	r2,-1
    b288:	e0bffd15 	stw	r2,-12(fp)
    b28c:	00000806 	br	b2b0 <close+0xe4>
    }
    return 0;
    b290:	e03ffd15 	stw	zero,-12(fp)
    b294:	00000606 	br	b2b0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b298:	000b2c80 	call	b2c8 <alt_get_errno>
    b29c:	1007883a 	mov	r3,r2
    b2a0:	00801444 	movi	r2,81
    b2a4:	18800015 	stw	r2,0(r3)
    return -1;
    b2a8:	00bfffc4 	movi	r2,-1
    b2ac:	e0bffd15 	stw	r2,-12(fp)
    b2b0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b2b4:	e037883a 	mov	sp,fp
    b2b8:	dfc00117 	ldw	ra,4(sp)
    b2bc:	df000017 	ldw	fp,0(sp)
    b2c0:	dec00204 	addi	sp,sp,8
    b2c4:	f800283a 	ret

0000b2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b2c8:	defffd04 	addi	sp,sp,-12
    b2cc:	dfc00215 	stw	ra,8(sp)
    b2d0:	df000115 	stw	fp,4(sp)
    b2d4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b2d8:	00800074 	movhi	r2,1
    b2dc:	10be9f04 	addi	r2,r2,-1412
    b2e0:	10800017 	ldw	r2,0(r2)
    b2e4:	1005003a 	cmpeq	r2,r2,zero
    b2e8:	1000061e 	bne	r2,zero,b304 <alt_get_errno+0x3c>
    b2ec:	00800074 	movhi	r2,1
    b2f0:	10be9f04 	addi	r2,r2,-1412
    b2f4:	10800017 	ldw	r2,0(r2)
    b2f8:	103ee83a 	callr	r2
    b2fc:	e0bfff15 	stw	r2,-4(fp)
    b300:	00000306 	br	b310 <alt_get_errno+0x48>
    b304:	00800074 	movhi	r2,1
    b308:	10854704 	addi	r2,r2,5404
    b30c:	e0bfff15 	stw	r2,-4(fp)
    b310:	e0bfff17 	ldw	r2,-4(fp)
}
    b314:	e037883a 	mov	sp,fp
    b318:	dfc00117 	ldw	ra,4(sp)
    b31c:	df000017 	ldw	fp,0(sp)
    b320:	dec00204 	addi	sp,sp,8
    b324:	f800283a 	ret

0000b328 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b328:	defffc04 	addi	sp,sp,-16
    b32c:	df000315 	stw	fp,12(sp)
    b330:	df000304 	addi	fp,sp,12
    b334:	e13ffd15 	stw	r4,-12(fp)
    b338:	e17ffe15 	stw	r5,-8(fp)
    b33c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b340:	e0bfff17 	ldw	r2,-4(fp)
}
    b344:	e037883a 	mov	sp,fp
    b348:	df000017 	ldw	fp,0(sp)
    b34c:	dec00104 	addi	sp,sp,4
    b350:	f800283a 	ret

0000b354 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b354:	defffd04 	addi	sp,sp,-12
    b358:	df000215 	stw	fp,8(sp)
    b35c:	df000204 	addi	fp,sp,8
    b360:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b364:	e0bfff17 	ldw	r2,-4(fp)
    b368:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b36c:	e0bffe17 	ldw	r2,-8(fp)
    b370:	1005003a 	cmpeq	r2,r2,zero
    b374:	1000021e 	bne	r2,zero,b380 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b378:	002af070 	cmpltui	zero,zero,43969
    b37c:	00000106 	br	b384 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b380:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b384:	e037883a 	mov	sp,fp
    b388:	df000017 	ldw	fp,0(sp)
    b38c:	dec00104 	addi	sp,sp,4
    b390:	f800283a 	ret

0000b394 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b394:	defffd04 	addi	sp,sp,-12
    b398:	dfc00215 	stw	ra,8(sp)
    b39c:	df000115 	stw	fp,4(sp)
    b3a0:	df000104 	addi	fp,sp,4
    b3a4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b3a8:	e13fff17 	ldw	r4,-4(fp)
    b3ac:	000b3540 	call	b354 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b3b0:	003fff06 	br	b3b0 <_exit+0x1c>

0000b3b4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b3b4:	defff904 	addi	sp,sp,-28
    b3b8:	dfc00615 	stw	ra,24(sp)
    b3bc:	df000515 	stw	fp,20(sp)
    b3c0:	df000504 	addi	fp,sp,20
    b3c4:	e13ffc15 	stw	r4,-16(fp)
    b3c8:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b3cc:	e0bffc17 	ldw	r2,-16(fp)
    b3d0:	1004803a 	cmplt	r2,r2,zero
    b3d4:	1000081e 	bne	r2,zero,b3f8 <fstat+0x44>
    b3d8:	e0bffc17 	ldw	r2,-16(fp)
    b3dc:	10800324 	muli	r2,r2,12
    b3e0:	1007883a 	mov	r3,r2
    b3e4:	00800074 	movhi	r2,1
    b3e8:	10ba1b04 	addi	r2,r2,-6036
    b3ec:	1887883a 	add	r3,r3,r2
    b3f0:	e0ffff15 	stw	r3,-4(fp)
    b3f4:	00000106 	br	b3fc <fstat+0x48>
    b3f8:	e03fff15 	stw	zero,-4(fp)
    b3fc:	e0bfff17 	ldw	r2,-4(fp)
    b400:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b404:	e0bffb17 	ldw	r2,-20(fp)
    b408:	1005003a 	cmpeq	r2,r2,zero
    b40c:	1000121e 	bne	r2,zero,b458 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b410:	e0bffb17 	ldw	r2,-20(fp)
    b414:	10800017 	ldw	r2,0(r2)
    b418:	10800817 	ldw	r2,32(r2)
    b41c:	1005003a 	cmpeq	r2,r2,zero
    b420:	1000081e 	bne	r2,zero,b444 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b424:	e0bffb17 	ldw	r2,-20(fp)
    b428:	10800017 	ldw	r2,0(r2)
    b42c:	10800817 	ldw	r2,32(r2)
    b430:	e13ffb17 	ldw	r4,-20(fp)
    b434:	e17ffd17 	ldw	r5,-12(fp)
    b438:	103ee83a 	callr	r2
    b43c:	e0bffe15 	stw	r2,-8(fp)
    b440:	00000b06 	br	b470 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b444:	e0fffd17 	ldw	r3,-12(fp)
    b448:	00880004 	movi	r2,8192
    b44c:	18800115 	stw	r2,4(r3)
      return 0;
    b450:	e03ffe15 	stw	zero,-8(fp)
    b454:	00000606 	br	b470 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b458:	000b4880 	call	b488 <alt_get_errno>
    b45c:	1007883a 	mov	r3,r2
    b460:	00801444 	movi	r2,81
    b464:	18800015 	stw	r2,0(r3)
    return -1;
    b468:	00bfffc4 	movi	r2,-1
    b46c:	e0bffe15 	stw	r2,-8(fp)
    b470:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b474:	e037883a 	mov	sp,fp
    b478:	dfc00117 	ldw	ra,4(sp)
    b47c:	df000017 	ldw	fp,0(sp)
    b480:	dec00204 	addi	sp,sp,8
    b484:	f800283a 	ret

0000b488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b488:	defffd04 	addi	sp,sp,-12
    b48c:	dfc00215 	stw	ra,8(sp)
    b490:	df000115 	stw	fp,4(sp)
    b494:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b498:	00800074 	movhi	r2,1
    b49c:	10be9f04 	addi	r2,r2,-1412
    b4a0:	10800017 	ldw	r2,0(r2)
    b4a4:	1005003a 	cmpeq	r2,r2,zero
    b4a8:	1000061e 	bne	r2,zero,b4c4 <alt_get_errno+0x3c>
    b4ac:	00800074 	movhi	r2,1
    b4b0:	10be9f04 	addi	r2,r2,-1412
    b4b4:	10800017 	ldw	r2,0(r2)
    b4b8:	103ee83a 	callr	r2
    b4bc:	e0bfff15 	stw	r2,-4(fp)
    b4c0:	00000306 	br	b4d0 <alt_get_errno+0x48>
    b4c4:	00800074 	movhi	r2,1
    b4c8:	10854704 	addi	r2,r2,5404
    b4cc:	e0bfff15 	stw	r2,-4(fp)
    b4d0:	e0bfff17 	ldw	r2,-4(fp)
}
    b4d4:	e037883a 	mov	sp,fp
    b4d8:	dfc00117 	ldw	ra,4(sp)
    b4dc:	df000017 	ldw	fp,0(sp)
    b4e0:	dec00204 	addi	sp,sp,8
    b4e4:	f800283a 	ret

0000b4e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b4e8:	deffef04 	addi	sp,sp,-68
    b4ec:	df001015 	stw	fp,64(sp)
    b4f0:	df001004 	addi	fp,sp,64
    b4f4:	e13ffc15 	stw	r4,-16(fp)
    b4f8:	e17ffd15 	stw	r5,-12(fp)
    b4fc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b500:	00bffa84 	movi	r2,-22
    b504:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b508:	e0bffc17 	ldw	r2,-16(fp)
    b50c:	10800828 	cmpgeui	r2,r2,32
    b510:	1000601e 	bne	r2,zero,b694 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b514:	0005303a 	rdctl	r2,status
    b518:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b51c:	e0fff917 	ldw	r3,-28(fp)
    b520:	00bfff84 	movi	r2,-2
    b524:	1884703a 	and	r2,r3,r2
    b528:	1001703a 	wrctl	status,r2
  
  return context;
    b52c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b530:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b534:	e0bffc17 	ldw	r2,-16(fp)
    b538:	00c00074 	movhi	r3,1
    b53c:	18c68804 	addi	r3,r3,6688
    b540:	100490fa 	slli	r2,r2,3
    b544:	10c7883a 	add	r3,r2,r3
    b548:	e0bffe17 	ldw	r2,-8(fp)
    b54c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b550:	e0bffc17 	ldw	r2,-16(fp)
    b554:	00c00074 	movhi	r3,1
    b558:	18c68804 	addi	r3,r3,6688
    b55c:	100490fa 	slli	r2,r2,3
    b560:	10c5883a 	add	r2,r2,r3
    b564:	10c00104 	addi	r3,r2,4
    b568:	e0bffd17 	ldw	r2,-12(fp)
    b56c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b570:	e0bffe17 	ldw	r2,-8(fp)
    b574:	1005003a 	cmpeq	r2,r2,zero
    b578:	1000201e 	bne	r2,zero,b5fc <alt_irq_register+0x114>
    b57c:	e0bffc17 	ldw	r2,-16(fp)
    b580:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b584:	0005303a 	rdctl	r2,status
    b588:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b58c:	e0fff617 	ldw	r3,-40(fp)
    b590:	00bfff84 	movi	r2,-2
    b594:	1884703a 	and	r2,r3,r2
    b598:	1001703a 	wrctl	status,r2
  
  return context;
    b59c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b5a0:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b5a4:	e0fff717 	ldw	r3,-36(fp)
    b5a8:	00800044 	movi	r2,1
    b5ac:	10c4983a 	sll	r2,r2,r3
    b5b0:	1007883a 	mov	r3,r2
    b5b4:	00800074 	movhi	r2,1
    b5b8:	10854b04 	addi	r2,r2,5420
    b5bc:	10800017 	ldw	r2,0(r2)
    b5c0:	1886b03a 	or	r3,r3,r2
    b5c4:	00800074 	movhi	r2,1
    b5c8:	10854b04 	addi	r2,r2,5420
    b5cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b5d0:	00800074 	movhi	r2,1
    b5d4:	10854b04 	addi	r2,r2,5420
    b5d8:	10800017 	ldw	r2,0(r2)
    b5dc:	100170fa 	wrctl	ienable,r2
    b5e0:	e0bff817 	ldw	r2,-32(fp)
    b5e4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5e8:	e0bff517 	ldw	r2,-44(fp)
    b5ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b5f0:	0005883a 	mov	r2,zero
    b5f4:	e0bfff15 	stw	r2,-4(fp)
    b5f8:	00002006 	br	b67c <alt_irq_register+0x194>
    b5fc:	e0bffc17 	ldw	r2,-16(fp)
    b600:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b604:	0005303a 	rdctl	r2,status
    b608:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b60c:	e0fff217 	ldw	r3,-56(fp)
    b610:	00bfff84 	movi	r2,-2
    b614:	1884703a 	and	r2,r3,r2
    b618:	1001703a 	wrctl	status,r2
  
  return context;
    b61c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b620:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    b624:	e0fff317 	ldw	r3,-52(fp)
    b628:	00800044 	movi	r2,1
    b62c:	10c4983a 	sll	r2,r2,r3
    b630:	0084303a 	nor	r2,zero,r2
    b634:	1007883a 	mov	r3,r2
    b638:	00800074 	movhi	r2,1
    b63c:	10854b04 	addi	r2,r2,5420
    b640:	10800017 	ldw	r2,0(r2)
    b644:	1886703a 	and	r3,r3,r2
    b648:	00800074 	movhi	r2,1
    b64c:	10854b04 	addi	r2,r2,5420
    b650:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b654:	00800074 	movhi	r2,1
    b658:	10854b04 	addi	r2,r2,5420
    b65c:	10800017 	ldw	r2,0(r2)
    b660:	100170fa 	wrctl	ienable,r2
    b664:	e0bff417 	ldw	r2,-48(fp)
    b668:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b66c:	e0bff117 	ldw	r2,-60(fp)
    b670:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b674:	0005883a 	mov	r2,zero
    b678:	e0bfff15 	stw	r2,-4(fp)
    b67c:	e0bfff17 	ldw	r2,-4(fp)
    b680:	e0bffb15 	stw	r2,-20(fp)
    b684:	e0bffa17 	ldw	r2,-24(fp)
    b688:	e0bff015 	stw	r2,-64(fp)
    b68c:	e0bff017 	ldw	r2,-64(fp)
    b690:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b694:	e0bffb17 	ldw	r2,-20(fp)
}
    b698:	e037883a 	mov	sp,fp
    b69c:	df000017 	ldw	fp,0(sp)
    b6a0:	dec00104 	addi	sp,sp,4
    b6a4:	f800283a 	ret

0000b6a8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b6a8:	deffeb04 	addi	sp,sp,-84
    b6ac:	dfc01415 	stw	ra,80(sp)
    b6b0:	df001315 	stw	fp,76(sp)
    b6b4:	df001304 	addi	fp,sp,76
    b6b8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b6bc:	e0bffd17 	ldw	r2,-12(fp)
    b6c0:	1004803a 	cmplt	r2,r2,zero
    b6c4:	1000081e 	bne	r2,zero,b6e8 <isatty+0x40>
    b6c8:	e0bffd17 	ldw	r2,-12(fp)
    b6cc:	10800324 	muli	r2,r2,12
    b6d0:	1007883a 	mov	r3,r2
    b6d4:	00800074 	movhi	r2,1
    b6d8:	10ba1b04 	addi	r2,r2,-6036
    b6dc:	1887883a 	add	r3,r3,r2
    b6e0:	e0ffff15 	stw	r3,-4(fp)
    b6e4:	00000106 	br	b6ec <isatty+0x44>
    b6e8:	e03fff15 	stw	zero,-4(fp)
    b6ec:	e0bfff17 	ldw	r2,-4(fp)
    b6f0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b6f4:	e0bfed17 	ldw	r2,-76(fp)
    b6f8:	1005003a 	cmpeq	r2,r2,zero
    b6fc:	10000f1e 	bne	r2,zero,b73c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b700:	e0bfed17 	ldw	r2,-76(fp)
    b704:	10800017 	ldw	r2,0(r2)
    b708:	10800817 	ldw	r2,32(r2)
    b70c:	1004c03a 	cmpne	r2,r2,zero
    b710:	1000031e 	bne	r2,zero,b720 <isatty+0x78>
    {
      return 1;
    b714:	00800044 	movi	r2,1
    b718:	e0bffe15 	stw	r2,-8(fp)
    b71c:	00000c06 	br	b750 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b720:	e17fee04 	addi	r5,fp,-72
    b724:	e13ffd17 	ldw	r4,-12(fp)
    b728:	000b3b40 	call	b3b4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b72c:	e0bfef17 	ldw	r2,-68(fp)
    b730:	10880020 	cmpeqi	r2,r2,8192
    b734:	e0bffe15 	stw	r2,-8(fp)
    b738:	00000506 	br	b750 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b73c:	000b7680 	call	b768 <alt_get_errno>
    b740:	1007883a 	mov	r3,r2
    b744:	00801444 	movi	r2,81
    b748:	18800015 	stw	r2,0(r3)
    return 0;
    b74c:	e03ffe15 	stw	zero,-8(fp)
    b750:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b754:	e037883a 	mov	sp,fp
    b758:	dfc00117 	ldw	ra,4(sp)
    b75c:	df000017 	ldw	fp,0(sp)
    b760:	dec00204 	addi	sp,sp,8
    b764:	f800283a 	ret

0000b768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b768:	defffd04 	addi	sp,sp,-12
    b76c:	dfc00215 	stw	ra,8(sp)
    b770:	df000115 	stw	fp,4(sp)
    b774:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b778:	00800074 	movhi	r2,1
    b77c:	10be9f04 	addi	r2,r2,-1412
    b780:	10800017 	ldw	r2,0(r2)
    b784:	1005003a 	cmpeq	r2,r2,zero
    b788:	1000061e 	bne	r2,zero,b7a4 <alt_get_errno+0x3c>
    b78c:	00800074 	movhi	r2,1
    b790:	10be9f04 	addi	r2,r2,-1412
    b794:	10800017 	ldw	r2,0(r2)
    b798:	103ee83a 	callr	r2
    b79c:	e0bfff15 	stw	r2,-4(fp)
    b7a0:	00000306 	br	b7b0 <alt_get_errno+0x48>
    b7a4:	00800074 	movhi	r2,1
    b7a8:	10854704 	addi	r2,r2,5404
    b7ac:	e0bfff15 	stw	r2,-4(fp)
    b7b0:	e0bfff17 	ldw	r2,-4(fp)
}
    b7b4:	e037883a 	mov	sp,fp
    b7b8:	dfc00117 	ldw	ra,4(sp)
    b7bc:	df000017 	ldw	fp,0(sp)
    b7c0:	dec00204 	addi	sp,sp,8
    b7c4:	f800283a 	ret

0000b7c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b7c8:	defffe04 	addi	sp,sp,-8
    b7cc:	dfc00115 	stw	ra,4(sp)
    b7d0:	df000015 	stw	fp,0(sp)
    b7d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b7d8:	01000074 	movhi	r4,1
    b7dc:	213ea404 	addi	r4,r4,-1392
    b7e0:	01400074 	movhi	r5,1
    b7e4:	29780c04 	addi	r5,r5,-8144
    b7e8:	01800074 	movhi	r6,1
    b7ec:	31bea404 	addi	r6,r6,-1392
    b7f0:	000b8480 	call	b848 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b7f4:	01000034 	movhi	r4,0
    b7f8:	21000004 	addi	r4,r4,0
    b7fc:	01408034 	movhi	r5,512
    b800:	29400804 	addi	r5,r5,32
    b804:	01808034 	movhi	r6,512
    b808:	31806d04 	addi	r6,r6,436
    b80c:	000b8480 	call	b848 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b810:	01000074 	movhi	r4,1
    b814:	21370204 	addi	r4,r4,-9208
    b818:	01400074 	movhi	r5,1
    b81c:	29770204 	addi	r5,r5,-9208
    b820:	01800074 	movhi	r6,1
    b824:	31b80c04 	addi	r6,r6,-8144
    b828:	000b8480 	call	b848 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b82c:	000cc940 	call	cc94 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b830:	000ce8c0 	call	ce8c <alt_icache_flush_all>
}
    b834:	e037883a 	mov	sp,fp
    b838:	dfc00117 	ldw	ra,4(sp)
    b83c:	df000017 	ldw	fp,0(sp)
    b840:	dec00204 	addi	sp,sp,8
    b844:	f800283a 	ret

0000b848 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b848:	defffc04 	addi	sp,sp,-16
    b84c:	df000315 	stw	fp,12(sp)
    b850:	df000304 	addi	fp,sp,12
    b854:	e13ffd15 	stw	r4,-12(fp)
    b858:	e17ffe15 	stw	r5,-8(fp)
    b85c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b860:	e0fffe17 	ldw	r3,-8(fp)
    b864:	e0bffd17 	ldw	r2,-12(fp)
    b868:	18800e26 	beq	r3,r2,b8a4 <alt_load_section+0x5c>
  {
    while( to != end )
    b86c:	00000a06 	br	b898 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b870:	e0bffd17 	ldw	r2,-12(fp)
    b874:	10c00017 	ldw	r3,0(r2)
    b878:	e0bffe17 	ldw	r2,-8(fp)
    b87c:	10c00015 	stw	r3,0(r2)
    b880:	e0bffe17 	ldw	r2,-8(fp)
    b884:	10800104 	addi	r2,r2,4
    b888:	e0bffe15 	stw	r2,-8(fp)
    b88c:	e0bffd17 	ldw	r2,-12(fp)
    b890:	10800104 	addi	r2,r2,4
    b894:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b898:	e0fffe17 	ldw	r3,-8(fp)
    b89c:	e0bfff17 	ldw	r2,-4(fp)
    b8a0:	18bff31e 	bne	r3,r2,b870 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b8a4:	e037883a 	mov	sp,fp
    b8a8:	df000017 	ldw	fp,0(sp)
    b8ac:	dec00104 	addi	sp,sp,4
    b8b0:	f800283a 	ret

0000b8b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b8b4:	defff804 	addi	sp,sp,-32
    b8b8:	dfc00715 	stw	ra,28(sp)
    b8bc:	df000615 	stw	fp,24(sp)
    b8c0:	df000604 	addi	fp,sp,24
    b8c4:	e13ffc15 	stw	r4,-16(fp)
    b8c8:	e17ffd15 	stw	r5,-12(fp)
    b8cc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b8d0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b8d4:	e0bffc17 	ldw	r2,-16(fp)
    b8d8:	1004803a 	cmplt	r2,r2,zero
    b8dc:	1000081e 	bne	r2,zero,b900 <lseek+0x4c>
    b8e0:	e0bffc17 	ldw	r2,-16(fp)
    b8e4:	10800324 	muli	r2,r2,12
    b8e8:	1007883a 	mov	r3,r2
    b8ec:	00800074 	movhi	r2,1
    b8f0:	10ba1b04 	addi	r2,r2,-6036
    b8f4:	1887883a 	add	r3,r3,r2
    b8f8:	e0ffff15 	stw	r3,-4(fp)
    b8fc:	00000106 	br	b904 <lseek+0x50>
    b900:	e03fff15 	stw	zero,-4(fp)
    b904:	e0bfff17 	ldw	r2,-4(fp)
    b908:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b90c:	e0bffb17 	ldw	r2,-20(fp)
    b910:	1005003a 	cmpeq	r2,r2,zero
    b914:	1000111e 	bne	r2,zero,b95c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b918:	e0bffb17 	ldw	r2,-20(fp)
    b91c:	10800017 	ldw	r2,0(r2)
    b920:	10800717 	ldw	r2,28(r2)
    b924:	1005003a 	cmpeq	r2,r2,zero
    b928:	1000091e 	bne	r2,zero,b950 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b92c:	e0bffb17 	ldw	r2,-20(fp)
    b930:	10800017 	ldw	r2,0(r2)
    b934:	10800717 	ldw	r2,28(r2)
    b938:	e13ffb17 	ldw	r4,-20(fp)
    b93c:	e17ffd17 	ldw	r5,-12(fp)
    b940:	e1bffe17 	ldw	r6,-8(fp)
    b944:	103ee83a 	callr	r2
    b948:	e0bffa15 	stw	r2,-24(fp)
    b94c:	00000506 	br	b964 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b950:	00bfde84 	movi	r2,-134
    b954:	e0bffa15 	stw	r2,-24(fp)
    b958:	00000206 	br	b964 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b95c:	00bfebc4 	movi	r2,-81
    b960:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b964:	e0bffa17 	ldw	r2,-24(fp)
    b968:	1004403a 	cmpge	r2,r2,zero
    b96c:	1000071e 	bne	r2,zero,b98c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b970:	000b9a40 	call	b9a4 <alt_get_errno>
    b974:	1007883a 	mov	r3,r2
    b978:	e0bffa17 	ldw	r2,-24(fp)
    b97c:	0085c83a 	sub	r2,zero,r2
    b980:	18800015 	stw	r2,0(r3)
    rc = -1;
    b984:	00bfffc4 	movi	r2,-1
    b988:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b98c:	e0bffa17 	ldw	r2,-24(fp)
}
    b990:	e037883a 	mov	sp,fp
    b994:	dfc00117 	ldw	ra,4(sp)
    b998:	df000017 	ldw	fp,0(sp)
    b99c:	dec00204 	addi	sp,sp,8
    b9a0:	f800283a 	ret

0000b9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b9a4:	defffd04 	addi	sp,sp,-12
    b9a8:	dfc00215 	stw	ra,8(sp)
    b9ac:	df000115 	stw	fp,4(sp)
    b9b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b9b4:	00800074 	movhi	r2,1
    b9b8:	10be9f04 	addi	r2,r2,-1412
    b9bc:	10800017 	ldw	r2,0(r2)
    b9c0:	1005003a 	cmpeq	r2,r2,zero
    b9c4:	1000061e 	bne	r2,zero,b9e0 <alt_get_errno+0x3c>
    b9c8:	00800074 	movhi	r2,1
    b9cc:	10be9f04 	addi	r2,r2,-1412
    b9d0:	10800017 	ldw	r2,0(r2)
    b9d4:	103ee83a 	callr	r2
    b9d8:	e0bfff15 	stw	r2,-4(fp)
    b9dc:	00000306 	br	b9ec <alt_get_errno+0x48>
    b9e0:	00800074 	movhi	r2,1
    b9e4:	10854704 	addi	r2,r2,5404
    b9e8:	e0bfff15 	stw	r2,-4(fp)
    b9ec:	e0bfff17 	ldw	r2,-4(fp)
}
    b9f0:	e037883a 	mov	sp,fp
    b9f4:	dfc00117 	ldw	ra,4(sp)
    b9f8:	df000017 	ldw	fp,0(sp)
    b9fc:	dec00204 	addi	sp,sp,8
    ba00:	f800283a 	ret

0000ba04 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ba04:	defffd04 	addi	sp,sp,-12
    ba08:	dfc00215 	stw	ra,8(sp)
    ba0c:	df000115 	stw	fp,4(sp)
    ba10:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ba14:	0009883a 	mov	r4,zero
    ba18:	000becc0 	call	becc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ba1c:	000bf000 	call	bf00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ba20:	01000074 	movhi	r4,1
    ba24:	21380204 	addi	r4,r4,-8184
    ba28:	01400074 	movhi	r5,1
    ba2c:	29780204 	addi	r5,r5,-8184
    ba30:	01800074 	movhi	r6,1
    ba34:	31b80204 	addi	r6,r6,-8184
    ba38:	000d24c0 	call	d24c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ba3c:	000cdc40 	call	cdc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ba40:	01000074 	movhi	r4,1
    ba44:	21338a04 	addi	r4,r4,-12760
    ba48:	000da480 	call	da48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ba4c:	d126b917 	ldw	r4,-25884(gp)
    ba50:	d166ba17 	ldw	r5,-25880(gp)
    ba54:	d1a6bb17 	ldw	r6,-25876(gp)
    ba58:	00007800 	call	780 <main>
    ba5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ba60:	01000044 	movi	r4,1
    ba64:	000b1cc0 	call	b1cc <close>
  exit (result);
    ba68:	e13fff17 	ldw	r4,-4(fp)
    ba6c:	00019c00 	call	19c0 <exit>

0000ba70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    ba70:	defffe04 	addi	sp,sp,-8
    ba74:	df000115 	stw	fp,4(sp)
    ba78:	df000104 	addi	fp,sp,4
    ba7c:	e13fff15 	stw	r4,-4(fp)
}
    ba80:	e037883a 	mov	sp,fp
    ba84:	df000017 	ldw	fp,0(sp)
    ba88:	dec00104 	addi	sp,sp,4
    ba8c:	f800283a 	ret

0000ba90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ba90:	defffe04 	addi	sp,sp,-8
    ba94:	df000115 	stw	fp,4(sp)
    ba98:	df000104 	addi	fp,sp,4
    ba9c:	e13fff15 	stw	r4,-4(fp)
}
    baa0:	e037883a 	mov	sp,fp
    baa4:	df000017 	ldw	fp,0(sp)
    baa8:	dec00104 	addi	sp,sp,4
    baac:	f800283a 	ret

0000bab0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bab0:	defff704 	addi	sp,sp,-36
    bab4:	dfc00815 	stw	ra,32(sp)
    bab8:	df000715 	stw	fp,28(sp)
    babc:	df000704 	addi	fp,sp,28
    bac0:	e13ffb15 	stw	r4,-20(fp)
    bac4:	e17ffc15 	stw	r5,-16(fp)
    bac8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bacc:	e0bffb17 	ldw	r2,-20(fp)
    bad0:	1004803a 	cmplt	r2,r2,zero
    bad4:	1000081e 	bne	r2,zero,baf8 <read+0x48>
    bad8:	e0bffb17 	ldw	r2,-20(fp)
    badc:	10800324 	muli	r2,r2,12
    bae0:	1007883a 	mov	r3,r2
    bae4:	00800074 	movhi	r2,1
    bae8:	10ba1b04 	addi	r2,r2,-6036
    baec:	1887883a 	add	r3,r3,r2
    baf0:	e0ffff15 	stw	r3,-4(fp)
    baf4:	00000106 	br	bafc <read+0x4c>
    baf8:	e03fff15 	stw	zero,-4(fp)
    bafc:	e0bfff17 	ldw	r2,-4(fp)
    bb00:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bb04:	e0bffa17 	ldw	r2,-24(fp)
    bb08:	1005003a 	cmpeq	r2,r2,zero
    bb0c:	1000241e 	bne	r2,zero,bba0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bb10:	e0bffa17 	ldw	r2,-24(fp)
    bb14:	10800217 	ldw	r2,8(r2)
    bb18:	108000cc 	andi	r2,r2,3
    bb1c:	10800060 	cmpeqi	r2,r2,1
    bb20:	10001a1e 	bne	r2,zero,bb8c <read+0xdc>
    bb24:	e0bffa17 	ldw	r2,-24(fp)
    bb28:	10800017 	ldw	r2,0(r2)
    bb2c:	10800517 	ldw	r2,20(r2)
    bb30:	1005003a 	cmpeq	r2,r2,zero
    bb34:	1000151e 	bne	r2,zero,bb8c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    bb38:	e0bffa17 	ldw	r2,-24(fp)
    bb3c:	10800017 	ldw	r2,0(r2)
    bb40:	10800517 	ldw	r2,20(r2)
    bb44:	e17ffc17 	ldw	r5,-16(fp)
    bb48:	e1bffd17 	ldw	r6,-12(fp)
    bb4c:	e13ffa17 	ldw	r4,-24(fp)
    bb50:	103ee83a 	callr	r2
    bb54:	e0bff915 	stw	r2,-28(fp)
    bb58:	e0bff917 	ldw	r2,-28(fp)
    bb5c:	1004403a 	cmpge	r2,r2,zero
    bb60:	1000071e 	bne	r2,zero,bb80 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    bb64:	000bbd00 	call	bbd0 <alt_get_errno>
    bb68:	e0fff917 	ldw	r3,-28(fp)
    bb6c:	00c7c83a 	sub	r3,zero,r3
    bb70:	10c00015 	stw	r3,0(r2)
          return -1;
    bb74:	00bfffc4 	movi	r2,-1
    bb78:	e0bffe15 	stw	r2,-8(fp)
    bb7c:	00000e06 	br	bbb8 <read+0x108>
        }
        return rval;
    bb80:	e0bff917 	ldw	r2,-28(fp)
    bb84:	e0bffe15 	stw	r2,-8(fp)
    bb88:	00000b06 	br	bbb8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    bb8c:	000bbd00 	call	bbd0 <alt_get_errno>
    bb90:	1007883a 	mov	r3,r2
    bb94:	00800344 	movi	r2,13
    bb98:	18800015 	stw	r2,0(r3)
    bb9c:	00000406 	br	bbb0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    bba0:	000bbd00 	call	bbd0 <alt_get_errno>
    bba4:	1007883a 	mov	r3,r2
    bba8:	00801444 	movi	r2,81
    bbac:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bbb0:	00bfffc4 	movi	r2,-1
    bbb4:	e0bffe15 	stw	r2,-8(fp)
    bbb8:	e0bffe17 	ldw	r2,-8(fp)
}
    bbbc:	e037883a 	mov	sp,fp
    bbc0:	dfc00117 	ldw	ra,4(sp)
    bbc4:	df000017 	ldw	fp,0(sp)
    bbc8:	dec00204 	addi	sp,sp,8
    bbcc:	f800283a 	ret

0000bbd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bbd0:	defffd04 	addi	sp,sp,-12
    bbd4:	dfc00215 	stw	ra,8(sp)
    bbd8:	df000115 	stw	fp,4(sp)
    bbdc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bbe0:	00800074 	movhi	r2,1
    bbe4:	10be9f04 	addi	r2,r2,-1412
    bbe8:	10800017 	ldw	r2,0(r2)
    bbec:	1005003a 	cmpeq	r2,r2,zero
    bbf0:	1000061e 	bne	r2,zero,bc0c <alt_get_errno+0x3c>
    bbf4:	00800074 	movhi	r2,1
    bbf8:	10be9f04 	addi	r2,r2,-1412
    bbfc:	10800017 	ldw	r2,0(r2)
    bc00:	103ee83a 	callr	r2
    bc04:	e0bfff15 	stw	r2,-4(fp)
    bc08:	00000306 	br	bc18 <alt_get_errno+0x48>
    bc0c:	00800074 	movhi	r2,1
    bc10:	10854704 	addi	r2,r2,5404
    bc14:	e0bfff15 	stw	r2,-4(fp)
    bc18:	e0bfff17 	ldw	r2,-4(fp)
}
    bc1c:	e037883a 	mov	sp,fp
    bc20:	dfc00117 	ldw	ra,4(sp)
    bc24:	df000017 	ldw	fp,0(sp)
    bc28:	dec00204 	addi	sp,sp,8
    bc2c:	f800283a 	ret

0000bc30 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    bc30:	defffe04 	addi	sp,sp,-8
    bc34:	df000115 	stw	fp,4(sp)
    bc38:	df000104 	addi	fp,sp,4
    bc3c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    bc40:	e0bfff17 	ldw	r2,-4(fp)
    bc44:	108000d0 	cmplti	r2,r2,3
    bc48:	10000d1e 	bne	r2,zero,bc80 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    bc4c:	e0bfff17 	ldw	r2,-4(fp)
    bc50:	00c00074 	movhi	r3,1
    bc54:	18fa1b04 	addi	r3,r3,-6036
    bc58:	10800324 	muli	r2,r2,12
    bc5c:	10c5883a 	add	r2,r2,r3
    bc60:	10800204 	addi	r2,r2,8
    bc64:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bc68:	e0bfff17 	ldw	r2,-4(fp)
    bc6c:	00c00074 	movhi	r3,1
    bc70:	18fa1b04 	addi	r3,r3,-6036
    bc74:	10800324 	muli	r2,r2,12
    bc78:	10c5883a 	add	r2,r2,r3
    bc7c:	10000015 	stw	zero,0(r2)
  }
}
    bc80:	e037883a 	mov	sp,fp
    bc84:	df000017 	ldw	fp,0(sp)
    bc88:	dec00104 	addi	sp,sp,4
    bc8c:	f800283a 	ret

0000bc90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    bc90:	defff804 	addi	sp,sp,-32
    bc94:	df000715 	stw	fp,28(sp)
    bc98:	df000704 	addi	fp,sp,28
    bc9c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bca0:	0005303a 	rdctl	r2,status
    bca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bca8:	e0fffb17 	ldw	r3,-20(fp)
    bcac:	00bfff84 	movi	r2,-2
    bcb0:	1884703a 	and	r2,r3,r2
    bcb4:	1001703a 	wrctl	status,r2
  
  return context;
    bcb8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    bcbc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bcc0:	d0a00e17 	ldw	r2,-32712(gp)
    bcc4:	10c000c4 	addi	r3,r2,3
    bcc8:	00bfff04 	movi	r2,-4
    bccc:	1884703a 	and	r2,r3,r2
    bcd0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bcd4:	d0e00e17 	ldw	r3,-32712(gp)
    bcd8:	e0bffe17 	ldw	r2,-8(fp)
    bcdc:	1887883a 	add	r3,r3,r2
    bce0:	00808034 	movhi	r2,512
    bce4:	10800004 	addi	r2,r2,0
    bce8:	10c0072e 	bgeu	r2,r3,bd08 <sbrk+0x78>
    bcec:	e0bffd17 	ldw	r2,-12(fp)
    bcf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bcf4:	e0bffa17 	ldw	r2,-24(fp)
    bcf8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    bcfc:	00bfffc4 	movi	r2,-1
    bd00:	e0bfff15 	stw	r2,-4(fp)
    bd04:	00000c06 	br	bd38 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    bd08:	d0a00e17 	ldw	r2,-32712(gp)
    bd0c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    bd10:	d0e00e17 	ldw	r3,-32712(gp)
    bd14:	e0bffe17 	ldw	r2,-8(fp)
    bd18:	1885883a 	add	r2,r3,r2
    bd1c:	d0a00e15 	stw	r2,-32712(gp)
    bd20:	e0bffd17 	ldw	r2,-12(fp)
    bd24:	e0bff915 	stw	r2,-28(fp)
    bd28:	e0bff917 	ldw	r2,-28(fp)
    bd2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    bd30:	e0bffc17 	ldw	r2,-16(fp)
    bd34:	e0bfff15 	stw	r2,-4(fp)
    bd38:	e0bfff17 	ldw	r2,-4(fp)
} 
    bd3c:	e037883a 	mov	sp,fp
    bd40:	df000017 	ldw	fp,0(sp)
    bd44:	dec00104 	addi	sp,sp,4
    bd48:	f800283a 	ret

0000bd4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bd4c:	defff704 	addi	sp,sp,-36
    bd50:	dfc00815 	stw	ra,32(sp)
    bd54:	df000715 	stw	fp,28(sp)
    bd58:	df000704 	addi	fp,sp,28
    bd5c:	e13ffb15 	stw	r4,-20(fp)
    bd60:	e17ffc15 	stw	r5,-16(fp)
    bd64:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bd68:	e0bffb17 	ldw	r2,-20(fp)
    bd6c:	1004803a 	cmplt	r2,r2,zero
    bd70:	1000081e 	bne	r2,zero,bd94 <write+0x48>
    bd74:	e0bffb17 	ldw	r2,-20(fp)
    bd78:	10800324 	muli	r2,r2,12
    bd7c:	1007883a 	mov	r3,r2
    bd80:	00800074 	movhi	r2,1
    bd84:	10ba1b04 	addi	r2,r2,-6036
    bd88:	1887883a 	add	r3,r3,r2
    bd8c:	e0ffff15 	stw	r3,-4(fp)
    bd90:	00000106 	br	bd98 <write+0x4c>
    bd94:	e03fff15 	stw	zero,-4(fp)
    bd98:	e0bfff17 	ldw	r2,-4(fp)
    bd9c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bda0:	e0bffa17 	ldw	r2,-24(fp)
    bda4:	1005003a 	cmpeq	r2,r2,zero
    bda8:	1000241e 	bne	r2,zero,be3c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bdac:	e0bffa17 	ldw	r2,-24(fp)
    bdb0:	10800217 	ldw	r2,8(r2)
    bdb4:	108000cc 	andi	r2,r2,3
    bdb8:	1005003a 	cmpeq	r2,r2,zero
    bdbc:	10001a1e 	bne	r2,zero,be28 <write+0xdc>
    bdc0:	e0bffa17 	ldw	r2,-24(fp)
    bdc4:	10800017 	ldw	r2,0(r2)
    bdc8:	10800617 	ldw	r2,24(r2)
    bdcc:	1005003a 	cmpeq	r2,r2,zero
    bdd0:	1000151e 	bne	r2,zero,be28 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bdd4:	e0bffa17 	ldw	r2,-24(fp)
    bdd8:	10800017 	ldw	r2,0(r2)
    bddc:	10800617 	ldw	r2,24(r2)
    bde0:	e17ffc17 	ldw	r5,-16(fp)
    bde4:	e1bffd17 	ldw	r6,-12(fp)
    bde8:	e13ffa17 	ldw	r4,-24(fp)
    bdec:	103ee83a 	callr	r2
    bdf0:	e0bff915 	stw	r2,-28(fp)
    bdf4:	e0bff917 	ldw	r2,-28(fp)
    bdf8:	1004403a 	cmpge	r2,r2,zero
    bdfc:	1000071e 	bne	r2,zero,be1c <write+0xd0>
      {
        ALT_ERRNO = -rval;
    be00:	000be6c0 	call	be6c <alt_get_errno>
    be04:	e0fff917 	ldw	r3,-28(fp)
    be08:	00c7c83a 	sub	r3,zero,r3
    be0c:	10c00015 	stw	r3,0(r2)
        return -1;
    be10:	00bfffc4 	movi	r2,-1
    be14:	e0bffe15 	stw	r2,-8(fp)
    be18:	00000e06 	br	be54 <write+0x108>
      }
      return rval;
    be1c:	e0bff917 	ldw	r2,-28(fp)
    be20:	e0bffe15 	stw	r2,-8(fp)
    be24:	00000b06 	br	be54 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    be28:	000be6c0 	call	be6c <alt_get_errno>
    be2c:	1007883a 	mov	r3,r2
    be30:	00800344 	movi	r2,13
    be34:	18800015 	stw	r2,0(r3)
    be38:	00000406 	br	be4c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    be3c:	000be6c0 	call	be6c <alt_get_errno>
    be40:	1007883a 	mov	r3,r2
    be44:	00801444 	movi	r2,81
    be48:	18800015 	stw	r2,0(r3)
  }
  return -1;
    be4c:	00bfffc4 	movi	r2,-1
    be50:	e0bffe15 	stw	r2,-8(fp)
    be54:	e0bffe17 	ldw	r2,-8(fp)
}
    be58:	e037883a 	mov	sp,fp
    be5c:	dfc00117 	ldw	ra,4(sp)
    be60:	df000017 	ldw	fp,0(sp)
    be64:	dec00204 	addi	sp,sp,8
    be68:	f800283a 	ret

0000be6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be6c:	defffd04 	addi	sp,sp,-12
    be70:	dfc00215 	stw	ra,8(sp)
    be74:	df000115 	stw	fp,4(sp)
    be78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    be7c:	00800074 	movhi	r2,1
    be80:	10be9f04 	addi	r2,r2,-1412
    be84:	10800017 	ldw	r2,0(r2)
    be88:	1005003a 	cmpeq	r2,r2,zero
    be8c:	1000061e 	bne	r2,zero,bea8 <alt_get_errno+0x3c>
    be90:	00800074 	movhi	r2,1
    be94:	10be9f04 	addi	r2,r2,-1412
    be98:	10800017 	ldw	r2,0(r2)
    be9c:	103ee83a 	callr	r2
    bea0:	e0bfff15 	stw	r2,-4(fp)
    bea4:	00000306 	br	beb4 <alt_get_errno+0x48>
    bea8:	00800074 	movhi	r2,1
    beac:	10854704 	addi	r2,r2,5404
    beb0:	e0bfff15 	stw	r2,-4(fp)
    beb4:	e0bfff17 	ldw	r2,-4(fp)
}
    beb8:	e037883a 	mov	sp,fp
    bebc:	dfc00117 	ldw	ra,4(sp)
    bec0:	df000017 	ldw	fp,0(sp)
    bec4:	dec00204 	addi	sp,sp,8
    bec8:	f800283a 	ret

0000becc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    becc:	defffd04 	addi	sp,sp,-12
    bed0:	dfc00215 	stw	ra,8(sp)
    bed4:	df000115 	stw	fp,4(sp)
    bed8:	df000104 	addi	fp,sp,4
    bedc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    bee0:	000d72c0 	call	d72c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bee4:	00800044 	movi	r2,1
    bee8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    beec:	e037883a 	mov	sp,fp
    bef0:	dfc00117 	ldw	ra,4(sp)
    bef4:	df000017 	ldw	fp,0(sp)
    bef8:	dec00204 	addi	sp,sp,8
    befc:	f800283a 	ret

0000bf00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bf00:	defffe04 	addi	sp,sp,-8
    bf04:	dfc00115 	stw	ra,4(sp)
    bf08:	df000015 	stw	fp,0(sp)
    bf0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    bf10:	01008034 	movhi	r4,512
    bf14:	21142804 	addi	r4,r4,20640
    bf18:	000b883a 	mov	r5,zero
    bf1c:	000d883a 	mov	r6,zero
    bf20:	01c0fa04 	movi	r7,1000
    bf24:	000cab00 	call	cab0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    bf28:	01000074 	movhi	r4,1
    bf2c:	213a8504 	addi	r4,r4,-5612
    bf30:	000b883a 	mov	r5,zero
    bf34:	018000c4 	movi	r6,3
    bf38:	000c0dc0 	call	c0dc <altera_avalon_jtag_uart_init>
    bf3c:	01000074 	movhi	r4,1
    bf40:	213a7b04 	addi	r4,r4,-5652
    bf44:	000bf5c0 	call	bf5c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    bf48:	e037883a 	mov	sp,fp
    bf4c:	dfc00117 	ldw	ra,4(sp)
    bf50:	df000017 	ldw	fp,0(sp)
    bf54:	dec00204 	addi	sp,sp,8
    bf58:	f800283a 	ret

0000bf5c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bf5c:	defffd04 	addi	sp,sp,-12
    bf60:	dfc00215 	stw	ra,8(sp)
    bf64:	df000115 	stw	fp,4(sp)
    bf68:	df000104 	addi	fp,sp,4
    bf6c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bf70:	e13fff17 	ldw	r4,-4(fp)
    bf74:	01400074 	movhi	r5,1
    bf78:	297e9c04 	addi	r5,r5,-1424
    bf7c:	000ccb00 	call	ccb0 <alt_dev_llist_insert>
}
    bf80:	e037883a 	mov	sp,fp
    bf84:	dfc00117 	ldw	ra,4(sp)
    bf88:	df000017 	ldw	fp,0(sp)
    bf8c:	dec00204 	addi	sp,sp,8
    bf90:	f800283a 	ret

0000bf94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bf94:	defffa04 	addi	sp,sp,-24
    bf98:	dfc00515 	stw	ra,20(sp)
    bf9c:	df000415 	stw	fp,16(sp)
    bfa0:	df000404 	addi	fp,sp,16
    bfa4:	e13ffd15 	stw	r4,-12(fp)
    bfa8:	e17ffe15 	stw	r5,-8(fp)
    bfac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bfb0:	e0bffd17 	ldw	r2,-12(fp)
    bfb4:	10800017 	ldw	r2,0(r2)
    bfb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bfbc:	e0bffc17 	ldw	r2,-16(fp)
    bfc0:	11000a04 	addi	r4,r2,40
    bfc4:	e0bffd17 	ldw	r2,-12(fp)
    bfc8:	11c00217 	ldw	r7,8(r2)
    bfcc:	e17ffe17 	ldw	r5,-8(fp)
    bfd0:	e1bfff17 	ldw	r6,-4(fp)
    bfd4:	000c5dc0 	call	c5dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bfd8:	e037883a 	mov	sp,fp
    bfdc:	dfc00117 	ldw	ra,4(sp)
    bfe0:	df000017 	ldw	fp,0(sp)
    bfe4:	dec00204 	addi	sp,sp,8
    bfe8:	f800283a 	ret

0000bfec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bfec:	defffa04 	addi	sp,sp,-24
    bff0:	dfc00515 	stw	ra,20(sp)
    bff4:	df000415 	stw	fp,16(sp)
    bff8:	df000404 	addi	fp,sp,16
    bffc:	e13ffd15 	stw	r4,-12(fp)
    c000:	e17ffe15 	stw	r5,-8(fp)
    c004:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c008:	e0bffd17 	ldw	r2,-12(fp)
    c00c:	10800017 	ldw	r2,0(r2)
    c010:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c014:	e0bffc17 	ldw	r2,-16(fp)
    c018:	11000a04 	addi	r4,r2,40
    c01c:	e0bffd17 	ldw	r2,-12(fp)
    c020:	11c00217 	ldw	r7,8(r2)
    c024:	e17ffe17 	ldw	r5,-8(fp)
    c028:	e1bfff17 	ldw	r6,-4(fp)
    c02c:	000c8000 	call	c800 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c030:	e037883a 	mov	sp,fp
    c034:	dfc00117 	ldw	ra,4(sp)
    c038:	df000017 	ldw	fp,0(sp)
    c03c:	dec00204 	addi	sp,sp,8
    c040:	f800283a 	ret

0000c044 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c044:	defffc04 	addi	sp,sp,-16
    c048:	dfc00315 	stw	ra,12(sp)
    c04c:	df000215 	stw	fp,8(sp)
    c050:	df000204 	addi	fp,sp,8
    c054:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c058:	e0bfff17 	ldw	r2,-4(fp)
    c05c:	10800017 	ldw	r2,0(r2)
    c060:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c064:	e0bffe17 	ldw	r2,-8(fp)
    c068:	11000a04 	addi	r4,r2,40
    c06c:	e0bfff17 	ldw	r2,-4(fp)
    c070:	11400217 	ldw	r5,8(r2)
    c074:	000c4740 	call	c474 <altera_avalon_jtag_uart_close>
}
    c078:	e037883a 	mov	sp,fp
    c07c:	dfc00117 	ldw	ra,4(sp)
    c080:	df000017 	ldw	fp,0(sp)
    c084:	dec00204 	addi	sp,sp,8
    c088:	f800283a 	ret

0000c08c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c08c:	defffa04 	addi	sp,sp,-24
    c090:	dfc00515 	stw	ra,20(sp)
    c094:	df000415 	stw	fp,16(sp)
    c098:	df000404 	addi	fp,sp,16
    c09c:	e13ffd15 	stw	r4,-12(fp)
    c0a0:	e17ffe15 	stw	r5,-8(fp)
    c0a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c0a8:	e0bffd17 	ldw	r2,-12(fp)
    c0ac:	10800017 	ldw	r2,0(r2)
    c0b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c0b4:	e0bffc17 	ldw	r2,-16(fp)
    c0b8:	11000a04 	addi	r4,r2,40
    c0bc:	e17ffe17 	ldw	r5,-8(fp)
    c0c0:	e1bfff17 	ldw	r6,-4(fp)
    c0c4:	000c4e80 	call	c4e8 <altera_avalon_jtag_uart_ioctl>
}
    c0c8:	e037883a 	mov	sp,fp
    c0cc:	dfc00117 	ldw	ra,4(sp)
    c0d0:	df000017 	ldw	fp,0(sp)
    c0d4:	dec00204 	addi	sp,sp,8
    c0d8:	f800283a 	ret

0000c0dc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c0dc:	defffa04 	addi	sp,sp,-24
    c0e0:	dfc00515 	stw	ra,20(sp)
    c0e4:	df000415 	stw	fp,16(sp)
    c0e8:	df000404 	addi	fp,sp,16
    c0ec:	e13ffd15 	stw	r4,-12(fp)
    c0f0:	e17ffe15 	stw	r5,-8(fp)
    c0f4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c0f8:	e0fffd17 	ldw	r3,-12(fp)
    c0fc:	00800044 	movi	r2,1
    c100:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c104:	e0bffd17 	ldw	r2,-12(fp)
    c108:	10800017 	ldw	r2,0(r2)
    c10c:	11000104 	addi	r4,r2,4
    c110:	e0bffd17 	ldw	r2,-12(fp)
    c114:	10800817 	ldw	r2,32(r2)
    c118:	1007883a 	mov	r3,r2
    c11c:	2005883a 	mov	r2,r4
    c120:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c124:	e13ffe17 	ldw	r4,-8(fp)
    c128:	e17fff17 	ldw	r5,-4(fp)
    c12c:	d8000015 	stw	zero,0(sp)
    c130:	01800074 	movhi	r6,1
    c134:	31b06704 	addi	r6,r6,-15972
    c138:	e1fffd17 	ldw	r7,-12(fp)
    c13c:	000cebc0 	call	cebc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c140:	e0bffd17 	ldw	r2,-12(fp)
    c144:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c148:	e0bffd17 	ldw	r2,-12(fp)
    c14c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c150:	00800074 	movhi	r2,1
    c154:	10854f04 	addi	r2,r2,5436
    c158:	10800017 	ldw	r2,0(r2)
    c15c:	100b883a 	mov	r5,r2
    c160:	01800074 	movhi	r6,1
    c164:	31b0f104 	addi	r6,r6,-15420
    c168:	e1fffd17 	ldw	r7,-12(fp)
    c16c:	000cb400 	call	cb40 <alt_alarm_start>
    c170:	1004403a 	cmpge	r2,r2,zero
    c174:	1000041e 	bne	r2,zero,c188 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c178:	e0fffd17 	ldw	r3,-12(fp)
    c17c:	00a00034 	movhi	r2,32768
    c180:	10bfffc4 	addi	r2,r2,-1
    c184:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c188:	e037883a 	mov	sp,fp
    c18c:	dfc00117 	ldw	ra,4(sp)
    c190:	df000017 	ldw	fp,0(sp)
    c194:	dec00204 	addi	sp,sp,8
    c198:	f800283a 	ret

0000c19c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c19c:	defff804 	addi	sp,sp,-32
    c1a0:	df000715 	stw	fp,28(sp)
    c1a4:	df000704 	addi	fp,sp,28
    c1a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c1ac:	e0bfff17 	ldw	r2,-4(fp)
    c1b0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c1b4:	e0bffe17 	ldw	r2,-8(fp)
    c1b8:	10800017 	ldw	r2,0(r2)
    c1bc:	e0bffd15 	stw	r2,-12(fp)
    c1c0:	00000006 	br	c1c4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c1c4:	e0bffd17 	ldw	r2,-12(fp)
    c1c8:	10800104 	addi	r2,r2,4
    c1cc:	10800037 	ldwio	r2,0(r2)
    c1d0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c1d4:	e0bffc17 	ldw	r2,-16(fp)
    c1d8:	1080c00c 	andi	r2,r2,768
    c1dc:	1005003a 	cmpeq	r2,r2,zero
    c1e0:	1000741e 	bne	r2,zero,c3b4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c1e4:	e0bffc17 	ldw	r2,-16(fp)
    c1e8:	1080400c 	andi	r2,r2,256
    c1ec:	1005003a 	cmpeq	r2,r2,zero
    c1f0:	1000351e 	bne	r2,zero,c2c8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c1f4:	00800074 	movhi	r2,1
    c1f8:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c1fc:	e0bffe17 	ldw	r2,-8(fp)
    c200:	10800a17 	ldw	r2,40(r2)
    c204:	10800044 	addi	r2,r2,1
    c208:	1081ffcc 	andi	r2,r2,2047
    c20c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c210:	e0bffe17 	ldw	r2,-8(fp)
    c214:	10c00b17 	ldw	r3,44(r2)
    c218:	e0bffa17 	ldw	r2,-24(fp)
    c21c:	18801626 	beq	r3,r2,c278 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c220:	e0bffd17 	ldw	r2,-12(fp)
    c224:	10800037 	ldwio	r2,0(r2)
    c228:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c22c:	e0bffb17 	ldw	r2,-20(fp)
    c230:	10a0000c 	andi	r2,r2,32768
    c234:	1005003a 	cmpeq	r2,r2,zero
    c238:	10000f1e 	bne	r2,zero,c278 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c23c:	e0bffe17 	ldw	r2,-8(fp)
    c240:	10c00a17 	ldw	r3,40(r2)
    c244:	e0bffb17 	ldw	r2,-20(fp)
    c248:	1009883a 	mov	r4,r2
    c24c:	e0bffe17 	ldw	r2,-8(fp)
    c250:	1885883a 	add	r2,r3,r2
    c254:	10800e04 	addi	r2,r2,56
    c258:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c25c:	e0bffe17 	ldw	r2,-8(fp)
    c260:	10800a17 	ldw	r2,40(r2)
    c264:	10800044 	addi	r2,r2,1
    c268:	10c1ffcc 	andi	r3,r2,2047
    c26c:	e0bffe17 	ldw	r2,-8(fp)
    c270:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c274:	003fe106 	br	c1fc <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c278:	e0bffb17 	ldw	r2,-20(fp)
    c27c:	10bfffec 	andhi	r2,r2,65535
    c280:	1005003a 	cmpeq	r2,r2,zero
    c284:	1000101e 	bne	r2,zero,c2c8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c288:	e0bffe17 	ldw	r2,-8(fp)
    c28c:	10c00817 	ldw	r3,32(r2)
    c290:	00bfff84 	movi	r2,-2
    c294:	1886703a 	and	r3,r3,r2
    c298:	e0bffe17 	ldw	r2,-8(fp)
    c29c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c2a0:	e0bffd17 	ldw	r2,-12(fp)
    c2a4:	11000104 	addi	r4,r2,4
    c2a8:	e0bffe17 	ldw	r2,-8(fp)
    c2ac:	10800817 	ldw	r2,32(r2)
    c2b0:	1007883a 	mov	r3,r2
    c2b4:	2005883a 	mov	r2,r4
    c2b8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c2bc:	e0bffd17 	ldw	r2,-12(fp)
    c2c0:	10800104 	addi	r2,r2,4
    c2c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c2c8:	e0bffc17 	ldw	r2,-16(fp)
    c2cc:	1080800c 	andi	r2,r2,512
    c2d0:	1005003a 	cmpeq	r2,r2,zero
    c2d4:	103fbb1e 	bne	r2,zero,c1c4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c2d8:	e0bffc17 	ldw	r2,-16(fp)
    c2dc:	10bfffec 	andhi	r2,r2,65535
    c2e0:	1004d43a 	srli	r2,r2,16
    c2e4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c2e8:	00001506 	br	c340 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c2ec:	e13ffd17 	ldw	r4,-12(fp)
    c2f0:	e0bffe17 	ldw	r2,-8(fp)
    c2f4:	10c00d17 	ldw	r3,52(r2)
    c2f8:	e0bffe17 	ldw	r2,-8(fp)
    c2fc:	1885883a 	add	r2,r3,r2
    c300:	10820e04 	addi	r2,r2,2104
    c304:	10800003 	ldbu	r2,0(r2)
    c308:	10c03fcc 	andi	r3,r2,255
    c30c:	18c0201c 	xori	r3,r3,128
    c310:	18ffe004 	addi	r3,r3,-128
    c314:	2005883a 	mov	r2,r4
    c318:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	10800d17 	ldw	r2,52(r2)
    c324:	10800044 	addi	r2,r2,1
    c328:	10c1ffcc 	andi	r3,r2,2047
    c32c:	e0bffe17 	ldw	r2,-8(fp)
    c330:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c334:	e0bff917 	ldw	r2,-28(fp)
    c338:	10bfffc4 	addi	r2,r2,-1
    c33c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c340:	e0bff917 	ldw	r2,-28(fp)
    c344:	1005003a 	cmpeq	r2,r2,zero
    c348:	1000051e 	bne	r2,zero,c360 <altera_avalon_jtag_uart_irq+0x1c4>
    c34c:	e0bffe17 	ldw	r2,-8(fp)
    c350:	10c00d17 	ldw	r3,52(r2)
    c354:	e0bffe17 	ldw	r2,-8(fp)
    c358:	10800c17 	ldw	r2,48(r2)
    c35c:	18bfe31e 	bne	r3,r2,c2ec <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c360:	e0bff917 	ldw	r2,-28(fp)
    c364:	1005003a 	cmpeq	r2,r2,zero
    c368:	103f961e 	bne	r2,zero,c1c4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c36c:	e0bffe17 	ldw	r2,-8(fp)
    c370:	10c00817 	ldw	r3,32(r2)
    c374:	00bfff44 	movi	r2,-3
    c378:	1886703a 	and	r3,r3,r2
    c37c:	e0bffe17 	ldw	r2,-8(fp)
    c380:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c384:	e0bffe17 	ldw	r2,-8(fp)
    c388:	10800017 	ldw	r2,0(r2)
    c38c:	11000104 	addi	r4,r2,4
    c390:	e0bffe17 	ldw	r2,-8(fp)
    c394:	10800817 	ldw	r2,32(r2)
    c398:	1007883a 	mov	r3,r2
    c39c:	2005883a 	mov	r2,r4
    c3a0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c3a4:	e0bffd17 	ldw	r2,-12(fp)
    c3a8:	10800104 	addi	r2,r2,4
    c3ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c3b0:	003f8406 	br	c1c4 <altera_avalon_jtag_uart_irq+0x28>
}
    c3b4:	e037883a 	mov	sp,fp
    c3b8:	df000017 	ldw	fp,0(sp)
    c3bc:	dec00104 	addi	sp,sp,4
    c3c0:	f800283a 	ret

0000c3c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c3c4:	defffc04 	addi	sp,sp,-16
    c3c8:	df000315 	stw	fp,12(sp)
    c3cc:	df000304 	addi	fp,sp,12
    c3d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c3d4:	e0bfff17 	ldw	r2,-4(fp)
    c3d8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c3dc:	e0bffe17 	ldw	r2,-8(fp)
    c3e0:	10800017 	ldw	r2,0(r2)
    c3e4:	10800104 	addi	r2,r2,4
    c3e8:	10800037 	ldwio	r2,0(r2)
    c3ec:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c3f0:	e0bffd17 	ldw	r2,-12(fp)
    c3f4:	1081000c 	andi	r2,r2,1024
    c3f8:	1005003a 	cmpeq	r2,r2,zero
    c3fc:	10000c1e 	bne	r2,zero,c430 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c400:	e0bffe17 	ldw	r2,-8(fp)
    c404:	10800017 	ldw	r2,0(r2)
    c408:	11000104 	addi	r4,r2,4
    c40c:	e0bffe17 	ldw	r2,-8(fp)
    c410:	10800817 	ldw	r2,32(r2)
    c414:	10810014 	ori	r2,r2,1024
    c418:	1007883a 	mov	r3,r2
    c41c:	2005883a 	mov	r2,r4
    c420:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c424:	e0bffe17 	ldw	r2,-8(fp)
    c428:	10000915 	stw	zero,36(r2)
    c42c:	00000a06 	br	c458 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c430:	e0bffe17 	ldw	r2,-8(fp)
    c434:	10c00917 	ldw	r3,36(r2)
    c438:	00a00034 	movhi	r2,32768
    c43c:	10bfff04 	addi	r2,r2,-4
    c440:	10c00536 	bltu	r2,r3,c458 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c444:	e0bffe17 	ldw	r2,-8(fp)
    c448:	10800917 	ldw	r2,36(r2)
    c44c:	10c00044 	addi	r3,r2,1
    c450:	e0bffe17 	ldw	r2,-8(fp)
    c454:	10c00915 	stw	r3,36(r2)
    c458:	00800074 	movhi	r2,1
    c45c:	10854f04 	addi	r2,r2,5436
    c460:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c464:	e037883a 	mov	sp,fp
    c468:	df000017 	ldw	fp,0(sp)
    c46c:	dec00104 	addi	sp,sp,4
    c470:	f800283a 	ret

0000c474 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c474:	defffc04 	addi	sp,sp,-16
    c478:	df000315 	stw	fp,12(sp)
    c47c:	df000304 	addi	fp,sp,12
    c480:	e13ffd15 	stw	r4,-12(fp)
    c484:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c488:	00000706 	br	c4a8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c48c:	e0bffe17 	ldw	r2,-8(fp)
    c490:	1090000c 	andi	r2,r2,16384
    c494:	1005003a 	cmpeq	r2,r2,zero
    c498:	1000031e 	bne	r2,zero,c4a8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c49c:	00bffd44 	movi	r2,-11
    c4a0:	e0bfff15 	stw	r2,-4(fp)
    c4a4:	00000b06 	br	c4d4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c4a8:	e0bffd17 	ldw	r2,-12(fp)
    c4ac:	10c00d17 	ldw	r3,52(r2)
    c4b0:	e0bffd17 	ldw	r2,-12(fp)
    c4b4:	10800c17 	ldw	r2,48(r2)
    c4b8:	18800526 	beq	r3,r2,c4d0 <altera_avalon_jtag_uart_close+0x5c>
    c4bc:	e0bffd17 	ldw	r2,-12(fp)
    c4c0:	10c00917 	ldw	r3,36(r2)
    c4c4:	e0bffd17 	ldw	r2,-12(fp)
    c4c8:	10800117 	ldw	r2,4(r2)
    c4cc:	18bfef36 	bltu	r3,r2,c48c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c4d0:	e03fff15 	stw	zero,-4(fp)
    c4d4:	e0bfff17 	ldw	r2,-4(fp)
}
    c4d8:	e037883a 	mov	sp,fp
    c4dc:	df000017 	ldw	fp,0(sp)
    c4e0:	dec00104 	addi	sp,sp,4
    c4e4:	f800283a 	ret

0000c4e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c4e8:	defff804 	addi	sp,sp,-32
    c4ec:	df000715 	stw	fp,28(sp)
    c4f0:	df000704 	addi	fp,sp,28
    c4f4:	e13ffb15 	stw	r4,-20(fp)
    c4f8:	e17ffc15 	stw	r5,-16(fp)
    c4fc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c500:	00bff9c4 	movi	r2,-25
    c504:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c508:	e0bffc17 	ldw	r2,-16(fp)
    c50c:	e0bfff15 	stw	r2,-4(fp)
    c510:	e0ffff17 	ldw	r3,-4(fp)
    c514:	189a8060 	cmpeqi	r2,r3,27137
    c518:	1000041e 	bne	r2,zero,c52c <altera_avalon_jtag_uart_ioctl+0x44>
    c51c:	e0ffff17 	ldw	r3,-4(fp)
    c520:	189a80a0 	cmpeqi	r2,r3,27138
    c524:	10001b1e 	bne	r2,zero,c594 <altera_avalon_jtag_uart_ioctl+0xac>
    c528:	00002706 	br	c5c8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c52c:	e0bffb17 	ldw	r2,-20(fp)
    c530:	10c00117 	ldw	r3,4(r2)
    c534:	00a00034 	movhi	r2,32768
    c538:	10bfffc4 	addi	r2,r2,-1
    c53c:	18802226 	beq	r3,r2,c5c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c540:	e0bffd17 	ldw	r2,-12(fp)
    c544:	10800017 	ldw	r2,0(r2)
    c548:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c54c:	e0bff917 	ldw	r2,-28(fp)
    c550:	10800090 	cmplti	r2,r2,2
    c554:	1000071e 	bne	r2,zero,c574 <altera_avalon_jtag_uart_ioctl+0x8c>
    c558:	e0fff917 	ldw	r3,-28(fp)
    c55c:	00a00034 	movhi	r2,32768
    c560:	10bfffc4 	addi	r2,r2,-1
    c564:	18800326 	beq	r3,r2,c574 <altera_avalon_jtag_uart_ioctl+0x8c>
    c568:	e0bff917 	ldw	r2,-28(fp)
    c56c:	e0bffe15 	stw	r2,-8(fp)
    c570:	00000306 	br	c580 <altera_avalon_jtag_uart_ioctl+0x98>
    c574:	00e00034 	movhi	r3,32768
    c578:	18ffff84 	addi	r3,r3,-2
    c57c:	e0fffe15 	stw	r3,-8(fp)
    c580:	e0bffb17 	ldw	r2,-20(fp)
    c584:	e0fffe17 	ldw	r3,-8(fp)
    c588:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c58c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c590:	00000d06 	br	c5c8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c594:	e0bffb17 	ldw	r2,-20(fp)
    c598:	10c00117 	ldw	r3,4(r2)
    c59c:	00a00034 	movhi	r2,32768
    c5a0:	10bfffc4 	addi	r2,r2,-1
    c5a4:	18800826 	beq	r3,r2,c5c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c5a8:	e13ffd17 	ldw	r4,-12(fp)
    c5ac:	e0bffb17 	ldw	r2,-20(fp)
    c5b0:	10c00917 	ldw	r3,36(r2)
    c5b4:	e0bffb17 	ldw	r2,-20(fp)
    c5b8:	10800117 	ldw	r2,4(r2)
    c5bc:	1885803a 	cmpltu	r2,r3,r2
    c5c0:	20800015 	stw	r2,0(r4)
      rc = 0;
    c5c4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c5c8:	e0bffa17 	ldw	r2,-24(fp)
}
    c5cc:	e037883a 	mov	sp,fp
    c5d0:	df000017 	ldw	fp,0(sp)
    c5d4:	dec00104 	addi	sp,sp,4
    c5d8:	f800283a 	ret

0000c5dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c5dc:	defff204 	addi	sp,sp,-56
    c5e0:	dfc00d15 	stw	ra,52(sp)
    c5e4:	df000c15 	stw	fp,48(sp)
    c5e8:	df000c04 	addi	fp,sp,48
    c5ec:	e13ffb15 	stw	r4,-20(fp)
    c5f0:	e17ffc15 	stw	r5,-16(fp)
    c5f4:	e1bffd15 	stw	r6,-12(fp)
    c5f8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c5fc:	e0bffc17 	ldw	r2,-16(fp)
    c600:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c604:	00004806 	br	c728 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c608:	e0bffb17 	ldw	r2,-20(fp)
    c60c:	10800a17 	ldw	r2,40(r2)
    c610:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c614:	e0bffb17 	ldw	r2,-20(fp)
    c618:	10800b17 	ldw	r2,44(r2)
    c61c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c620:	e0fff717 	ldw	r3,-36(fp)
    c624:	e0bff617 	ldw	r2,-40(fp)
    c628:	18800536 	bltu	r3,r2,c640 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c62c:	e0bff717 	ldw	r2,-36(fp)
    c630:	e0fff617 	ldw	r3,-40(fp)
    c634:	10c5c83a 	sub	r2,r2,r3
    c638:	e0bff815 	stw	r2,-32(fp)
    c63c:	00000406 	br	c650 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c640:	00820004 	movi	r2,2048
    c644:	e0fff617 	ldw	r3,-40(fp)
    c648:	10c5c83a 	sub	r2,r2,r3
    c64c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c650:	e0bff817 	ldw	r2,-32(fp)
    c654:	1005003a 	cmpeq	r2,r2,zero
    c658:	10001f1e 	bne	r2,zero,c6d8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c65c:	e0fffd17 	ldw	r3,-12(fp)
    c660:	e0bff817 	ldw	r2,-32(fp)
    c664:	1880022e 	bgeu	r3,r2,c670 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c668:	e0bffd17 	ldw	r2,-12(fp)
    c66c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c670:	e0bffb17 	ldw	r2,-20(fp)
    c674:	10c00e04 	addi	r3,r2,56
    c678:	e0bff617 	ldw	r2,-40(fp)
    c67c:	1887883a 	add	r3,r3,r2
    c680:	e0bffa17 	ldw	r2,-24(fp)
    c684:	1009883a 	mov	r4,r2
    c688:	180b883a 	mov	r5,r3
    c68c:	e1bff817 	ldw	r6,-32(fp)
    c690:	00021600 	call	2160 <memcpy>
      ptr   += n;
    c694:	e0fff817 	ldw	r3,-32(fp)
    c698:	e0bffa17 	ldw	r2,-24(fp)
    c69c:	10c5883a 	add	r2,r2,r3
    c6a0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c6a4:	e0fffd17 	ldw	r3,-12(fp)
    c6a8:	e0bff817 	ldw	r2,-32(fp)
    c6ac:	1885c83a 	sub	r2,r3,r2
    c6b0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c6b4:	e0fff617 	ldw	r3,-40(fp)
    c6b8:	e0bff817 	ldw	r2,-32(fp)
    c6bc:	1885883a 	add	r2,r3,r2
    c6c0:	10c1ffcc 	andi	r3,r2,2047
    c6c4:	e0bffb17 	ldw	r2,-20(fp)
    c6c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c6cc:	e0bffd17 	ldw	r2,-12(fp)
    c6d0:	10800048 	cmpgei	r2,r2,1
    c6d4:	103fcc1e 	bne	r2,zero,c608 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c6d8:	e0fffa17 	ldw	r3,-24(fp)
    c6dc:	e0bffc17 	ldw	r2,-16(fp)
    c6e0:	1880141e 	bne	r3,r2,c734 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c6e4:	e0bffe17 	ldw	r2,-8(fp)
    c6e8:	1090000c 	andi	r2,r2,16384
    c6ec:	1004c03a 	cmpne	r2,r2,zero
    c6f0:	1000101e 	bne	r2,zero,c734 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c6f4:	e0bffb17 	ldw	r2,-20(fp)
    c6f8:	10c00a17 	ldw	r3,40(r2)
    c6fc:	e0bff717 	ldw	r2,-36(fp)
    c700:	1880051e 	bne	r3,r2,c718 <altera_avalon_jtag_uart_read+0x13c>
    c704:	e0bffb17 	ldw	r2,-20(fp)
    c708:	10c00917 	ldw	r3,36(r2)
    c70c:	e0bffb17 	ldw	r2,-20(fp)
    c710:	10800117 	ldw	r2,4(r2)
    c714:	18bff736 	bltu	r3,r2,c6f4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c718:	e0bffb17 	ldw	r2,-20(fp)
    c71c:	10c00a17 	ldw	r3,40(r2)
    c720:	e0bff717 	ldw	r2,-36(fp)
    c724:	18800326 	beq	r3,r2,c734 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c728:	e0bffd17 	ldw	r2,-12(fp)
    c72c:	10800048 	cmpgei	r2,r2,1
    c730:	103fb51e 	bne	r2,zero,c608 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c734:	e0fffa17 	ldw	r3,-24(fp)
    c738:	e0bffc17 	ldw	r2,-16(fp)
    c73c:	18801926 	beq	r3,r2,c7a4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c740:	0005303a 	rdctl	r2,status
    c744:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c748:	e0fff517 	ldw	r3,-44(fp)
    c74c:	00bfff84 	movi	r2,-2
    c750:	1884703a 	and	r2,r3,r2
    c754:	1001703a 	wrctl	status,r2
  
  return context;
    c758:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c75c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c760:	e0bffb17 	ldw	r2,-20(fp)
    c764:	10800817 	ldw	r2,32(r2)
    c768:	10c00054 	ori	r3,r2,1
    c76c:	e0bffb17 	ldw	r2,-20(fp)
    c770:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c774:	e0bffb17 	ldw	r2,-20(fp)
    c778:	10800017 	ldw	r2,0(r2)
    c77c:	11000104 	addi	r4,r2,4
    c780:	e0bffb17 	ldw	r2,-20(fp)
    c784:	10800817 	ldw	r2,32(r2)
    c788:	1007883a 	mov	r3,r2
    c78c:	2005883a 	mov	r2,r4
    c790:	10c00035 	stwio	r3,0(r2)
    c794:	e0bff917 	ldw	r2,-28(fp)
    c798:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c79c:	e0bff417 	ldw	r2,-48(fp)
    c7a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c7a4:	e0fffa17 	ldw	r3,-24(fp)
    c7a8:	e0bffc17 	ldw	r2,-16(fp)
    c7ac:	18800526 	beq	r3,r2,c7c4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c7b0:	e0fffa17 	ldw	r3,-24(fp)
    c7b4:	e0bffc17 	ldw	r2,-16(fp)
    c7b8:	1887c83a 	sub	r3,r3,r2
    c7bc:	e0ffff15 	stw	r3,-4(fp)
    c7c0:	00000906 	br	c7e8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c7c4:	e0bffe17 	ldw	r2,-8(fp)
    c7c8:	1090000c 	andi	r2,r2,16384
    c7cc:	1005003a 	cmpeq	r2,r2,zero
    c7d0:	1000031e 	bne	r2,zero,c7e0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c7d4:	00bffd44 	movi	r2,-11
    c7d8:	e0bfff15 	stw	r2,-4(fp)
    c7dc:	00000206 	br	c7e8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c7e0:	00bffec4 	movi	r2,-5
    c7e4:	e0bfff15 	stw	r2,-4(fp)
    c7e8:	e0bfff17 	ldw	r2,-4(fp)
}
    c7ec:	e037883a 	mov	sp,fp
    c7f0:	dfc00117 	ldw	ra,4(sp)
    c7f4:	df000017 	ldw	fp,0(sp)
    c7f8:	dec00204 	addi	sp,sp,8
    c7fc:	f800283a 	ret

0000c800 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c800:	defff204 	addi	sp,sp,-56
    c804:	dfc00d15 	stw	ra,52(sp)
    c808:	df000c15 	stw	fp,48(sp)
    c80c:	df000c04 	addi	fp,sp,48
    c810:	e13ffb15 	stw	r4,-20(fp)
    c814:	e17ffc15 	stw	r5,-16(fp)
    c818:	e1bffd15 	stw	r6,-12(fp)
    c81c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c820:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c824:	e0bffc17 	ldw	r2,-16(fp)
    c828:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c82c:	00003a06 	br	c918 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c830:	e0bffb17 	ldw	r2,-20(fp)
    c834:	10800c17 	ldw	r2,48(r2)
    c838:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c83c:	e0bffb17 	ldw	r2,-20(fp)
    c840:	10800d17 	ldw	r2,52(r2)
    c844:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c848:	e0fffa17 	ldw	r3,-24(fp)
    c84c:	e0bff917 	ldw	r2,-28(fp)
    c850:	1880062e 	bgeu	r3,r2,c86c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c854:	e0fff917 	ldw	r3,-28(fp)
    c858:	e0bffa17 	ldw	r2,-24(fp)
    c85c:	1885c83a 	sub	r2,r3,r2
    c860:	10bfffc4 	addi	r2,r2,-1
    c864:	e0bff815 	stw	r2,-32(fp)
    c868:	00000c06 	br	c89c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c86c:	e0bff917 	ldw	r2,-28(fp)
    c870:	1005003a 	cmpeq	r2,r2,zero
    c874:	1000051e 	bne	r2,zero,c88c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c878:	00820004 	movi	r2,2048
    c87c:	e0fffa17 	ldw	r3,-24(fp)
    c880:	10c5c83a 	sub	r2,r2,r3
    c884:	e0bff815 	stw	r2,-32(fp)
    c888:	00000406 	br	c89c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c88c:	0081ffc4 	movi	r2,2047
    c890:	e0fffa17 	ldw	r3,-24(fp)
    c894:	10c5c83a 	sub	r2,r2,r3
    c898:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c89c:	e0bff817 	ldw	r2,-32(fp)
    c8a0:	1005003a 	cmpeq	r2,r2,zero
    c8a4:	10001f1e 	bne	r2,zero,c924 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c8a8:	e0fffd17 	ldw	r3,-12(fp)
    c8ac:	e0bff817 	ldw	r2,-32(fp)
    c8b0:	1880022e 	bgeu	r3,r2,c8bc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c8b4:	e0bffd17 	ldw	r2,-12(fp)
    c8b8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c8bc:	e0bffb17 	ldw	r2,-20(fp)
    c8c0:	10c20e04 	addi	r3,r2,2104
    c8c4:	e0bffa17 	ldw	r2,-24(fp)
    c8c8:	1885883a 	add	r2,r3,r2
    c8cc:	e0fffc17 	ldw	r3,-16(fp)
    c8d0:	1009883a 	mov	r4,r2
    c8d4:	180b883a 	mov	r5,r3
    c8d8:	e1bff817 	ldw	r6,-32(fp)
    c8dc:	00021600 	call	2160 <memcpy>
      ptr   += n;
    c8e0:	e0fff817 	ldw	r3,-32(fp)
    c8e4:	e0bffc17 	ldw	r2,-16(fp)
    c8e8:	10c5883a 	add	r2,r2,r3
    c8ec:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c8f0:	e0fffd17 	ldw	r3,-12(fp)
    c8f4:	e0bff817 	ldw	r2,-32(fp)
    c8f8:	1885c83a 	sub	r2,r3,r2
    c8fc:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c900:	e0fffa17 	ldw	r3,-24(fp)
    c904:	e0bff817 	ldw	r2,-32(fp)
    c908:	1885883a 	add	r2,r3,r2
    c90c:	10c1ffcc 	andi	r3,r2,2047
    c910:	e0bffb17 	ldw	r2,-20(fp)
    c914:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c918:	e0bffd17 	ldw	r2,-12(fp)
    c91c:	10800048 	cmpgei	r2,r2,1
    c920:	103fc31e 	bne	r2,zero,c830 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c924:	0005303a 	rdctl	r2,status
    c928:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c92c:	e0fff517 	ldw	r3,-44(fp)
    c930:	00bfff84 	movi	r2,-2
    c934:	1884703a 	and	r2,r3,r2
    c938:	1001703a 	wrctl	status,r2
  
  return context;
    c93c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c940:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c944:	e0bffb17 	ldw	r2,-20(fp)
    c948:	10800817 	ldw	r2,32(r2)
    c94c:	10c00094 	ori	r3,r2,2
    c950:	e0bffb17 	ldw	r2,-20(fp)
    c954:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c958:	e0bffb17 	ldw	r2,-20(fp)
    c95c:	10800017 	ldw	r2,0(r2)
    c960:	11000104 	addi	r4,r2,4
    c964:	e0bffb17 	ldw	r2,-20(fp)
    c968:	10800817 	ldw	r2,32(r2)
    c96c:	1007883a 	mov	r3,r2
    c970:	2005883a 	mov	r2,r4
    c974:	10c00035 	stwio	r3,0(r2)
    c978:	e0bff717 	ldw	r2,-36(fp)
    c97c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c980:	e0bff417 	ldw	r2,-48(fp)
    c984:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c988:	e0bffd17 	ldw	r2,-12(fp)
    c98c:	10800050 	cmplti	r2,r2,1
    c990:	1000111e 	bne	r2,zero,c9d8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c994:	e0bffe17 	ldw	r2,-8(fp)
    c998:	1090000c 	andi	r2,r2,16384
    c99c:	1004c03a 	cmpne	r2,r2,zero
    c9a0:	1000101e 	bne	r2,zero,c9e4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c9a4:	e0bffb17 	ldw	r2,-20(fp)
    c9a8:	10c00d17 	ldw	r3,52(r2)
    c9ac:	e0bff917 	ldw	r2,-28(fp)
    c9b0:	1880051e 	bne	r3,r2,c9c8 <altera_avalon_jtag_uart_write+0x1c8>
    c9b4:	e0bffb17 	ldw	r2,-20(fp)
    c9b8:	10c00917 	ldw	r3,36(r2)
    c9bc:	e0bffb17 	ldw	r2,-20(fp)
    c9c0:	10800117 	ldw	r2,4(r2)
    c9c4:	18bff736 	bltu	r3,r2,c9a4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c9c8:	e0bffb17 	ldw	r2,-20(fp)
    c9cc:	10c00d17 	ldw	r3,52(r2)
    c9d0:	e0bff917 	ldw	r2,-28(fp)
    c9d4:	18800326 	beq	r3,r2,c9e4 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c9d8:	e0bffd17 	ldw	r2,-12(fp)
    c9dc:	10800048 	cmpgei	r2,r2,1
    c9e0:	103fcd1e 	bne	r2,zero,c918 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c9e4:	e0fffc17 	ldw	r3,-16(fp)
    c9e8:	e0bff617 	ldw	r2,-40(fp)
    c9ec:	18800526 	beq	r3,r2,ca04 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c9f0:	e0fffc17 	ldw	r3,-16(fp)
    c9f4:	e0bff617 	ldw	r2,-40(fp)
    c9f8:	1887c83a 	sub	r3,r3,r2
    c9fc:	e0ffff15 	stw	r3,-4(fp)
    ca00:	00000906 	br	ca28 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    ca04:	e0bffe17 	ldw	r2,-8(fp)
    ca08:	1090000c 	andi	r2,r2,16384
    ca0c:	1005003a 	cmpeq	r2,r2,zero
    ca10:	1000031e 	bne	r2,zero,ca20 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    ca14:	00bffd44 	movi	r2,-11
    ca18:	e0bfff15 	stw	r2,-4(fp)
    ca1c:	00000206 	br	ca28 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    ca20:	00bffec4 	movi	r2,-5
    ca24:	e0bfff15 	stw	r2,-4(fp)
    ca28:	e0bfff17 	ldw	r2,-4(fp)
}
    ca2c:	e037883a 	mov	sp,fp
    ca30:	dfc00117 	ldw	ra,4(sp)
    ca34:	df000017 	ldw	fp,0(sp)
    ca38:	dec00204 	addi	sp,sp,8
    ca3c:	f800283a 	ret

0000ca40 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ca40:	defffa04 	addi	sp,sp,-24
    ca44:	dfc00515 	stw	ra,20(sp)
    ca48:	df000415 	stw	fp,16(sp)
    ca4c:	df000404 	addi	fp,sp,16
    ca50:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ca54:	e0bfff17 	ldw	r2,-4(fp)
    ca58:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ca5c:	e0bfff17 	ldw	r2,-4(fp)
    ca60:	10800104 	addi	r2,r2,4
    ca64:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ca68:	0005303a 	rdctl	r2,status
    ca6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ca70:	e0fffd17 	ldw	r3,-12(fp)
    ca74:	00bfff84 	movi	r2,-2
    ca78:	1884703a 	and	r2,r3,r2
    ca7c:	1001703a 	wrctl	status,r2
  
  return context;
    ca80:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ca84:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    ca88:	000d6200 	call	d620 <alt_tick>
    ca8c:	e0bffe17 	ldw	r2,-8(fp)
    ca90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ca94:	e0bffc17 	ldw	r2,-16(fp)
    ca98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ca9c:	e037883a 	mov	sp,fp
    caa0:	dfc00117 	ldw	ra,4(sp)
    caa4:	df000017 	ldw	fp,0(sp)
    caa8:	dec00204 	addi	sp,sp,8
    caac:	f800283a 	ret

0000cab0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    cab0:	defff804 	addi	sp,sp,-32
    cab4:	dfc00715 	stw	ra,28(sp)
    cab8:	df000615 	stw	fp,24(sp)
    cabc:	df000604 	addi	fp,sp,24
    cac0:	e13ffc15 	stw	r4,-16(fp)
    cac4:	e17ffd15 	stw	r5,-12(fp)
    cac8:	e1bffe15 	stw	r6,-8(fp)
    cacc:	e1ffff15 	stw	r7,-4(fp)
    cad0:	e0bfff17 	ldw	r2,-4(fp)
    cad4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    cad8:	00800074 	movhi	r2,1
    cadc:	10854f04 	addi	r2,r2,5436
    cae0:	10800017 	ldw	r2,0(r2)
    cae4:	1004c03a 	cmpne	r2,r2,zero
    cae8:	1000041e 	bne	r2,zero,cafc <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    caec:	00c00074 	movhi	r3,1
    caf0:	18c54f04 	addi	r3,r3,5436
    caf4:	e0bffb17 	ldw	r2,-20(fp)
    caf8:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    cafc:	e0bffc17 	ldw	r2,-16(fp)
    cb00:	10800104 	addi	r2,r2,4
    cb04:	1007883a 	mov	r3,r2
    cb08:	008001c4 	movi	r2,7
    cb0c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    cb10:	d8000015 	stw	zero,0(sp)
    cb14:	e13ffd17 	ldw	r4,-12(fp)
    cb18:	e17ffe17 	ldw	r5,-8(fp)
    cb1c:	01800074 	movhi	r6,1
    cb20:	31b29004 	addi	r6,r6,-13760
    cb24:	e1fffc17 	ldw	r7,-16(fp)
    cb28:	000cebc0 	call	cebc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    cb2c:	e037883a 	mov	sp,fp
    cb30:	dfc00117 	ldw	ra,4(sp)
    cb34:	df000017 	ldw	fp,0(sp)
    cb38:	dec00204 	addi	sp,sp,8
    cb3c:	f800283a 	ret

0000cb40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    cb40:	defff404 	addi	sp,sp,-48
    cb44:	df000b15 	stw	fp,44(sp)
    cb48:	df000b04 	addi	fp,sp,44
    cb4c:	e13ffb15 	stw	r4,-20(fp)
    cb50:	e17ffc15 	stw	r5,-16(fp)
    cb54:	e1bffd15 	stw	r6,-12(fp)
    cb58:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    cb5c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    cb60:	00800074 	movhi	r2,1
    cb64:	10854f04 	addi	r2,r2,5436
    cb68:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    cb6c:	1005003a 	cmpeq	r2,r2,zero
    cb70:	1000411e 	bne	r2,zero,cc78 <alt_alarm_start+0x138>
  {
    if (alarm)
    cb74:	e0bffb17 	ldw	r2,-20(fp)
    cb78:	1005003a 	cmpeq	r2,r2,zero
    cb7c:	10003b1e 	bne	r2,zero,cc6c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    cb80:	e0fffb17 	ldw	r3,-20(fp)
    cb84:	e0bffd17 	ldw	r2,-12(fp)
    cb88:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    cb8c:	e0fffb17 	ldw	r3,-20(fp)
    cb90:	e0bffe17 	ldw	r2,-8(fp)
    cb94:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cb98:	0005303a 	rdctl	r2,status
    cb9c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cba0:	e0fff817 	ldw	r3,-32(fp)
    cba4:	00bfff84 	movi	r2,-2
    cba8:	1884703a 	and	r2,r3,r2
    cbac:	1001703a 	wrctl	status,r2
  
  return context;
    cbb0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    cbb4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cbb8:	00800074 	movhi	r2,1
    cbbc:	10855004 	addi	r2,r2,5440
    cbc0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    cbc4:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    cbc8:	e0fffc17 	ldw	r3,-16(fp)
    cbcc:	e0bff917 	ldw	r2,-28(fp)
    cbd0:	1885883a 	add	r2,r3,r2
    cbd4:	10c00044 	addi	r3,r2,1
    cbd8:	e0bffb17 	ldw	r2,-20(fp)
    cbdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    cbe0:	e0bffb17 	ldw	r2,-20(fp)
    cbe4:	10c00217 	ldw	r3,8(r2)
    cbe8:	e0bff917 	ldw	r2,-28(fp)
    cbec:	1880042e 	bgeu	r3,r2,cc00 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    cbf0:	e0fffb17 	ldw	r3,-20(fp)
    cbf4:	00800044 	movi	r2,1
    cbf8:	18800405 	stb	r2,16(r3)
    cbfc:	00000206 	br	cc08 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    cc00:	e0bffb17 	ldw	r2,-20(fp)
    cc04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cc08:	e0fffb17 	ldw	r3,-20(fp)
    cc0c:	00800074 	movhi	r2,1
    cc10:	10bea204 	addi	r2,r2,-1400
    cc14:	e0bff615 	stw	r2,-40(fp)
    cc18:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cc1c:	e0fff717 	ldw	r3,-36(fp)
    cc20:	e0bff617 	ldw	r2,-40(fp)
    cc24:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cc28:	e0bff617 	ldw	r2,-40(fp)
    cc2c:	10c00017 	ldw	r3,0(r2)
    cc30:	e0bff717 	ldw	r2,-36(fp)
    cc34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cc38:	e0bff617 	ldw	r2,-40(fp)
    cc3c:	10c00017 	ldw	r3,0(r2)
    cc40:	e0bff717 	ldw	r2,-36(fp)
    cc44:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    cc48:	e0fff617 	ldw	r3,-40(fp)
    cc4c:	e0bff717 	ldw	r2,-36(fp)
    cc50:	18800015 	stw	r2,0(r3)
    cc54:	e0bffa17 	ldw	r2,-24(fp)
    cc58:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc5c:	e0bff517 	ldw	r2,-44(fp)
    cc60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    cc64:	e03fff15 	stw	zero,-4(fp)
    cc68:	00000506 	br	cc80 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    cc6c:	00bffa84 	movi	r2,-22
    cc70:	e0bfff15 	stw	r2,-4(fp)
    cc74:	00000206 	br	cc80 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    cc78:	00bfde84 	movi	r2,-134
    cc7c:	e0bfff15 	stw	r2,-4(fp)
    cc80:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    cc84:	e037883a 	mov	sp,fp
    cc88:	df000017 	ldw	fp,0(sp)
    cc8c:	dec00104 	addi	sp,sp,4
    cc90:	f800283a 	ret

0000cc94 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    cc94:	deffff04 	addi	sp,sp,-4
    cc98:	df000015 	stw	fp,0(sp)
    cc9c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    cca0:	e037883a 	mov	sp,fp
    cca4:	df000017 	ldw	fp,0(sp)
    cca8:	dec00104 	addi	sp,sp,4
    ccac:	f800283a 	ret

0000ccb0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ccb0:	defff904 	addi	sp,sp,-28
    ccb4:	dfc00615 	stw	ra,24(sp)
    ccb8:	df000515 	stw	fp,20(sp)
    ccbc:	df000504 	addi	fp,sp,20
    ccc0:	e13ffd15 	stw	r4,-12(fp)
    ccc4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ccc8:	e0bffd17 	ldw	r2,-12(fp)
    cccc:	1005003a 	cmpeq	r2,r2,zero
    ccd0:	1000041e 	bne	r2,zero,cce4 <alt_dev_llist_insert+0x34>
    ccd4:	e0bffd17 	ldw	r2,-12(fp)
    ccd8:	10800217 	ldw	r2,8(r2)
    ccdc:	1004c03a 	cmpne	r2,r2,zero
    cce0:	1000071e 	bne	r2,zero,cd00 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    cce4:	000cd640 	call	cd64 <alt_get_errno>
    cce8:	1007883a 	mov	r3,r2
    ccec:	00800584 	movi	r2,22
    ccf0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ccf4:	00bffa84 	movi	r2,-22
    ccf8:	e0bfff15 	stw	r2,-4(fp)
    ccfc:	00001306 	br	cd4c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cd00:	e0fffd17 	ldw	r3,-12(fp)
    cd04:	e0bffe17 	ldw	r2,-8(fp)
    cd08:	e0bffb15 	stw	r2,-20(fp)
    cd0c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cd10:	e0fffc17 	ldw	r3,-16(fp)
    cd14:	e0bffb17 	ldw	r2,-20(fp)
    cd18:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cd1c:	e0bffb17 	ldw	r2,-20(fp)
    cd20:	10c00017 	ldw	r3,0(r2)
    cd24:	e0bffc17 	ldw	r2,-16(fp)
    cd28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cd2c:	e0bffb17 	ldw	r2,-20(fp)
    cd30:	10c00017 	ldw	r3,0(r2)
    cd34:	e0bffc17 	ldw	r2,-16(fp)
    cd38:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    cd3c:	e0fffb17 	ldw	r3,-20(fp)
    cd40:	e0bffc17 	ldw	r2,-16(fp)
    cd44:	18800015 	stw	r2,0(r3)

  return 0;  
    cd48:	e03fff15 	stw	zero,-4(fp)
    cd4c:	e0bfff17 	ldw	r2,-4(fp)
}
    cd50:	e037883a 	mov	sp,fp
    cd54:	dfc00117 	ldw	ra,4(sp)
    cd58:	df000017 	ldw	fp,0(sp)
    cd5c:	dec00204 	addi	sp,sp,8
    cd60:	f800283a 	ret

0000cd64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd64:	defffd04 	addi	sp,sp,-12
    cd68:	dfc00215 	stw	ra,8(sp)
    cd6c:	df000115 	stw	fp,4(sp)
    cd70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    cd74:	00800074 	movhi	r2,1
    cd78:	10be9f04 	addi	r2,r2,-1412
    cd7c:	10800017 	ldw	r2,0(r2)
    cd80:	1005003a 	cmpeq	r2,r2,zero
    cd84:	1000061e 	bne	r2,zero,cda0 <alt_get_errno+0x3c>
    cd88:	00800074 	movhi	r2,1
    cd8c:	10be9f04 	addi	r2,r2,-1412
    cd90:	10800017 	ldw	r2,0(r2)
    cd94:	103ee83a 	callr	r2
    cd98:	e0bfff15 	stw	r2,-4(fp)
    cd9c:	00000306 	br	cdac <alt_get_errno+0x48>
    cda0:	00800074 	movhi	r2,1
    cda4:	10854704 	addi	r2,r2,5404
    cda8:	e0bfff15 	stw	r2,-4(fp)
    cdac:	e0bfff17 	ldw	r2,-4(fp)
}
    cdb0:	e037883a 	mov	sp,fp
    cdb4:	dfc00117 	ldw	ra,4(sp)
    cdb8:	df000017 	ldw	fp,0(sp)
    cdbc:	dec00204 	addi	sp,sp,8
    cdc0:	f800283a 	ret

0000cdc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cdc4:	defffd04 	addi	sp,sp,-12
    cdc8:	dfc00215 	stw	ra,8(sp)
    cdcc:	df000115 	stw	fp,4(sp)
    cdd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cdd4:	00bfff04 	movi	r2,-4
    cdd8:	00c00074 	movhi	r3,1
    cddc:	18f70204 	addi	r3,r3,-9208
    cde0:	1885883a 	add	r2,r3,r2
    cde4:	e0bfff15 	stw	r2,-4(fp)
    cde8:	00000606 	br	ce04 <_do_ctors+0x40>
        (*ctor) (); 
    cdec:	e0bfff17 	ldw	r2,-4(fp)
    cdf0:	10800017 	ldw	r2,0(r2)
    cdf4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cdf8:	e0bfff17 	ldw	r2,-4(fp)
    cdfc:	10bfff04 	addi	r2,r2,-4
    ce00:	e0bfff15 	stw	r2,-4(fp)
    ce04:	e0ffff17 	ldw	r3,-4(fp)
    ce08:	00800074 	movhi	r2,1
    ce0c:	10b70104 	addi	r2,r2,-9212
    ce10:	18bff62e 	bgeu	r3,r2,cdec <_do_ctors+0x28>
        (*ctor) (); 
}
    ce14:	e037883a 	mov	sp,fp
    ce18:	dfc00117 	ldw	ra,4(sp)
    ce1c:	df000017 	ldw	fp,0(sp)
    ce20:	dec00204 	addi	sp,sp,8
    ce24:	f800283a 	ret

0000ce28 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ce28:	defffd04 	addi	sp,sp,-12
    ce2c:	dfc00215 	stw	ra,8(sp)
    ce30:	df000115 	stw	fp,4(sp)
    ce34:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ce38:	00bfff04 	movi	r2,-4
    ce3c:	00c00074 	movhi	r3,1
    ce40:	18f70204 	addi	r3,r3,-9208
    ce44:	1885883a 	add	r2,r3,r2
    ce48:	e0bfff15 	stw	r2,-4(fp)
    ce4c:	00000606 	br	ce68 <_do_dtors+0x40>
        (*dtor) (); 
    ce50:	e0bfff17 	ldw	r2,-4(fp)
    ce54:	10800017 	ldw	r2,0(r2)
    ce58:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ce5c:	e0bfff17 	ldw	r2,-4(fp)
    ce60:	10bfff04 	addi	r2,r2,-4
    ce64:	e0bfff15 	stw	r2,-4(fp)
    ce68:	e0ffff17 	ldw	r3,-4(fp)
    ce6c:	00800074 	movhi	r2,1
    ce70:	10b70204 	addi	r2,r2,-9208
    ce74:	18bff62e 	bgeu	r3,r2,ce50 <_do_dtors+0x28>
        (*dtor) (); 
}
    ce78:	e037883a 	mov	sp,fp
    ce7c:	dfc00117 	ldw	ra,4(sp)
    ce80:	df000017 	ldw	fp,0(sp)
    ce84:	dec00204 	addi	sp,sp,8
    ce88:	f800283a 	ret

0000ce8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ce8c:	defffe04 	addi	sp,sp,-8
    ce90:	dfc00115 	stw	ra,4(sp)
    ce94:	df000015 	stw	fp,0(sp)
    ce98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ce9c:	0009883a 	mov	r4,zero
    cea0:	01440004 	movi	r5,4096
    cea4:	000d9b80 	call	d9b8 <alt_icache_flush>
#endif
}
    cea8:	e037883a 	mov	sp,fp
    ceac:	dfc00117 	ldw	ra,4(sp)
    ceb0:	df000017 	ldw	fp,0(sp)
    ceb4:	dec00204 	addi	sp,sp,8
    ceb8:	f800283a 	ret

0000cebc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cebc:	defff904 	addi	sp,sp,-28
    cec0:	dfc00615 	stw	ra,24(sp)
    cec4:	df000515 	stw	fp,20(sp)
    cec8:	df000504 	addi	fp,sp,20
    cecc:	e13ffc15 	stw	r4,-16(fp)
    ced0:	e17ffd15 	stw	r5,-12(fp)
    ced4:	e1bffe15 	stw	r6,-8(fp)
    ced8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cedc:	e0800217 	ldw	r2,8(fp)
    cee0:	d8800015 	stw	r2,0(sp)
    cee4:	e13ffc17 	ldw	r4,-16(fp)
    cee8:	e17ffd17 	ldw	r5,-12(fp)
    ceec:	e1bffe17 	ldw	r6,-8(fp)
    cef0:	e1ffff17 	ldw	r7,-4(fp)
    cef4:	000d0900 	call	d090 <alt_iic_isr_register>
}  
    cef8:	e037883a 	mov	sp,fp
    cefc:	dfc00117 	ldw	ra,4(sp)
    cf00:	df000017 	ldw	fp,0(sp)
    cf04:	dec00204 	addi	sp,sp,8
    cf08:	f800283a 	ret

0000cf0c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    cf0c:	defff904 	addi	sp,sp,-28
    cf10:	df000615 	stw	fp,24(sp)
    cf14:	df000604 	addi	fp,sp,24
    cf18:	e13ffe15 	stw	r4,-8(fp)
    cf1c:	e17fff15 	stw	r5,-4(fp)
    cf20:	e0bfff17 	ldw	r2,-4(fp)
    cf24:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf28:	0005303a 	rdctl	r2,status
    cf2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf30:	e0fffb17 	ldw	r3,-20(fp)
    cf34:	00bfff84 	movi	r2,-2
    cf38:	1884703a 	and	r2,r3,r2
    cf3c:	1001703a 	wrctl	status,r2
  
  return context;
    cf40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cf44:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    cf48:	e0fffc17 	ldw	r3,-16(fp)
    cf4c:	00800044 	movi	r2,1
    cf50:	10c4983a 	sll	r2,r2,r3
    cf54:	1007883a 	mov	r3,r2
    cf58:	00800074 	movhi	r2,1
    cf5c:	10854b04 	addi	r2,r2,5420
    cf60:	10800017 	ldw	r2,0(r2)
    cf64:	1886b03a 	or	r3,r3,r2
    cf68:	00800074 	movhi	r2,1
    cf6c:	10854b04 	addi	r2,r2,5420
    cf70:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf74:	00800074 	movhi	r2,1
    cf78:	10854b04 	addi	r2,r2,5420
    cf7c:	10800017 	ldw	r2,0(r2)
    cf80:	100170fa 	wrctl	ienable,r2
    cf84:	e0bffd17 	ldw	r2,-12(fp)
    cf88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf8c:	e0bffa17 	ldw	r2,-24(fp)
    cf90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cf94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cf98:	e037883a 	mov	sp,fp
    cf9c:	df000017 	ldw	fp,0(sp)
    cfa0:	dec00104 	addi	sp,sp,4
    cfa4:	f800283a 	ret

0000cfa8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cfa8:	defff904 	addi	sp,sp,-28
    cfac:	df000615 	stw	fp,24(sp)
    cfb0:	df000604 	addi	fp,sp,24
    cfb4:	e13ffe15 	stw	r4,-8(fp)
    cfb8:	e17fff15 	stw	r5,-4(fp)
    cfbc:	e0bfff17 	ldw	r2,-4(fp)
    cfc0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cfc4:	0005303a 	rdctl	r2,status
    cfc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cfcc:	e0fffb17 	ldw	r3,-20(fp)
    cfd0:	00bfff84 	movi	r2,-2
    cfd4:	1884703a 	and	r2,r3,r2
    cfd8:	1001703a 	wrctl	status,r2
  
  return context;
    cfdc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cfe0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    cfe4:	e0fffc17 	ldw	r3,-16(fp)
    cfe8:	00800044 	movi	r2,1
    cfec:	10c4983a 	sll	r2,r2,r3
    cff0:	0084303a 	nor	r2,zero,r2
    cff4:	1007883a 	mov	r3,r2
    cff8:	00800074 	movhi	r2,1
    cffc:	10854b04 	addi	r2,r2,5420
    d000:	10800017 	ldw	r2,0(r2)
    d004:	1886703a 	and	r3,r3,r2
    d008:	00800074 	movhi	r2,1
    d00c:	10854b04 	addi	r2,r2,5420
    d010:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d014:	00800074 	movhi	r2,1
    d018:	10854b04 	addi	r2,r2,5420
    d01c:	10800017 	ldw	r2,0(r2)
    d020:	100170fa 	wrctl	ienable,r2
    d024:	e0bffd17 	ldw	r2,-12(fp)
    d028:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d02c:	e0bffa17 	ldw	r2,-24(fp)
    d030:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d034:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    d038:	e037883a 	mov	sp,fp
    d03c:	df000017 	ldw	fp,0(sp)
    d040:	dec00104 	addi	sp,sp,4
    d044:	f800283a 	ret

0000d048 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d048:	defffc04 	addi	sp,sp,-16
    d04c:	df000315 	stw	fp,12(sp)
    d050:	df000304 	addi	fp,sp,12
    d054:	e13ffe15 	stw	r4,-8(fp)
    d058:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d05c:	000530fa 	rdctl	r2,ienable
    d060:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d064:	e0ffff17 	ldw	r3,-4(fp)
    d068:	00800044 	movi	r2,1
    d06c:	10c4983a 	sll	r2,r2,r3
    d070:	1007883a 	mov	r3,r2
    d074:	e0bffd17 	ldw	r2,-12(fp)
    d078:	1884703a 	and	r2,r3,r2
    d07c:	1004c03a 	cmpne	r2,r2,zero
}
    d080:	e037883a 	mov	sp,fp
    d084:	df000017 	ldw	fp,0(sp)
    d088:	dec00104 	addi	sp,sp,4
    d08c:	f800283a 	ret

0000d090 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d090:	defff404 	addi	sp,sp,-48
    d094:	dfc00b15 	stw	ra,44(sp)
    d098:	df000a15 	stw	fp,40(sp)
    d09c:	df000a04 	addi	fp,sp,40
    d0a0:	e13ffb15 	stw	r4,-20(fp)
    d0a4:	e17ffc15 	stw	r5,-16(fp)
    d0a8:	e1bffd15 	stw	r6,-12(fp)
    d0ac:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    d0b0:	00bffa84 	movi	r2,-22
    d0b4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d0b8:	e0bffc17 	ldw	r2,-16(fp)
    d0bc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d0c0:	e0bff917 	ldw	r2,-28(fp)
    d0c4:	10800808 	cmpgei	r2,r2,32
    d0c8:	1000291e 	bne	r2,zero,d170 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d0cc:	0005303a 	rdctl	r2,status
    d0d0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d0d4:	e0fff717 	ldw	r3,-36(fp)
    d0d8:	00bfff84 	movi	r2,-2
    d0dc:	1884703a 	and	r2,r3,r2
    d0e0:	1001703a 	wrctl	status,r2
  
  return context;
    d0e4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d0e8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d0ec:	e0bff917 	ldw	r2,-28(fp)
    d0f0:	00c00074 	movhi	r3,1
    d0f4:	18c68804 	addi	r3,r3,6688
    d0f8:	100490fa 	slli	r2,r2,3
    d0fc:	10c7883a 	add	r3,r2,r3
    d100:	e0bffd17 	ldw	r2,-12(fp)
    d104:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d108:	e0bff917 	ldw	r2,-28(fp)
    d10c:	00c00074 	movhi	r3,1
    d110:	18c68804 	addi	r3,r3,6688
    d114:	100490fa 	slli	r2,r2,3
    d118:	10c5883a 	add	r2,r2,r3
    d11c:	10c00104 	addi	r3,r2,4
    d120:	e0bffe17 	ldw	r2,-8(fp)
    d124:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d128:	e0bffd17 	ldw	r2,-12(fp)
    d12c:	1005003a 	cmpeq	r2,r2,zero
    d130:	1000051e 	bne	r2,zero,d148 <alt_iic_isr_register+0xb8>
    d134:	e17ff917 	ldw	r5,-28(fp)
    d138:	e13ffb17 	ldw	r4,-20(fp)
    d13c:	000cf0c0 	call	cf0c <alt_ic_irq_enable>
    d140:	e0bfff15 	stw	r2,-4(fp)
    d144:	00000406 	br	d158 <alt_iic_isr_register+0xc8>
    d148:	e17ff917 	ldw	r5,-28(fp)
    d14c:	e13ffb17 	ldw	r4,-20(fp)
    d150:	000cfa80 	call	cfa8 <alt_ic_irq_disable>
    d154:	e0bfff15 	stw	r2,-4(fp)
    d158:	e0bfff17 	ldw	r2,-4(fp)
    d15c:	e0bffa15 	stw	r2,-24(fp)
    d160:	e0bff817 	ldw	r2,-32(fp)
    d164:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d168:	e0bff617 	ldw	r2,-40(fp)
    d16c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d170:	e0bffa17 	ldw	r2,-24(fp)
}
    d174:	e037883a 	mov	sp,fp
    d178:	dfc00117 	ldw	ra,4(sp)
    d17c:	df000017 	ldw	fp,0(sp)
    d180:	dec00204 	addi	sp,sp,8
    d184:	f800283a 	ret

0000d188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d188:	defff904 	addi	sp,sp,-28
    d18c:	dfc00615 	stw	ra,24(sp)
    d190:	df000515 	stw	fp,20(sp)
    d194:	df000504 	addi	fp,sp,20
    d198:	e13ffc15 	stw	r4,-16(fp)
    d19c:	e17ffd15 	stw	r5,-12(fp)
    d1a0:	e1bffe15 	stw	r6,-8(fp)
    d1a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d1a8:	e13ffd17 	ldw	r4,-12(fp)
    d1ac:	e17ffe17 	ldw	r5,-8(fp)
    d1b0:	e1bfff17 	ldw	r6,-4(fp)
    d1b4:	000d3a00 	call	d3a0 <open>
    d1b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d1bc:	e0bffb17 	ldw	r2,-20(fp)
    d1c0:	1004803a 	cmplt	r2,r2,zero
    d1c4:	10001c1e 	bne	r2,zero,d238 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d1c8:	e0bffb17 	ldw	r2,-20(fp)
    d1cc:	00c00074 	movhi	r3,1
    d1d0:	18fa1b04 	addi	r3,r3,-6036
    d1d4:	10800324 	muli	r2,r2,12
    d1d8:	10c5883a 	add	r2,r2,r3
    d1dc:	10c00017 	ldw	r3,0(r2)
    d1e0:	e0bffc17 	ldw	r2,-16(fp)
    d1e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d1e8:	e0bffb17 	ldw	r2,-20(fp)
    d1ec:	00c00074 	movhi	r3,1
    d1f0:	18fa1b04 	addi	r3,r3,-6036
    d1f4:	10800324 	muli	r2,r2,12
    d1f8:	10c5883a 	add	r2,r2,r3
    d1fc:	10800104 	addi	r2,r2,4
    d200:	10c00017 	ldw	r3,0(r2)
    d204:	e0bffc17 	ldw	r2,-16(fp)
    d208:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d20c:	e0bffb17 	ldw	r2,-20(fp)
    d210:	00c00074 	movhi	r3,1
    d214:	18fa1b04 	addi	r3,r3,-6036
    d218:	10800324 	muli	r2,r2,12
    d21c:	10c5883a 	add	r2,r2,r3
    d220:	10800204 	addi	r2,r2,8
    d224:	10c00017 	ldw	r3,0(r2)
    d228:	e0bffc17 	ldw	r2,-16(fp)
    d22c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d230:	e13ffb17 	ldw	r4,-20(fp)
    d234:	000bc300 	call	bc30 <alt_release_fd>
  }
} 
    d238:	e037883a 	mov	sp,fp
    d23c:	dfc00117 	ldw	ra,4(sp)
    d240:	df000017 	ldw	fp,0(sp)
    d244:	dec00204 	addi	sp,sp,8
    d248:	f800283a 	ret

0000d24c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d24c:	defffb04 	addi	sp,sp,-20
    d250:	dfc00415 	stw	ra,16(sp)
    d254:	df000315 	stw	fp,12(sp)
    d258:	df000304 	addi	fp,sp,12
    d25c:	e13ffd15 	stw	r4,-12(fp)
    d260:	e17ffe15 	stw	r5,-8(fp)
    d264:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d268:	01000074 	movhi	r4,1
    d26c:	213a1e04 	addi	r4,r4,-6024
    d270:	e17ffd17 	ldw	r5,-12(fp)
    d274:	01800044 	movi	r6,1
    d278:	01c07fc4 	movi	r7,511
    d27c:	000d1880 	call	d188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d280:	01000074 	movhi	r4,1
    d284:	213a1b04 	addi	r4,r4,-6036
    d288:	e17ffe17 	ldw	r5,-8(fp)
    d28c:	000d883a 	mov	r6,zero
    d290:	01c07fc4 	movi	r7,511
    d294:	000d1880 	call	d188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d298:	01000074 	movhi	r4,1
    d29c:	213a2104 	addi	r4,r4,-6012
    d2a0:	e17fff17 	ldw	r5,-4(fp)
    d2a4:	01800044 	movi	r6,1
    d2a8:	01c07fc4 	movi	r7,511
    d2ac:	000d1880 	call	d188 <alt_open_fd>
}  
    d2b0:	e037883a 	mov	sp,fp
    d2b4:	dfc00117 	ldw	ra,4(sp)
    d2b8:	df000017 	ldw	fp,0(sp)
    d2bc:	dec00204 	addi	sp,sp,8
    d2c0:	f800283a 	ret

0000d2c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d2c4:	defffc04 	addi	sp,sp,-16
    d2c8:	df000315 	stw	fp,12(sp)
    d2cc:	df000304 	addi	fp,sp,12
    d2d0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d2d4:	e0bffe17 	ldw	r2,-8(fp)
    d2d8:	10800217 	ldw	r2,8(r2)
    d2dc:	10d00034 	orhi	r3,r2,16384
    d2e0:	e0bffe17 	ldw	r2,-8(fp)
    d2e4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d2e8:	e03ffd15 	stw	zero,-12(fp)
    d2ec:	00002006 	br	d370 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d2f0:	e0bffd17 	ldw	r2,-12(fp)
    d2f4:	00c00074 	movhi	r3,1
    d2f8:	18fa1b04 	addi	r3,r3,-6036
    d2fc:	10800324 	muli	r2,r2,12
    d300:	10c5883a 	add	r2,r2,r3
    d304:	10c00017 	ldw	r3,0(r2)
    d308:	e0bffe17 	ldw	r2,-8(fp)
    d30c:	10800017 	ldw	r2,0(r2)
    d310:	1880141e 	bne	r3,r2,d364 <alt_file_locked+0xa0>
    d314:	e0bffd17 	ldw	r2,-12(fp)
    d318:	00c00074 	movhi	r3,1
    d31c:	18fa1b04 	addi	r3,r3,-6036
    d320:	10800324 	muli	r2,r2,12
    d324:	10c5883a 	add	r2,r2,r3
    d328:	10800204 	addi	r2,r2,8
    d32c:	10800017 	ldw	r2,0(r2)
    d330:	1004403a 	cmpge	r2,r2,zero
    d334:	10000b1e 	bne	r2,zero,d364 <alt_file_locked+0xa0>
    d338:	e0bffd17 	ldw	r2,-12(fp)
    d33c:	10800324 	muli	r2,r2,12
    d340:	1007883a 	mov	r3,r2
    d344:	00800074 	movhi	r2,1
    d348:	10ba1b04 	addi	r2,r2,-6036
    d34c:	1887883a 	add	r3,r3,r2
    d350:	e0bffe17 	ldw	r2,-8(fp)
    d354:	18800326 	beq	r3,r2,d364 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d358:	00bffcc4 	movi	r2,-13
    d35c:	e0bfff15 	stw	r2,-4(fp)
    d360:	00000a06 	br	d38c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d364:	e0bffd17 	ldw	r2,-12(fp)
    d368:	10800044 	addi	r2,r2,1
    d36c:	e0bffd15 	stw	r2,-12(fp)
    d370:	00800074 	movhi	r2,1
    d374:	10be9e04 	addi	r2,r2,-1416
    d378:	10800017 	ldw	r2,0(r2)
    d37c:	1007883a 	mov	r3,r2
    d380:	e0bffd17 	ldw	r2,-12(fp)
    d384:	18bfda2e 	bgeu	r3,r2,d2f0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d388:	e03fff15 	stw	zero,-4(fp)
    d38c:	e0bfff17 	ldw	r2,-4(fp)
}
    d390:	e037883a 	mov	sp,fp
    d394:	df000017 	ldw	fp,0(sp)
    d398:	dec00104 	addi	sp,sp,4
    d39c:	f800283a 	ret

0000d3a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d3a0:	defff404 	addi	sp,sp,-48
    d3a4:	dfc00b15 	stw	ra,44(sp)
    d3a8:	df000a15 	stw	fp,40(sp)
    d3ac:	df000a04 	addi	fp,sp,40
    d3b0:	e13ffb15 	stw	r4,-20(fp)
    d3b4:	e17ffc15 	stw	r5,-16(fp)
    d3b8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d3bc:	00bfffc4 	movi	r2,-1
    d3c0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d3c4:	00bffb44 	movi	r2,-19
    d3c8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d3cc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d3d0:	e13ffb17 	ldw	r4,-20(fp)
    d3d4:	01400074 	movhi	r5,1
    d3d8:	297e9c04 	addi	r5,r5,-1424
    d3dc:	000d74c0 	call	d74c <alt_find_dev>
    d3e0:	e0bffa15 	stw	r2,-24(fp)
    d3e4:	e0bffa17 	ldw	r2,-24(fp)
    d3e8:	1004c03a 	cmpne	r2,r2,zero
    d3ec:	1000051e 	bne	r2,zero,d404 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d3f0:	e13ffb17 	ldw	r4,-20(fp)
    d3f4:	000d7e00 	call	d7e0 <alt_find_file>
    d3f8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d3fc:	00800044 	movi	r2,1
    d400:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d404:	e0bffa17 	ldw	r2,-24(fp)
    d408:	1005003a 	cmpeq	r2,r2,zero
    d40c:	1000301e 	bne	r2,zero,d4d0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d410:	e13ffa17 	ldw	r4,-24(fp)
    d414:	000d9000 	call	d900 <alt_get_fd>
    d418:	e0bff815 	stw	r2,-32(fp)
    d41c:	e0bff817 	ldw	r2,-32(fp)
    d420:	1004403a 	cmpge	r2,r2,zero
    d424:	1000031e 	bne	r2,zero,d434 <open+0x94>
    {
      status = index;
    d428:	e0bff817 	ldw	r2,-32(fp)
    d42c:	e0bff715 	stw	r2,-36(fp)
    d430:	00002906 	br	d4d8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    d434:	e0bff817 	ldw	r2,-32(fp)
    d438:	10800324 	muli	r2,r2,12
    d43c:	1007883a 	mov	r3,r2
    d440:	00800074 	movhi	r2,1
    d444:	10ba1b04 	addi	r2,r2,-6036
    d448:	1885883a 	add	r2,r3,r2
    d44c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d450:	e0fffc17 	ldw	r3,-16(fp)
    d454:	00900034 	movhi	r2,16384
    d458:	10bfffc4 	addi	r2,r2,-1
    d45c:	1886703a 	and	r3,r3,r2
    d460:	e0bff917 	ldw	r2,-28(fp)
    d464:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d468:	e0bff617 	ldw	r2,-40(fp)
    d46c:	1004c03a 	cmpne	r2,r2,zero
    d470:	1000061e 	bne	r2,zero,d48c <open+0xec>
    d474:	e13ff917 	ldw	r4,-28(fp)
    d478:	000d2c40 	call	d2c4 <alt_file_locked>
    d47c:	e0bff715 	stw	r2,-36(fp)
    d480:	e0bff717 	ldw	r2,-36(fp)
    d484:	1004803a 	cmplt	r2,r2,zero
    d488:	1000131e 	bne	r2,zero,d4d8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d48c:	e0bffa17 	ldw	r2,-24(fp)
    d490:	10800317 	ldw	r2,12(r2)
    d494:	1005003a 	cmpeq	r2,r2,zero
    d498:	1000091e 	bne	r2,zero,d4c0 <open+0x120>
    d49c:	e0bffa17 	ldw	r2,-24(fp)
    d4a0:	10800317 	ldw	r2,12(r2)
    d4a4:	e13ff917 	ldw	r4,-28(fp)
    d4a8:	e17ffb17 	ldw	r5,-20(fp)
    d4ac:	e1bffc17 	ldw	r6,-16(fp)
    d4b0:	e1fffd17 	ldw	r7,-12(fp)
    d4b4:	103ee83a 	callr	r2
    d4b8:	e0bfff15 	stw	r2,-4(fp)
    d4bc:	00000106 	br	d4c4 <open+0x124>
    d4c0:	e03fff15 	stw	zero,-4(fp)
    d4c4:	e0bfff17 	ldw	r2,-4(fp)
    d4c8:	e0bff715 	stw	r2,-36(fp)
    d4cc:	00000206 	br	d4d8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d4d0:	00bffb44 	movi	r2,-19
    d4d4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d4d8:	e0bff717 	ldw	r2,-36(fp)
    d4dc:	1004403a 	cmpge	r2,r2,zero
    d4e0:	1000091e 	bne	r2,zero,d508 <open+0x168>
  {
    alt_release_fd (index);  
    d4e4:	e13ff817 	ldw	r4,-32(fp)
    d4e8:	000bc300 	call	bc30 <alt_release_fd>
    ALT_ERRNO = -status;
    d4ec:	000d5280 	call	d528 <alt_get_errno>
    d4f0:	e0fff717 	ldw	r3,-36(fp)
    d4f4:	00c7c83a 	sub	r3,zero,r3
    d4f8:	10c00015 	stw	r3,0(r2)
    return -1;
    d4fc:	00bfffc4 	movi	r2,-1
    d500:	e0bffe15 	stw	r2,-8(fp)
    d504:	00000206 	br	d510 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    d508:	e0bff817 	ldw	r2,-32(fp)
    d50c:	e0bffe15 	stw	r2,-8(fp)
    d510:	e0bffe17 	ldw	r2,-8(fp)
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d528:	defffd04 	addi	sp,sp,-12
    d52c:	dfc00215 	stw	ra,8(sp)
    d530:	df000115 	stw	fp,4(sp)
    d534:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d538:	00800074 	movhi	r2,1
    d53c:	10be9f04 	addi	r2,r2,-1412
    d540:	10800017 	ldw	r2,0(r2)
    d544:	1005003a 	cmpeq	r2,r2,zero
    d548:	1000061e 	bne	r2,zero,d564 <alt_get_errno+0x3c>
    d54c:	00800074 	movhi	r2,1
    d550:	10be9f04 	addi	r2,r2,-1412
    d554:	10800017 	ldw	r2,0(r2)
    d558:	103ee83a 	callr	r2
    d55c:	e0bfff15 	stw	r2,-4(fp)
    d560:	00000306 	br	d570 <alt_get_errno+0x48>
    d564:	00800074 	movhi	r2,1
    d568:	10854704 	addi	r2,r2,5404
    d56c:	e0bfff15 	stw	r2,-4(fp)
    d570:	e0bfff17 	ldw	r2,-4(fp)
}
    d574:	e037883a 	mov	sp,fp
    d578:	dfc00117 	ldw	ra,4(sp)
    d57c:	df000017 	ldw	fp,0(sp)
    d580:	dec00204 	addi	sp,sp,8
    d584:	f800283a 	ret

0000d588 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d588:	defffa04 	addi	sp,sp,-24
    d58c:	df000515 	stw	fp,20(sp)
    d590:	df000504 	addi	fp,sp,20
    d594:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d598:	0005303a 	rdctl	r2,status
    d59c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5a0:	e0fffd17 	ldw	r3,-12(fp)
    d5a4:	00bfff84 	movi	r2,-2
    d5a8:	1884703a 	and	r2,r3,r2
    d5ac:	1001703a 	wrctl	status,r2
  
  return context;
    d5b0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d5b4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    d5b8:	e0bfff17 	ldw	r2,-4(fp)
    d5bc:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d5c0:	e0bffc17 	ldw	r2,-16(fp)
    d5c4:	10c00017 	ldw	r3,0(r2)
    d5c8:	e0bffc17 	ldw	r2,-16(fp)
    d5cc:	10800117 	ldw	r2,4(r2)
    d5d0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    d5d4:	e0bffc17 	ldw	r2,-16(fp)
    d5d8:	10c00117 	ldw	r3,4(r2)
    d5dc:	e0bffc17 	ldw	r2,-16(fp)
    d5e0:	10800017 	ldw	r2,0(r2)
    d5e4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d5e8:	e0fffc17 	ldw	r3,-16(fp)
    d5ec:	e0bffc17 	ldw	r2,-16(fp)
    d5f0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    d5f4:	e0fffc17 	ldw	r3,-16(fp)
    d5f8:	e0bffc17 	ldw	r2,-16(fp)
    d5fc:	18800015 	stw	r2,0(r3)
    d600:	e0bffe17 	ldw	r2,-8(fp)
    d604:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d608:	e0bffb17 	ldw	r2,-20(fp)
    d60c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d610:	e037883a 	mov	sp,fp
    d614:	df000017 	ldw	fp,0(sp)
    d618:	dec00104 	addi	sp,sp,4
    d61c:	f800283a 	ret

0000d620 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d620:	defffb04 	addi	sp,sp,-20
    d624:	dfc00415 	stw	ra,16(sp)
    d628:	df000315 	stw	fp,12(sp)
    d62c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d630:	d0a00f17 	ldw	r2,-32708(gp)
    d634:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d638:	d0a6bd17 	ldw	r2,-25868(gp)
    d63c:	10800044 	addi	r2,r2,1
    d640:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d644:	00003106 	br	d70c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    d648:	e0bffe17 	ldw	r2,-8(fp)
    d64c:	10800017 	ldw	r2,0(r2)
    d650:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d654:	e0bffe17 	ldw	r2,-8(fp)
    d658:	10800403 	ldbu	r2,16(r2)
    d65c:	10803fcc 	andi	r2,r2,255
    d660:	1005003a 	cmpeq	r2,r2,zero
    d664:	1000051e 	bne	r2,zero,d67c <alt_tick+0x5c>
    d668:	d0a6bd17 	ldw	r2,-25868(gp)
    d66c:	1004c03a 	cmpne	r2,r2,zero
    d670:	1000021e 	bne	r2,zero,d67c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    d674:	e0bffe17 	ldw	r2,-8(fp)
    d678:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d67c:	e0bffe17 	ldw	r2,-8(fp)
    d680:	10c00217 	ldw	r3,8(r2)
    d684:	d0a6bd17 	ldw	r2,-25868(gp)
    d688:	10c01e36 	bltu	r2,r3,d704 <alt_tick+0xe4>
    d68c:	e0bffe17 	ldw	r2,-8(fp)
    d690:	10800403 	ldbu	r2,16(r2)
    d694:	10803fcc 	andi	r2,r2,255
    d698:	1004c03a 	cmpne	r2,r2,zero
    d69c:	1000191e 	bne	r2,zero,d704 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    d6a0:	e0bffe17 	ldw	r2,-8(fp)
    d6a4:	10c00317 	ldw	r3,12(r2)
    d6a8:	e0bffe17 	ldw	r2,-8(fp)
    d6ac:	11000517 	ldw	r4,20(r2)
    d6b0:	183ee83a 	callr	r3
    d6b4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d6b8:	e0bffd17 	ldw	r2,-12(fp)
    d6bc:	1004c03a 	cmpne	r2,r2,zero
    d6c0:	1000031e 	bne	r2,zero,d6d0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    d6c4:	e13ffe17 	ldw	r4,-8(fp)
    d6c8:	000d5880 	call	d588 <alt_alarm_stop>
    d6cc:	00000d06 	br	d704 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    d6d0:	e0bffe17 	ldw	r2,-8(fp)
    d6d4:	10c00217 	ldw	r3,8(r2)
    d6d8:	e0bffd17 	ldw	r2,-12(fp)
    d6dc:	1887883a 	add	r3,r3,r2
    d6e0:	e0bffe17 	ldw	r2,-8(fp)
    d6e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d6e8:	e0bffe17 	ldw	r2,-8(fp)
    d6ec:	10c00217 	ldw	r3,8(r2)
    d6f0:	d0a6bd17 	ldw	r2,-25868(gp)
    d6f4:	1880032e 	bgeu	r3,r2,d704 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    d6f8:	e0fffe17 	ldw	r3,-8(fp)
    d6fc:	00800044 	movi	r2,1
    d700:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    d704:	e0bfff17 	ldw	r2,-4(fp)
    d708:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d70c:	d0e00f04 	addi	r3,gp,-32708
    d710:	e0bffe17 	ldw	r2,-8(fp)
    d714:	10ffcc1e 	bne	r2,r3,d648 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    d718:	e037883a 	mov	sp,fp
    d71c:	dfc00117 	ldw	ra,4(sp)
    d720:	df000017 	ldw	fp,0(sp)
    d724:	dec00204 	addi	sp,sp,8
    d728:	f800283a 	ret

0000d72c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d72c:	deffff04 	addi	sp,sp,-4
    d730:	df000015 	stw	fp,0(sp)
    d734:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d738:	000170fa 	wrctl	ienable,zero
}
    d73c:	e037883a 	mov	sp,fp
    d740:	df000017 	ldw	fp,0(sp)
    d744:	dec00104 	addi	sp,sp,4
    d748:	f800283a 	ret

0000d74c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d74c:	defff904 	addi	sp,sp,-28
    d750:	dfc00615 	stw	ra,24(sp)
    d754:	df000515 	stw	fp,20(sp)
    d758:	df000504 	addi	fp,sp,20
    d75c:	e13ffd15 	stw	r4,-12(fp)
    d760:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d764:	e0bffe17 	ldw	r2,-8(fp)
    d768:	10800017 	ldw	r2,0(r2)
    d76c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d770:	e13ffd17 	ldw	r4,-12(fp)
    d774:	000239c0 	call	239c <strlen>
    d778:	10800044 	addi	r2,r2,1
    d77c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d780:	00000d06 	br	d7b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d784:	e0bffc17 	ldw	r2,-16(fp)
    d788:	11000217 	ldw	r4,8(r2)
    d78c:	e1bffb17 	ldw	r6,-20(fp)
    d790:	e17ffd17 	ldw	r5,-12(fp)
    d794:	000da5c0 	call	da5c <memcmp>
    d798:	1004c03a 	cmpne	r2,r2,zero
    d79c:	1000031e 	bne	r2,zero,d7ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d7a0:	e0bffc17 	ldw	r2,-16(fp)
    d7a4:	e0bfff15 	stw	r2,-4(fp)
    d7a8:	00000706 	br	d7c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d7ac:	e0bffc17 	ldw	r2,-16(fp)
    d7b0:	10800017 	ldw	r2,0(r2)
    d7b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d7b8:	e0fffe17 	ldw	r3,-8(fp)
    d7bc:	e0bffc17 	ldw	r2,-16(fp)
    d7c0:	10fff01e 	bne	r2,r3,d784 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d7c4:	e03fff15 	stw	zero,-4(fp)
    d7c8:	e0bfff17 	ldw	r2,-4(fp)
}
    d7cc:	e037883a 	mov	sp,fp
    d7d0:	dfc00117 	ldw	ra,4(sp)
    d7d4:	df000017 	ldw	fp,0(sp)
    d7d8:	dec00204 	addi	sp,sp,8
    d7dc:	f800283a 	ret

0000d7e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d7e0:	defffa04 	addi	sp,sp,-24
    d7e4:	dfc00515 	stw	ra,20(sp)
    d7e8:	df000415 	stw	fp,16(sp)
    d7ec:	df000404 	addi	fp,sp,16
    d7f0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d7f4:	00800074 	movhi	r2,1
    d7f8:	10be9a04 	addi	r2,r2,-1432
    d7fc:	10800017 	ldw	r2,0(r2)
    d800:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d804:	00003306 	br	d8d4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    d808:	e0bffd17 	ldw	r2,-12(fp)
    d80c:	11000217 	ldw	r4,8(r2)
    d810:	000239c0 	call	239c <strlen>
    d814:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    d818:	e0bffd17 	ldw	r2,-12(fp)
    d81c:	10c00217 	ldw	r3,8(r2)
    d820:	e0bffc17 	ldw	r2,-16(fp)
    d824:	1885883a 	add	r2,r3,r2
    d828:	10bfffc4 	addi	r2,r2,-1
    d82c:	10800003 	ldbu	r2,0(r2)
    d830:	10803fcc 	andi	r2,r2,255
    d834:	1080201c 	xori	r2,r2,128
    d838:	10bfe004 	addi	r2,r2,-128
    d83c:	10800bd8 	cmpnei	r2,r2,47
    d840:	1000031e 	bne	r2,zero,d850 <alt_find_file+0x70>
    {
      len -= 1;
    d844:	e0bffc17 	ldw	r2,-16(fp)
    d848:	10bfffc4 	addi	r2,r2,-1
    d84c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d850:	e0bffc17 	ldw	r2,-16(fp)
    d854:	1007883a 	mov	r3,r2
    d858:	e0bffe17 	ldw	r2,-8(fp)
    d85c:	1885883a 	add	r2,r3,r2
    d860:	10800003 	ldbu	r2,0(r2)
    d864:	10803fcc 	andi	r2,r2,255
    d868:	1080201c 	xori	r2,r2,128
    d86c:	10bfe004 	addi	r2,r2,-128
    d870:	10800be0 	cmpeqi	r2,r2,47
    d874:	10000a1e 	bne	r2,zero,d8a0 <alt_find_file+0xc0>
    d878:	e0bffc17 	ldw	r2,-16(fp)
    d87c:	1007883a 	mov	r3,r2
    d880:	e0bffe17 	ldw	r2,-8(fp)
    d884:	1885883a 	add	r2,r3,r2
    d888:	10800003 	ldbu	r2,0(r2)
    d88c:	10803fcc 	andi	r2,r2,255
    d890:	1080201c 	xori	r2,r2,128
    d894:	10bfe004 	addi	r2,r2,-128
    d898:	1004c03a 	cmpne	r2,r2,zero
    d89c:	10000a1e 	bne	r2,zero,d8c8 <alt_find_file+0xe8>
    d8a0:	e0bffd17 	ldw	r2,-12(fp)
    d8a4:	11000217 	ldw	r4,8(r2)
    d8a8:	e1bffc17 	ldw	r6,-16(fp)
    d8ac:	e17ffe17 	ldw	r5,-8(fp)
    d8b0:	000da5c0 	call	da5c <memcmp>
    d8b4:	1004c03a 	cmpne	r2,r2,zero
    d8b8:	1000031e 	bne	r2,zero,d8c8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d8bc:	e0bffd17 	ldw	r2,-12(fp)
    d8c0:	e0bfff15 	stw	r2,-4(fp)
    d8c4:	00000806 	br	d8e8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d8c8:	e0bffd17 	ldw	r2,-12(fp)
    d8cc:	10800017 	ldw	r2,0(r2)
    d8d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d8d4:	00c00074 	movhi	r3,1
    d8d8:	18fe9a04 	addi	r3,r3,-1432
    d8dc:	e0bffd17 	ldw	r2,-12(fp)
    d8e0:	10ffc91e 	bne	r2,r3,d808 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d8e4:	e03fff15 	stw	zero,-4(fp)
    d8e8:	e0bfff17 	ldw	r2,-4(fp)
}
    d8ec:	e037883a 	mov	sp,fp
    d8f0:	dfc00117 	ldw	ra,4(sp)
    d8f4:	df000017 	ldw	fp,0(sp)
    d8f8:	dec00204 	addi	sp,sp,8
    d8fc:	f800283a 	ret

0000d900 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d900:	defffc04 	addi	sp,sp,-16
    d904:	df000315 	stw	fp,12(sp)
    d908:	df000304 	addi	fp,sp,12
    d90c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d910:	00bffa04 	movi	r2,-24
    d914:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d918:	e03ffe15 	stw	zero,-8(fp)
    d91c:	00001e06 	br	d998 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    d920:	e0bffe17 	ldw	r2,-8(fp)
    d924:	00c00074 	movhi	r3,1
    d928:	18fa1b04 	addi	r3,r3,-6036
    d92c:	10800324 	muli	r2,r2,12
    d930:	10c5883a 	add	r2,r2,r3
    d934:	10800017 	ldw	r2,0(r2)
    d938:	1004c03a 	cmpne	r2,r2,zero
    d93c:	1000131e 	bne	r2,zero,d98c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    d940:	e0bffe17 	ldw	r2,-8(fp)
    d944:	00c00074 	movhi	r3,1
    d948:	18fa1b04 	addi	r3,r3,-6036
    d94c:	10800324 	muli	r2,r2,12
    d950:	10c7883a 	add	r3,r2,r3
    d954:	e0bfff17 	ldw	r2,-4(fp)
    d958:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d95c:	00800074 	movhi	r2,1
    d960:	10be9e04 	addi	r2,r2,-1416
    d964:	10c00017 	ldw	r3,0(r2)
    d968:	e0bffe17 	ldw	r2,-8(fp)
    d96c:	1880040e 	bge	r3,r2,d980 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    d970:	00c00074 	movhi	r3,1
    d974:	18fe9e04 	addi	r3,r3,-1416
    d978:	e0bffe17 	ldw	r2,-8(fp)
    d97c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d980:	e0bffe17 	ldw	r2,-8(fp)
    d984:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d988:	00000606 	br	d9a4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d98c:	e0bffe17 	ldw	r2,-8(fp)
    d990:	10800044 	addi	r2,r2,1
    d994:	e0bffe15 	stw	r2,-8(fp)
    d998:	e0bffe17 	ldw	r2,-8(fp)
    d99c:	10800810 	cmplti	r2,r2,32
    d9a0:	103fdf1e 	bne	r2,zero,d920 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d9a4:	e0bffd17 	ldw	r2,-12(fp)
}
    d9a8:	e037883a 	mov	sp,fp
    d9ac:	df000017 	ldw	fp,0(sp)
    d9b0:	dec00104 	addi	sp,sp,4
    d9b4:	f800283a 	ret

0000d9b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d9b8:	defffb04 	addi	sp,sp,-20
    d9bc:	df000415 	stw	fp,16(sp)
    d9c0:	df000404 	addi	fp,sp,16
    d9c4:	e13ffe15 	stw	r4,-8(fp)
    d9c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d9cc:	e0bfff17 	ldw	r2,-4(fp)
    d9d0:	10840070 	cmpltui	r2,r2,4097
    d9d4:	1000021e 	bne	r2,zero,d9e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d9d8:	00840004 	movi	r2,4096
    d9dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d9e0:	e0fffe17 	ldw	r3,-8(fp)
    d9e4:	e0bfff17 	ldw	r2,-4(fp)
    d9e8:	1885883a 	add	r2,r3,r2
    d9ec:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d9f0:	e0bffe17 	ldw	r2,-8(fp)
    d9f4:	e0bffd15 	stw	r2,-12(fp)
    d9f8:	00000506 	br	da10 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d9fc:	e0bffd17 	ldw	r2,-12(fp)
    da00:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    da04:	e0bffd17 	ldw	r2,-12(fp)
    da08:	10800804 	addi	r2,r2,32
    da0c:	e0bffd15 	stw	r2,-12(fp)
    da10:	e0fffd17 	ldw	r3,-12(fp)
    da14:	e0bffc17 	ldw	r2,-16(fp)
    da18:	18bff836 	bltu	r3,r2,d9fc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    da1c:	e0bffe17 	ldw	r2,-8(fp)
    da20:	108007cc 	andi	r2,r2,31
    da24:	1005003a 	cmpeq	r2,r2,zero
    da28:	1000021e 	bne	r2,zero,da34 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    da2c:	e0bffd17 	ldw	r2,-12(fp)
    da30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    da34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    da38:	e037883a 	mov	sp,fp
    da3c:	df000017 	ldw	fp,0(sp)
    da40:	dec00104 	addi	sp,sp,4
    da44:	f800283a 	ret

0000da48 <atexit>:
    da48:	200b883a 	mov	r5,r4
    da4c:	000d883a 	mov	r6,zero
    da50:	0009883a 	mov	r4,zero
    da54:	000f883a 	mov	r7,zero
    da58:	000dad01 	jmpi	dad0 <__register_exitproc>

0000da5c <memcmp>:
    da5c:	00c000c4 	movi	r3,3
    da60:	1980032e 	bgeu	r3,r6,da70 <memcmp+0x14>
    da64:	2144b03a 	or	r2,r4,r5
    da68:	10c4703a 	and	r2,r2,r3
    da6c:	10000f26 	beq	r2,zero,daac <memcmp+0x50>
    da70:	31ffffc4 	addi	r7,r6,-1
    da74:	3000061e 	bne	r6,zero,da90 <memcmp+0x34>
    da78:	00000a06 	br	daa4 <memcmp+0x48>
    da7c:	39ffffc4 	addi	r7,r7,-1
    da80:	00bfffc4 	movi	r2,-1
    da84:	21000044 	addi	r4,r4,1
    da88:	29400044 	addi	r5,r5,1
    da8c:	38800526 	beq	r7,r2,daa4 <memcmp+0x48>
    da90:	20c00003 	ldbu	r3,0(r4)
    da94:	28800003 	ldbu	r2,0(r5)
    da98:	18bff826 	beq	r3,r2,da7c <memcmp+0x20>
    da9c:	1885c83a 	sub	r2,r3,r2
    daa0:	f800283a 	ret
    daa4:	0005883a 	mov	r2,zero
    daa8:	f800283a 	ret
    daac:	180f883a 	mov	r7,r3
    dab0:	20c00017 	ldw	r3,0(r4)
    dab4:	28800017 	ldw	r2,0(r5)
    dab8:	18bfed1e 	bne	r3,r2,da70 <memcmp+0x14>
    dabc:	31bfff04 	addi	r6,r6,-4
    dac0:	21000104 	addi	r4,r4,4
    dac4:	29400104 	addi	r5,r5,4
    dac8:	39bff936 	bltu	r7,r6,dab0 <memcmp+0x54>
    dacc:	003fe806 	br	da70 <memcmp+0x14>

0000dad0 <__register_exitproc>:
    dad0:	defffa04 	addi	sp,sp,-24
    dad4:	00800074 	movhi	r2,1
    dad8:	10be9504 	addi	r2,r2,-1452
    dadc:	dc000015 	stw	r16,0(sp)
    dae0:	14000017 	ldw	r16,0(r2)
    dae4:	dd000415 	stw	r20,16(sp)
    dae8:	2829883a 	mov	r20,r5
    daec:	81405217 	ldw	r5,328(r16)
    daf0:	dcc00315 	stw	r19,12(sp)
    daf4:	dc800215 	stw	r18,8(sp)
    daf8:	dc400115 	stw	r17,4(sp)
    dafc:	dfc00515 	stw	ra,20(sp)
    db00:	2023883a 	mov	r17,r4
    db04:	3027883a 	mov	r19,r6
    db08:	3825883a 	mov	r18,r7
    db0c:	28002526 	beq	r5,zero,dba4 <__register_exitproc+0xd4>
    db10:	29000117 	ldw	r4,4(r5)
    db14:	008007c4 	movi	r2,31
    db18:	11002716 	blt	r2,r4,dbb8 <__register_exitproc+0xe8>
    db1c:	8800101e 	bne	r17,zero,db60 <__register_exitproc+0x90>
    db20:	2105883a 	add	r2,r4,r4
    db24:	1085883a 	add	r2,r2,r2
    db28:	20c00044 	addi	r3,r4,1
    db2c:	1145883a 	add	r2,r2,r5
    db30:	0009883a 	mov	r4,zero
    db34:	15000215 	stw	r20,8(r2)
    db38:	28c00115 	stw	r3,4(r5)
    db3c:	2005883a 	mov	r2,r4
    db40:	dfc00517 	ldw	ra,20(sp)
    db44:	dd000417 	ldw	r20,16(sp)
    db48:	dcc00317 	ldw	r19,12(sp)
    db4c:	dc800217 	ldw	r18,8(sp)
    db50:	dc400117 	ldw	r17,4(sp)
    db54:	dc000017 	ldw	r16,0(sp)
    db58:	dec00604 	addi	sp,sp,24
    db5c:	f800283a 	ret
    db60:	29802204 	addi	r6,r5,136
    db64:	00800044 	movi	r2,1
    db68:	110e983a 	sll	r7,r2,r4
    db6c:	30c04017 	ldw	r3,256(r6)
    db70:	2105883a 	add	r2,r4,r4
    db74:	1085883a 	add	r2,r2,r2
    db78:	1185883a 	add	r2,r2,r6
    db7c:	19c6b03a 	or	r3,r3,r7
    db80:	14802015 	stw	r18,128(r2)
    db84:	14c00015 	stw	r19,0(r2)
    db88:	00800084 	movi	r2,2
    db8c:	30c04015 	stw	r3,256(r6)
    db90:	88bfe31e 	bne	r17,r2,db20 <__register_exitproc+0x50>
    db94:	30804117 	ldw	r2,260(r6)
    db98:	11c4b03a 	or	r2,r2,r7
    db9c:	30804115 	stw	r2,260(r6)
    dba0:	003fdf06 	br	db20 <__register_exitproc+0x50>
    dba4:	00800074 	movhi	r2,1
    dba8:	1086c804 	addi	r2,r2,6944
    dbac:	100b883a 	mov	r5,r2
    dbb0:	80805215 	stw	r2,328(r16)
    dbb4:	003fd606 	br	db10 <__register_exitproc+0x40>
    dbb8:	00800034 	movhi	r2,0
    dbbc:	10868304 	addi	r2,r2,6668
    dbc0:	1000021e 	bne	r2,zero,dbcc <__register_exitproc+0xfc>
    dbc4:	013fffc4 	movi	r4,-1
    dbc8:	003fdc06 	br	db3c <__register_exitproc+0x6c>
    dbcc:	01006404 	movi	r4,400
    dbd0:	103ee83a 	callr	r2
    dbd4:	1007883a 	mov	r3,r2
    dbd8:	103ffa26 	beq	r2,zero,dbc4 <__register_exitproc+0xf4>
    dbdc:	80805217 	ldw	r2,328(r16)
    dbe0:	180b883a 	mov	r5,r3
    dbe4:	18000115 	stw	zero,4(r3)
    dbe8:	18800015 	stw	r2,0(r3)
    dbec:	80c05215 	stw	r3,328(r16)
    dbf0:	18006215 	stw	zero,392(r3)
    dbf4:	18006315 	stw	zero,396(r3)
    dbf8:	0009883a 	mov	r4,zero
    dbfc:	883fc826 	beq	r17,zero,db20 <__register_exitproc+0x50>
    dc00:	003fd706 	br	db60 <__register_exitproc+0x90>
    dc04:	00004474 	movhi	zero,273
