
concurrence.elf:     file format elf32-littlenios2
concurrence.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x0000dde4 memsz 0x0000dde4 flags r-x
    LOAD off    0x0000ff78 vaddr 0x0000df78 paddr 0x0000f9d8 align 2**12
         filesz 0x00001a60 memsz 0x00001a60 flags rw-
    LOAD off    0x00012438 vaddr 0x00011438 paddr 0x00011438 align 2**12
         filesz 0x00000000 memsz 0x00000798 flags rw-
    LOAD off    0x00012000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00012000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d9bc  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000428  0000db50  0000db50  0000fb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a60  0000df78  0000f9d8  0000ff78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000798  00011438  00011438  00012438  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00012020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  00012048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000163e  00000000  00000000  00012d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000247d7  00000000  00000000  000143be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007f2f  00000000  00000000  00038b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000147d4  00000000  00000000  00040ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001bb4  00000000  00000000  00055298  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002244  00000000  00000000  00056e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c25c  00000000  00000000  00059090  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000652ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00065310  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00069113  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00069116  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00069122  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00069123  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00069124  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00069128  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006912c  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00069130  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006913b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00069146  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00069151  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  00069159  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  00069184  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
0000db50 l    d  .rodata	00000000 .rodata
0000df78 l    d  .rwdata	00000000 .rwdata
00011438 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 applicationEtape1.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 system_m.c
00000000 l    df *ABS*	00000000 kernel.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000017bc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000df78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002358 l     F .text	00000058 __sprint_r
0000dcaa l     O .rodata	00000010 blanks.3452
0000dc9a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000043bc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dtoa.c
00004570 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005f6c l     F .text	00000058 std
00006078 l     F .text	00000008 __fp_lock
00006080 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0000f9ac l     O .rwdata	00000004 charset
0000dcdc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000de24 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000099bc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b210 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b270 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b29c l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b3d0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b6b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b790 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b8ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000bb18 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f9cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000bdb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e934 l     O .rwdata	00001060 jtag_uart_0
0000bea4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c0e4 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c30c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000c988 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ccac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d0d0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d20c l     F .text	000000dc alt_file_locked
0000d470 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000ddc g     F .text	000000d8 addLast
00007548 g     F .text	00000094 _mprec_log10
00007634 g     F .text	00000088 __any_on
00008cd0 g     F .text	00000070 _isatty_r
0000ddfc g     O .rodata	00000028 __mprec_tinytens
0000b94c g     F .text	0000006c alt_main
000021c0 g     F .text	000000a0 _puts_r
00011940 g     O .bss	00000100 alt_irq
00008d40 g     F .text	00000078 _lseek_r
000016b4 g       .text	00000000 _transfer
00000d4c g     F .text	0000004c transfer
00000678 g     F .text	00000084 consommateur1
0000f9d8 g       *ABS*	00000000 __flash_rwdata_start
0000a4dc g     F .text	00000088 __eqdf2
000011cc g     F .text	000000d8 creerVerrou
00011bd0 g       *ABS*	00000000 __alt_heap_start
00002148 g     F .text	00000044 printf
0000879c g     F .text	00000068 __sseek
00005fd4 g     F .text	000000a4 __sinit
00006cac g     F .text	00000084 _setlocale_r
000060d4 g     F .text	00000068 __sfmoreglue
0000b9d8 g     F .text	00000020 __malloc_unlock
00006fc4 g     F .text	000000e0 memmove
000114fc g     O .bss	0000000c tampon
000060c4 g     F .text	00000010 _cleanup
000076bc g     F .text	000000bc _Balloc
0000a5ec g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
00011440 g     O .bss	00000004 edge_capture
00000000 g       *ABS*	00000000 __flash_exceptions_start
00008c5c g     F .text	00000074 _fstat_r
00000be8 g     F .text	00000060 init_button
00011464 g     O .bss	00000004 errno
0001147c g     O .bss	00000004 alt_argv
00011448 g     O .bss	00000004 running
00017994 g       *ABS*	00000000 _gp
000114b0 g     O .bss	0000000c output
0000e7b4 g     O .rwdata	00000180 alt_fd_list
00011508 g     O .bss	00000078 processes
0000d694 g     F .text	00000094 alt_find_dev
000020a8 g     F .text	000000a0 memcpy
0000f994 g     O .rwdata	00000004 readyList
000060b8 g     F .text	0000000c _cleanup_r
0000a784 g     F .text	000000f8 __floatsidf
0000d194 g     F .text	00000078 alt_io_redirect
0000a6fc g     F .text	00000088 __ltdf2
0000db50 g       *ABS*	00000000 __DTOR_END__
00002260 g     F .text	00000014 puts
000001d0 g     F .text	00000194 deposer
00011454 g     O .bss	00000004 nbLocks
00007498 g     F .text	000000b0 __ratio
00011444 g     O .bss	00000004 timer_capture
0000c524 g     F .text	00000224 altera_avalon_jtag_uart_read
00001954 g     F .text	00000014 malloc
0000218c g     F .text	00000034 _printf_r
000018f8 g     F .text	00000008 __udivsi3
0000b5f0 g     F .text	000000c0 isatty
0000dd0c g     O .rodata	000000c8 __mprec_tens
00006c88 g     F .text	00000008 __locale_charset
00000ca0 g     F .text	00000050 init_clock
0000d900 g     F .text	00000090 alt_icache_flush
000005f4 g     F .text	00000084 consommateur0
00011458 g     O .bss	00000004 __malloc_top_pad
000114bc g     O .bss	0000000c input
0000f9a8 g     O .rwdata	00000004 __mb_cur_max
00006c90 g     F .text	0000000c _localeconv_r
00007db4 g     F .text	0000003c __i2b
0000666c g     F .text	0000049c __sfvwrite_r
00002274 g     F .text	00000070 _sbrk_r
00008db8 g     F .text	00000078 _read_r
0000e780 g     O .rwdata	0000000c __lc_ctype
0000f9c0 g     O .rwdata	00000004 alt_max_fd
0000af14 g     F .text	00000138 __unpack_d
00008b38 g     F .text	00000110 _fclose_r
00005f38 g     F .text	00000034 fflush
0001145c g     O .bss	00000004 __malloc_max_sbrked_mem
0000b430 g     F .text	000001c0 alt_irq_register
00011580 g     O .bss	000003c0 locks
00009e4c g     F .text	00000074 __adddf3
00007378 g     F .text	00000120 __b2d
0000940c g     F .text	000005b0 __umoddi3
0000b7fc g     F .text	000000f0 lseek
0000f99c g     O .rwdata	00000004 _global_impure_ptr
00008130 g     F .text	000005f4 _realloc_r
00011bd0 g       *ABS*	00000000 __bss_end
0000cfd8 g     F .text	000000f8 alt_iic_isr_register
0000d568 g     F .text	0000010c alt_tick
00008e30 g     F .text	000005dc __udivdi3
0000ddd4 g     O .rodata	00000028 __mprec_bigtens
00008010 g     F .text	00000120 __s2b
0000a954 g     F .text	00000194 __floatunsidf
0001144c g     O .bss	00000004 nextP
00007298 g     F .text	00000060 __mcmp
000060a0 g     F .text	00000018 __fp_lock_all
00001610 g     F .text	00000088 signalAll
0000cf90 g     F .text	00000048 alt_ic_irq_enabled
0000d4d0 g     F .text	00000098 alt_alarm_stop
00011474 g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
0000e78c g     O .rwdata	00000028 alt_dev_null
0001148c g     O .bss	0000000c numVerrou
0000cbdc g     F .text	0000001c alt_dcache_flush_all
00007164 g     F .text	00000070 __hi0bits
0000a87c g     F .text	000000d8 __fixdfsi
00000d98 g     F .text	00000044 iotransfer
0000f9d8 g       *ABS*	00000000 __ram_rwdata_end
00001358 g     F .text	00000094 deverrouiller
0000f9b8 g     O .rwdata	00000008 alt_dev_list
0000bc94 g     F .text	00000120 write
0000df78 g       *ABS*	00000000 __ram_rodata_end
0000b2fc g     F .text	000000d4 fstat
00001044 g     F .text	0000010c creerProcessus
000012a4 g     F .text	000000b4 verrouiller
00000eb4 g     F .text	00000074 addFirst
00007ef0 g     F .text	00000120 __pow5mult
00011468 g     O .bss	00000004 __nlocale_changed
00001900 g     F .text	00000008 __umodsi3
00011bd0 g       *ABS*	00000000 end
00011450 g     O .bss	00000004 nbProcess
00000fe4 g     F .text	00000060 head
0000c024 g     F .text	000000c0 altera_avalon_jtag_uart_init
000017b0 g       .text	00000000 allowInterrupts
0000db4c g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000c9f8 g     F .text	00000090 alt_avalon_timer_sc_init
0000ab80 g     F .text	00000080 __clzsi2
0000c748 g     F .text	00000240 altera_avalon_jtag_uart_write
00005fc4 g     F .text	00000004 __sfp_lock_acquire
00006ee0 g     F .text	000000e4 memchr
000023b0 g     F .text	00001eac ___vfprintf_internal_r
00006358 g     F .text	00000314 _free_r
000043c0 g     F .text	000001b0 __call_exitprocs
00011438 g     O .bss	00000008 interruptVector
0001146c g     O .bss	00000004 __mlocale_changed
0000f9a4 g     O .rwdata	00000004 __malloc_sbrk_base
00000194 g     F .text	0000003c _start
00011484 g     O .bss	00000004 _alt_tick_rate
00007a80 g     F .text	0000014c __lshift
00011488 g     O .bss	00000004 _alt_nticks
00001580 g     F .text	00000090 signal
0000b9f8 g     F .text	00000120 read
0000be48 g     F .text	0000005c alt_sys_init
0000da18 g     F .text	00000134 __register_exitproc
00007bcc g     F .text	000001e8 __multiply
0000c3bc g     F .text	00000074 altera_avalon_jtag_uart_close
0000df78 g       *ABS*	00000000 __ram_rwdata_start
0000db50 g       *ABS*	00000000 __ram_rodata_start
000114d4 g     O .bss	00000028 __malloc_current_mallinfo
00007778 g     F .text	0000017c __d2b
000017a4 g       .text	00000000 maskInterrupts
0000bedc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d848 g     F .text	000000b8 alt_get_fd
0000b04c g     F .text	000000c8 __fpcmp_parts_d
00008ac8 g     F .text	00000070 _close_r
0000d9a4 g     F .text	00000074 memcmp
0000bf8c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00011bd0 g       *ABS*	00000000 __alt_stack_base
0000bfd4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00004280 g     F .text	0000013c __swsetup_r
0000a284 g     F .text	00000258 __divdf3
0000613c g     F .text	000000f0 __sfp
000075dc g     F .text	00000058 __copybits
0000e378 g     O .rwdata	00000408 __malloc_av_
00005fd0 g     F .text	00000004 __sinit_lock_release
00000364 g     F .text	000001c0 prelever
00009ec0 g     F .text	000003c4 __muldf3
00008880 g     F .text	00000060 __sread
0000d728 g     F .text	00000120 alt_find_file
0000cbf8 g     F .text	000000b4 alt_dev_llist_insert
0000b9b8 g     F .text	00000020 __malloc_lock
0000bbd8 g     F .text	000000bc sbrk
00005d3c g     F .text	000001fc _fflush_r
00008a14 g     F .text	000000b4 _calloc_r
00011438 g       *ABS*	00000000 __bss_start
000070a4 g     F .text	00000098 memset
00000780 g     F .text	00000238 main
00000a8c g     F .text	000000d8 insertTail
00011480 g     O .bss	00000004 alt_envp
00011460 g     O .bss	00000004 __malloc_max_total_mem
0000bf34 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000014d8 g     F .text	000000a8 await
00000c48 g     F .text	00000058 handle_timer_interrupts
00008794 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008c48 g     F .text	00000014 fclose
00011a40 g     O .bss	00000190 _atexit0
00004788 g     F .text	000015b4 _dtoa_r
00001968 g     F .text	00000740 _malloc_r
0000f9c4 g     O .rwdata	00000004 alt_errno
00006bd0 g     F .text	000000b8 _fwalk
00001838 g     F .text	00000060 __divsi3
0000de30 g     O .rodata	00000014 __thenan_df
0000622c g     F .text	0000012c _malloc_trim_r
0000db50 g       *ABS*	00000000 __CTOR_END__
000013ec g     F .text	000000ec creerCondition
000088e0 g     F .text	000000bc strcmp
0000db50 g       *ABS*	00000000 __flash_rodata_start
0000db50 g       *ABS*	00000000 __DTOR_LIST__
0000a564 g     F .text	00000088 __nedf2
0000be14 g     F .text	00000034 alt_irq_init
0000bb78 g     F .text	00000060 alt_release_fd
000006fc g     F .text	00000084 consommateur2
0000de44 g     O .rodata	00000100 __clz_tab
00011470 g     O .bss	00000004 _PathLocale
0000d990 g     F .text	00000014 atexit
0000899c g     F .text	00000078 _write_r
00006d30 g     F .text	0000001c setlocale
0000f998 g     O .rwdata	00000004 _impure_ptr
00011478 g     O .bss	00000004 alt_argc
0000cd70 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
000072f8 g     F .text	00000080 __ulp
00008724 g     F .text	00000040 __isinfd
00006088 g     F .text	00000018 __fp_unlock_all
00000f28 g     F .text	000000bc removeHead
0000f9b0 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
00006c9c g     F .text	00000010 localeconv
000009b8 g     F .text	000000d4 removeHeadI
0000ce04 g     F .text	00000050 alt_ic_isr_register
0000f9d8 g       *ABS*	00000000 _edata
00011bd0 g       *ABS*	00000000 _end
00000cf0 g     F .text	0000005c newProcess
020001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c430 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000cef0 g     F .text	000000a0 alt_ic_irq_disable
00008804 g     F .text	0000007c __swrite
0000f9a0 g     O .rwdata	00000004 __malloc_trim_threshold
0000d674 g     F .text	00000020 altera_nios2_qsys_irq_init
00001908 g     F .text	00000038 exit
00006b08 g     F .text	000000c8 _fwalk_reent
000078f4 g     F .text	0000018c __mdiff
00001898 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
00005fc8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00001150 g     F .text	0000007c start
00008764 g     F .text	00000030 __isnand
0000b2dc g     F .text	00000020 _exit
0000ca88 g     F .text	00000154 alt_alarm_start
0000aae8 g     F .text	00000098 __muldi3
00006d4c g     F .text	00000194 __smakebuf_r
000022e4 g     F .text	00000074 strlen
00011498 g     O .bss	00000018 numCondition
0000d2e8 g     F .text	00000188 open
0000a674 g     F .text	00000088 __gedf2
00001698 g       .text	00000000 _createStack
0000cdd4 g     F .text	00000030 alt_icache_flush_all
0000f9c8 g     O .rwdata	00000004 alt_priority_mask
0000ce54 g     F .text	0000009c alt_ic_irq_enable
0000425c g     F .text	00000024 __vfprintf_internal
00000524 g     F .text	000000d0 producteur
00009dcc g     F .text	00000080 __subdf3
000114c8 g     O .bss	0000000c nbElement
000071d4 g     F .text	000000c4 __lo0bits
0000f9d0 g     O .rwdata	00000008 alt_alarm_list
0000cd0c g     F .text	00000064 _do_ctors
00000b64 g     F .text	00000084 handle_button_interrupts
0000b114 g     F .text	000000fc close
0000b710 g     F .text	00000080 alt_load
0000ac00 g     F .text	00000314 __pack_d
00001940 g     F .text	00000014 free
00005fcc g     F .text	00000004 __sinit_lock_acquire
00007df0 g     F .text	00000100 __multadd
0000713c g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00074 	movhi	r3,1
 2000134:	18c65004 	addi	r3,r3,6464
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00074 	movhi	r3,1
 200014c:	18c65004 	addi	r3,r3,6464
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a0:	d69e6514 	ori	gp,gp,31124
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a8:	10850e14 	ori	r2,r2,5176

    movhi r3, %hi(__bss_end)
     1ac:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b0:	18c6f414 	ori	r3,r3,7120

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	000b7100 	call	b710 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	000b94c0 	call	b94c <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <deposer>:
int output[NBTAMPON] = { 0 }; //out pointer for each buffer which will increase upon getting a new element
int input[NBTAMPON] = { 0 }; //in pointer for each buffer which will increase upon putting a new element
int nbElement[NBTAMPON] = { 0 }; //number of actual elements in each buffer

//Function which is used by producer to put an element k into buffer t 
void deposer(int t, int k) {
     1d0:	defffc04 	addi	sp,sp,-16
     1d4:	dfc00315 	stw	ra,12(sp)
     1d8:	df000215 	stw	fp,8(sp)
     1dc:	df000204 	addi	fp,sp,8
     1e0:	e13ffe15 	stw	r4,-8(fp)
     1e4:	e17fff15 	stw	r5,-4(fp)
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
     1e8:	e0bffe17 	ldw	r2,-8(fp)
     1ec:	00c00074 	movhi	r3,1
     1f0:	18c52304 	addi	r3,r3,5260
     1f4:	1085883a 	add	r2,r2,r2
     1f8:	1085883a 	add	r2,r2,r2
     1fc:	10c5883a 	add	r2,r2,r3
     200:	11000017 	ldw	r4,0(r2)
     204:	00012a40 	call	12a4 <verrouiller>
	//If buffer t is full it should wait
	while (nbElement[t] == TAILLETAMPON) {
     208:	00000e06 	br	244 <deposer+0x74>
		await(numCondition[numVerrou[t]][1]);
     20c:	e0bffe17 	ldw	r2,-8(fp)
     210:	00c00074 	movhi	r3,1
     214:	18c52304 	addi	r3,r3,5260
     218:	1085883a 	add	r2,r2,r2
     21c:	1085883a 	add	r2,r2,r2
     220:	10c5883a 	add	r2,r2,r3
     224:	10800017 	ldw	r2,0(r2)
     228:	00c00074 	movhi	r3,1
     22c:	18c52604 	addi	r3,r3,5272
     230:	100490fa 	slli	r2,r2,3
     234:	10c5883a 	add	r2,r2,r3
     238:	10800104 	addi	r2,r2,4
     23c:	11000017 	ldw	r4,0(r2)
     240:	00014d80 	call	14d8 <await>
//Function which is used by producer to put an element k into buffer t 
void deposer(int t, int k) {
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
	//If buffer t is full it should wait
	while (nbElement[t] == TAILLETAMPON) {
     244:	e0bffe17 	ldw	r2,-8(fp)
     248:	00c00074 	movhi	r3,1
     24c:	18c53204 	addi	r3,r3,5320
     250:	1085883a 	add	r2,r2,r2
     254:	1085883a 	add	r2,r2,r2
     258:	10c5883a 	add	r2,r2,r3
     25c:	10800017 	ldw	r2,0(r2)
     260:	10800060 	cmpeqi	r2,r2,1
     264:	103fe91e 	bne	r2,zero,20c <deposer+0x3c>
		await(numCondition[numVerrou[t]][1]);
	}
	//Put the element k into buffer t
	tampon[t][input[t]] = k;
     268:	e13ffe17 	ldw	r4,-8(fp)
     26c:	e0bffe17 	ldw	r2,-8(fp)
     270:	00c00074 	movhi	r3,1
     274:	18c52f04 	addi	r3,r3,5308
     278:	1085883a 	add	r2,r2,r2
     27c:	1085883a 	add	r2,r2,r2
     280:	10c5883a 	add	r2,r2,r3
     284:	10800017 	ldw	r2,0(r2)
     288:	00c00074 	movhi	r3,1
     28c:	18c53f04 	addi	r3,r3,5372
     290:	1105883a 	add	r2,r2,r4
     294:	1085883a 	add	r2,r2,r2
     298:	1085883a 	add	r2,r2,r2
     29c:	10c7883a 	add	r3,r2,r3
     2a0:	e0bfff17 	ldw	r2,-4(fp)
     2a4:	18800015 	stw	r2,0(r3)
	input[t] = (input[t] + 1) % TAILLETAMPON;
     2a8:	e0bffe17 	ldw	r2,-8(fp)
     2ac:	00c00074 	movhi	r3,1
     2b0:	18c52f04 	addi	r3,r3,5308
     2b4:	1085883a 	add	r2,r2,r2
     2b8:	1085883a 	add	r2,r2,r2
     2bc:	10c5883a 	add	r2,r2,r3
     2c0:	10000015 	stw	zero,0(r2)
	nbElement[t]++;
     2c4:	e0fffe17 	ldw	r3,-8(fp)
     2c8:	01000074 	movhi	r4,1
     2cc:	21053204 	addi	r4,r4,5320
     2d0:	18c5883a 	add	r2,r3,r3
     2d4:	1085883a 	add	r2,r2,r2
     2d8:	1105883a 	add	r2,r2,r4
     2dc:	10800017 	ldw	r2,0(r2)
     2e0:	11400044 	addi	r5,r2,1
     2e4:	01000074 	movhi	r4,1
     2e8:	21053204 	addi	r4,r4,5320
     2ec:	18c5883a 	add	r2,r3,r3
     2f0:	1085883a 	add	r2,r2,r2
     2f4:	1105883a 	add	r2,r2,r4
     2f8:	11400015 	stw	r5,0(r2)
	//Send a signal to everybody waiting on condition numCondition[numVerrou[t],0]
	signal(numCondition[numVerrou[t]][0]);
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	00c00074 	movhi	r3,1
     304:	18c52304 	addi	r3,r3,5260
     308:	1085883a 	add	r2,r2,r2
     30c:	1085883a 	add	r2,r2,r2
     310:	10c5883a 	add	r2,r2,r3
     314:	10800017 	ldw	r2,0(r2)
     318:	00c00074 	movhi	r3,1
     31c:	18c52604 	addi	r3,r3,5272
     320:	100490fa 	slli	r2,r2,3
     324:	10c5883a 	add	r2,r2,r3
     328:	11000017 	ldw	r4,0(r2)
     32c:	00015800 	call	1580 <signal>
	//Exit the lock with the id numVerrou[t]
	deverrouiller(numVerrou[t]);
     330:	e0bffe17 	ldw	r2,-8(fp)
     334:	00c00074 	movhi	r3,1
     338:	18c52304 	addi	r3,r3,5260
     33c:	1085883a 	add	r2,r2,r2
     340:	1085883a 	add	r2,r2,r2
     344:	10c5883a 	add	r2,r2,r3
     348:	11000017 	ldw	r4,0(r2)
     34c:	00013580 	call	1358 <deverrouiller>
}
     350:	e037883a 	mov	sp,fp
     354:	dfc00117 	ldw	ra,4(sp)
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00204 	addi	sp,sp,8
     360:	f800283a 	ret

00000364 <prelever>:

//Function which is used by consumer to get an element from buffer t, which will be returned  
int prelever(int t) {
     364:	defffc04 	addi	sp,sp,-16
     368:	dfc00315 	stw	ra,12(sp)
     36c:	df000215 	stw	fp,8(sp)
     370:	df000204 	addi	fp,sp,8
     374:	e13fff15 	stw	r4,-4(fp)
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
     378:	e0bfff17 	ldw	r2,-4(fp)
     37c:	00c00074 	movhi	r3,1
     380:	18c52304 	addi	r3,r3,5260
     384:	1085883a 	add	r2,r2,r2
     388:	1085883a 	add	r2,r2,r2
     38c:	10c5883a 	add	r2,r2,r3
     390:	11000017 	ldw	r4,0(r2)
     394:	00012a40 	call	12a4 <verrouiller>
	//Wait for a signal if the buffer t is empty
	printf("nbElement[%d] = %d\n", t, nbElement[t]);
     398:	e0bfff17 	ldw	r2,-4(fp)
     39c:	00c00074 	movhi	r3,1
     3a0:	18c53204 	addi	r3,r3,5320
     3a4:	1085883a 	add	r2,r2,r2
     3a8:	1085883a 	add	r2,r2,r2
     3ac:	10c5883a 	add	r2,r2,r3
     3b0:	11800017 	ldw	r6,0(r2)
     3b4:	01000074 	movhi	r4,1
     3b8:	2136d404 	addi	r4,r4,-9392
     3bc:	e17fff17 	ldw	r5,-4(fp)
     3c0:	00021480 	call	2148 <printf>
	while (nbElement[t] == 0) {
     3c4:	00000d06 	br	3fc <prelever+0x98>
		await(numCondition[numVerrou[t]][0]);
     3c8:	e0bfff17 	ldw	r2,-4(fp)
     3cc:	00c00074 	movhi	r3,1
     3d0:	18c52304 	addi	r3,r3,5260
     3d4:	1085883a 	add	r2,r2,r2
     3d8:	1085883a 	add	r2,r2,r2
     3dc:	10c5883a 	add	r2,r2,r3
     3e0:	10800017 	ldw	r2,0(r2)
     3e4:	00c00074 	movhi	r3,1
     3e8:	18c52604 	addi	r3,r3,5272
     3ec:	100490fa 	slli	r2,r2,3
     3f0:	10c5883a 	add	r2,r2,r3
     3f4:	11000017 	ldw	r4,0(r2)
     3f8:	00014d80 	call	14d8 <await>
int prelever(int t) {
	//Enter the lock with the id numVerrou[t]
	verrouiller(numVerrou[t]);
	//Wait for a signal if the buffer t is empty
	printf("nbElement[%d] = %d\n", t, nbElement[t]);
	while (nbElement[t] == 0) {
     3fc:	e0bfff17 	ldw	r2,-4(fp)
     400:	00c00074 	movhi	r3,1
     404:	18c53204 	addi	r3,r3,5320
     408:	1085883a 	add	r2,r2,r2
     40c:	1085883a 	add	r2,r2,r2
     410:	10c5883a 	add	r2,r2,r3
     414:	10800017 	ldw	r2,0(r2)
     418:	1005003a 	cmpeq	r2,r2,zero
     41c:	103fea1e 	bne	r2,zero,3c8 <prelever+0x64>
		await(numCondition[numVerrou[t]][0]);
	}
	//Get an element from buffer t
	int retour = tampon[t][output[t]];
     420:	e13fff17 	ldw	r4,-4(fp)
     424:	e0bfff17 	ldw	r2,-4(fp)
     428:	00c00074 	movhi	r3,1
     42c:	18c52c04 	addi	r3,r3,5296
     430:	1085883a 	add	r2,r2,r2
     434:	1085883a 	add	r2,r2,r2
     438:	10c5883a 	add	r2,r2,r3
     43c:	10800017 	ldw	r2,0(r2)
     440:	00c00074 	movhi	r3,1
     444:	18c53f04 	addi	r3,r3,5372
     448:	1105883a 	add	r2,r2,r4
     44c:	1085883a 	add	r2,r2,r2
     450:	1085883a 	add	r2,r2,r2
     454:	10c5883a 	add	r2,r2,r3
     458:	10800017 	ldw	r2,0(r2)
     45c:	e0bffe15 	stw	r2,-8(fp)
	output[t] = (output[t] + 1) % TAILLETAMPON;
     460:	e0bfff17 	ldw	r2,-4(fp)
     464:	00c00074 	movhi	r3,1
     468:	18c52c04 	addi	r3,r3,5296
     46c:	1085883a 	add	r2,r2,r2
     470:	1085883a 	add	r2,r2,r2
     474:	10c5883a 	add	r2,r2,r3
     478:	10000015 	stw	zero,0(r2)
	nbElement[t]--;
     47c:	e0ffff17 	ldw	r3,-4(fp)
     480:	01000074 	movhi	r4,1
     484:	21053204 	addi	r4,r4,5320
     488:	18c5883a 	add	r2,r3,r3
     48c:	1085883a 	add	r2,r2,r2
     490:	1105883a 	add	r2,r2,r4
     494:	10800017 	ldw	r2,0(r2)
     498:	117fffc4 	addi	r5,r2,-1
     49c:	01000074 	movhi	r4,1
     4a0:	21053204 	addi	r4,r4,5320
     4a4:	18c5883a 	add	r2,r3,r3
     4a8:	1085883a 	add	r2,r2,r2
     4ac:	1105883a 	add	r2,r2,r4
     4b0:	11400015 	stw	r5,0(r2)
	//Send a signal to everybody waiting on condition numCondition[numVerrou[t],1]
	signal(numCondition[numVerrou[t]][1]);
     4b4:	e0bfff17 	ldw	r2,-4(fp)
     4b8:	00c00074 	movhi	r3,1
     4bc:	18c52304 	addi	r3,r3,5260
     4c0:	1085883a 	add	r2,r2,r2
     4c4:	1085883a 	add	r2,r2,r2
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800017 	ldw	r2,0(r2)
     4d0:	00c00074 	movhi	r3,1
     4d4:	18c52604 	addi	r3,r3,5272
     4d8:	100490fa 	slli	r2,r2,3
     4dc:	10c5883a 	add	r2,r2,r3
     4e0:	10800104 	addi	r2,r2,4
     4e4:	11000017 	ldw	r4,0(r2)
     4e8:	00015800 	call	1580 <signal>
	//Exit the lock with the id numVerrou[t]
	deverrouiller(numVerrou[t]);
     4ec:	e0bfff17 	ldw	r2,-4(fp)
     4f0:	00c00074 	movhi	r3,1
     4f4:	18c52304 	addi	r3,r3,5260
     4f8:	1085883a 	add	r2,r2,r2
     4fc:	1085883a 	add	r2,r2,r2
     500:	10c5883a 	add	r2,r2,r3
     504:	11000017 	ldw	r4,0(r2)
     508:	00013580 	call	1358 <deverrouiller>
	//Return the element which is already taken from buffer t
	return retour;
     50c:	e0bffe17 	ldw	r2,-8(fp)
}
     510:	e037883a 	mov	sp,fp
     514:	dfc00117 	ldw	ra,4(sp)
     518:	df000017 	ldw	fp,0(sp)
     51c:	dec00204 	addi	sp,sp,8
     520:	f800283a 	ret

00000524 <producteur>:

//Producer function which upon pressing any of the buttons 0,1 or 2
//will add element '1' to buffers 0,1 or 2 respectively
void producteur(void) {
     524:	defffa04 	addi	sp,sp,-24
     528:	dfc00515 	stw	ra,20(sp)
     52c:	df000415 	stw	fp,16(sp)
     530:	df000404 	addi	fp,sp,16
	//Infinite loop to read from buttons and put elements into corresponding buffers
	while (1) {
		//read which button is pressed by returning the value of button register
		int buttons = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     534:	00808034 	movhi	r2,512
     538:	10940304 	addi	r2,r2,20492
     53c:	10800037 	ldwio	r2,0(r2)
     540:	e0bffe15 	stw	r2,-8(fp)
		int temp=0;
     544:	e03ffd15 	stw	zero,-12(fp)
		int j=0;
     548:	e03ffc15 	stw	zero,-16(fp)
		temp = buttons;
     54c:	e0bffe17 	ldw	r2,-8(fp)
     550:	e0bffd15 	stw	r2,-12(fp)
		//To reinitialize the buttons register before reading new buttons
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, buttons);
     554:	00c08034 	movhi	r3,512
     558:	18d40304 	addi	r3,r3,20492
     55c:	e0bffe17 	ldw	r2,-8(fp)
     560:	18800035 	stwio	r2,0(r3)
		//To verify which buttons are pressed
		for (j = 0; j < NBTAMPON; j++) {
     564:	e03ffc15 	stw	zero,-16(fp)
     568:	00001e06 	br	5e4 <producteur+0xc0>
			if (temp % 2 == 1)
     56c:	e0bffd17 	ldw	r2,-12(fp)
     570:	00e00034 	movhi	r3,32768
     574:	18c00044 	addi	r3,r3,1
     578:	10c4703a 	and	r2,r2,r3
     57c:	e0bfff15 	stw	r2,-4(fp)
     580:	e0ffff17 	ldw	r3,-4(fp)
     584:	1804403a 	cmpge	r2,r3,zero
     588:	10000a1e 	bne	r2,zero,5b4 <producteur+0x90>
     58c:	e0bfff17 	ldw	r2,-4(fp)
     590:	10bfffc4 	addi	r2,r2,-1
     594:	e0bfff15 	stw	r2,-4(fp)
     598:	00bfff84 	movi	r2,-2
     59c:	e0ffff17 	ldw	r3,-4(fp)
     5a0:	1886b03a 	or	r3,r3,r2
     5a4:	e0ffff15 	stw	r3,-4(fp)
     5a8:	e0bfff17 	ldw	r2,-4(fp)
     5ac:	10800044 	addi	r2,r2,1
     5b0:	e0bfff15 	stw	r2,-4(fp)
     5b4:	e0bfff17 	ldw	r2,-4(fp)
     5b8:	10800058 	cmpnei	r2,r2,1
     5bc:	1000031e 	bne	r2,zero,5cc <producteur+0xa8>
				deposer(j, 1); //To put element 1 into buffer j because button j is pressed
     5c0:	e13ffc17 	ldw	r4,-16(fp)
     5c4:	01400044 	movi	r5,1
     5c8:	00001d00 	call	1d0 <deposer>
			temp >>= 1;
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	1005d07a 	srai	r2,r2,1
     5d4:	e0bffd15 	stw	r2,-12(fp)
		int j=0;
		temp = buttons;
		//To reinitialize the buttons register before reading new buttons
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, buttons);
		//To verify which buttons are pressed
		for (j = 0; j < NBTAMPON; j++) {
     5d8:	e0bffc17 	ldw	r2,-16(fp)
     5dc:	10800044 	addi	r2,r2,1
     5e0:	e0bffc15 	stw	r2,-16(fp)
     5e4:	e0bffc17 	ldw	r2,-16(fp)
     5e8:	108000d0 	cmplti	r2,r2,3
     5ec:	103fdf1e 	bne	r2,zero,56c <producteur+0x48>
			if (temp % 2 == 1)
				deposer(j, 1); //To put element 1 into buffer j because button j is pressed
			temp >>= 1;
		}

	}
     5f0:	003fd006 	br	534 <producteur+0x10>

000005f4 <consommateur0>:
}

//First consumer function which will make led 0 blink upon getting an element from buffer 0 
void consommateur0(void) {
     5f4:	defffd04 	addi	sp,sp,-12
     5f8:	dfc00215 	stw	ra,8(sp)
     5fc:	df000115 	stw	fp,4(sp)
     600:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 0
	while (1) {
		// Get an element from buffer 0 (if there is no element, it will go to wait on this line)
		prelever(0);
     604:	0009883a 	mov	r4,zero
     608:	00003640 	call	364 <prelever>
		// Blink led 0 for specfied duration (one blink means consuming one element from buffer 0)
		int i=0;
     60c:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1);
     610:	00c08034 	movhi	r3,512
     614:	18d40804 	addi	r3,r3,20512
     618:	00800044 	movi	r2,1
     61c:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 0 for specified duration
		while (i < DELAYON) {
     620:	00000306 	br	630 <consommateur0+0x3c>
			i++;
     624:	e0bfff17 	ldw	r2,-4(fp)
     628:	10800044 	addi	r2,r2,1
     62c:	e0bfff15 	stw	r2,-4(fp)
		prelever(0);
		// Blink led 0 for specfied duration (one blink means consuming one element from buffer 0)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1);
		//turn on the first bit of led 0 for specified duration
		while (i < DELAYON) {
     630:	e0ffff17 	ldw	r3,-4(fp)
     634:	00800bb4 	movhi	r2,46
     638:	10b1afc4 	addi	r2,r2,-14657
     63c:	10fff90e 	bge	r2,r3,624 <consommateur0+0x30>
			i++;
		}
		i = 0;
     640:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
     644:	00808034 	movhi	r2,512
     648:	10940804 	addi	r2,r2,20512
     64c:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 0 for specified duration
		while (i < DELAYOFF) {
     650:	00000306 	br	660 <consommateur0+0x6c>
			i++;
     654:	e0bfff17 	ldw	r2,-4(fp)
     658:	10800044 	addi	r2,r2,1
     65c:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
		//turn off the first bit of led 0 for specified duration
		while (i < DELAYOFF) {
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	00800174 	movhi	r2,5
     668:	10a4f7c4 	addi	r2,r2,-27681
     66c:	10fff90e 	bge	r2,r3,654 <consommateur0+0x60>
			i++;
		}
		i = 0;
     670:	e03fff15 	stw	zero,-4(fp)
	}
     674:	003fe306 	br	604 <consommateur0+0x10>

00000678 <consommateur1>:


}

//Second consumer function which will make led 1 blink upon getting an element from buffer 1 
void consommateur1(void) {
     678:	defffd04 	addi	sp,sp,-12
     67c:	dfc00215 	stw	ra,8(sp)
     680:	df000115 	stw	fp,4(sp)
     684:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 1
	while (1) {
		// Get an element from buffer 1 (if there is no element, it will go to wait on this line)
		prelever(1);
     688:	01000044 	movi	r4,1
     68c:	00003640 	call	364 <prelever>
		// Blink led 1 for specfied duration (one blink means consuming one element from buffer 1)
		int i=0;
     690:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 1);
     694:	00c08034 	movhi	r3,512
     698:	18d41804 	addi	r3,r3,20576
     69c:	00800044 	movi	r2,1
     6a0:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 1 for specified duration
		while (i < DELAYON) {
     6a4:	00000306 	br	6b4 <consommateur1+0x3c>
			i++;
     6a8:	e0bfff17 	ldw	r2,-4(fp)
     6ac:	10800044 	addi	r2,r2,1
     6b0:	e0bfff15 	stw	r2,-4(fp)
		prelever(1);
		// Blink led 1 for specfied duration (one blink means consuming one element from buffer 1)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 1);
		//turn on the first bit of led 1 for specified duration
		while (i < DELAYON) {
     6b4:	e0ffff17 	ldw	r3,-4(fp)
     6b8:	00800bb4 	movhi	r2,46
     6bc:	10b1afc4 	addi	r2,r2,-14657
     6c0:	10fff90e 	bge	r2,r3,6a8 <consommateur1+0x30>
			i++;
		}
		i = 0;
     6c4:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
     6c8:	00808034 	movhi	r2,512
     6cc:	10941804 	addi	r2,r2,20576
     6d0:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 1 for specified duration
		while (i < DELAYOFF) {
     6d4:	00000306 	br	6e4 <consommateur1+0x6c>
			i++;
     6d8:	e0bfff17 	ldw	r2,-4(fp)
     6dc:	10800044 	addi	r2,r2,1
     6e0:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
		//turn off the first bit of led 1 for specified duration
		while (i < DELAYOFF) {
     6e4:	e0ffff17 	ldw	r3,-4(fp)
     6e8:	00800174 	movhi	r2,5
     6ec:	10a4f7c4 	addi	r2,r2,-27681
     6f0:	10fff90e 	bge	r2,r3,6d8 <consommateur1+0x60>
			i++;
		}
		i = 0;
     6f4:	e03fff15 	stw	zero,-4(fp)
	}
     6f8:	003fe306 	br	688 <consommateur1+0x10>

000006fc <consommateur2>:
}

//Third consumer function which will make led 2 blink upon getting an element from buffer 2 
void consommateur2(void) {
     6fc:	defffd04 	addi	sp,sp,-12
     700:	dfc00215 	stw	ra,8(sp)
     704:	df000115 	stw	fp,4(sp)
     708:	df000104 	addi	fp,sp,4
	//Infinite loop to read from buffer 2
	while (1) {
		// Get an element from buffer 2 (if there is no element, it will go to wait on this line)
		prelever(2);
     70c:	01000084 	movi	r4,2
     710:	00003640 	call	364 <prelever>
		// Blink led 2 for specfied duration (one blink means consuming one element from buffer 2)
		int i=0;
     714:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 1);
     718:	00c08034 	movhi	r3,512
     71c:	18d41004 	addi	r3,r3,20544
     720:	00800044 	movi	r2,1
     724:	18800035 	stwio	r2,0(r3)
		//turn on the first bit of led 2 for specified duration
		while (i < DELAYON) {
     728:	00000306 	br	738 <consommateur2+0x3c>
			i++;
     72c:	e0bfff17 	ldw	r2,-4(fp)
     730:	10800044 	addi	r2,r2,1
     734:	e0bfff15 	stw	r2,-4(fp)
		prelever(2);
		// Blink led 2 for specfied duration (one blink means consuming one element from buffer 2)
		int i=0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 1);
		//turn on the first bit of led 2 for specified duration
		while (i < DELAYON) {
     738:	e0ffff17 	ldw	r3,-4(fp)
     73c:	00800bb4 	movhi	r2,46
     740:	10b1afc4 	addi	r2,r2,-14657
     744:	10fff90e 	bge	r2,r3,72c <consommateur2+0x30>
			i++;
		}
		i = 0;
     748:	e03fff15 	stw	zero,-4(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
     74c:	00808034 	movhi	r2,512
     750:	10941004 	addi	r2,r2,20544
     754:	10000035 	stwio	zero,0(r2)
		//turn off the first bit of led 2 for specified duration
		while (i < DELAYOFF) {
     758:	00000306 	br	768 <consommateur2+0x6c>
			i++;
     75c:	e0bfff17 	ldw	r2,-4(fp)
     760:	10800044 	addi	r2,r2,1
     764:	e0bfff15 	stw	r2,-4(fp)
			i++;
		}
		i = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
		//turn off the first bit of led 2 for specified duration
		while (i < DELAYOFF) {
     768:	e0ffff17 	ldw	r3,-4(fp)
     76c:	00800174 	movhi	r2,5
     770:	10a4f7c4 	addi	r2,r2,-27681
     774:	10fff90e 	bge	r2,r3,75c <consommateur2+0x60>
			i++;
		}
		i = 0;
     778:	e03fff15 	stw	zero,-4(fp)
	}
     77c:	003fe306 	br	70c <consommateur2+0x10>

00000780 <main>:
}

//Main program
int main() {
     780:	defffd04 	addi	sp,sp,-12
     784:	dfc00215 	stw	ra,8(sp)
     788:	df000115 	stw	fp,4(sp)
     78c:	dc000015 	stw	r16,0(sp)
     790:	d839883a 	mov	fp,sp
	//Initialize leds and buttons
	IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0);
     794:	00808034 	movhi	r2,512
     798:	10940804 	addi	r2,r2,20512
     79c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_1_BASE, 0);
     7a0:	00808034 	movhi	r2,512
     7a4:	10941804 	addi	r2,r2,20576
     7a8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(LED_2_BASE, 0);
     7ac:	00808034 	movhi	r2,512
     7b0:	10941004 	addi	r2,r2,20544
     7b4:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 15);
     7b8:	00c08034 	movhi	r3,512
     7bc:	18d40304 	addi	r3,r3,20492
     7c0:	008003c4 	movi	r2,15
     7c4:	18800035 	stwio	r2,0(r3)
	//Create the locks and save their ids in numVerrou array
	numVerrou[0] = creerVerrou();
     7c8:	00011cc0 	call	11cc <creerVerrou>
     7cc:	1007883a 	mov	r3,r2
     7d0:	00800074 	movhi	r2,1
     7d4:	10852304 	addi	r2,r2,5260
     7d8:	10c00015 	stw	r3,0(r2)
	numVerrou[1] = creerVerrou();
     7dc:	00011cc0 	call	11cc <creerVerrou>
     7e0:	1007883a 	mov	r3,r2
     7e4:	00800074 	movhi	r2,1
     7e8:	10852304 	addi	r2,r2,5260
     7ec:	10c00115 	stw	r3,4(r2)
	numVerrou[2] = creerVerrou();
     7f0:	00011cc0 	call	11cc <creerVerrou>
     7f4:	1007883a 	mov	r3,r2
     7f8:	00800074 	movhi	r2,1
     7fc:	10852304 	addi	r2,r2,5260
     800:	10c00215 	stw	r3,8(r2)
	//Create conditions (0: notempty condition, 1: notfull condition) and save their ids in creerCondition array, linked to their corresponding locks
	numCondition[numVerrou[0]][0] = creerCondition(numVerrou[0]);
     804:	00800074 	movhi	r2,1
     808:	10852304 	addi	r2,r2,5260
     80c:	14000017 	ldw	r16,0(r2)
     810:	00800074 	movhi	r2,1
     814:	10852304 	addi	r2,r2,5260
     818:	11000017 	ldw	r4,0(r2)
     81c:	00013ec0 	call	13ec <creerCondition>
     820:	1009883a 	mov	r4,r2
     824:	00c00074 	movhi	r3,1
     828:	18c52604 	addi	r3,r3,5272
     82c:	800490fa 	slli	r2,r16,3
     830:	10c5883a 	add	r2,r2,r3
     834:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[0]][1] = creerCondition(numVerrou[0]);
     838:	00800074 	movhi	r2,1
     83c:	10852304 	addi	r2,r2,5260
     840:	14000017 	ldw	r16,0(r2)
     844:	00800074 	movhi	r2,1
     848:	10852304 	addi	r2,r2,5260
     84c:	11000017 	ldw	r4,0(r2)
     850:	00013ec0 	call	13ec <creerCondition>
     854:	1009883a 	mov	r4,r2
     858:	00c00074 	movhi	r3,1
     85c:	18c52604 	addi	r3,r3,5272
     860:	800490fa 	slli	r2,r16,3
     864:	10c5883a 	add	r2,r2,r3
     868:	10800104 	addi	r2,r2,4
     86c:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[1]][0] = creerCondition(numVerrou[1]);
     870:	00800074 	movhi	r2,1
     874:	10852304 	addi	r2,r2,5260
     878:	14000117 	ldw	r16,4(r2)
     87c:	00800074 	movhi	r2,1
     880:	10852304 	addi	r2,r2,5260
     884:	11000117 	ldw	r4,4(r2)
     888:	00013ec0 	call	13ec <creerCondition>
     88c:	1009883a 	mov	r4,r2
     890:	00c00074 	movhi	r3,1
     894:	18c52604 	addi	r3,r3,5272
     898:	800490fa 	slli	r2,r16,3
     89c:	10c5883a 	add	r2,r2,r3
     8a0:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[1]][1] = creerCondition(numVerrou[1]);
     8a4:	00800074 	movhi	r2,1
     8a8:	10852304 	addi	r2,r2,5260
     8ac:	14000117 	ldw	r16,4(r2)
     8b0:	00800074 	movhi	r2,1
     8b4:	10852304 	addi	r2,r2,5260
     8b8:	11000117 	ldw	r4,4(r2)
     8bc:	00013ec0 	call	13ec <creerCondition>
     8c0:	1009883a 	mov	r4,r2
     8c4:	00c00074 	movhi	r3,1
     8c8:	18c52604 	addi	r3,r3,5272
     8cc:	800490fa 	slli	r2,r16,3
     8d0:	10c5883a 	add	r2,r2,r3
     8d4:	10800104 	addi	r2,r2,4
     8d8:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[2]][0] = creerCondition(numVerrou[2]);
     8dc:	00800074 	movhi	r2,1
     8e0:	10852304 	addi	r2,r2,5260
     8e4:	14000217 	ldw	r16,8(r2)
     8e8:	00800074 	movhi	r2,1
     8ec:	10852304 	addi	r2,r2,5260
     8f0:	11000217 	ldw	r4,8(r2)
     8f4:	00013ec0 	call	13ec <creerCondition>
     8f8:	1009883a 	mov	r4,r2
     8fc:	00c00074 	movhi	r3,1
     900:	18c52604 	addi	r3,r3,5272
     904:	800490fa 	slli	r2,r16,3
     908:	10c5883a 	add	r2,r2,r3
     90c:	11000015 	stw	r4,0(r2)
	numCondition[numVerrou[2]][1] = creerCondition(numVerrou[2]);
     910:	00800074 	movhi	r2,1
     914:	10852304 	addi	r2,r2,5260
     918:	14000217 	ldw	r16,8(r2)
     91c:	00800074 	movhi	r2,1
     920:	10852304 	addi	r2,r2,5260
     924:	11000217 	ldw	r4,8(r2)
     928:	00013ec0 	call	13ec <creerCondition>
     92c:	1009883a 	mov	r4,r2
     930:	00c00074 	movhi	r3,1
     934:	18c52604 	addi	r3,r3,5272
     938:	800490fa 	slli	r2,r16,3
     93c:	10c5883a 	add	r2,r2,r3
     940:	10800104 	addi	r2,r2,4
     944:	11000015 	stw	r4,0(r2)
	//Create the processes
	creerProcessus(producteur, STACKSIZE, 1);
     948:	01000034 	movhi	r4,0
     94c:	21014904 	addi	r4,r4,1316
     950:	0149ca04 	movi	r5,10024
     954:	01800044 	movi	r6,1
     958:	00010440 	call	1044 <creerProcessus>
	creerProcessus(consommateur0, STACKSIZE, 2);
     95c:	01000034 	movhi	r4,0
     960:	21017d04 	addi	r4,r4,1524
     964:	0149ca04 	movi	r5,10024
     968:	01800084 	movi	r6,2
     96c:	00010440 	call	1044 <creerProcessus>
	creerProcessus(consommateur1, STACKSIZE, 2);
     970:	01000034 	movhi	r4,0
     974:	21019e04 	addi	r4,r4,1656
     978:	0149ca04 	movi	r5,10024
     97c:	01800084 	movi	r6,2
     980:	00010440 	call	1044 <creerProcessus>
	creerProcessus(consommateur2, STACKSIZE, 2);
     984:	01000034 	movhi	r4,0
     988:	2101bf04 	addi	r4,r4,1788
     98c:	0149ca04 	movi	r5,10024
     990:	01800084 	movi	r6,2
     994:	00010440 	call	1044 <creerProcessus>
	//Start execution of the processes
	start();
     998:	00011500 	call	1150 <start>
	return 0;
     99c:	0005883a 	mov	r2,zero
}
     9a0:	e037883a 	mov	sp,fp
     9a4:	dfc00217 	ldw	ra,8(sp)
     9a8:	df000117 	ldw	fp,4(sp)
     9ac:	dc000017 	ldw	r16,0(sp)
     9b0:	dec00304 	addi	sp,sp,12
     9b4:	f800283a 	ret

000009b8 <removeHeadI>:
} ListElem;

ListElem* interruptVector[2]={NULL,NULL};


Process removeHeadI(int i){
     9b8:	defff904 	addi	sp,sp,-28
     9bc:	dfc00615 	stw	ra,24(sp)
     9c0:	df000515 	stw	fp,20(sp)
     9c4:	df000504 	addi	fp,sp,20
     9c8:	e13ffe15 	stw	r4,-8(fp)
    
    ListElem* removed = interruptVector[i];
     9cc:	e0bffe17 	ldw	r2,-8(fp)
     9d0:	1085883a 	add	r2,r2,r2
     9d4:	1087883a 	add	r3,r2,r2
     9d8:	d0a6a904 	addi	r2,gp,-25948
     9dc:	1885883a 	add	r2,r3,r2
     9e0:	10800017 	ldw	r2,0(r2)
     9e4:	e0bffd15 	stw	r2,-12(fp)
    if(interruptVector[i] != NULL){
     9e8:	e0bffe17 	ldw	r2,-8(fp)
     9ec:	1085883a 	add	r2,r2,r2
     9f0:	1087883a 	add	r3,r2,r2
     9f4:	d0a6a904 	addi	r2,gp,-25948
     9f8:	1885883a 	add	r2,r3,r2
     9fc:	10800017 	ldw	r2,0(r2)
     a00:	1005003a 	cmpeq	r2,r2,zero
     a04:	10000d1e 	bne	r2,zero,a3c <removeHeadI+0x84>
        interruptVector[i] = interruptVector[i] -> next;
     a08:	e17ffe17 	ldw	r5,-8(fp)
     a0c:	e0bffe17 	ldw	r2,-8(fp)
     a10:	1085883a 	add	r2,r2,r2
     a14:	1087883a 	add	r3,r2,r2
     a18:	d0a6a904 	addi	r2,gp,-25948
     a1c:	1885883a 	add	r2,r3,r2
     a20:	10800017 	ldw	r2,0(r2)
     a24:	11000117 	ldw	r4,4(r2)
     a28:	2945883a 	add	r2,r5,r5
     a2c:	1087883a 	add	r3,r2,r2
     a30:	d0a6a904 	addi	r2,gp,-25948
     a34:	1885883a 	add	r2,r3,r2
     a38:	11000015 	stw	r4,0(r2)
    }
    if(removed != NULL){
     a3c:	e0bffd17 	ldw	r2,-12(fp)
     a40:	1005003a 	cmpeq	r2,r2,zero
     a44:	1000081e 	bne	r2,zero,a68 <removeHeadI+0xb0>
        Process result = removed -> p; 
     a48:	e0bffd17 	ldw	r2,-12(fp)
     a4c:	10800017 	ldw	r2,0(r2)
     a50:	e0bffc15 	stw	r2,-16(fp)
		free(removed); 
     a54:	e13ffd17 	ldw	r4,-12(fp)
     a58:	00019400 	call	1940 <free>
		return result;
     a5c:	e0bffc17 	ldw	r2,-16(fp)
     a60:	e0bfff15 	stw	r2,-4(fp)
     a64:	00000306 	br	a74 <removeHeadI+0xbc>
    }
    else{
        Process result = NULL;
     a68:	e03ffb15 	stw	zero,-20(fp)
        return result;
     a6c:	e0bffb17 	ldw	r2,-20(fp)
     a70:	e0bfff15 	stw	r2,-4(fp)
     a74:	e0bfff17 	ldw	r2,-4(fp)
    }  
}
     a78:	e037883a 	mov	sp,fp
     a7c:	dfc00117 	ldw	ra,4(sp)
     a80:	df000017 	ldw	fp,0(sp)
     a84:	dec00204 	addi	sp,sp,8
     a88:	f800283a 	ret

00000a8c <insertTail>:

void insertTail(int i, Process toBeInserted){
     a8c:	defffa04 	addi	sp,sp,-24
     a90:	dfc00515 	stw	ra,20(sp)
     a94:	df000415 	stw	fp,16(sp)
     a98:	df000404 	addi	fp,sp,16
     a9c:	e13ffe15 	stw	r4,-8(fp)
     aa0:	e17fff15 	stw	r5,-4(fp)
    
    ListElem* elem = malloc(sizeof(ListElem));
     aa4:	01000204 	movi	r4,8
     aa8:	00019540 	call	1954 <malloc>
     aac:	e0bffd15 	stw	r2,-12(fp)
    elem -> p = toBeInserted;
     ab0:	e0fffd17 	ldw	r3,-12(fp)
     ab4:	e0bfff17 	ldw	r2,-4(fp)
     ab8:	18800015 	stw	r2,0(r3)
    elem -> next = NULL;
     abc:	e0bffd17 	ldw	r2,-12(fp)
     ac0:	10000115 	stw	zero,4(r2)
    
    ListElem* temp= NULL;
     ac4:	e03ffc15 	stw	zero,-16(fp)
    if(interruptVector[i] == NULL){
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	1085883a 	add	r2,r2,r2
     ad0:	1087883a 	add	r3,r2,r2
     ad4:	d0a6a904 	addi	r2,gp,-25948
     ad8:	1885883a 	add	r2,r3,r2
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	1004c03a 	cmpne	r2,r2,zero
     ae4:	1000081e 	bne	r2,zero,b08 <insertTail+0x7c>
        
       interruptVector[i] = elem; 
     ae8:	e0bffe17 	ldw	r2,-8(fp)
     aec:	1085883a 	add	r2,r2,r2
     af0:	1087883a 	add	r3,r2,r2
     af4:	d0a6a904 	addi	r2,gp,-25948
     af8:	1887883a 	add	r3,r3,r2
     afc:	e0bffd17 	ldw	r2,-12(fp)
     b00:	18800015 	stw	r2,0(r3)
     b04:	00001206 	br	b50 <insertTail+0xc4>
    }
    else{
        
        temp = interruptVector[i];
     b08:	e0bffe17 	ldw	r2,-8(fp)
     b0c:	1085883a 	add	r2,r2,r2
     b10:	1087883a 	add	r3,r2,r2
     b14:	d0a6a904 	addi	r2,gp,-25948
     b18:	1885883a 	add	r2,r3,r2
     b1c:	10800017 	ldw	r2,0(r2)
     b20:	e0bffc15 	stw	r2,-16(fp)
        while((temp -> next) != NULL){
     b24:	00000306 	br	b34 <insertTail+0xa8>
        
            temp = temp -> next;
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	10800117 	ldw	r2,4(r2)
     b30:	e0bffc15 	stw	r2,-16(fp)
       interruptVector[i] = elem; 
    }
    else{
        
        temp = interruptVector[i];
        while((temp -> next) != NULL){
     b34:	e0bffc17 	ldw	r2,-16(fp)
     b38:	10800117 	ldw	r2,4(r2)
     b3c:	1004c03a 	cmpne	r2,r2,zero
     b40:	103ff91e 	bne	r2,zero,b28 <insertTail+0x9c>
        
            temp = temp -> next;
        }
        temp -> next = elem;  
     b44:	e0fffc17 	ldw	r3,-16(fp)
     b48:	e0bffd17 	ldw	r2,-12(fp)
     b4c:	18800115 	stw	r2,4(r3)
    
    }
    
        
}
     b50:	e037883a 	mov	sp,fp
     b54:	dfc00117 	ldw	ra,4(sp)
     b58:	df000017 	ldw	fp,0(sp)
     b5c:	dec00204 	addi	sp,sp,8
     b60:	f800283a 	ret

00000b64 <handle_button_interrupts>:
/* A variable to hold the value of the button pio edge capture register. */
volatile int edge_capture = 0;


void handle_button_interrupts(void* context, alt_u32 id)
{
     b64:	defffa04 	addi	sp,sp,-24
     b68:	dfc00515 	stw	ra,20(sp)
     b6c:	df000415 	stw	fp,16(sp)
     b70:	df000404 	addi	fp,sp,16
     b74:	e13ffe15 	stw	r4,-8(fp)
     b78:	e17fff15 	stw	r5,-4(fp)
    
    /* Cast context to edge_capture's type. It is important that this be 
     * declared volatile to avoid unwanted compiler optimization.
     */
    volatile int* edge_capture_ptr = (volatile int*) context;
     b7c:	e0bffe17 	ldw	r2,-8(fp)
     b80:	e0bffd15 	stw	r2,-12(fp)
    
    /* Store the value in the Button's edge capture register in *context. */
    *edge_capture_ptr = IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     b84:	00808034 	movhi	r2,512
     b88:	10940304 	addi	r2,r2,20492
     b8c:	10c00037 	ldwio	r3,0(r2)
     b90:	e0bffd17 	ldw	r2,-12(fp)
     b94:	10c00015 	stw	r3,0(r2)
	/* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     b98:	00c08034 	movhi	r3,512
     b9c:	18d40304 	addi	r3,r3,20492
     ba0:	008003c4 	movi	r2,15
     ba4:	18800035 	stwio	r2,0(r3)
    
    /* Read the PIO to delay ISR exit. This is done to prevent a spurious interrupt in systems
     * with high processor -> pio latency and fast interrupts.  */
    IORD_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE);
     ba8:	00808034 	movhi	r2,512
     bac:	10940304 	addi	r2,r2,20492
     bb0:	10800037 	ldwio	r2,0(r2)
    
    Process p2 = removeHeadI(1);
     bb4:	01000044 	movi	r4,1
     bb8:	00009b80 	call	9b8 <removeHeadI>
     bbc:	e0bffc15 	stw	r2,-16(fp)
   
    if(p2 != NULL){
     bc0:	e0bffc17 	ldw	r2,-16(fp)
     bc4:	1005003a 	cmpeq	r2,r2,zero
     bc8:	1000021e 	bne	r2,zero,bd4 <handle_button_interrupts+0x70>
        
        transfer(p2);
     bcc:	e13ffc17 	ldw	r4,-16(fp)
     bd0:	0000d4c0 	call	d4c <transfer>
       
    }
}
     bd4:	e037883a 	mov	sp,fp
     bd8:	dfc00117 	ldw	ra,4(sp)
     bdc:	df000017 	ldw	fp,0(sp)
     be0:	dec00204 	addi	sp,sp,8
     be4:	f800283a 	ret

00000be8 <init_button>:

/* Initialize the button_pio. */

void init_button()
{
     be8:	defffd04 	addi	sp,sp,-12
     bec:	dfc00215 	stw	ra,8(sp)
     bf0:	df000115 	stw	fp,4(sp)
     bf4:	df000104 	addi	fp,sp,4
    /* Recast the edge_capture pointer to match the alt_irq_register() function
     * prototype. */
    void* edge_capture_ptr = (void*) &edge_capture;
     bf8:	d0a6ab04 	addi	r2,gp,-25940
     bfc:	e0bfff15 	stw	r2,-4(fp)
    
    /* Enable all 4 button interrupts. */
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0xf);
     c00:	00c08034 	movhi	r3,512
     c04:	18d40204 	addi	r3,r3,20488
     c08:	008003c4 	movi	r2,15
     c0c:	18800035 	stwio	r2,0(r3)
    
    /* Reset the edge capture register. */
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0xf);
     c10:	00c08034 	movhi	r3,512
     c14:	18d40304 	addi	r3,r3,20492
     c18:	008003c4 	movi	r2,15
     c1c:	18800035 	stwio	r2,0(r3)
    
    /* Register the interrupt handler. */
    alt_irq_register (BUTTONS_IRQ, edge_capture_ptr, handle_button_interrupts);
     c20:	01000084 	movi	r4,2
     c24:	e17fff17 	ldw	r5,-4(fp)
     c28:	01800034 	movhi	r6,0
     c2c:	3182d904 	addi	r6,r6,2916
     c30:	000b4300 	call	b430 <alt_irq_register>
}
     c34:	e037883a 	mov	sp,fp
     c38:	dfc00117 	ldw	ra,4(sp)
     c3c:	df000017 	ldw	fp,0(sp)
     c40:	dec00204 	addi	sp,sp,8
     c44:	f800283a 	ret

00000c48 <handle_timer_interrupts>:

/* A variable to set up context for timer interrupt. */
volatile int timer_capture = 0;

void handle_timer_interrupts(void* context, alt_u32 id)
{
     c48:	defffb04 	addi	sp,sp,-20
     c4c:	dfc00415 	stw	ra,16(sp)
     c50:	df000315 	stw	fp,12(sp)
     c54:	df000304 	addi	fp,sp,12
     c58:	e13ffe15 	stw	r4,-8(fp)
     c5c:	e17fff15 	stw	r5,-4(fp)
	/* clear the interrupt */
	IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_BASE, 0);
     c60:	00808034 	movhi	r2,512
     c64:	10942804 	addi	r2,r2,20640
     c68:	10000035 	stwio	zero,0(r2)

	Process p2 = removeHeadI(0);
     c6c:	0009883a 	mov	r4,zero
     c70:	00009b80 	call	9b8 <removeHeadI>
     c74:	e0bffd15 	stw	r2,-12(fp)
    if(p2 != NULL){
     c78:	e0bffd17 	ldw	r2,-12(fp)
     c7c:	1005003a 	cmpeq	r2,r2,zero
     c80:	1000021e 	bne	r2,zero,c8c <handle_timer_interrupts+0x44>
        transfer(p2);
     c84:	e13ffd17 	ldw	r4,-12(fp)
     c88:	0000d4c0 	call	d4c <transfer>
    }
}
     c8c:	e037883a 	mov	sp,fp
     c90:	dfc00117 	ldw	ra,4(sp)
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00204 	addi	sp,sp,8
     c9c:	f800283a 	ret

00000ca0 <init_clock>:

void init_clock()
{
     ca0:	defffd04 	addi	sp,sp,-12
     ca4:	dfc00215 	stw	ra,8(sp)
     ca8:	df000115 	stw	fp,4(sp)
     cac:	df000104 	addi	fp,sp,4
    
  void* timer_capture_ptr = (void*) &timer_capture;  
     cb0:	d0a6ac04 	addi	r2,gp,-25936
     cb4:	e0bfff15 	stw	r2,-4(fp)
  /* set to free running mode */
  IOWR_ALTERA_AVALON_TIMER_CONTROL (TIMER_BASE, 
     cb8:	00c08034 	movhi	r3,512
     cbc:	18d42904 	addi	r3,r3,20644
     cc0:	008001c4 	movi	r2,7
     cc4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */ 
  alt_irq_register (TIMER_IRQ, timer_capture_ptr, handle_timer_interrupts);  
     cc8:	0009883a 	mov	r4,zero
     ccc:	e17fff17 	ldw	r5,-4(fp)
     cd0:	01800034 	movhi	r6,0
     cd4:	31831204 	addi	r6,r6,3144
     cd8:	000b4300 	call	b430 <alt_irq_register>
  
}
     cdc:	e037883a 	mov	sp,fp
     ce0:	dfc00117 	ldw	ra,4(sp)
     ce4:	df000017 	ldw	fp,0(sp)
     ce8:	dec00204 	addi	sp,sp,8
     cec:	f800283a 	ret

00000cf0 <newProcess>:


Process running = NULL;  // pointer to the current process.
Process nextP = NULL;  // variable used internally to implement transfer and iotransfer procedures

Process newProcess(void (*f), unsigned int* stack, int stackSize){
     cf0:	defff804 	addi	sp,sp,-32
     cf4:	dfc00715 	stw	ra,28(sp)
     cf8:	df000615 	stw	fp,24(sp)
     cfc:	df000604 	addi	fp,sp,24
     d00:	e13ffd15 	stw	r4,-12(fp)
     d04:	e17ffe15 	stw	r5,-8(fp)
     d08:	e1bfff15 	stw	r6,-4(fp)
    
    unsigned int* newPC = f;
     d0c:	e0bffd17 	ldw	r2,-12(fp)
     d10:	e0bffc15 	stw	r2,-16(fp)
    int size = stackSize - 4;
     d14:	e0bfff17 	ldw	r2,-4(fp)
     d18:	10bfff04 	addi	r2,r2,-4
     d1c:	e0bffb15 	stw	r2,-20(fp)
    
    Process process = _createStack(stack,newPC,size);
     d20:	e13ffe17 	ldw	r4,-8(fp)
     d24:	e17ffc17 	ldw	r5,-16(fp)
     d28:	e1bffb17 	ldw	r6,-20(fp)
     d2c:	00016980 	call	1698 <_createStack>
     d30:	e0bffa15 	stw	r2,-24(fp)
    return process;
     d34:	e0bffa17 	ldw	r2,-24(fp)
}
     d38:	e037883a 	mov	sp,fp
     d3c:	dfc00117 	ldw	ra,4(sp)
     d40:	df000017 	ldw	fp,0(sp)
     d44:	dec00204 	addi	sp,sp,8
     d48:	f800283a 	ret

00000d4c <transfer>:

/**
 * Called mainly from interrupt routine.
 * (Except for the first call)
 */
void transfer(Process p){
     d4c:	defffd04 	addi	sp,sp,-12
     d50:	dfc00215 	stw	ra,8(sp)
     d54:	df000115 	stw	fp,4(sp)
     d58:	df000104 	addi	fp,sp,4
     d5c:	e13fff15 	stw	r4,-4(fp)
    
    if(running == NULL){
     d60:	d0a6ad17 	ldw	r2,-25932(gp)
     d64:	1004c03a 	cmpne	r2,r2,zero
     d68:	1000031e 	bne	r2,zero,d78 <transfer+0x2c>
        running = malloc(sizeof(Process));
     d6c:	01000104 	movi	r4,4
     d70:	00019540 	call	1954 <malloc>
     d74:	d0a6ad15 	stw	r2,-25932(gp)
    }
    nextP = p ;
     d78:	e0bfff17 	ldw	r2,-4(fp)
     d7c:	d0a6ae15 	stw	r2,-25928(gp)
    _transfer();
     d80:	00016b40 	call	16b4 <_transfer>
   
}
     d84:	e037883a 	mov	sp,fp
     d88:	dfc00117 	ldw	ra,4(sp)
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00204 	addi	sp,sp,8
     d94:	f800283a 	ret

00000d98 <iotransfer>:

/**
 * Called from kernel thread.
 */
void iotransfer(Process p, int interruptV){
     d98:	defffc04 	addi	sp,sp,-16
     d9c:	dfc00315 	stw	ra,12(sp)
     da0:	df000215 	stw	fp,8(sp)
     da4:	df000204 	addi	fp,sp,8
     da8:	e13ffe15 	stw	r4,-8(fp)
     dac:	e17fff15 	stw	r5,-4(fp)
    
    insertTail(interruptV, running);
     db0:	d166ad17 	ldw	r5,-25932(gp)
     db4:	e13fff17 	ldw	r4,-4(fp)
     db8:	0000a8c0 	call	a8c <insertTail>
    nextP = p;
     dbc:	e0bffe17 	ldw	r2,-8(fp)
     dc0:	d0a6ae15 	stw	r2,-25928(gp)
    _transfer();
     dc4:	00016b40 	call	16b4 <_transfer>
   
}
     dc8:	e037883a 	mov	sp,fp
     dcc:	dfc00117 	ldw	ra,4(sp)
     dd0:	df000017 	ldw	fp,0(sp)
     dd4:	dec00204 	addi	sp,sp,8
     dd8:	f800283a 	ret

00000ddc <addLast>:
            Utility functions for list manipulation
************************************************************
* **********************************************************/

// add element to the tail of the list
void addLast(int* list, int processId) {
     ddc:	defffc04 	addi	sp,sp,-16
     de0:	df000315 	stw	fp,12(sp)
     de4:	df000304 	addi	fp,sp,12
     de8:	e13ffe15 	stw	r4,-8(fp)
     dec:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     df0:	e0bffe17 	ldw	r2,-8(fp)
     df4:	10800017 	ldw	r2,0(r2)
     df8:	10bfffd8 	cmpnei	r2,r2,-1
     dfc:	1000041e 	bne	r2,zero,e10 <addLast+0x34>
        // list is empty
        *list = processId;
     e00:	e0fffe17 	ldw	r3,-8(fp)
     e04:	e0bfff17 	ldw	r2,-4(fp)
     e08:	18800015 	stw	r2,0(r3)
     e0c:	00002506 	br	ea4 <addLast+0xc8>
    }
    else {
        int temp = *list;
     e10:	e0bffe17 	ldw	r2,-8(fp)
     e14:	10800017 	ldw	r2,0(r2)
     e18:	e0bffd15 	stw	r2,-12(fp)
        while (processes[temp].next != -1){
     e1c:	00000806 	br	e40 <addLast+0x64>
            temp = processes[temp].next;
     e20:	e0bffd17 	ldw	r2,-12(fp)
     e24:	00c00074 	movhi	r3,1
     e28:	18c54204 	addi	r3,r3,5384
     e2c:	10800324 	muli	r2,r2,12
     e30:	10c5883a 	add	r2,r2,r3
     e34:	10800204 	addi	r2,r2,8
     e38:	10800017 	ldw	r2,0(r2)
     e3c:	e0bffd15 	stw	r2,-12(fp)
        // list is empty
        *list = processId;
    }
    else {
        int temp = *list;
        while (processes[temp].next != -1){
     e40:	e0bffd17 	ldw	r2,-12(fp)
     e44:	00c00074 	movhi	r3,1
     e48:	18c54204 	addi	r3,r3,5384
     e4c:	10800324 	muli	r2,r2,12
     e50:	10c5883a 	add	r2,r2,r3
     e54:	10800204 	addi	r2,r2,8
     e58:	10800017 	ldw	r2,0(r2)
     e5c:	10bfffd8 	cmpnei	r2,r2,-1
     e60:	103fef1e 	bne	r2,zero,e20 <addLast+0x44>
            temp = processes[temp].next;
        }
        processes[temp].next = processId;
     e64:	e0bffd17 	ldw	r2,-12(fp)
     e68:	00c00074 	movhi	r3,1
     e6c:	18c54204 	addi	r3,r3,5384
     e70:	10800324 	muli	r2,r2,12
     e74:	10c5883a 	add	r2,r2,r3
     e78:	10c00204 	addi	r3,r2,8
     e7c:	e0bfff17 	ldw	r2,-4(fp)
     e80:	18800015 	stw	r2,0(r3)
        processes[processId].next = -1;
     e84:	e0bfff17 	ldw	r2,-4(fp)
     e88:	00c00074 	movhi	r3,1
     e8c:	18c54204 	addi	r3,r3,5384
     e90:	10800324 	muli	r2,r2,12
     e94:	10c5883a 	add	r2,r2,r3
     e98:	10c00204 	addi	r3,r2,8
     e9c:	00bfffc4 	movi	r2,-1
     ea0:	18800015 	stw	r2,0(r3)
    }

}
     ea4:	e037883a 	mov	sp,fp
     ea8:	df000017 	ldw	fp,0(sp)
     eac:	dec00104 	addi	sp,sp,4
     eb0:	f800283a 	ret

00000eb4 <addFirst>:

// add element to the head of list
void addFirst(int* list, int processId){
     eb4:	defffd04 	addi	sp,sp,-12
     eb8:	df000215 	stw	fp,8(sp)
     ebc:	df000204 	addi	fp,sp,8
     ec0:	e13ffe15 	stw	r4,-8(fp)
     ec4:	e17fff15 	stw	r5,-4(fp)

    if (*list == -1){
     ec8:	e0bffe17 	ldw	r2,-8(fp)
     ecc:	10800017 	ldw	r2,0(r2)
     ed0:	10bfffd8 	cmpnei	r2,r2,-1
     ed4:	1000041e 	bne	r2,zero,ee8 <addFirst+0x34>
        *list = processId;
     ed8:	e0fffe17 	ldw	r3,-8(fp)
     edc:	e0bfff17 	ldw	r2,-4(fp)
     ee0:	18800015 	stw	r2,0(r3)
     ee4:	00000c06 	br	f18 <addFirst+0x64>
    }
    else {
        processes[processId].next = *list;
     ee8:	e13fff17 	ldw	r4,-4(fp)
     eec:	e0bffe17 	ldw	r2,-8(fp)
     ef0:	11400017 	ldw	r5,0(r2)
     ef4:	00c00074 	movhi	r3,1
     ef8:	18c54204 	addi	r3,r3,5384
     efc:	20800324 	muli	r2,r4,12
     f00:	10c5883a 	add	r2,r2,r3
     f04:	10800204 	addi	r2,r2,8
     f08:	11400015 	stw	r5,0(r2)
        *list = processId;
     f0c:	e0fffe17 	ldw	r3,-8(fp)
     f10:	e0bfff17 	ldw	r2,-4(fp)
     f14:	18800015 	stw	r2,0(r3)
    }
}
     f18:	e037883a 	mov	sp,fp
     f1c:	df000017 	ldw	fp,0(sp)
     f20:	dec00104 	addi	sp,sp,4
     f24:	f800283a 	ret

00000f28 <removeHead>:

// remove element that is head of the list
int removeHead(int* list){
     f28:	defffa04 	addi	sp,sp,-24
     f2c:	dfc00515 	stw	ra,20(sp)
     f30:	df000415 	stw	fp,16(sp)
     f34:	df000404 	addi	fp,sp,16
     f38:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     f3c:	e0bffe17 	ldw	r2,-8(fp)
     f40:	10800017 	ldw	r2,0(r2)
     f44:	10bfffd8 	cmpnei	r2,r2,-1
     f48:	1000061e 	bne	r2,zero,f64 <removeHead+0x3c>
        printf("List is empty!");
     f4c:	01000074 	movhi	r4,1
     f50:	2136d904 	addi	r4,r4,-9372
     f54:	00021480 	call	2148 <printf>
        return(-1);
     f58:	00bfffc4 	movi	r2,-1
     f5c:	e0bfff15 	stw	r2,-4(fp)
     f60:	00001a06 	br	fcc <removeHead+0xa4>
    }
    else {
        int head = *list;
     f64:	e0bffe17 	ldw	r2,-8(fp)
     f68:	10800017 	ldw	r2,0(r2)
     f6c:	e0bffd15 	stw	r2,-12(fp)
        int next = processes[*list].next;
     f70:	e0bffe17 	ldw	r2,-8(fp)
     f74:	10800017 	ldw	r2,0(r2)
     f78:	00c00074 	movhi	r3,1
     f7c:	18c54204 	addi	r3,r3,5384
     f80:	10800324 	muli	r2,r2,12
     f84:	10c5883a 	add	r2,r2,r3
     f88:	10800204 	addi	r2,r2,8
     f8c:	10800017 	ldw	r2,0(r2)
     f90:	e0bffc15 	stw	r2,-16(fp)
        processes[*list].next = -1;
     f94:	e0bffe17 	ldw	r2,-8(fp)
     f98:	10800017 	ldw	r2,0(r2)
     f9c:	00c00074 	movhi	r3,1
     fa0:	18c54204 	addi	r3,r3,5384
     fa4:	10800324 	muli	r2,r2,12
     fa8:	10c5883a 	add	r2,r2,r3
     fac:	10c00204 	addi	r3,r2,8
     fb0:	00bfffc4 	movi	r2,-1
     fb4:	18800015 	stw	r2,0(r3)
        *list = next;
     fb8:	e0fffe17 	ldw	r3,-8(fp)
     fbc:	e0bffc17 	ldw	r2,-16(fp)
     fc0:	18800015 	stw	r2,0(r3)
        return head;
     fc4:	e0bffd17 	ldw	r2,-12(fp)
     fc8:	e0bfff15 	stw	r2,-4(fp)
     fcc:	e0bfff17 	ldw	r2,-4(fp)
    }
}
     fd0:	e037883a 	mov	sp,fp
     fd4:	dfc00117 	ldw	ra,4(sp)
     fd8:	df000017 	ldw	fp,0(sp)
     fdc:	dec00204 	addi	sp,sp,8
     fe0:	f800283a 	ret

00000fe4 <head>:

// returns head of the list
int head(int* list){
     fe4:	defffc04 	addi	sp,sp,-16
     fe8:	dfc00315 	stw	ra,12(sp)
     fec:	df000215 	stw	fp,8(sp)
     ff0:	df000204 	addi	fp,sp,8
     ff4:	e13ffe15 	stw	r4,-8(fp)
    if (*list == -1){
     ff8:	e0bffe17 	ldw	r2,-8(fp)
     ffc:	10800017 	ldw	r2,0(r2)
    1000:	10bfffd8 	cmpnei	r2,r2,-1
    1004:	1000061e 	bne	r2,zero,1020 <head+0x3c>
        printf("List is empty!\n");
    1008:	01000074 	movhi	r4,1
    100c:	2136d904 	addi	r4,r4,-9372
    1010:	00022600 	call	2260 <puts>
        return(-1);
    1014:	00bfffc4 	movi	r2,-1
    1018:	e0bfff15 	stw	r2,-4(fp)
    101c:	00000306 	br	102c <head+0x48>
    }
    else {
        return *list;
    1020:	e0bffe17 	ldw	r2,-8(fp)
    1024:	10800017 	ldw	r2,0(r2)
    1028:	e0bfff15 	stw	r2,-4(fp)
    102c:	e0bfff17 	ldw	r2,-4(fp)
    }
}
    1030:	e037883a 	mov	sp,fp
    1034:	dfc00117 	ldw	ra,4(sp)
    1038:	df000017 	ldw	fp,0(sp)
    103c:	dec00204 	addi	sp,sp,8
    1040:	f800283a 	ret

00001044 <creerProcessus>:



void creerProcessus(void (*f), int stackSize, int priority){
    1044:	defff904 	addi	sp,sp,-28
    1048:	dfc00615 	stw	ra,24(sp)
    104c:	df000515 	stw	fp,20(sp)
    1050:	df000504 	addi	fp,sp,20
    1054:	e13ffd15 	stw	r4,-12(fp)
    1058:	e17ffe15 	stw	r5,-8(fp)
    105c:	e1bfff15 	stw	r6,-4(fp)
	if (nbProcess >= MAX_PROCESS) {
    1060:	d0a6af17 	ldw	r2,-25924(gp)
    1064:	108002b0 	cmpltui	r2,r2,10
    1068:	1000051e 	bne	r2,zero,1080 <creerProcessus+0x3c>
		printf("Error: max number of processes reached!\n");
    106c:	01000074 	movhi	r4,1
    1070:	2136dd04 	addi	r4,r4,-9356
    1074:	00022600 	call	2260 <puts>
		exit(1);
    1078:	01000044 	movi	r4,1
    107c:	00019080 	call	1908 <exit>
	}
    Process p = NULL;
    1080:	e03ffc15 	stw	zero,-16(fp)
    unsigned int* stackAddr = NULL;
    1084:	e03ffb15 	stw	zero,-20(fp)
    stackAddr = malloc(stackSize);
    1088:	e13ffe17 	ldw	r4,-8(fp)
    108c:	00019540 	call	1954 <malloc>
    1090:	e0bffb15 	stw	r2,-20(fp)
    
    if(stackAddr != NULL) {
    1094:	e0bffb17 	ldw	r2,-20(fp)
    1098:	1005003a 	cmpeq	r2,r2,zero
    109c:	1000271e 	bne	r2,zero,113c <creerProcessus+0xf8>
        p = newProcess(f, stackAddr, stackSize);
    10a0:	e13ffd17 	ldw	r4,-12(fp)
    10a4:	e17ffb17 	ldw	r5,-20(fp)
    10a8:	e1bffe17 	ldw	r6,-8(fp)
    10ac:	0000cf00 	call	cf0 <newProcess>
    10b0:	e0bffc15 	stw	r2,-16(fp)
        
        if(p != NULL) {
    10b4:	e0bffc17 	ldw	r2,-16(fp)
    10b8:	1005003a 	cmpeq	r2,r2,zero
    10bc:	10001f1e 	bne	r2,zero,113c <creerProcessus+0xf8>
        	processes[nbProcess].p = p;
    10c0:	d0a6af17 	ldw	r2,-25924(gp)
    10c4:	00c00074 	movhi	r3,1
    10c8:	18c54204 	addi	r3,r3,5384
    10cc:	10800324 	muli	r2,r2,12
    10d0:	10c5883a 	add	r2,r2,r3
    10d4:	10c00104 	addi	r3,r2,4
    10d8:	e0bffc17 	ldw	r2,-16(fp)
    10dc:	18800015 	stw	r2,0(r3)
        	processes[nbProcess].priority = priority;
    10e0:	d0a6af17 	ldw	r2,-25924(gp)
    10e4:	00c00074 	movhi	r3,1
    10e8:	18c54204 	addi	r3,r3,5384
    10ec:	10800324 	muli	r2,r2,12
    10f0:	10c7883a 	add	r3,r2,r3
    10f4:	e0bfff17 	ldw	r2,-4(fp)
    10f8:	18800015 	stw	r2,0(r3)
        	processes[nbProcess].next = -1;
    10fc:	d0a6af17 	ldw	r2,-25924(gp)
    1100:	00c00074 	movhi	r3,1
    1104:	18c54204 	addi	r3,r3,5384
    1108:	10800324 	muli	r2,r2,12
    110c:	10c5883a 	add	r2,r2,r3
    1110:	10c00204 	addi	r3,r2,8
    1114:	00bfffc4 	movi	r2,-1
    1118:	18800015 	stw	r2,0(r3)
        	addLast(&readyList, *p);
    111c:	e0bffc17 	ldw	r2,-16(fp)
    1120:	10800017 	ldw	r2,0(r2)
    1124:	100b883a 	mov	r5,r2
    1128:	d1200004 	addi	r4,gp,-32768
    112c:	0000ddc0 	call	ddc <addLast>
        	nbProcess++;
    1130:	d0a6af17 	ldw	r2,-25924(gp)
    1134:	10800044 	addi	r2,r2,1
    1138:	d0a6af15 	stw	r2,-25924(gp)
        }
    }
}
    113c:	e037883a 	mov	sp,fp
    1140:	dfc00117 	ldw	ra,4(sp)
    1144:	df000017 	ldw	fp,0(sp)
    1148:	dec00204 	addi	sp,sp,8
    114c:	f800283a 	ret

00001150 <start>:

void start(){
    1150:	defffd04 	addi	sp,sp,-12
    1154:	dfc00215 	stw	ra,8(sp)
    1158:	df000115 	stw	fp,4(sp)
    115c:	df000104 	addi	fp,sp,4
    printf("Starting kernel...\n");
    1160:	01000074 	movhi	r4,1
    1164:	2136e704 	addi	r4,r4,-9316
    1168:	00022600 	call	2260 <puts>
    if (readyList == -1){
    116c:	d0a00017 	ldw	r2,-32768(gp)
    1170:	10bfffd8 	cmpnei	r2,r2,-1
    1174:	1000051e 	bne	r2,zero,118c <start+0x3c>
        printf("Error: No process in the ready list!\n");
    1178:	01000074 	movhi	r4,1
    117c:	2136ec04 	addi	r4,r4,-9296
    1180:	00022600 	call	2260 <puts>
        exit(1);
    1184:	01000044 	movi	r4,1
    1188:	00019080 	call	1908 <exit>
    }
    Process process = processes[head(&readyList)].p;
    118c:	d1200004 	addi	r4,gp,-32768
    1190:	0000fe40 	call	fe4 <head>
    1194:	00c00074 	movhi	r3,1
    1198:	18c54204 	addi	r3,r3,5384
    119c:	10800324 	muli	r2,r2,12
    11a0:	10c5883a 	add	r2,r2,r3
    11a4:	10800104 	addi	r2,r2,4
    11a8:	10800017 	ldw	r2,0(r2)
    11ac:	e0bfff15 	stw	r2,-4(fp)
    transfer(process);
    11b0:	e13fff17 	ldw	r4,-4(fp)
    11b4:	0000d4c0 	call	d4c <transfer>
}
    11b8:	e037883a 	mov	sp,fp
    11bc:	dfc00117 	ldw	ra,4(sp)
    11c0:	df000017 	ldw	fp,0(sp)
    11c4:	dec00204 	addi	sp,sp,8
    11c8:	f800283a 	ret

000011cc <creerVerrou>:

int creerVerrou(){
    11cc:	defffd04 	addi	sp,sp,-12
    11d0:	dfc00215 	stw	ra,8(sp)
    11d4:	df000115 	stw	fp,4(sp)
    11d8:	df000104 	addi	fp,sp,4
	if(nbLocks >= MAX_LOCK) {
    11dc:	d0a6b017 	ldw	r2,-25920(gp)
    11e0:	108002b0 	cmpltui	r2,r2,10
    11e4:	1000051e 	bne	r2,zero,11fc <creerVerrou+0x30>
		printf("Error: max number of locks reached!\n");
    11e8:	01000074 	movhi	r4,1
    11ec:	2136f604 	addi	r4,r4,-9256
    11f0:	00022600 	call	2260 <puts>
		exit(1);
    11f4:	01000044 	movi	r4,1
    11f8:	00019080 	call	1908 <exit>
	}
	locks[nbLocks].lockID = nbLocks;
    11fc:	d126b017 	ldw	r4,-25920(gp)
    1200:	d0a6b017 	ldw	r2,-25920(gp)
    1204:	100b883a 	mov	r5,r2
    1208:	00c00074 	movhi	r3,1
    120c:	18c56004 	addi	r3,r3,5504
    1210:	20801824 	muli	r2,r4,96
    1214:	10c5883a 	add	r2,r2,r3
    1218:	10800204 	addi	r2,r2,8
    121c:	11400015 	stw	r5,0(r2)
	locks[nbLocks].state = 1;
    1220:	d0a6b017 	ldw	r2,-25920(gp)
    1224:	00c00074 	movhi	r3,1
    1228:	18c56004 	addi	r3,r3,5504
    122c:	10801824 	muli	r2,r2,96
    1230:	10c7883a 	add	r3,r2,r3
    1234:	00800044 	movi	r2,1
    1238:	18800015 	stw	r2,0(r3)
	locks[nbLocks].waitingList = -1;
    123c:	d0a6b017 	ldw	r2,-25920(gp)
    1240:	00c00074 	movhi	r3,1
    1244:	18c56004 	addi	r3,r3,5504
    1248:	10801824 	muli	r2,r2,96
    124c:	10c5883a 	add	r2,r2,r3
    1250:	10c00104 	addi	r3,r2,4
    1254:	00bfffc4 	movi	r2,-1
    1258:	18800015 	stw	r2,0(r3)
	locks[nbLocks].nbCond = 0;
    125c:	d0a6b017 	ldw	r2,-25920(gp)
    1260:	00c00074 	movhi	r3,1
    1264:	18c56004 	addi	r3,r3,5504
    1268:	10801824 	muli	r2,r2,96
    126c:	10c5883a 	add	r2,r2,r3
    1270:	10801704 	addi	r2,r2,92
    1274:	10000015 	stw	zero,0(r2)
	int n = nbLocks;
    1278:	d0a6b017 	ldw	r2,-25920(gp)
    127c:	e0bfff15 	stw	r2,-4(fp)
	nbLocks++;
    1280:	d0a6b017 	ldw	r2,-25920(gp)
    1284:	10800044 	addi	r2,r2,1
    1288:	d0a6b015 	stw	r2,-25920(gp)
	return n;
    128c:	e0bfff17 	ldw	r2,-4(fp)
}
    1290:	e037883a 	mov	sp,fp
    1294:	dfc00117 	ldw	ra,4(sp)
    1298:	df000017 	ldw	fp,0(sp)
    129c:	dec00204 	addi	sp,sp,8
    12a0:	f800283a 	ret

000012a4 <verrouiller>:

void verrouiller(int verrouID) {
    12a4:	defffc04 	addi	sp,sp,-16
    12a8:	dfc00315 	stw	ra,12(sp)
    12ac:	df000215 	stw	fp,8(sp)
    12b0:	df000204 	addi	fp,sp,8
    12b4:	e13fff15 	stw	r4,-4(fp)
	if(locks[verrouID].state == 1) {
    12b8:	e0bfff17 	ldw	r2,-4(fp)
    12bc:	00c00074 	movhi	r3,1
    12c0:	18c56004 	addi	r3,r3,5504
    12c4:	10801824 	muli	r2,r2,96
    12c8:	10c5883a 	add	r2,r2,r3
    12cc:	10800017 	ldw	r2,0(r2)
    12d0:	10800058 	cmpnei	r2,r2,1
    12d4:	1000071e 	bne	r2,zero,12f4 <verrouiller+0x50>
		locks[verrouID].state = 0;
    12d8:	e0bfff17 	ldw	r2,-4(fp)
    12dc:	00c00074 	movhi	r3,1
    12e0:	18c56004 	addi	r3,r3,5504
    12e4:	10801824 	muli	r2,r2,96
    12e8:	10c5883a 	add	r2,r2,r3
    12ec:	10000015 	stw	zero,0(r2)
    12f0:	00001406 	br	1344 <verrouiller+0xa0>
	} else {
		int prss = removeHead(&readyList);
    12f4:	d1200004 	addi	r4,gp,-32768
    12f8:	0000f280 	call	f28 <removeHead>
    12fc:	e0bffe15 	stw	r2,-8(fp)
		addLast(&locks[verrouID].waitingList, prss);
    1300:	e0bfff17 	ldw	r2,-4(fp)
    1304:	10801824 	muli	r2,r2,96
    1308:	10c00104 	addi	r3,r2,4
    130c:	00800074 	movhi	r2,1
    1310:	10856004 	addi	r2,r2,5504
    1314:	1889883a 	add	r4,r3,r2
    1318:	e17ffe17 	ldw	r5,-8(fp)
    131c:	0000ddc0 	call	ddc <addLast>
		transfer(processes[head(&readyList)].p);
    1320:	d1200004 	addi	r4,gp,-32768
    1324:	0000fe40 	call	fe4 <head>
    1328:	00c00074 	movhi	r3,1
    132c:	18c54204 	addi	r3,r3,5384
    1330:	10800324 	muli	r2,r2,12
    1334:	10c5883a 	add	r2,r2,r3
    1338:	10800104 	addi	r2,r2,4
    133c:	11000017 	ldw	r4,0(r2)
    1340:	0000d4c0 	call	d4c <transfer>
	}
}
    1344:	e037883a 	mov	sp,fp
    1348:	dfc00117 	ldw	ra,4(sp)
    134c:	df000017 	ldw	fp,0(sp)
    1350:	dec00204 	addi	sp,sp,8
    1354:	f800283a 	ret

00001358 <deverrouiller>:

void deverrouiller(int verrouID) {
    1358:	defffc04 	addi	sp,sp,-16
    135c:	dfc00315 	stw	ra,12(sp)
    1360:	df000215 	stw	fp,8(sp)
    1364:	df000204 	addi	fp,sp,8
    1368:	e13fff15 	stw	r4,-4(fp)
	locks[verrouID].state = 1;
    136c:	e0bfff17 	ldw	r2,-4(fp)
    1370:	00c00074 	movhi	r3,1
    1374:	18c56004 	addi	r3,r3,5504
    1378:	10801824 	muli	r2,r2,96
    137c:	10c7883a 	add	r3,r2,r3
    1380:	00800044 	movi	r2,1
    1384:	18800015 	stw	r2,0(r3)
	if(locks[verrouID].waitingList != -1) {
    1388:	e0bfff17 	ldw	r2,-4(fp)
    138c:	00c00074 	movhi	r3,1
    1390:	18c56004 	addi	r3,r3,5504
    1394:	10801824 	muli	r2,r2,96
    1398:	10c5883a 	add	r2,r2,r3
    139c:	10800104 	addi	r2,r2,4
    13a0:	10800017 	ldw	r2,0(r2)
    13a4:	10bfffe0 	cmpeqi	r2,r2,-1
    13a8:	10000b1e 	bne	r2,zero,13d8 <deverrouiller+0x80>
		int p = removeHead(&locks[verrouID].waitingList);
    13ac:	e0bfff17 	ldw	r2,-4(fp)
    13b0:	10801824 	muli	r2,r2,96
    13b4:	10c00104 	addi	r3,r2,4
    13b8:	00800074 	movhi	r2,1
    13bc:	10856004 	addi	r2,r2,5504
    13c0:	1889883a 	add	r4,r3,r2
    13c4:	0000f280 	call	f28 <removeHead>
    13c8:	e0bffe15 	stw	r2,-8(fp)
		addLast(&readyList, p);
    13cc:	d1200004 	addi	r4,gp,-32768
    13d0:	e17ffe17 	ldw	r5,-8(fp)
    13d4:	0000ddc0 	call	ddc <addLast>
	}
}
    13d8:	e037883a 	mov	sp,fp
    13dc:	dfc00117 	ldw	ra,4(sp)
    13e0:	df000017 	ldw	fp,0(sp)
    13e4:	dec00204 	addi	sp,sp,8
    13e8:	f800283a 	ret

000013ec <creerCondition>:

int creerCondition(int verrouID) {
    13ec:	deffe404 	addi	sp,sp,-112
    13f0:	dfc01b15 	stw	ra,108(sp)
    13f4:	df001a15 	stw	fp,104(sp)
    13f8:	df001a04 	addi	fp,sp,104
    13fc:	e13fff15 	stw	r4,-4(fp)
	if(locks[verrouID].nbCond >= MAX_COND) {
    1400:	e0bfff17 	ldw	r2,-4(fp)
    1404:	00c00074 	movhi	r3,1
    1408:	18c56004 	addi	r3,r3,5504
    140c:	10801824 	muli	r2,r2,96
    1410:	10c5883a 	add	r2,r2,r3
    1414:	10801704 	addi	r2,r2,92
    1418:	10800017 	ldw	r2,0(r2)
    141c:	108002b0 	cmpltui	r2,r2,10
    1420:	1000061e 	bne	r2,zero,143c <creerCondition+0x50>
		printf("Error: max number of conditions for lock %d reached!\n", verrouID);
    1424:	01000074 	movhi	r4,1
    1428:	2136ff04 	addi	r4,r4,-9220
    142c:	e17fff17 	ldw	r5,-4(fp)
    1430:	00021480 	call	2148 <printf>
		exit(1);
    1434:	01000044 	movi	r4,1
    1438:	00019080 	call	1908 <exit>
	}
	LockDescriptor l = locks[verrouID];
    143c:	e0bfff17 	ldw	r2,-4(fp)
    1440:	00c00074 	movhi	r3,1
    1444:	18c56004 	addi	r3,r3,5504
    1448:	10801824 	muli	r2,r2,96
    144c:	10c5883a 	add	r2,r2,r3
    1450:	e13fe704 	addi	r4,fp,-100
    1454:	100b883a 	mov	r5,r2
    1458:	01801804 	movi	r6,96
    145c:	00020a80 	call	20a8 <memcpy>
	l.conds[l.nbCond].condID = verrouID * MAX_COND + l.nbCond;
    1460:	e13ffe17 	ldw	r4,-8(fp)
    1464:	e0bfff17 	ldw	r2,-4(fp)
    1468:	108002a4 	muli	r2,r2,10
    146c:	1007883a 	mov	r3,r2
    1470:	e0bffe17 	ldw	r2,-8(fp)
    1474:	1885883a 	add	r2,r3,r2
    1478:	1007883a 	mov	r3,r2
    147c:	200490fa 	slli	r2,r4,3
    1480:	e13fe604 	addi	r4,fp,-104
    1484:	1105883a 	add	r2,r2,r4
    1488:	10800404 	addi	r2,r2,16
    148c:	10c00015 	stw	r3,0(r2)
	l.conds[l.nbCond].waitingList = -1;
    1490:	e0bffe17 	ldw	r2,-8(fp)
    1494:	100490fa 	slli	r2,r2,3
    1498:	e0ffe604 	addi	r3,fp,-104
    149c:	10c5883a 	add	r2,r2,r3
    14a0:	10c00504 	addi	r3,r2,20
    14a4:	00bfffc4 	movi	r2,-1
    14a8:	18800015 	stw	r2,0(r3)
	int n = l.nbCond;
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	e0bfe615 	stw	r2,-104(fp)
	l.nbCond++;
    14b4:	e0bffe17 	ldw	r2,-8(fp)
    14b8:	10800044 	addi	r2,r2,1
    14bc:	e0bffe15 	stw	r2,-8(fp)
	return n;
    14c0:	e0bfe617 	ldw	r2,-104(fp)
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	dfc00117 	ldw	ra,4(sp)
    14cc:	df000017 	ldw	fp,0(sp)
    14d0:	dec00204 	addi	sp,sp,8
    14d4:	f800283a 	ret

000014d8 <await>:

void await(int conditionID) {
    14d8:	defffa04 	addi	sp,sp,-24
    14dc:	dfc00515 	stw	ra,20(sp)
    14e0:	df000415 	stw	fp,16(sp)
    14e4:	dc000315 	stw	r16,12(sp)
    14e8:	df000304 	addi	fp,sp,12
    14ec:	e13fff15 	stw	r4,-4(fp)
	int p = removeHead(&readyList);
    14f0:	d1200004 	addi	r4,gp,-32768
    14f4:	0000f280 	call	f28 <removeHead>
    14f8:	e0bffe15 	stw	r2,-8(fp)
	int lockID = conditionID / MAX_COND;
    14fc:	e13fff17 	ldw	r4,-4(fp)
    1500:	01400284 	movi	r5,10
    1504:	00018380 	call	1838 <__divsi3>
    1508:	e0bffd15 	stw	r2,-12(fp)
	addLast(&locks[lockID].conds[conditionID % MAX_COND].waitingList, p);
    150c:	e43ffd17 	ldw	r16,-12(fp)
    1510:	e13fff17 	ldw	r4,-4(fp)
    1514:	01400284 	movi	r5,10
    1518:	00018980 	call	1898 <__modsi3>
    151c:	1007883a 	mov	r3,r2
    1520:	80800324 	muli	r2,r16,12
    1524:	10c5883a 	add	r2,r2,r3
    1528:	100490fa 	slli	r2,r2,3
    152c:	10c00404 	addi	r3,r2,16
    1530:	00800074 	movhi	r2,1
    1534:	10856004 	addi	r2,r2,5504
    1538:	1889883a 	add	r4,r3,r2
    153c:	e17ffe17 	ldw	r5,-8(fp)
    1540:	0000ddc0 	call	ddc <addLast>
	transfer(processes[head(&readyList)].p);
    1544:	d1200004 	addi	r4,gp,-32768
    1548:	0000fe40 	call	fe4 <head>
    154c:	00c00074 	movhi	r3,1
    1550:	18c54204 	addi	r3,r3,5384
    1554:	10800324 	muli	r2,r2,12
    1558:	10c5883a 	add	r2,r2,r3
    155c:	10800104 	addi	r2,r2,4
    1560:	11000017 	ldw	r4,0(r2)
    1564:	0000d4c0 	call	d4c <transfer>
}
    1568:	e037883a 	mov	sp,fp
    156c:	dfc00217 	ldw	ra,8(sp)
    1570:	df000117 	ldw	fp,4(sp)
    1574:	dc000017 	ldw	r16,0(sp)
    1578:	dec00304 	addi	sp,sp,12
    157c:	f800283a 	ret

00001580 <signal>:

void signal(int conditionID) {
    1580:	defffa04 	addi	sp,sp,-24
    1584:	dfc00515 	stw	ra,20(sp)
    1588:	df000415 	stw	fp,16(sp)
    158c:	dc000315 	stw	r16,12(sp)
    1590:	df000304 	addi	fp,sp,12
    1594:	e13fff15 	stw	r4,-4(fp)
	int lockID = conditionID / MAX_COND;
    1598:	e13fff17 	ldw	r4,-4(fp)
    159c:	01400284 	movi	r5,10
    15a0:	00018380 	call	1838 <__divsi3>
    15a4:	e0bffe15 	stw	r2,-8(fp)
	if(locks[lockID].conds[conditionID % MAX_COND].waitingList != -1);
	int p = removeHead(&locks[lockID].conds[conditionID % MAX_COND].waitingList);
    15a8:	e43ffe17 	ldw	r16,-8(fp)
    15ac:	e13fff17 	ldw	r4,-4(fp)
    15b0:	01400284 	movi	r5,10
    15b4:	00018980 	call	1898 <__modsi3>
    15b8:	1007883a 	mov	r3,r2
    15bc:	80800324 	muli	r2,r16,12
    15c0:	10c5883a 	add	r2,r2,r3
    15c4:	100490fa 	slli	r2,r2,3
    15c8:	10c00404 	addi	r3,r2,16
    15cc:	00800074 	movhi	r2,1
    15d0:	10856004 	addi	r2,r2,5504
    15d4:	1889883a 	add	r4,r3,r2
    15d8:	0000f280 	call	f28 <removeHead>
    15dc:	e0bffd15 	stw	r2,-12(fp)
	if(p != -1) {
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	10bfffe0 	cmpeqi	r2,r2,-1
    15e8:	1000031e 	bne	r2,zero,15f8 <signal+0x78>
		addLast(&readyList, p);
    15ec:	d1200004 	addi	r4,gp,-32768
    15f0:	e17ffd17 	ldw	r5,-12(fp)
    15f4:	0000ddc0 	call	ddc <addLast>
	}
}
    15f8:	e037883a 	mov	sp,fp
    15fc:	dfc00217 	ldw	ra,8(sp)
    1600:	df000117 	ldw	fp,4(sp)
    1604:	dc000017 	ldw	r16,0(sp)
    1608:	dec00304 	addi	sp,sp,12
    160c:	f800283a 	ret

00001610 <signalAll>:

void signalAll(int conditionID) {
    1610:	defffb04 	addi	sp,sp,-20
    1614:	dfc00415 	stw	ra,16(sp)
    1618:	df000315 	stw	fp,12(sp)
    161c:	dc000215 	stw	r16,8(sp)
    1620:	df000204 	addi	fp,sp,8
    1624:	e13fff15 	stw	r4,-4(fp)
	int lockID = conditionID / MAX_COND;
    1628:	e13fff17 	ldw	r4,-4(fp)
    162c:	01400284 	movi	r5,10
    1630:	00018380 	call	1838 <__divsi3>
    1634:	e0bffe15 	stw	r2,-8(fp)
	while(locks[lockID].conds[conditionID % MAX_COND].waitingList != -1) {
    1638:	00000206 	br	1644 <signalAll+0x34>
		signal(conditionID);
    163c:	e13fff17 	ldw	r4,-4(fp)
    1640:	00015800 	call	1580 <signal>
	}
}

void signalAll(int conditionID) {
	int lockID = conditionID / MAX_COND;
	while(locks[lockID].conds[conditionID % MAX_COND].waitingList != -1) {
    1644:	e43ffe17 	ldw	r16,-8(fp)
    1648:	e13fff17 	ldw	r4,-4(fp)
    164c:	01400284 	movi	r5,10
    1650:	00018980 	call	1898 <__modsi3>
    1654:	1007883a 	mov	r3,r2
    1658:	01000074 	movhi	r4,1
    165c:	21056004 	addi	r4,r4,5504
    1660:	80800324 	muli	r2,r16,12
    1664:	10c5883a 	add	r2,r2,r3
    1668:	100490fa 	slli	r2,r2,3
    166c:	1105883a 	add	r2,r2,r4
    1670:	10800404 	addi	r2,r2,16
    1674:	10800017 	ldw	r2,0(r2)
    1678:	10bfffd8 	cmpnei	r2,r2,-1
    167c:	103fef1e 	bne	r2,zero,163c <signalAll+0x2c>
		signal(conditionID);
	}
}
    1680:	e037883a 	mov	sp,fp
    1684:	dfc00217 	ldw	ra,8(sp)
    1688:	df000117 	ldw	fp,4(sp)
    168c:	dc000017 	ldw	r16,0(sp)
    1690:	dec00304 	addi	sp,sp,12
    1694:	f800283a 	ret

00001698 <_createStack>:
.text
_createStack: #r4 = newSP
			  #r5 = newPC
			  #r6 = stackSize - 4
	   # pointer to the bottom of the stack
	   add r2, r4, r6
    1698:	2185883a 	add	r2,r4,r6
	   # init sp with r8
	   addi r8, r2, -100 # sp
    169c:	123fe704 	addi	r8,r2,-100
	   stw  r5, 0(r8)   # sp[0] = PC
    16a0:	41400015 	stw	r5,0(r8)
	   addi r9, r0, 1
    16a4:	02400044 	movi	r9,1
	   stw  r9, 96(r8)  # sp[24] = status = 1
    16a8:	42401815 	stw	r9,96(r8)
	   # store sp on the stack bottom
	   stw  r8, 0(r2)
    16ac:	12000015 	stw	r8,0(r2)
	   # return pointer to stack address
	   ret
    16b0:	f800283a 	ret

000016b4 <_transfer>:
 * (eret instruction retores estatus into status register, while jumping at ea)
 */
.global _transfer
.text
_transfer:
	addi sp, sp, -100
    16b4:	deffe704 	addi	sp,sp,-100
	stw ra,  0(sp)
    16b8:	dfc00015 	stw	ra,0(sp)
    stw fp,  4(sp)
    16bc:	df000115 	stw	fp,4(sp)
    stw r2,  8(sp)
    16c0:	d8800215 	stw	r2,8(sp)
    stw r3,  12(sp)
    16c4:	d8c00315 	stw	r3,12(sp)
    stw r4,  16(sp)
    16c8:	d9000415 	stw	r4,16(sp)
    stw r5,  20(sp)
    16cc:	d9400515 	stw	r5,20(sp)
    stw r6,  24(sp)
    16d0:	d9800615 	stw	r6,24(sp)
    stw r7,  28(sp)
    16d4:	d9c00715 	stw	r7,28(sp)
    stw r8,  32(sp)
    16d8:	da000815 	stw	r8,32(sp)
    stw r9,  36(sp)
    16dc:	da400915 	stw	r9,36(sp)
    stw r10, 40(sp)
    16e0:	da800a15 	stw	r10,40(sp)
    stw r11, 44(sp)
    16e4:	dac00b15 	stw	r11,44(sp)
    stw r12, 48(sp)
    16e8:	db000c15 	stw	r12,48(sp)
    stw r13, 52(sp)
    16ec:	db400d15 	stw	r13,52(sp)
    stw r14, 56(sp)
    16f0:	db800e15 	stw	r14,56(sp)
    stw r15, 60(sp)
    16f4:	dbc00f15 	stw	r15,60(sp)
    stw r16, 64(sp)
    16f8:	dc001015 	stw	r16,64(sp)
    stw r17, 68(sp)
    16fc:	dc401115 	stw	r17,68(sp)
    stw r18, 72(sp)
    1700:	dc801215 	stw	r18,72(sp)
    stw r19, 76(sp)
    1704:	dcc01315 	stw	r19,76(sp)
    stw r20, 80(sp)
    1708:	dd001415 	stw	r20,80(sp)
    stw r21, 84(sp)
    170c:	dd401515 	stw	r21,84(sp)
    stw r22, 88(sp)
    1710:	dd801615 	stw	r22,88(sp)
    stw r23, 92(sp)
    1714:	ddc01715 	stw	r23,92(sp)
	# save the current interrupt switch status
    rdctl r2, status
    1718:	0005303a 	rdctl	r2,status
    stw   r2, 96(sp)
    171c:	d8801815 	stw	r2,96(sp)
    # running->sp = sp
    ldw r2, %gprel(running)(gp)
    1720:	d0a6ad17 	ldw	r2,-25932(gp)
    stw sp, (r2)
    1724:	16c00015 	stw	sp,0(r2)
    # running = nextP
	ldw r2, %gprel(nextP)(gp)
    1728:	d0a6ae17 	ldw	r2,-25928(gp)
	stw r2, %gprel(running)(gp)
    172c:	d0a6ad15 	stw	r2,-25932(gp)
	# set sp to the sp from the nextP
	ldw sp, (r2)
    1730:	16c00017 	ldw	sp,0(r2)
	# return using bret -> ba
	ldw ba,  0(sp)
    1734:	df800017 	ldw	r30,0(sp)
    ldw fp,  4(sp)
    1738:	df000117 	ldw	fp,4(sp)
    ldw r2,  8(sp)
    173c:	d8800217 	ldw	r2,8(sp)
    ldw r3,  12(sp)
    1740:	d8c00317 	ldw	r3,12(sp)
    ldw r4,  16(sp)
    1744:	d9000417 	ldw	r4,16(sp)
    ldw r5,  20(sp)
    1748:	d9400517 	ldw	r5,20(sp)
    ldw r6,  24(sp)
    174c:	d9800617 	ldw	r6,24(sp)
    ldw r7,  28(sp)
    1750:	d9c00717 	ldw	r7,28(sp)
    ldw r8,  32(sp)
    1754:	da000817 	ldw	r8,32(sp)
    ldw r9,  36(sp)
    1758:	da400917 	ldw	r9,36(sp)
    ldw r10, 40(sp)
    175c:	da800a17 	ldw	r10,40(sp)
    ldw r11, 44(sp)
    1760:	dac00b17 	ldw	r11,44(sp)
    ldw r12, 48(sp)
    1764:	db000c17 	ldw	r12,48(sp)
    ldw r13, 52(sp)
    1768:	db400d17 	ldw	r13,52(sp)
    ldw r14, 56(sp)
    176c:	db800e17 	ldw	r14,56(sp)
    ldw r15, 60(sp)
    1770:	dbc00f17 	ldw	r15,60(sp)
    ldw r16, 64(sp)
    1774:	dc001017 	ldw	r16,64(sp)
    ldw r17, 68(sp)
    1778:	dc401117 	ldw	r17,68(sp)
    ldw r18, 72(sp)
    177c:	dc801217 	ldw	r18,72(sp)
    ldw r19, 76(sp)
    1780:	dcc01317 	ldw	r19,76(sp)
    ldw r20, 80(sp)
    1784:	dd001417 	ldw	r20,80(sp)
    ldw r21, 84(sp)
    1788:	dd401517 	ldw	r21,84(sp)
    ldw r22, 88(sp)
    178c:	dd801617 	ldw	r22,88(sp)
	# restore interrupt switch status into bstatus
    ldw r23, 96(sp)
    1790:	ddc01817 	ldw	r23,96(sp)
    wrctl bstatus, r23
    1794:	b80170ba 	wrctl	bstatus,r23
    ldw r23, 92(sp)
    1798:	ddc01717 	ldw	r23,92(sp)

	addi sp, sp, 100
    179c:	dec01904 	addi	sp,sp,100
	# bret will copy back bstatus into status and go to ba
	bret
    17a0:	f000483a 	bret

000017a4 <maskInterrupts>:


.global maskInterrupts
.text
maskInterrupts:
	addi r9, r0, 0
    17a4:	02400004 	movi	r9,0
	wrctl status, r9
    17a8:	4801703a 	wrctl	status,r9
	ret
    17ac:	f800283a 	ret

000017b0 <allowInterrupts>:

.global allowInterrupts
.text
allowInterrupts:
	addi r9, r0, 1
    17b0:	02400044 	movi	r9,1
	wrctl status, r9
    17b4:	4801703a 	wrctl	status,r9
	ret
    17b8:	f800283a 	ret

000017bc <udivmodsi4>:
    17bc:	29001b2e 	bgeu	r5,r4,182c <udivmodsi4+0x70>
    17c0:	28001a16 	blt	r5,zero,182c <udivmodsi4+0x70>
    17c4:	00800044 	movi	r2,1
    17c8:	0007883a 	mov	r3,zero
    17cc:	01c007c4 	movi	r7,31
    17d0:	00000306 	br	17e0 <udivmodsi4+0x24>
    17d4:	19c01326 	beq	r3,r7,1824 <udivmodsi4+0x68>
    17d8:	18c00044 	addi	r3,r3,1
    17dc:	28000416 	blt	r5,zero,17f0 <udivmodsi4+0x34>
    17e0:	294b883a 	add	r5,r5,r5
    17e4:	1085883a 	add	r2,r2,r2
    17e8:	293ffa36 	bltu	r5,r4,17d4 <udivmodsi4+0x18>
    17ec:	10000d26 	beq	r2,zero,1824 <udivmodsi4+0x68>
    17f0:	0007883a 	mov	r3,zero
    17f4:	21400236 	bltu	r4,r5,1800 <udivmodsi4+0x44>
    17f8:	2149c83a 	sub	r4,r4,r5
    17fc:	1886b03a 	or	r3,r3,r2
    1800:	1004d07a 	srli	r2,r2,1
    1804:	280ad07a 	srli	r5,r5,1
    1808:	103ffa1e 	bne	r2,zero,17f4 <udivmodsi4+0x38>
    180c:	30000226 	beq	r6,zero,1818 <udivmodsi4+0x5c>
    1810:	2005883a 	mov	r2,r4
    1814:	f800283a 	ret
    1818:	1809883a 	mov	r4,r3
    181c:	2005883a 	mov	r2,r4
    1820:	f800283a 	ret
    1824:	0007883a 	mov	r3,zero
    1828:	003ff806 	br	180c <udivmodsi4+0x50>
    182c:	00800044 	movi	r2,1
    1830:	0007883a 	mov	r3,zero
    1834:	003fef06 	br	17f4 <udivmodsi4+0x38>

00001838 <__divsi3>:
    1838:	defffe04 	addi	sp,sp,-8
    183c:	dc000015 	stw	r16,0(sp)
    1840:	dfc00115 	stw	ra,4(sp)
    1844:	0021883a 	mov	r16,zero
    1848:	20000c16 	blt	r4,zero,187c <__divsi3+0x44>
    184c:	000d883a 	mov	r6,zero
    1850:	28000e16 	blt	r5,zero,188c <__divsi3+0x54>
    1854:	00017bc0 	call	17bc <udivmodsi4>
    1858:	1007883a 	mov	r3,r2
    185c:	8005003a 	cmpeq	r2,r16,zero
    1860:	1000011e 	bne	r2,zero,1868 <__divsi3+0x30>
    1864:	00c7c83a 	sub	r3,zero,r3
    1868:	1805883a 	mov	r2,r3
    186c:	dfc00117 	ldw	ra,4(sp)
    1870:	dc000017 	ldw	r16,0(sp)
    1874:	dec00204 	addi	sp,sp,8
    1878:	f800283a 	ret
    187c:	0109c83a 	sub	r4,zero,r4
    1880:	04000044 	movi	r16,1
    1884:	000d883a 	mov	r6,zero
    1888:	283ff20e 	bge	r5,zero,1854 <__divsi3+0x1c>
    188c:	014bc83a 	sub	r5,zero,r5
    1890:	8021003a 	cmpeq	r16,r16,zero
    1894:	003fef06 	br	1854 <__divsi3+0x1c>

00001898 <__modsi3>:
    1898:	deffff04 	addi	sp,sp,-4
    189c:	dfc00015 	stw	ra,0(sp)
    18a0:	01800044 	movi	r6,1
    18a4:	2807883a 	mov	r3,r5
    18a8:	20000416 	blt	r4,zero,18bc <__modsi3+0x24>
    18ac:	28000c16 	blt	r5,zero,18e0 <__modsi3+0x48>
    18b0:	dfc00017 	ldw	ra,0(sp)
    18b4:	dec00104 	addi	sp,sp,4
    18b8:	00017bc1 	jmpi	17bc <udivmodsi4>
    18bc:	0109c83a 	sub	r4,zero,r4
    18c0:	28000b16 	blt	r5,zero,18f0 <__modsi3+0x58>
    18c4:	180b883a 	mov	r5,r3
    18c8:	01800044 	movi	r6,1
    18cc:	00017bc0 	call	17bc <udivmodsi4>
    18d0:	0085c83a 	sub	r2,zero,r2
    18d4:	dfc00017 	ldw	ra,0(sp)
    18d8:	dec00104 	addi	sp,sp,4
    18dc:	f800283a 	ret
    18e0:	014bc83a 	sub	r5,zero,r5
    18e4:	dfc00017 	ldw	ra,0(sp)
    18e8:	dec00104 	addi	sp,sp,4
    18ec:	00017bc1 	jmpi	17bc <udivmodsi4>
    18f0:	0147c83a 	sub	r3,zero,r5
    18f4:	003ff306 	br	18c4 <__modsi3+0x2c>

000018f8 <__udivsi3>:
    18f8:	000d883a 	mov	r6,zero
    18fc:	00017bc1 	jmpi	17bc <udivmodsi4>

00001900 <__umodsi3>:
    1900:	01800044 	movi	r6,1
    1904:	00017bc1 	jmpi	17bc <udivmodsi4>

00001908 <exit>:
    1908:	defffe04 	addi	sp,sp,-8
    190c:	000b883a 	mov	r5,zero
    1910:	dc000015 	stw	r16,0(sp)
    1914:	dfc00115 	stw	ra,4(sp)
    1918:	2021883a 	mov	r16,r4
    191c:	00043c00 	call	43c0 <__call_exitprocs>
    1920:	00800074 	movhi	r2,1
    1924:	10be6704 	addi	r2,r2,-1636
    1928:	11000017 	ldw	r4,0(r2)
    192c:	20800f17 	ldw	r2,60(r4)
    1930:	10000126 	beq	r2,zero,1938 <exit+0x30>
    1934:	103ee83a 	callr	r2
    1938:	8009883a 	mov	r4,r16
    193c:	000b2dc0 	call	b2dc <_exit>

00001940 <free>:
    1940:	00800074 	movhi	r2,1
    1944:	10be6604 	addi	r2,r2,-1640
    1948:	200b883a 	mov	r5,r4
    194c:	11000017 	ldw	r4,0(r2)
    1950:	00063581 	jmpi	6358 <_free_r>

00001954 <malloc>:
    1954:	00800074 	movhi	r2,1
    1958:	10be6604 	addi	r2,r2,-1640
    195c:	200b883a 	mov	r5,r4
    1960:	11000017 	ldw	r4,0(r2)
    1964:	00019681 	jmpi	1968 <_malloc_r>

00001968 <_malloc_r>:
    1968:	defff604 	addi	sp,sp,-40
    196c:	28c002c4 	addi	r3,r5,11
    1970:	00800584 	movi	r2,22
    1974:	dc800215 	stw	r18,8(sp)
    1978:	dfc00915 	stw	ra,36(sp)
    197c:	df000815 	stw	fp,32(sp)
    1980:	ddc00715 	stw	r23,28(sp)
    1984:	dd800615 	stw	r22,24(sp)
    1988:	dd400515 	stw	r21,20(sp)
    198c:	dd000415 	stw	r20,16(sp)
    1990:	dcc00315 	stw	r19,12(sp)
    1994:	dc400115 	stw	r17,4(sp)
    1998:	dc000015 	stw	r16,0(sp)
    199c:	2025883a 	mov	r18,r4
    19a0:	10c01236 	bltu	r2,r3,19ec <_malloc_r+0x84>
    19a4:	04400404 	movi	r17,16
    19a8:	8940142e 	bgeu	r17,r5,19fc <_malloc_r+0x94>
    19ac:	00800304 	movi	r2,12
    19b0:	0007883a 	mov	r3,zero
    19b4:	90800015 	stw	r2,0(r18)
    19b8:	1805883a 	mov	r2,r3
    19bc:	dfc00917 	ldw	ra,36(sp)
    19c0:	df000817 	ldw	fp,32(sp)
    19c4:	ddc00717 	ldw	r23,28(sp)
    19c8:	dd800617 	ldw	r22,24(sp)
    19cc:	dd400517 	ldw	r21,20(sp)
    19d0:	dd000417 	ldw	r20,16(sp)
    19d4:	dcc00317 	ldw	r19,12(sp)
    19d8:	dc800217 	ldw	r18,8(sp)
    19dc:	dc400117 	ldw	r17,4(sp)
    19e0:	dc000017 	ldw	r16,0(sp)
    19e4:	dec00a04 	addi	sp,sp,40
    19e8:	f800283a 	ret
    19ec:	00bffe04 	movi	r2,-8
    19f0:	18a2703a 	and	r17,r3,r2
    19f4:	883fed16 	blt	r17,zero,19ac <_malloc_r+0x44>
    19f8:	897fec36 	bltu	r17,r5,19ac <_malloc_r+0x44>
    19fc:	9009883a 	mov	r4,r18
    1a00:	000b9b80 	call	b9b8 <__malloc_lock>
    1a04:	00807dc4 	movi	r2,503
    1a08:	14402b2e 	bgeu	r2,r17,1ab8 <_malloc_r+0x150>
    1a0c:	8806d27a 	srli	r3,r17,9
    1a10:	18003f1e 	bne	r3,zero,1b10 <_malloc_r+0x1a8>
    1a14:	880cd0fa 	srli	r6,r17,3
    1a18:	300490fa 	slli	r2,r6,3
    1a1c:	02c00074 	movhi	r11,1
    1a20:	5af8de04 	addi	r11,r11,-7304
    1a24:	12cb883a 	add	r5,r2,r11
    1a28:	2c000317 	ldw	r16,12(r5)
    1a2c:	580f883a 	mov	r7,r11
    1a30:	2c00041e 	bne	r5,r16,1a44 <_malloc_r+0xdc>
    1a34:	00000a06 	br	1a60 <_malloc_r+0xf8>
    1a38:	1800860e 	bge	r3,zero,1c54 <_malloc_r+0x2ec>
    1a3c:	84000317 	ldw	r16,12(r16)
    1a40:	2c000726 	beq	r5,r16,1a60 <_malloc_r+0xf8>
    1a44:	80800117 	ldw	r2,4(r16)
    1a48:	00ffff04 	movi	r3,-4
    1a4c:	10c8703a 	and	r4,r2,r3
    1a50:	2447c83a 	sub	r3,r4,r17
    1a54:	008003c4 	movi	r2,15
    1a58:	10fff70e 	bge	r2,r3,1a38 <_malloc_r+0xd0>
    1a5c:	31bfffc4 	addi	r6,r6,-1
    1a60:	32400044 	addi	r9,r6,1
    1a64:	02800074 	movhi	r10,1
    1a68:	52b8e004 	addi	r10,r10,-7296
    1a6c:	54000217 	ldw	r16,8(r10)
    1a70:	8280a026 	beq	r16,r10,1cf4 <_malloc_r+0x38c>
    1a74:	80800117 	ldw	r2,4(r16)
    1a78:	00ffff04 	movi	r3,-4
    1a7c:	10ca703a 	and	r5,r2,r3
    1a80:	2c4dc83a 	sub	r6,r5,r17
    1a84:	008003c4 	movi	r2,15
    1a88:	11808316 	blt	r2,r6,1c98 <_malloc_r+0x330>
    1a8c:	52800315 	stw	r10,12(r10)
    1a90:	52800215 	stw	r10,8(r10)
    1a94:	30002916 	blt	r6,zero,1b3c <_malloc_r+0x1d4>
    1a98:	8147883a 	add	r3,r16,r5
    1a9c:	18800117 	ldw	r2,4(r3)
    1aa0:	9009883a 	mov	r4,r18
    1aa4:	10800054 	ori	r2,r2,1
    1aa8:	18800115 	stw	r2,4(r3)
    1aac:	000b9d80 	call	b9d8 <__malloc_unlock>
    1ab0:	80c00204 	addi	r3,r16,8
    1ab4:	003fc006 	br	19b8 <_malloc_r+0x50>
    1ab8:	02c00074 	movhi	r11,1
    1abc:	5af8de04 	addi	r11,r11,-7304
    1ac0:	8ac5883a 	add	r2,r17,r11
    1ac4:	14000317 	ldw	r16,12(r2)
    1ac8:	580f883a 	mov	r7,r11
    1acc:	8806d0fa 	srli	r3,r17,3
    1ad0:	14006c26 	beq	r2,r16,1c84 <_malloc_r+0x31c>
    1ad4:	80c00117 	ldw	r3,4(r16)
    1ad8:	00bfff04 	movi	r2,-4
    1adc:	81800317 	ldw	r6,12(r16)
    1ae0:	1886703a 	and	r3,r3,r2
    1ae4:	80c7883a 	add	r3,r16,r3
    1ae8:	18800117 	ldw	r2,4(r3)
    1aec:	81400217 	ldw	r5,8(r16)
    1af0:	9009883a 	mov	r4,r18
    1af4:	10800054 	ori	r2,r2,1
    1af8:	18800115 	stw	r2,4(r3)
    1afc:	31400215 	stw	r5,8(r6)
    1b00:	29800315 	stw	r6,12(r5)
    1b04:	000b9d80 	call	b9d8 <__malloc_unlock>
    1b08:	80c00204 	addi	r3,r16,8
    1b0c:	003faa06 	br	19b8 <_malloc_r+0x50>
    1b10:	00800104 	movi	r2,4
    1b14:	10c0052e 	bgeu	r2,r3,1b2c <_malloc_r+0x1c4>
    1b18:	00800504 	movi	r2,20
    1b1c:	10c07836 	bltu	r2,r3,1d00 <_malloc_r+0x398>
    1b20:	198016c4 	addi	r6,r3,91
    1b24:	300490fa 	slli	r2,r6,3
    1b28:	003fbc06 	br	1a1c <_malloc_r+0xb4>
    1b2c:	8804d1ba 	srli	r2,r17,6
    1b30:	11800e04 	addi	r6,r2,56
    1b34:	300490fa 	slli	r2,r6,3
    1b38:	003fb806 	br	1a1c <_malloc_r+0xb4>
    1b3c:	00807fc4 	movi	r2,511
    1b40:	1140bb36 	bltu	r2,r5,1e30 <_malloc_r+0x4c8>
    1b44:	2806d0fa 	srli	r3,r5,3
    1b48:	573ffe04 	addi	fp,r10,-8
    1b4c:	00800044 	movi	r2,1
    1b50:	180890fa 	slli	r4,r3,3
    1b54:	1807d0ba 	srai	r3,r3,2
    1b58:	e1c00117 	ldw	r7,4(fp)
    1b5c:	5909883a 	add	r4,r11,r4
    1b60:	21400217 	ldw	r5,8(r4)
    1b64:	10c4983a 	sll	r2,r2,r3
    1b68:	81000315 	stw	r4,12(r16)
    1b6c:	81400215 	stw	r5,8(r16)
    1b70:	388eb03a 	or	r7,r7,r2
    1b74:	2c000315 	stw	r16,12(r5)
    1b78:	24000215 	stw	r16,8(r4)
    1b7c:	e1c00115 	stw	r7,4(fp)
    1b80:	4807883a 	mov	r3,r9
    1b84:	4800cd16 	blt	r9,zero,1ebc <_malloc_r+0x554>
    1b88:	1807d0ba 	srai	r3,r3,2
    1b8c:	00800044 	movi	r2,1
    1b90:	10c8983a 	sll	r4,r2,r3
    1b94:	39004436 	bltu	r7,r4,1ca8 <_malloc_r+0x340>
    1b98:	21c4703a 	and	r2,r4,r7
    1b9c:	10000a1e 	bne	r2,zero,1bc8 <_malloc_r+0x260>
    1ba0:	2109883a 	add	r4,r4,r4
    1ba4:	00bfff04 	movi	r2,-4
    1ba8:	4884703a 	and	r2,r9,r2
    1bac:	3906703a 	and	r3,r7,r4
    1bb0:	12400104 	addi	r9,r2,4
    1bb4:	1800041e 	bne	r3,zero,1bc8 <_malloc_r+0x260>
    1bb8:	2109883a 	add	r4,r4,r4
    1bbc:	3904703a 	and	r2,r7,r4
    1bc0:	4a400104 	addi	r9,r9,4
    1bc4:	103ffc26 	beq	r2,zero,1bb8 <_malloc_r+0x250>
    1bc8:	480490fa 	slli	r2,r9,3
    1bcc:	4819883a 	mov	r12,r9
    1bd0:	023fff04 	movi	r8,-4
    1bd4:	589b883a 	add	r13,r11,r2
    1bd8:	6807883a 	mov	r3,r13
    1bdc:	014003c4 	movi	r5,15
    1be0:	1c000317 	ldw	r16,12(r3)
    1be4:	1c00041e 	bne	r3,r16,1bf8 <_malloc_r+0x290>
    1be8:	0000a706 	br	1e88 <_malloc_r+0x520>
    1bec:	3000ab0e 	bge	r6,zero,1e9c <_malloc_r+0x534>
    1bf0:	84000317 	ldw	r16,12(r16)
    1bf4:	1c00a426 	beq	r3,r16,1e88 <_malloc_r+0x520>
    1bf8:	80800117 	ldw	r2,4(r16)
    1bfc:	1204703a 	and	r2,r2,r8
    1c00:	144dc83a 	sub	r6,r2,r17
    1c04:	29bff90e 	bge	r5,r6,1bec <_malloc_r+0x284>
    1c08:	81000317 	ldw	r4,12(r16)
    1c0c:	80c00217 	ldw	r3,8(r16)
    1c10:	89400054 	ori	r5,r17,1
    1c14:	8445883a 	add	r2,r16,r17
    1c18:	20c00215 	stw	r3,8(r4)
    1c1c:	19000315 	stw	r4,12(r3)
    1c20:	81400115 	stw	r5,4(r16)
    1c24:	1187883a 	add	r3,r2,r6
    1c28:	31000054 	ori	r4,r6,1
    1c2c:	50800315 	stw	r2,12(r10)
    1c30:	50800215 	stw	r2,8(r10)
    1c34:	19800015 	stw	r6,0(r3)
    1c38:	11000115 	stw	r4,4(r2)
    1c3c:	12800215 	stw	r10,8(r2)
    1c40:	12800315 	stw	r10,12(r2)
    1c44:	9009883a 	mov	r4,r18
    1c48:	000b9d80 	call	b9d8 <__malloc_unlock>
    1c4c:	80c00204 	addi	r3,r16,8
    1c50:	003f5906 	br	19b8 <_malloc_r+0x50>
    1c54:	8109883a 	add	r4,r16,r4
    1c58:	20800117 	ldw	r2,4(r4)
    1c5c:	80c00217 	ldw	r3,8(r16)
    1c60:	81400317 	ldw	r5,12(r16)
    1c64:	10800054 	ori	r2,r2,1
    1c68:	20800115 	stw	r2,4(r4)
    1c6c:	28c00215 	stw	r3,8(r5)
    1c70:	19400315 	stw	r5,12(r3)
    1c74:	9009883a 	mov	r4,r18
    1c78:	000b9d80 	call	b9d8 <__malloc_unlock>
    1c7c:	80c00204 	addi	r3,r16,8
    1c80:	003f4d06 	br	19b8 <_malloc_r+0x50>
    1c84:	80800204 	addi	r2,r16,8
    1c88:	14000317 	ldw	r16,12(r2)
    1c8c:	143f911e 	bne	r2,r16,1ad4 <_malloc_r+0x16c>
    1c90:	1a400084 	addi	r9,r3,2
    1c94:	003f7306 	br	1a64 <_malloc_r+0xfc>
    1c98:	88c00054 	ori	r3,r17,1
    1c9c:	8445883a 	add	r2,r16,r17
    1ca0:	80c00115 	stw	r3,4(r16)
    1ca4:	003fdf06 	br	1c24 <_malloc_r+0x2bc>
    1ca8:	e4000217 	ldw	r16,8(fp)
    1cac:	00bfff04 	movi	r2,-4
    1cb0:	80c00117 	ldw	r3,4(r16)
    1cb4:	802d883a 	mov	r22,r16
    1cb8:	18aa703a 	and	r21,r3,r2
    1cbc:	ac401636 	bltu	r21,r17,1d18 <_malloc_r+0x3b0>
    1cc0:	ac49c83a 	sub	r4,r21,r17
    1cc4:	008003c4 	movi	r2,15
    1cc8:	1100130e 	bge	r2,r4,1d18 <_malloc_r+0x3b0>
    1ccc:	88800054 	ori	r2,r17,1
    1cd0:	8447883a 	add	r3,r16,r17
    1cd4:	80800115 	stw	r2,4(r16)
    1cd8:	20800054 	ori	r2,r4,1
    1cdc:	18800115 	stw	r2,4(r3)
    1ce0:	e0c00215 	stw	r3,8(fp)
    1ce4:	9009883a 	mov	r4,r18
    1ce8:	000b9d80 	call	b9d8 <__malloc_unlock>
    1cec:	80c00204 	addi	r3,r16,8
    1cf0:	003f3106 	br	19b8 <_malloc_r+0x50>
    1cf4:	39c00117 	ldw	r7,4(r7)
    1cf8:	573ffe04 	addi	fp,r10,-8
    1cfc:	003fa006 	br	1b80 <_malloc_r+0x218>
    1d00:	00801504 	movi	r2,84
    1d04:	10c06736 	bltu	r2,r3,1ea4 <_malloc_r+0x53c>
    1d08:	8804d33a 	srli	r2,r17,12
    1d0c:	11801b84 	addi	r6,r2,110
    1d10:	300490fa 	slli	r2,r6,3
    1d14:	003f4106 	br	1a1c <_malloc_r+0xb4>
    1d18:	d0a6b117 	ldw	r2,-25916(gp)
    1d1c:	d0e00417 	ldw	r3,-32752(gp)
    1d20:	053fffc4 	movi	r20,-1
    1d24:	10800404 	addi	r2,r2,16
    1d28:	88a7883a 	add	r19,r17,r2
    1d2c:	1d000326 	beq	r3,r20,1d3c <_malloc_r+0x3d4>
    1d30:	98c3ffc4 	addi	r3,r19,4095
    1d34:	00bc0004 	movi	r2,-4096
    1d38:	18a6703a 	and	r19,r3,r2
    1d3c:	9009883a 	mov	r4,r18
    1d40:	980b883a 	mov	r5,r19
    1d44:	00022740 	call	2274 <_sbrk_r>
    1d48:	1009883a 	mov	r4,r2
    1d4c:	15000426 	beq	r2,r20,1d60 <_malloc_r+0x3f8>
    1d50:	854b883a 	add	r5,r16,r21
    1d54:	1029883a 	mov	r20,r2
    1d58:	11405a2e 	bgeu	r2,r5,1ec4 <_malloc_r+0x55c>
    1d5c:	87000c26 	beq	r16,fp,1d90 <_malloc_r+0x428>
    1d60:	e4000217 	ldw	r16,8(fp)
    1d64:	80c00117 	ldw	r3,4(r16)
    1d68:	00bfff04 	movi	r2,-4
    1d6c:	1884703a 	and	r2,r3,r2
    1d70:	14400336 	bltu	r2,r17,1d80 <_malloc_r+0x418>
    1d74:	1449c83a 	sub	r4,r2,r17
    1d78:	008003c4 	movi	r2,15
    1d7c:	113fd316 	blt	r2,r4,1ccc <_malloc_r+0x364>
    1d80:	9009883a 	mov	r4,r18
    1d84:	000b9d80 	call	b9d8 <__malloc_unlock>
    1d88:	0007883a 	mov	r3,zero
    1d8c:	003f0a06 	br	19b8 <_malloc_r+0x50>
    1d90:	05c00074 	movhi	r23,1
    1d94:	bdc53504 	addi	r23,r23,5332
    1d98:	b8800017 	ldw	r2,0(r23)
    1d9c:	988d883a 	add	r6,r19,r2
    1da0:	b9800015 	stw	r6,0(r23)
    1da4:	d0e00417 	ldw	r3,-32752(gp)
    1da8:	00bfffc4 	movi	r2,-1
    1dac:	18808e26 	beq	r3,r2,1fe8 <_malloc_r+0x680>
    1db0:	2145c83a 	sub	r2,r4,r5
    1db4:	3085883a 	add	r2,r6,r2
    1db8:	b8800015 	stw	r2,0(r23)
    1dbc:	20c001cc 	andi	r3,r4,7
    1dc0:	18005f1e 	bne	r3,zero,1f40 <_malloc_r+0x5d8>
    1dc4:	000b883a 	mov	r5,zero
    1dc8:	a4c5883a 	add	r2,r20,r19
    1dcc:	1083ffcc 	andi	r2,r2,4095
    1dd0:	00c40004 	movi	r3,4096
    1dd4:	1887c83a 	sub	r3,r3,r2
    1dd8:	28e7883a 	add	r19,r5,r3
    1ddc:	9009883a 	mov	r4,r18
    1de0:	980b883a 	mov	r5,r19
    1de4:	00022740 	call	2274 <_sbrk_r>
    1de8:	1007883a 	mov	r3,r2
    1dec:	00bfffc4 	movi	r2,-1
    1df0:	18807a26 	beq	r3,r2,1fdc <_malloc_r+0x674>
    1df4:	1d05c83a 	sub	r2,r3,r20
    1df8:	9885883a 	add	r2,r19,r2
    1dfc:	10c00054 	ori	r3,r2,1
    1e00:	b8800017 	ldw	r2,0(r23)
    1e04:	a021883a 	mov	r16,r20
    1e08:	a0c00115 	stw	r3,4(r20)
    1e0c:	9885883a 	add	r2,r19,r2
    1e10:	b8800015 	stw	r2,0(r23)
    1e14:	e5000215 	stw	r20,8(fp)
    1e18:	b7003626 	beq	r22,fp,1ef4 <_malloc_r+0x58c>
    1e1c:	018003c4 	movi	r6,15
    1e20:	35404b36 	bltu	r6,r21,1f50 <_malloc_r+0x5e8>
    1e24:	00800044 	movi	r2,1
    1e28:	a0800115 	stw	r2,4(r20)
    1e2c:	003fcd06 	br	1d64 <_malloc_r+0x3fc>
    1e30:	2808d27a 	srli	r4,r5,9
    1e34:	2000371e 	bne	r4,zero,1f14 <_malloc_r+0x5ac>
    1e38:	2808d0fa 	srli	r4,r5,3
    1e3c:	200690fa 	slli	r3,r4,3
    1e40:	1ad1883a 	add	r8,r3,r11
    1e44:	41800217 	ldw	r6,8(r8)
    1e48:	41805b26 	beq	r8,r6,1fb8 <_malloc_r+0x650>
    1e4c:	30800117 	ldw	r2,4(r6)
    1e50:	00ffff04 	movi	r3,-4
    1e54:	10c4703a 	and	r2,r2,r3
    1e58:	2880022e 	bgeu	r5,r2,1e64 <_malloc_r+0x4fc>
    1e5c:	31800217 	ldw	r6,8(r6)
    1e60:	41bffa1e 	bne	r8,r6,1e4c <_malloc_r+0x4e4>
    1e64:	32000317 	ldw	r8,12(r6)
    1e68:	39c00117 	ldw	r7,4(r7)
    1e6c:	82000315 	stw	r8,12(r16)
    1e70:	81800215 	stw	r6,8(r16)
    1e74:	07000074 	movhi	fp,1
    1e78:	e738de04 	addi	fp,fp,-7304
    1e7c:	34000315 	stw	r16,12(r6)
    1e80:	44000215 	stw	r16,8(r8)
    1e84:	003f3e06 	br	1b80 <_malloc_r+0x218>
    1e88:	63000044 	addi	r12,r12,1
    1e8c:	608000cc 	andi	r2,r12,3
    1e90:	10005d26 	beq	r2,zero,2008 <_malloc_r+0x6a0>
    1e94:	18c00204 	addi	r3,r3,8
    1e98:	003f5106 	br	1be0 <_malloc_r+0x278>
    1e9c:	8089883a 	add	r4,r16,r2
    1ea0:	003f6d06 	br	1c58 <_malloc_r+0x2f0>
    1ea4:	00805504 	movi	r2,340
    1ea8:	10c02036 	bltu	r2,r3,1f2c <_malloc_r+0x5c4>
    1eac:	8804d3fa 	srli	r2,r17,15
    1eb0:	11801dc4 	addi	r6,r2,119
    1eb4:	300490fa 	slli	r2,r6,3
    1eb8:	003ed806 	br	1a1c <_malloc_r+0xb4>
    1ebc:	48c000c4 	addi	r3,r9,3
    1ec0:	003f3106 	br	1b88 <_malloc_r+0x220>
    1ec4:	05c00074 	movhi	r23,1
    1ec8:	bdc53504 	addi	r23,r23,5332
    1ecc:	b8800017 	ldw	r2,0(r23)
    1ed0:	988d883a 	add	r6,r19,r2
    1ed4:	b9800015 	stw	r6,0(r23)
    1ed8:	293fb21e 	bne	r5,r4,1da4 <_malloc_r+0x43c>
    1edc:	2083ffcc 	andi	r2,r4,4095
    1ee0:	103fb01e 	bne	r2,zero,1da4 <_malloc_r+0x43c>
    1ee4:	e4000217 	ldw	r16,8(fp)
    1ee8:	9d45883a 	add	r2,r19,r21
    1eec:	10800054 	ori	r2,r2,1
    1ef0:	80800115 	stw	r2,4(r16)
    1ef4:	b8c00017 	ldw	r3,0(r23)
    1ef8:	d0a6b217 	ldw	r2,-25912(gp)
    1efc:	10c0012e 	bgeu	r2,r3,1f04 <_malloc_r+0x59c>
    1f00:	d0e6b215 	stw	r3,-25912(gp)
    1f04:	d0a6b317 	ldw	r2,-25908(gp)
    1f08:	10ff962e 	bgeu	r2,r3,1d64 <_malloc_r+0x3fc>
    1f0c:	d0e6b315 	stw	r3,-25908(gp)
    1f10:	003f9406 	br	1d64 <_malloc_r+0x3fc>
    1f14:	00800104 	movi	r2,4
    1f18:	11001e36 	bltu	r2,r4,1f94 <_malloc_r+0x62c>
    1f1c:	2804d1ba 	srli	r2,r5,6
    1f20:	11000e04 	addi	r4,r2,56
    1f24:	200690fa 	slli	r3,r4,3
    1f28:	003fc506 	br	1e40 <_malloc_r+0x4d8>
    1f2c:	00815504 	movi	r2,1364
    1f30:	10c01d2e 	bgeu	r2,r3,1fa8 <_malloc_r+0x640>
    1f34:	01801f84 	movi	r6,126
    1f38:	0080fc04 	movi	r2,1008
    1f3c:	003eb706 	br	1a1c <_malloc_r+0xb4>
    1f40:	00800204 	movi	r2,8
    1f44:	10cbc83a 	sub	r5,r2,r3
    1f48:	2169883a 	add	r20,r4,r5
    1f4c:	003f9e06 	br	1dc8 <_malloc_r+0x460>
    1f50:	00bffe04 	movi	r2,-8
    1f54:	a93ffd04 	addi	r4,r21,-12
    1f58:	2088703a 	and	r4,r4,r2
    1f5c:	b10b883a 	add	r5,r22,r4
    1f60:	00c00144 	movi	r3,5
    1f64:	28c00215 	stw	r3,8(r5)
    1f68:	28c00115 	stw	r3,4(r5)
    1f6c:	b0800117 	ldw	r2,4(r22)
    1f70:	1080004c 	andi	r2,r2,1
    1f74:	2084b03a 	or	r2,r4,r2
    1f78:	b0800115 	stw	r2,4(r22)
    1f7c:	313fdd2e 	bgeu	r6,r4,1ef4 <_malloc_r+0x58c>
    1f80:	b1400204 	addi	r5,r22,8
    1f84:	9009883a 	mov	r4,r18
    1f88:	00063580 	call	6358 <_free_r>
    1f8c:	e4000217 	ldw	r16,8(fp)
    1f90:	003fd806 	br	1ef4 <_malloc_r+0x58c>
    1f94:	00800504 	movi	r2,20
    1f98:	11001536 	bltu	r2,r4,1ff0 <_malloc_r+0x688>
    1f9c:	210016c4 	addi	r4,r4,91
    1fa0:	200690fa 	slli	r3,r4,3
    1fa4:	003fa606 	br	1e40 <_malloc_r+0x4d8>
    1fa8:	8804d4ba 	srli	r2,r17,18
    1fac:	11801f04 	addi	r6,r2,124
    1fb0:	300490fa 	slli	r2,r6,3
    1fb4:	003e9906 	br	1a1c <_malloc_r+0xb4>
    1fb8:	2009d0ba 	srai	r4,r4,2
    1fbc:	01400074 	movhi	r5,1
    1fc0:	2978de04 	addi	r5,r5,-7304
    1fc4:	00c00044 	movi	r3,1
    1fc8:	28800117 	ldw	r2,4(r5)
    1fcc:	1906983a 	sll	r3,r3,r4
    1fd0:	10c4b03a 	or	r2,r2,r3
    1fd4:	28800115 	stw	r2,4(r5)
    1fd8:	003fa306 	br	1e68 <_malloc_r+0x500>
    1fdc:	0027883a 	mov	r19,zero
    1fe0:	00c00044 	movi	r3,1
    1fe4:	003f8606 	br	1e00 <_malloc_r+0x498>
    1fe8:	d1200415 	stw	r4,-32752(gp)
    1fec:	003f7306 	br	1dbc <_malloc_r+0x454>
    1ff0:	00801504 	movi	r2,84
    1ff4:	11001936 	bltu	r2,r4,205c <_malloc_r+0x6f4>
    1ff8:	2804d33a 	srli	r2,r5,12
    1ffc:	11001b84 	addi	r4,r2,110
    2000:	200690fa 	slli	r3,r4,3
    2004:	003f8e06 	br	1e40 <_malloc_r+0x4d8>
    2008:	480b883a 	mov	r5,r9
    200c:	6807883a 	mov	r3,r13
    2010:	288000cc 	andi	r2,r5,3
    2014:	18fffe04 	addi	r3,r3,-8
    2018:	297fffc4 	addi	r5,r5,-1
    201c:	10001526 	beq	r2,zero,2074 <_malloc_r+0x70c>
    2020:	18800217 	ldw	r2,8(r3)
    2024:	10fffa26 	beq	r2,r3,2010 <_malloc_r+0x6a8>
    2028:	2109883a 	add	r4,r4,r4
    202c:	393f1e36 	bltu	r7,r4,1ca8 <_malloc_r+0x340>
    2030:	203f1d26 	beq	r4,zero,1ca8 <_malloc_r+0x340>
    2034:	21c4703a 	and	r2,r4,r7
    2038:	10000226 	beq	r2,zero,2044 <_malloc_r+0x6dc>
    203c:	6013883a 	mov	r9,r12
    2040:	003ee106 	br	1bc8 <_malloc_r+0x260>
    2044:	2109883a 	add	r4,r4,r4
    2048:	3904703a 	and	r2,r7,r4
    204c:	63000104 	addi	r12,r12,4
    2050:	103ffc26 	beq	r2,zero,2044 <_malloc_r+0x6dc>
    2054:	6013883a 	mov	r9,r12
    2058:	003edb06 	br	1bc8 <_malloc_r+0x260>
    205c:	00805504 	movi	r2,340
    2060:	11000836 	bltu	r2,r4,2084 <_malloc_r+0x71c>
    2064:	2804d3fa 	srli	r2,r5,15
    2068:	11001dc4 	addi	r4,r2,119
    206c:	200690fa 	slli	r3,r4,3
    2070:	003f7306 	br	1e40 <_malloc_r+0x4d8>
    2074:	0104303a 	nor	r2,zero,r4
    2078:	388e703a 	and	r7,r7,r2
    207c:	e1c00115 	stw	r7,4(fp)
    2080:	003fe906 	br	2028 <_malloc_r+0x6c0>
    2084:	00815504 	movi	r2,1364
    2088:	1100032e 	bgeu	r2,r4,2098 <_malloc_r+0x730>
    208c:	01001f84 	movi	r4,126
    2090:	00c0fc04 	movi	r3,1008
    2094:	003f6a06 	br	1e40 <_malloc_r+0x4d8>
    2098:	2804d4ba 	srli	r2,r5,18
    209c:	11001f04 	addi	r4,r2,124
    20a0:	200690fa 	slli	r3,r4,3
    20a4:	003f6606 	br	1e40 <_malloc_r+0x4d8>

000020a8 <memcpy>:
    20a8:	01c003c4 	movi	r7,15
    20ac:	2007883a 	mov	r3,r4
    20b0:	3980032e 	bgeu	r7,r6,20c0 <memcpy+0x18>
    20b4:	2904b03a 	or	r2,r5,r4
    20b8:	108000cc 	andi	r2,r2,3
    20bc:	10000926 	beq	r2,zero,20e4 <memcpy+0x3c>
    20c0:	30000626 	beq	r6,zero,20dc <memcpy+0x34>
    20c4:	30cd883a 	add	r6,r6,r3
    20c8:	28800003 	ldbu	r2,0(r5)
    20cc:	29400044 	addi	r5,r5,1
    20d0:	18800005 	stb	r2,0(r3)
    20d4:	18c00044 	addi	r3,r3,1
    20d8:	30fffb1e 	bne	r6,r3,20c8 <memcpy+0x20>
    20dc:	2005883a 	mov	r2,r4
    20e0:	f800283a 	ret
    20e4:	3811883a 	mov	r8,r7
    20e8:	200f883a 	mov	r7,r4
    20ec:	28c00017 	ldw	r3,0(r5)
    20f0:	31bffc04 	addi	r6,r6,-16
    20f4:	38c00015 	stw	r3,0(r7)
    20f8:	28800117 	ldw	r2,4(r5)
    20fc:	38800115 	stw	r2,4(r7)
    2100:	28c00217 	ldw	r3,8(r5)
    2104:	38c00215 	stw	r3,8(r7)
    2108:	28800317 	ldw	r2,12(r5)
    210c:	29400404 	addi	r5,r5,16
    2110:	38800315 	stw	r2,12(r7)
    2114:	39c00404 	addi	r7,r7,16
    2118:	41bff436 	bltu	r8,r6,20ec <memcpy+0x44>
    211c:	008000c4 	movi	r2,3
    2120:	1180072e 	bgeu	r2,r6,2140 <memcpy+0x98>
    2124:	1007883a 	mov	r3,r2
    2128:	28800017 	ldw	r2,0(r5)
    212c:	31bfff04 	addi	r6,r6,-4
    2130:	29400104 	addi	r5,r5,4
    2134:	38800015 	stw	r2,0(r7)
    2138:	39c00104 	addi	r7,r7,4
    213c:	19bffa36 	bltu	r3,r6,2128 <memcpy+0x80>
    2140:	3807883a 	mov	r3,r7
    2144:	003fde06 	br	20c0 <memcpy+0x18>

00002148 <printf>:
    2148:	defffb04 	addi	sp,sp,-20
    214c:	dfc00115 	stw	ra,4(sp)
    2150:	d9400215 	stw	r5,8(sp)
    2154:	d9800315 	stw	r6,12(sp)
    2158:	d9c00415 	stw	r7,16(sp)
    215c:	00800074 	movhi	r2,1
    2160:	10be6604 	addi	r2,r2,-1640
    2164:	10c00017 	ldw	r3,0(r2)
    2168:	200b883a 	mov	r5,r4
    216c:	d8800204 	addi	r2,sp,8
    2170:	19000217 	ldw	r4,8(r3)
    2174:	100d883a 	mov	r6,r2
    2178:	d8800015 	stw	r2,0(sp)
    217c:	000425c0 	call	425c <__vfprintf_internal>
    2180:	dfc00117 	ldw	ra,4(sp)
    2184:	dec00504 	addi	sp,sp,20
    2188:	f800283a 	ret

0000218c <_printf_r>:
    218c:	defffc04 	addi	sp,sp,-16
    2190:	dfc00115 	stw	ra,4(sp)
    2194:	d9800215 	stw	r6,8(sp)
    2198:	d9c00315 	stw	r7,12(sp)
    219c:	280d883a 	mov	r6,r5
    21a0:	21400217 	ldw	r5,8(r4)
    21a4:	d8c00204 	addi	r3,sp,8
    21a8:	180f883a 	mov	r7,r3
    21ac:	d8c00015 	stw	r3,0(sp)
    21b0:	00023b00 	call	23b0 <___vfprintf_internal_r>
    21b4:	dfc00117 	ldw	ra,4(sp)
    21b8:	dec00404 	addi	sp,sp,16
    21bc:	f800283a 	ret

000021c0 <_puts_r>:
    21c0:	defff604 	addi	sp,sp,-40
    21c4:	dc400715 	stw	r17,28(sp)
    21c8:	2023883a 	mov	r17,r4
    21cc:	2809883a 	mov	r4,r5
    21d0:	dfc00915 	stw	ra,36(sp)
    21d4:	dcc00815 	stw	r19,32(sp)
    21d8:	2827883a 	mov	r19,r5
    21dc:	00022e40 	call	22e4 <strlen>
    21e0:	89400217 	ldw	r5,8(r17)
    21e4:	00c00074 	movhi	r3,1
    21e8:	18f70e04 	addi	r3,r3,-9160
    21ec:	01c00044 	movi	r7,1
    21f0:	12000044 	addi	r8,r2,1
    21f4:	d8c00515 	stw	r3,20(sp)
    21f8:	d9c00615 	stw	r7,24(sp)
    21fc:	d8c00304 	addi	r3,sp,12
    2200:	01c00084 	movi	r7,2
    2204:	8809883a 	mov	r4,r17
    2208:	d80d883a 	mov	r6,sp
    220c:	d8c00015 	stw	r3,0(sp)
    2210:	dcc00315 	stw	r19,12(sp)
    2214:	da000215 	stw	r8,8(sp)
    2218:	d9c00115 	stw	r7,4(sp)
    221c:	d8800415 	stw	r2,16(sp)
    2220:	000666c0 	call	666c <__sfvwrite_r>
    2224:	00ffffc4 	movi	r3,-1
    2228:	10000626 	beq	r2,zero,2244 <_puts_r+0x84>
    222c:	1805883a 	mov	r2,r3
    2230:	dfc00917 	ldw	ra,36(sp)
    2234:	dcc00817 	ldw	r19,32(sp)
    2238:	dc400717 	ldw	r17,28(sp)
    223c:	dec00a04 	addi	sp,sp,40
    2240:	f800283a 	ret
    2244:	00c00284 	movi	r3,10
    2248:	1805883a 	mov	r2,r3
    224c:	dfc00917 	ldw	ra,36(sp)
    2250:	dcc00817 	ldw	r19,32(sp)
    2254:	dc400717 	ldw	r17,28(sp)
    2258:	dec00a04 	addi	sp,sp,40
    225c:	f800283a 	ret

00002260 <puts>:
    2260:	00800074 	movhi	r2,1
    2264:	10be6604 	addi	r2,r2,-1640
    2268:	200b883a 	mov	r5,r4
    226c:	11000017 	ldw	r4,0(r2)
    2270:	00021c01 	jmpi	21c0 <_puts_r>

00002274 <_sbrk_r>:
    2274:	defffd04 	addi	sp,sp,-12
    2278:	dc000015 	stw	r16,0(sp)
    227c:	04000074 	movhi	r16,1
    2280:	84051904 	addi	r16,r16,5220
    2284:	dc400115 	stw	r17,4(sp)
    2288:	80000015 	stw	zero,0(r16)
    228c:	2023883a 	mov	r17,r4
    2290:	2809883a 	mov	r4,r5
    2294:	dfc00215 	stw	ra,8(sp)
    2298:	000bbd80 	call	bbd8 <sbrk>
    229c:	1007883a 	mov	r3,r2
    22a0:	00bfffc4 	movi	r2,-1
    22a4:	18800626 	beq	r3,r2,22c0 <_sbrk_r+0x4c>
    22a8:	1805883a 	mov	r2,r3
    22ac:	dfc00217 	ldw	ra,8(sp)
    22b0:	dc400117 	ldw	r17,4(sp)
    22b4:	dc000017 	ldw	r16,0(sp)
    22b8:	dec00304 	addi	sp,sp,12
    22bc:	f800283a 	ret
    22c0:	80800017 	ldw	r2,0(r16)
    22c4:	103ff826 	beq	r2,zero,22a8 <_sbrk_r+0x34>
    22c8:	88800015 	stw	r2,0(r17)
    22cc:	1805883a 	mov	r2,r3
    22d0:	dfc00217 	ldw	ra,8(sp)
    22d4:	dc400117 	ldw	r17,4(sp)
    22d8:	dc000017 	ldw	r16,0(sp)
    22dc:	dec00304 	addi	sp,sp,12
    22e0:	f800283a 	ret

000022e4 <strlen>:
    22e4:	208000cc 	andi	r2,r4,3
    22e8:	2011883a 	mov	r8,r4
    22ec:	1000161e 	bne	r2,zero,2348 <strlen+0x64>
    22f0:	20c00017 	ldw	r3,0(r4)
    22f4:	017fbff4 	movhi	r5,65279
    22f8:	297fbfc4 	addi	r5,r5,-257
    22fc:	01e02074 	movhi	r7,32897
    2300:	39e02004 	addi	r7,r7,-32640
    2304:	1945883a 	add	r2,r3,r5
    2308:	11c4703a 	and	r2,r2,r7
    230c:	00c6303a 	nor	r3,zero,r3
    2310:	1886703a 	and	r3,r3,r2
    2314:	18000c1e 	bne	r3,zero,2348 <strlen+0x64>
    2318:	280d883a 	mov	r6,r5
    231c:	380b883a 	mov	r5,r7
    2320:	21000104 	addi	r4,r4,4
    2324:	20800017 	ldw	r2,0(r4)
    2328:	1187883a 	add	r3,r2,r6
    232c:	1946703a 	and	r3,r3,r5
    2330:	0084303a 	nor	r2,zero,r2
    2334:	10c4703a 	and	r2,r2,r3
    2338:	103ff926 	beq	r2,zero,2320 <strlen+0x3c>
    233c:	20800007 	ldb	r2,0(r4)
    2340:	10000326 	beq	r2,zero,2350 <strlen+0x6c>
    2344:	21000044 	addi	r4,r4,1
    2348:	20800007 	ldb	r2,0(r4)
    234c:	103ffd1e 	bne	r2,zero,2344 <strlen+0x60>
    2350:	2205c83a 	sub	r2,r4,r8
    2354:	f800283a 	ret

00002358 <__sprint_r>:
    2358:	30800217 	ldw	r2,8(r6)
    235c:	defffe04 	addi	sp,sp,-8
    2360:	dc000015 	stw	r16,0(sp)
    2364:	dfc00115 	stw	ra,4(sp)
    2368:	3021883a 	mov	r16,r6
    236c:	0007883a 	mov	r3,zero
    2370:	1000061e 	bne	r2,zero,238c <__sprint_r+0x34>
    2374:	1805883a 	mov	r2,r3
    2378:	30000115 	stw	zero,4(r6)
    237c:	dfc00117 	ldw	ra,4(sp)
    2380:	dc000017 	ldw	r16,0(sp)
    2384:	dec00204 	addi	sp,sp,8
    2388:	f800283a 	ret
    238c:	000666c0 	call	666c <__sfvwrite_r>
    2390:	1007883a 	mov	r3,r2
    2394:	1805883a 	mov	r2,r3
    2398:	80000115 	stw	zero,4(r16)
    239c:	80000215 	stw	zero,8(r16)
    23a0:	dfc00117 	ldw	ra,4(sp)
    23a4:	dc000017 	ldw	r16,0(sp)
    23a8:	dec00204 	addi	sp,sp,8
    23ac:	f800283a 	ret

000023b0 <___vfprintf_internal_r>:
    23b0:	defea404 	addi	sp,sp,-1392
    23b4:	dd815815 	stw	r22,1376(sp)
    23b8:	dc015215 	stw	r16,1352(sp)
    23bc:	d9c15115 	stw	r7,1348(sp)
    23c0:	dfc15b15 	stw	ra,1388(sp)
    23c4:	df015a15 	stw	fp,1384(sp)
    23c8:	ddc15915 	stw	r23,1380(sp)
    23cc:	dd415715 	stw	r21,1372(sp)
    23d0:	dd015615 	stw	r20,1368(sp)
    23d4:	dcc15515 	stw	r19,1364(sp)
    23d8:	dc815415 	stw	r18,1360(sp)
    23dc:	dc415315 	stw	r17,1356(sp)
    23e0:	282d883a 	mov	r22,r5
    23e4:	3021883a 	mov	r16,r6
    23e8:	d9014f15 	stw	r4,1340(sp)
    23ec:	0006c900 	call	6c90 <_localeconv_r>
    23f0:	10800017 	ldw	r2,0(r2)
    23f4:	d9c15117 	ldw	r7,1348(sp)
    23f8:	d8814915 	stw	r2,1316(sp)
    23fc:	d8814f17 	ldw	r2,1340(sp)
    2400:	10000226 	beq	r2,zero,240c <___vfprintf_internal_r+0x5c>
    2404:	10800e17 	ldw	r2,56(r2)
    2408:	10020d26 	beq	r2,zero,2c40 <___vfprintf_internal_r+0x890>
    240c:	b080030b 	ldhu	r2,12(r22)
    2410:	1080020c 	andi	r2,r2,8
    2414:	10020e26 	beq	r2,zero,2c50 <___vfprintf_internal_r+0x8a0>
    2418:	b0800417 	ldw	r2,16(r22)
    241c:	10020c26 	beq	r2,zero,2c50 <___vfprintf_internal_r+0x8a0>
    2420:	b200030b 	ldhu	r8,12(r22)
    2424:	00800284 	movi	r2,10
    2428:	40c0068c 	andi	r3,r8,26
    242c:	18802f1e 	bne	r3,r2,24ec <___vfprintf_internal_r+0x13c>
    2430:	b080038f 	ldh	r2,14(r22)
    2434:	10002d16 	blt	r2,zero,24ec <___vfprintf_internal_r+0x13c>
    2438:	b240038b 	ldhu	r9,14(r22)
    243c:	b2800717 	ldw	r10,28(r22)
    2440:	b2c00917 	ldw	r11,36(r22)
    2444:	d9014f17 	ldw	r4,1340(sp)
    2448:	dc402904 	addi	r17,sp,164
    244c:	d8804004 	addi	r2,sp,256
    2450:	00c10004 	movi	r3,1024
    2454:	423fff4c 	andi	r8,r8,65533
    2458:	800d883a 	mov	r6,r16
    245c:	880b883a 	mov	r5,r17
    2460:	da002c0d 	sth	r8,176(sp)
    2464:	da402c8d 	sth	r9,178(sp)
    2468:	da803015 	stw	r10,192(sp)
    246c:	dac03215 	stw	r11,200(sp)
    2470:	d8802d15 	stw	r2,180(sp)
    2474:	d8c02e15 	stw	r3,184(sp)
    2478:	d8802915 	stw	r2,164(sp)
    247c:	d8c02b15 	stw	r3,172(sp)
    2480:	d8002f15 	stw	zero,188(sp)
    2484:	00023b00 	call	23b0 <___vfprintf_internal_r>
    2488:	d8814b15 	stw	r2,1324(sp)
    248c:	10000416 	blt	r2,zero,24a0 <___vfprintf_internal_r+0xf0>
    2490:	d9014f17 	ldw	r4,1340(sp)
    2494:	880b883a 	mov	r5,r17
    2498:	0005d3c0 	call	5d3c <_fflush_r>
    249c:	1002321e 	bne	r2,zero,2d68 <___vfprintf_internal_r+0x9b8>
    24a0:	d8802c0b 	ldhu	r2,176(sp)
    24a4:	1080100c 	andi	r2,r2,64
    24a8:	10000326 	beq	r2,zero,24b8 <___vfprintf_internal_r+0x108>
    24ac:	b080030b 	ldhu	r2,12(r22)
    24b0:	10801014 	ori	r2,r2,64
    24b4:	b080030d 	sth	r2,12(r22)
    24b8:	d8814b17 	ldw	r2,1324(sp)
    24bc:	dfc15b17 	ldw	ra,1388(sp)
    24c0:	df015a17 	ldw	fp,1384(sp)
    24c4:	ddc15917 	ldw	r23,1380(sp)
    24c8:	dd815817 	ldw	r22,1376(sp)
    24cc:	dd415717 	ldw	r21,1372(sp)
    24d0:	dd015617 	ldw	r20,1368(sp)
    24d4:	dcc15517 	ldw	r19,1364(sp)
    24d8:	dc815417 	ldw	r18,1360(sp)
    24dc:	dc415317 	ldw	r17,1356(sp)
    24e0:	dc015217 	ldw	r16,1352(sp)
    24e4:	dec15c04 	addi	sp,sp,1392
    24e8:	f800283a 	ret
    24ec:	0005883a 	mov	r2,zero
    24f0:	0007883a 	mov	r3,zero
    24f4:	dd401904 	addi	r21,sp,100
    24f8:	d8814215 	stw	r2,1288(sp)
    24fc:	802f883a 	mov	r23,r16
    2500:	d8c14315 	stw	r3,1292(sp)
    2504:	d8014b15 	stw	zero,1324(sp)
    2508:	d8014815 	stw	zero,1312(sp)
    250c:	d8014415 	stw	zero,1296(sp)
    2510:	d8014715 	stw	zero,1308(sp)
    2514:	dd400c15 	stw	r21,48(sp)
    2518:	d8000e15 	stw	zero,56(sp)
    251c:	d8000d15 	stw	zero,52(sp)
    2520:	b8800007 	ldb	r2,0(r23)
    2524:	10001926 	beq	r2,zero,258c <___vfprintf_internal_r+0x1dc>
    2528:	00c00944 	movi	r3,37
    252c:	10c01726 	beq	r2,r3,258c <___vfprintf_internal_r+0x1dc>
    2530:	b821883a 	mov	r16,r23
    2534:	00000106 	br	253c <___vfprintf_internal_r+0x18c>
    2538:	10c00326 	beq	r2,r3,2548 <___vfprintf_internal_r+0x198>
    253c:	84000044 	addi	r16,r16,1
    2540:	80800007 	ldb	r2,0(r16)
    2544:	103ffc1e 	bne	r2,zero,2538 <___vfprintf_internal_r+0x188>
    2548:	85e7c83a 	sub	r19,r16,r23
    254c:	98000e26 	beq	r19,zero,2588 <___vfprintf_internal_r+0x1d8>
    2550:	dc800e17 	ldw	r18,56(sp)
    2554:	dc400d17 	ldw	r17,52(sp)
    2558:	008001c4 	movi	r2,7
    255c:	94e5883a 	add	r18,r18,r19
    2560:	8c400044 	addi	r17,r17,1
    2564:	adc00015 	stw	r23,0(r21)
    2568:	dc800e15 	stw	r18,56(sp)
    256c:	acc00115 	stw	r19,4(r21)
    2570:	dc400d15 	stw	r17,52(sp)
    2574:	14428b16 	blt	r2,r17,2fa4 <___vfprintf_internal_r+0xbf4>
    2578:	ad400204 	addi	r21,r21,8
    257c:	d9014b17 	ldw	r4,1324(sp)
    2580:	24c9883a 	add	r4,r4,r19
    2584:	d9014b15 	stw	r4,1324(sp)
    2588:	802f883a 	mov	r23,r16
    258c:	b8800007 	ldb	r2,0(r23)
    2590:	10013c26 	beq	r2,zero,2a84 <___vfprintf_internal_r+0x6d4>
    2594:	bdc00044 	addi	r23,r23,1
    2598:	d8000405 	stb	zero,16(sp)
    259c:	b8c00007 	ldb	r3,0(r23)
    25a0:	04ffffc4 	movi	r19,-1
    25a4:	d8014c15 	stw	zero,1328(sp)
    25a8:	d8014a15 	stw	zero,1320(sp)
    25ac:	d8c14d15 	stw	r3,1332(sp)
    25b0:	bdc00044 	addi	r23,r23,1
    25b4:	d9414d17 	ldw	r5,1332(sp)
    25b8:	00801604 	movi	r2,88
    25bc:	28fff804 	addi	r3,r5,-32
    25c0:	10c06036 	bltu	r2,r3,2744 <___vfprintf_internal_r+0x394>
    25c4:	18c5883a 	add	r2,r3,r3
    25c8:	1085883a 	add	r2,r2,r2
    25cc:	00c00034 	movhi	r3,0
    25d0:	18c97804 	addi	r3,r3,9696
    25d4:	10c5883a 	add	r2,r2,r3
    25d8:	11000017 	ldw	r4,0(r2)
    25dc:	2000683a 	jmp	r4
    25e0:	00003554 	movui	zero,213
    25e4:	00002744 	movi	zero,157
    25e8:	00002744 	movi	zero,157
    25ec:	00003540 	call	354 <deposer+0x184>
    25f0:	00002744 	movi	zero,157
    25f4:	00002744 	movi	zero,157
    25f8:	00002744 	movi	zero,157
    25fc:	00002744 	movi	zero,157
    2600:	00002744 	movi	zero,157
    2604:	00002744 	movi	zero,157
    2608:	00003320 	cmpeqi	zero,zero,204
    260c:	00003530 	cmpltui	zero,zero,212
    2610:	00002744 	movi	zero,157
    2614:	00003338 	rdprs	zero,zero,204
    2618:	000035cc 	andi	zero,zero,215
    261c:	00002744 	movi	zero,157
    2620:	000035b8 	rdprs	zero,zero,214
    2624:	00003580 	call	358 <deposer+0x188>
    2628:	00003580 	call	358 <deposer+0x188>
    262c:	00003580 	call	358 <deposer+0x188>
    2630:	00003580 	call	358 <deposer+0x188>
    2634:	00003580 	call	358 <deposer+0x188>
    2638:	00003580 	call	358 <deposer+0x188>
    263c:	00003580 	call	358 <deposer+0x188>
    2640:	00003580 	call	358 <deposer+0x188>
    2644:	00003580 	call	358 <deposer+0x188>
    2648:	00002744 	movi	zero,157
    264c:	00002744 	movi	zero,157
    2650:	00002744 	movi	zero,157
    2654:	00002744 	movi	zero,157
    2658:	00002744 	movi	zero,157
    265c:	00002744 	movi	zero,157
    2660:	00002744 	movi	zero,157
    2664:	00002744 	movi	zero,157
    2668:	00002744 	movi	zero,157
    266c:	00002744 	movi	zero,157
    2670:	00002d9c 	xori	zero,zero,182
    2674:	00003408 	cmpgei	zero,zero,208
    2678:	00002744 	movi	zero,157
    267c:	00003408 	cmpgei	zero,zero,208
    2680:	00002744 	movi	zero,157
    2684:	00002744 	movi	zero,157
    2688:	00002744 	movi	zero,157
    268c:	00002744 	movi	zero,157
    2690:	0000356c 	andhi	zero,zero,213
    2694:	00002744 	movi	zero,157
    2698:	00002744 	movi	zero,157
    269c:	00002e50 	cmplti	zero,zero,185
    26a0:	00002744 	movi	zero,157
    26a4:	00002744 	movi	zero,157
    26a8:	00002744 	movi	zero,157
    26ac:	00002744 	movi	zero,157
    26b0:	00002744 	movi	zero,157
    26b4:	00002e9c 	xori	zero,zero,186
    26b8:	00002744 	movi	zero,157
    26bc:	00002744 	movi	zero,157
    26c0:	000034bc 	xorhi	zero,zero,210
    26c4:	00002744 	movi	zero,157
    26c8:	00002744 	movi	zero,157
    26cc:	00002744 	movi	zero,157
    26d0:	00002744 	movi	zero,157
    26d4:	00002744 	movi	zero,157
    26d8:	00002744 	movi	zero,157
    26dc:	00002744 	movi	zero,157
    26e0:	00002744 	movi	zero,157
    26e4:	00002744 	movi	zero,157
    26e8:	00002744 	movi	zero,157
    26ec:	00003490 	cmplti	zero,zero,210
    26f0:	00002da8 	cmpgeui	zero,zero,182
    26f4:	00003408 	cmpgei	zero,zero,208
    26f8:	00003408 	cmpgei	zero,zero,208
    26fc:	00003408 	cmpgei	zero,zero,208
    2700:	000033f4 	movhi	zero,207
    2704:	00002da8 	cmpgeui	zero,zero,182
    2708:	00002744 	movi	zero,157
    270c:	00002744 	movi	zero,157
    2710:	0000337c 	xorhi	zero,zero,205
    2714:	00002744 	movi	zero,157
    2718:	0000334c 	andi	zero,zero,205
    271c:	00002e5c 	xori	zero,zero,185
    2720:	000033ac 	andhi	zero,zero,206
    2724:	00003398 	cmpnei	zero,zero,206
    2728:	00002744 	movi	zero,157
    272c:	00003628 	cmpgeui	zero,zero,216
    2730:	00002744 	movi	zero,157
    2734:	00002ea8 	cmpgeui	zero,zero,186
    2738:	00002744 	movi	zero,157
    273c:	00002744 	movi	zero,157
    2740:	00003520 	cmpeqi	zero,zero,212
    2744:	d9014d17 	ldw	r4,1332(sp)
    2748:	2000ce26 	beq	r4,zero,2a84 <___vfprintf_internal_r+0x6d4>
    274c:	01400044 	movi	r5,1
    2750:	d9800f04 	addi	r6,sp,60
    2754:	d9c14015 	stw	r7,1280(sp)
    2758:	d9414515 	stw	r5,1300(sp)
    275c:	d9814115 	stw	r6,1284(sp)
    2760:	280f883a 	mov	r7,r5
    2764:	d9000f05 	stb	r4,60(sp)
    2768:	d8000405 	stb	zero,16(sp)
    276c:	d8014615 	stw	zero,1304(sp)
    2770:	d8c14c17 	ldw	r3,1328(sp)
    2774:	1880008c 	andi	r2,r3,2
    2778:	1005003a 	cmpeq	r2,r2,zero
    277c:	d8815015 	stw	r2,1344(sp)
    2780:	1000031e 	bne	r2,zero,2790 <___vfprintf_internal_r+0x3e0>
    2784:	d9014517 	ldw	r4,1300(sp)
    2788:	21000084 	addi	r4,r4,2
    278c:	d9014515 	stw	r4,1300(sp)
    2790:	d9414c17 	ldw	r5,1328(sp)
    2794:	2940210c 	andi	r5,r5,132
    2798:	d9414e15 	stw	r5,1336(sp)
    279c:	28002d1e 	bne	r5,zero,2854 <___vfprintf_internal_r+0x4a4>
    27a0:	d9814a17 	ldw	r6,1320(sp)
    27a4:	d8814517 	ldw	r2,1300(sp)
    27a8:	30a1c83a 	sub	r16,r6,r2
    27ac:	0400290e 	bge	zero,r16,2854 <___vfprintf_internal_r+0x4a4>
    27b0:	00800404 	movi	r2,16
    27b4:	1404580e 	bge	r2,r16,3918 <___vfprintf_internal_r+0x1568>
    27b8:	dc800e17 	ldw	r18,56(sp)
    27bc:	dc400d17 	ldw	r17,52(sp)
    27c0:	1027883a 	mov	r19,r2
    27c4:	07000074 	movhi	fp,1
    27c8:	e7372a84 	addi	fp,fp,-9046
    27cc:	050001c4 	movi	r20,7
    27d0:	00000306 	br	27e0 <___vfprintf_internal_r+0x430>
    27d4:	843ffc04 	addi	r16,r16,-16
    27d8:	ad400204 	addi	r21,r21,8
    27dc:	9c00130e 	bge	r19,r16,282c <___vfprintf_internal_r+0x47c>
    27e0:	94800404 	addi	r18,r18,16
    27e4:	8c400044 	addi	r17,r17,1
    27e8:	af000015 	stw	fp,0(r21)
    27ec:	acc00115 	stw	r19,4(r21)
    27f0:	dc800e15 	stw	r18,56(sp)
    27f4:	dc400d15 	stw	r17,52(sp)
    27f8:	a47ff60e 	bge	r20,r17,27d4 <___vfprintf_internal_r+0x424>
    27fc:	d9014f17 	ldw	r4,1340(sp)
    2800:	b00b883a 	mov	r5,r22
    2804:	d9800c04 	addi	r6,sp,48
    2808:	d9c15115 	stw	r7,1348(sp)
    280c:	00023580 	call	2358 <__sprint_r>
    2810:	d9c15117 	ldw	r7,1348(sp)
    2814:	10009e1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2818:	843ffc04 	addi	r16,r16,-16
    281c:	dc800e17 	ldw	r18,56(sp)
    2820:	dc400d17 	ldw	r17,52(sp)
    2824:	dd401904 	addi	r21,sp,100
    2828:	9c3fed16 	blt	r19,r16,27e0 <___vfprintf_internal_r+0x430>
    282c:	9425883a 	add	r18,r18,r16
    2830:	8c400044 	addi	r17,r17,1
    2834:	008001c4 	movi	r2,7
    2838:	af000015 	stw	fp,0(r21)
    283c:	ac000115 	stw	r16,4(r21)
    2840:	dc800e15 	stw	r18,56(sp)
    2844:	dc400d15 	stw	r17,52(sp)
    2848:	1441f516 	blt	r2,r17,3020 <___vfprintf_internal_r+0xc70>
    284c:	ad400204 	addi	r21,r21,8
    2850:	00000206 	br	285c <___vfprintf_internal_r+0x4ac>
    2854:	dc800e17 	ldw	r18,56(sp)
    2858:	dc400d17 	ldw	r17,52(sp)
    285c:	d8800407 	ldb	r2,16(sp)
    2860:	10000b26 	beq	r2,zero,2890 <___vfprintf_internal_r+0x4e0>
    2864:	00800044 	movi	r2,1
    2868:	94800044 	addi	r18,r18,1
    286c:	8c400044 	addi	r17,r17,1
    2870:	a8800115 	stw	r2,4(r21)
    2874:	d8c00404 	addi	r3,sp,16
    2878:	008001c4 	movi	r2,7
    287c:	a8c00015 	stw	r3,0(r21)
    2880:	dc800e15 	stw	r18,56(sp)
    2884:	dc400d15 	stw	r17,52(sp)
    2888:	1441da16 	blt	r2,r17,2ff4 <___vfprintf_internal_r+0xc44>
    288c:	ad400204 	addi	r21,r21,8
    2890:	d9015017 	ldw	r4,1344(sp)
    2894:	20000b1e 	bne	r4,zero,28c4 <___vfprintf_internal_r+0x514>
    2898:	d8800444 	addi	r2,sp,17
    289c:	94800084 	addi	r18,r18,2
    28a0:	8c400044 	addi	r17,r17,1
    28a4:	a8800015 	stw	r2,0(r21)
    28a8:	00c00084 	movi	r3,2
    28ac:	008001c4 	movi	r2,7
    28b0:	a8c00115 	stw	r3,4(r21)
    28b4:	dc800e15 	stw	r18,56(sp)
    28b8:	dc400d15 	stw	r17,52(sp)
    28bc:	1441c216 	blt	r2,r17,2fc8 <___vfprintf_internal_r+0xc18>
    28c0:	ad400204 	addi	r21,r21,8
    28c4:	d9414e17 	ldw	r5,1336(sp)
    28c8:	00802004 	movi	r2,128
    28cc:	2880b126 	beq	r5,r2,2b94 <___vfprintf_internal_r+0x7e4>
    28d0:	d8c14617 	ldw	r3,1304(sp)
    28d4:	19e1c83a 	sub	r16,r3,r7
    28d8:	0400260e 	bge	zero,r16,2974 <___vfprintf_internal_r+0x5c4>
    28dc:	00800404 	movi	r2,16
    28e0:	1403c90e 	bge	r2,r16,3808 <___vfprintf_internal_r+0x1458>
    28e4:	1027883a 	mov	r19,r2
    28e8:	07000074 	movhi	fp,1
    28ec:	e7372684 	addi	fp,fp,-9062
    28f0:	050001c4 	movi	r20,7
    28f4:	00000306 	br	2904 <___vfprintf_internal_r+0x554>
    28f8:	843ffc04 	addi	r16,r16,-16
    28fc:	ad400204 	addi	r21,r21,8
    2900:	9c00130e 	bge	r19,r16,2950 <___vfprintf_internal_r+0x5a0>
    2904:	94800404 	addi	r18,r18,16
    2908:	8c400044 	addi	r17,r17,1
    290c:	af000015 	stw	fp,0(r21)
    2910:	acc00115 	stw	r19,4(r21)
    2914:	dc800e15 	stw	r18,56(sp)
    2918:	dc400d15 	stw	r17,52(sp)
    291c:	a47ff60e 	bge	r20,r17,28f8 <___vfprintf_internal_r+0x548>
    2920:	d9014f17 	ldw	r4,1340(sp)
    2924:	b00b883a 	mov	r5,r22
    2928:	d9800c04 	addi	r6,sp,48
    292c:	d9c15115 	stw	r7,1348(sp)
    2930:	00023580 	call	2358 <__sprint_r>
    2934:	d9c15117 	ldw	r7,1348(sp)
    2938:	1000551e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    293c:	843ffc04 	addi	r16,r16,-16
    2940:	dc800e17 	ldw	r18,56(sp)
    2944:	dc400d17 	ldw	r17,52(sp)
    2948:	dd401904 	addi	r21,sp,100
    294c:	9c3fed16 	blt	r19,r16,2904 <___vfprintf_internal_r+0x554>
    2950:	9425883a 	add	r18,r18,r16
    2954:	8c400044 	addi	r17,r17,1
    2958:	008001c4 	movi	r2,7
    295c:	af000015 	stw	fp,0(r21)
    2960:	ac000115 	stw	r16,4(r21)
    2964:	dc800e15 	stw	r18,56(sp)
    2968:	dc400d15 	stw	r17,52(sp)
    296c:	14418216 	blt	r2,r17,2f78 <___vfprintf_internal_r+0xbc8>
    2970:	ad400204 	addi	r21,r21,8
    2974:	d9014c17 	ldw	r4,1328(sp)
    2978:	2080400c 	andi	r2,r4,256
    297c:	10004a1e 	bne	r2,zero,2aa8 <___vfprintf_internal_r+0x6f8>
    2980:	d9414117 	ldw	r5,1284(sp)
    2984:	91e5883a 	add	r18,r18,r7
    2988:	8c400044 	addi	r17,r17,1
    298c:	008001c4 	movi	r2,7
    2990:	a9400015 	stw	r5,0(r21)
    2994:	a9c00115 	stw	r7,4(r21)
    2998:	dc800e15 	stw	r18,56(sp)
    299c:	dc400d15 	stw	r17,52(sp)
    29a0:	14416716 	blt	r2,r17,2f40 <___vfprintf_internal_r+0xb90>
    29a4:	a8c00204 	addi	r3,r21,8
    29a8:	d9814c17 	ldw	r6,1328(sp)
    29ac:	3080010c 	andi	r2,r6,4
    29b0:	10002826 	beq	r2,zero,2a54 <___vfprintf_internal_r+0x6a4>
    29b4:	d8814a17 	ldw	r2,1320(sp)
    29b8:	d9014517 	ldw	r4,1300(sp)
    29bc:	1121c83a 	sub	r16,r2,r4
    29c0:	0400240e 	bge	zero,r16,2a54 <___vfprintf_internal_r+0x6a4>
    29c4:	00800404 	movi	r2,16
    29c8:	14044f0e 	bge	r2,r16,3b08 <___vfprintf_internal_r+0x1758>
    29cc:	dc400d17 	ldw	r17,52(sp)
    29d0:	1027883a 	mov	r19,r2
    29d4:	07000074 	movhi	fp,1
    29d8:	e7372a84 	addi	fp,fp,-9046
    29dc:	050001c4 	movi	r20,7
    29e0:	00000306 	br	29f0 <___vfprintf_internal_r+0x640>
    29e4:	843ffc04 	addi	r16,r16,-16
    29e8:	18c00204 	addi	r3,r3,8
    29ec:	9c00110e 	bge	r19,r16,2a34 <___vfprintf_internal_r+0x684>
    29f0:	94800404 	addi	r18,r18,16
    29f4:	8c400044 	addi	r17,r17,1
    29f8:	1f000015 	stw	fp,0(r3)
    29fc:	1cc00115 	stw	r19,4(r3)
    2a00:	dc800e15 	stw	r18,56(sp)
    2a04:	dc400d15 	stw	r17,52(sp)
    2a08:	a47ff60e 	bge	r20,r17,29e4 <___vfprintf_internal_r+0x634>
    2a0c:	d9014f17 	ldw	r4,1340(sp)
    2a10:	b00b883a 	mov	r5,r22
    2a14:	d9800c04 	addi	r6,sp,48
    2a18:	00023580 	call	2358 <__sprint_r>
    2a1c:	10001c1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2a20:	843ffc04 	addi	r16,r16,-16
    2a24:	dc800e17 	ldw	r18,56(sp)
    2a28:	dc400d17 	ldw	r17,52(sp)
    2a2c:	d8c01904 	addi	r3,sp,100
    2a30:	9c3fef16 	blt	r19,r16,29f0 <___vfprintf_internal_r+0x640>
    2a34:	9425883a 	add	r18,r18,r16
    2a38:	8c400044 	addi	r17,r17,1
    2a3c:	008001c4 	movi	r2,7
    2a40:	1f000015 	stw	fp,0(r3)
    2a44:	1c000115 	stw	r16,4(r3)
    2a48:	dc800e15 	stw	r18,56(sp)
    2a4c:	dc400d15 	stw	r17,52(sp)
    2a50:	1440cb16 	blt	r2,r17,2d80 <___vfprintf_internal_r+0x9d0>
    2a54:	d8814a17 	ldw	r2,1320(sp)
    2a58:	d9414517 	ldw	r5,1300(sp)
    2a5c:	1140010e 	bge	r2,r5,2a64 <___vfprintf_internal_r+0x6b4>
    2a60:	2805883a 	mov	r2,r5
    2a64:	d9814b17 	ldw	r6,1324(sp)
    2a68:	308d883a 	add	r6,r6,r2
    2a6c:	d9814b15 	stw	r6,1324(sp)
    2a70:	90013b1e 	bne	r18,zero,2f60 <___vfprintf_internal_r+0xbb0>
    2a74:	d9c14017 	ldw	r7,1280(sp)
    2a78:	dd401904 	addi	r21,sp,100
    2a7c:	d8000d15 	stw	zero,52(sp)
    2a80:	003ea706 	br	2520 <___vfprintf_internal_r+0x170>
    2a84:	d8800e17 	ldw	r2,56(sp)
    2a88:	10053f1e 	bne	r2,zero,3f88 <___vfprintf_internal_r+0x1bd8>
    2a8c:	d8000d15 	stw	zero,52(sp)
    2a90:	b080030b 	ldhu	r2,12(r22)
    2a94:	1080100c 	andi	r2,r2,64
    2a98:	103e8726 	beq	r2,zero,24b8 <___vfprintf_internal_r+0x108>
    2a9c:	00bfffc4 	movi	r2,-1
    2aa0:	d8814b15 	stw	r2,1324(sp)
    2aa4:	003e8406 	br	24b8 <___vfprintf_internal_r+0x108>
    2aa8:	d9814d17 	ldw	r6,1332(sp)
    2aac:	00801944 	movi	r2,101
    2ab0:	11806e16 	blt	r2,r6,2c6c <___vfprintf_internal_r+0x8bc>
    2ab4:	d9414717 	ldw	r5,1308(sp)
    2ab8:	00c00044 	movi	r3,1
    2abc:	1943430e 	bge	r3,r5,37cc <___vfprintf_internal_r+0x141c>
    2ac0:	d8814117 	ldw	r2,1284(sp)
    2ac4:	94800044 	addi	r18,r18,1
    2ac8:	8c400044 	addi	r17,r17,1
    2acc:	a8800015 	stw	r2,0(r21)
    2ad0:	008001c4 	movi	r2,7
    2ad4:	a8c00115 	stw	r3,4(r21)
    2ad8:	dc800e15 	stw	r18,56(sp)
    2adc:	dc400d15 	stw	r17,52(sp)
    2ae0:	1441ca16 	blt	r2,r17,320c <___vfprintf_internal_r+0xe5c>
    2ae4:	a8c00204 	addi	r3,r21,8
    2ae8:	d9014917 	ldw	r4,1316(sp)
    2aec:	00800044 	movi	r2,1
    2af0:	94800044 	addi	r18,r18,1
    2af4:	8c400044 	addi	r17,r17,1
    2af8:	18800115 	stw	r2,4(r3)
    2afc:	008001c4 	movi	r2,7
    2b00:	19000015 	stw	r4,0(r3)
    2b04:	dc800e15 	stw	r18,56(sp)
    2b08:	dc400d15 	stw	r17,52(sp)
    2b0c:	1441b616 	blt	r2,r17,31e8 <___vfprintf_internal_r+0xe38>
    2b10:	1cc00204 	addi	r19,r3,8
    2b14:	d9014217 	ldw	r4,1288(sp)
    2b18:	d9414317 	ldw	r5,1292(sp)
    2b1c:	000d883a 	mov	r6,zero
    2b20:	000f883a 	mov	r7,zero
    2b24:	000a5640 	call	a564 <__nedf2>
    2b28:	10017426 	beq	r2,zero,30fc <___vfprintf_internal_r+0xd4c>
    2b2c:	d9414717 	ldw	r5,1308(sp)
    2b30:	d9814117 	ldw	r6,1284(sp)
    2b34:	8c400044 	addi	r17,r17,1
    2b38:	2c85883a 	add	r2,r5,r18
    2b3c:	14bfffc4 	addi	r18,r2,-1
    2b40:	28bfffc4 	addi	r2,r5,-1
    2b44:	30c00044 	addi	r3,r6,1
    2b48:	98800115 	stw	r2,4(r19)
    2b4c:	008001c4 	movi	r2,7
    2b50:	98c00015 	stw	r3,0(r19)
    2b54:	dc800e15 	stw	r18,56(sp)
    2b58:	dc400d15 	stw	r17,52(sp)
    2b5c:	14418e16 	blt	r2,r17,3198 <___vfprintf_internal_r+0xde8>
    2b60:	9cc00204 	addi	r19,r19,8
    2b64:	d9414817 	ldw	r5,1312(sp)
    2b68:	d8800804 	addi	r2,sp,32
    2b6c:	8c400044 	addi	r17,r17,1
    2b70:	9165883a 	add	r18,r18,r5
    2b74:	98800015 	stw	r2,0(r19)
    2b78:	008001c4 	movi	r2,7
    2b7c:	99400115 	stw	r5,4(r19)
    2b80:	dc800e15 	stw	r18,56(sp)
    2b84:	dc400d15 	stw	r17,52(sp)
    2b88:	1440ed16 	blt	r2,r17,2f40 <___vfprintf_internal_r+0xb90>
    2b8c:	98c00204 	addi	r3,r19,8
    2b90:	003f8506 	br	29a8 <___vfprintf_internal_r+0x5f8>
    2b94:	d9814a17 	ldw	r6,1320(sp)
    2b98:	d8814517 	ldw	r2,1300(sp)
    2b9c:	30a1c83a 	sub	r16,r6,r2
    2ba0:	043f4b0e 	bge	zero,r16,28d0 <___vfprintf_internal_r+0x520>
    2ba4:	00800404 	movi	r2,16
    2ba8:	1404340e 	bge	r2,r16,3c7c <___vfprintf_internal_r+0x18cc>
    2bac:	1027883a 	mov	r19,r2
    2bb0:	07000074 	movhi	fp,1
    2bb4:	e7372684 	addi	fp,fp,-9062
    2bb8:	050001c4 	movi	r20,7
    2bbc:	00000306 	br	2bcc <___vfprintf_internal_r+0x81c>
    2bc0:	843ffc04 	addi	r16,r16,-16
    2bc4:	ad400204 	addi	r21,r21,8
    2bc8:	9c00130e 	bge	r19,r16,2c18 <___vfprintf_internal_r+0x868>
    2bcc:	94800404 	addi	r18,r18,16
    2bd0:	8c400044 	addi	r17,r17,1
    2bd4:	af000015 	stw	fp,0(r21)
    2bd8:	acc00115 	stw	r19,4(r21)
    2bdc:	dc800e15 	stw	r18,56(sp)
    2be0:	dc400d15 	stw	r17,52(sp)
    2be4:	a47ff60e 	bge	r20,r17,2bc0 <___vfprintf_internal_r+0x810>
    2be8:	d9014f17 	ldw	r4,1340(sp)
    2bec:	b00b883a 	mov	r5,r22
    2bf0:	d9800c04 	addi	r6,sp,48
    2bf4:	d9c15115 	stw	r7,1348(sp)
    2bf8:	00023580 	call	2358 <__sprint_r>
    2bfc:	d9c15117 	ldw	r7,1348(sp)
    2c00:	103fa31e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2c04:	843ffc04 	addi	r16,r16,-16
    2c08:	dc800e17 	ldw	r18,56(sp)
    2c0c:	dc400d17 	ldw	r17,52(sp)
    2c10:	dd401904 	addi	r21,sp,100
    2c14:	9c3fed16 	blt	r19,r16,2bcc <___vfprintf_internal_r+0x81c>
    2c18:	9425883a 	add	r18,r18,r16
    2c1c:	8c400044 	addi	r17,r17,1
    2c20:	008001c4 	movi	r2,7
    2c24:	af000015 	stw	fp,0(r21)
    2c28:	ac000115 	stw	r16,4(r21)
    2c2c:	dc800e15 	stw	r18,56(sp)
    2c30:	dc400d15 	stw	r17,52(sp)
    2c34:	14416116 	blt	r2,r17,31bc <___vfprintf_internal_r+0xe0c>
    2c38:	ad400204 	addi	r21,r21,8
    2c3c:	003f2406 	br	28d0 <___vfprintf_internal_r+0x520>
    2c40:	d9014f17 	ldw	r4,1340(sp)
    2c44:	0005fd40 	call	5fd4 <__sinit>
    2c48:	d9c15117 	ldw	r7,1348(sp)
    2c4c:	003def06 	br	240c <___vfprintf_internal_r+0x5c>
    2c50:	d9014f17 	ldw	r4,1340(sp)
    2c54:	b00b883a 	mov	r5,r22
    2c58:	d9c15115 	stw	r7,1348(sp)
    2c5c:	00042800 	call	4280 <__swsetup_r>
    2c60:	d9c15117 	ldw	r7,1348(sp)
    2c64:	103dee26 	beq	r2,zero,2420 <___vfprintf_internal_r+0x70>
    2c68:	003f8c06 	br	2a9c <___vfprintf_internal_r+0x6ec>
    2c6c:	d9014217 	ldw	r4,1288(sp)
    2c70:	d9414317 	ldw	r5,1292(sp)
    2c74:	000d883a 	mov	r6,zero
    2c78:	000f883a 	mov	r7,zero
    2c7c:	000a4dc0 	call	a4dc <__eqdf2>
    2c80:	1000f21e 	bne	r2,zero,304c <___vfprintf_internal_r+0xc9c>
    2c84:	00800074 	movhi	r2,1
    2c88:	10b72604 	addi	r2,r2,-9064
    2c8c:	94800044 	addi	r18,r18,1
    2c90:	8c400044 	addi	r17,r17,1
    2c94:	a8800015 	stw	r2,0(r21)
    2c98:	00c00044 	movi	r3,1
    2c9c:	008001c4 	movi	r2,7
    2ca0:	a8c00115 	stw	r3,4(r21)
    2ca4:	dc800e15 	stw	r18,56(sp)
    2ca8:	dc400d15 	stw	r17,52(sp)
    2cac:	1442fa16 	blt	r2,r17,3898 <___vfprintf_internal_r+0x14e8>
    2cb0:	a8c00204 	addi	r3,r21,8
    2cb4:	d8800517 	ldw	r2,20(sp)
    2cb8:	d9014717 	ldw	r4,1308(sp)
    2cbc:	11015c0e 	bge	r2,r4,3230 <___vfprintf_internal_r+0xe80>
    2cc0:	dc400d17 	ldw	r17,52(sp)
    2cc4:	d9814917 	ldw	r6,1316(sp)
    2cc8:	00800044 	movi	r2,1
    2ccc:	94800044 	addi	r18,r18,1
    2cd0:	8c400044 	addi	r17,r17,1
    2cd4:	18800115 	stw	r2,4(r3)
    2cd8:	008001c4 	movi	r2,7
    2cdc:	19800015 	stw	r6,0(r3)
    2ce0:	dc800e15 	stw	r18,56(sp)
    2ce4:	dc400d15 	stw	r17,52(sp)
    2ce8:	14431016 	blt	r2,r17,392c <___vfprintf_internal_r+0x157c>
    2cec:	18c00204 	addi	r3,r3,8
    2cf0:	d8814717 	ldw	r2,1308(sp)
    2cf4:	143fffc4 	addi	r16,r2,-1
    2cf8:	043f2b0e 	bge	zero,r16,29a8 <___vfprintf_internal_r+0x5f8>
    2cfc:	00800404 	movi	r2,16
    2d00:	1402a20e 	bge	r2,r16,378c <___vfprintf_internal_r+0x13dc>
    2d04:	dc400d17 	ldw	r17,52(sp)
    2d08:	1027883a 	mov	r19,r2
    2d0c:	07000074 	movhi	fp,1
    2d10:	e7372684 	addi	fp,fp,-9062
    2d14:	050001c4 	movi	r20,7
    2d18:	00000306 	br	2d28 <___vfprintf_internal_r+0x978>
    2d1c:	18c00204 	addi	r3,r3,8
    2d20:	843ffc04 	addi	r16,r16,-16
    2d24:	9c029c0e 	bge	r19,r16,3798 <___vfprintf_internal_r+0x13e8>
    2d28:	94800404 	addi	r18,r18,16
    2d2c:	8c400044 	addi	r17,r17,1
    2d30:	1f000015 	stw	fp,0(r3)
    2d34:	1cc00115 	stw	r19,4(r3)
    2d38:	dc800e15 	stw	r18,56(sp)
    2d3c:	dc400d15 	stw	r17,52(sp)
    2d40:	a47ff60e 	bge	r20,r17,2d1c <___vfprintf_internal_r+0x96c>
    2d44:	d9014f17 	ldw	r4,1340(sp)
    2d48:	b00b883a 	mov	r5,r22
    2d4c:	d9800c04 	addi	r6,sp,48
    2d50:	00023580 	call	2358 <__sprint_r>
    2d54:	103f4e1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2d58:	dc800e17 	ldw	r18,56(sp)
    2d5c:	dc400d17 	ldw	r17,52(sp)
    2d60:	d8c01904 	addi	r3,sp,100
    2d64:	003fee06 	br	2d20 <___vfprintf_internal_r+0x970>
    2d68:	d8802c0b 	ldhu	r2,176(sp)
    2d6c:	00ffffc4 	movi	r3,-1
    2d70:	d8c14b15 	stw	r3,1324(sp)
    2d74:	1080100c 	andi	r2,r2,64
    2d78:	103dcc1e 	bne	r2,zero,24ac <___vfprintf_internal_r+0xfc>
    2d7c:	003dce06 	br	24b8 <___vfprintf_internal_r+0x108>
    2d80:	d9014f17 	ldw	r4,1340(sp)
    2d84:	b00b883a 	mov	r5,r22
    2d88:	d9800c04 	addi	r6,sp,48
    2d8c:	00023580 	call	2358 <__sprint_r>
    2d90:	103f3f1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2d94:	dc800e17 	ldw	r18,56(sp)
    2d98:	003f2e06 	br	2a54 <___vfprintf_internal_r+0x6a4>
    2d9c:	d9414c17 	ldw	r5,1328(sp)
    2da0:	29400414 	ori	r5,r5,16
    2da4:	d9414c15 	stw	r5,1328(sp)
    2da8:	d9814c17 	ldw	r6,1328(sp)
    2dac:	3080080c 	andi	r2,r6,32
    2db0:	10014f1e 	bne	r2,zero,32f0 <___vfprintf_internal_r+0xf40>
    2db4:	d8c14c17 	ldw	r3,1328(sp)
    2db8:	1880040c 	andi	r2,r3,16
    2dbc:	1002ea1e 	bne	r2,zero,3968 <___vfprintf_internal_r+0x15b8>
    2dc0:	d9014c17 	ldw	r4,1328(sp)
    2dc4:	2080100c 	andi	r2,r4,64
    2dc8:	1002e726 	beq	r2,zero,3968 <___vfprintf_internal_r+0x15b8>
    2dcc:	3880000f 	ldh	r2,0(r7)
    2dd0:	39c00104 	addi	r7,r7,4
    2dd4:	d9c14015 	stw	r7,1280(sp)
    2dd8:	1023d7fa 	srai	r17,r2,31
    2ddc:	1021883a 	mov	r16,r2
    2de0:	88037216 	blt	r17,zero,3bac <___vfprintf_internal_r+0x17fc>
    2de4:	01000044 	movi	r4,1
    2de8:	98000416 	blt	r19,zero,2dfc <___vfprintf_internal_r+0xa4c>
    2dec:	d8c14c17 	ldw	r3,1328(sp)
    2df0:	00bfdfc4 	movi	r2,-129
    2df4:	1886703a 	and	r3,r3,r2
    2df8:	d8c14c15 	stw	r3,1328(sp)
    2dfc:	8444b03a 	or	r2,r16,r17
    2e00:	1002261e 	bne	r2,zero,369c <___vfprintf_internal_r+0x12ec>
    2e04:	9802251e 	bne	r19,zero,369c <___vfprintf_internal_r+0x12ec>
    2e08:	20803fcc 	andi	r2,r4,255
    2e0c:	10029b26 	beq	r2,zero,387c <___vfprintf_internal_r+0x14cc>
    2e10:	d8c01904 	addi	r3,sp,100
    2e14:	dd000f04 	addi	r20,sp,60
    2e18:	d8c14115 	stw	r3,1284(sp)
    2e1c:	d8c14117 	ldw	r3,1284(sp)
    2e20:	dcc14515 	stw	r19,1300(sp)
    2e24:	a0c5c83a 	sub	r2,r20,r3
    2e28:	11c00a04 	addi	r7,r2,40
    2e2c:	99c0010e 	bge	r19,r7,2e34 <___vfprintf_internal_r+0xa84>
    2e30:	d9c14515 	stw	r7,1300(sp)
    2e34:	dcc14615 	stw	r19,1304(sp)
    2e38:	d8800407 	ldb	r2,16(sp)
    2e3c:	103e4c26 	beq	r2,zero,2770 <___vfprintf_internal_r+0x3c0>
    2e40:	d8814517 	ldw	r2,1300(sp)
    2e44:	10800044 	addi	r2,r2,1
    2e48:	d8814515 	stw	r2,1300(sp)
    2e4c:	003e4806 	br	2770 <___vfprintf_internal_r+0x3c0>
    2e50:	d9814c17 	ldw	r6,1328(sp)
    2e54:	31800414 	ori	r6,r6,16
    2e58:	d9814c15 	stw	r6,1328(sp)
    2e5c:	d8c14c17 	ldw	r3,1328(sp)
    2e60:	1880080c 	andi	r2,r3,32
    2e64:	1001271e 	bne	r2,zero,3304 <___vfprintf_internal_r+0xf54>
    2e68:	d9414c17 	ldw	r5,1328(sp)
    2e6c:	2880040c 	andi	r2,r5,16
    2e70:	1002b61e 	bne	r2,zero,394c <___vfprintf_internal_r+0x159c>
    2e74:	d9814c17 	ldw	r6,1328(sp)
    2e78:	3080100c 	andi	r2,r6,64
    2e7c:	1002b326 	beq	r2,zero,394c <___vfprintf_internal_r+0x159c>
    2e80:	3c00000b 	ldhu	r16,0(r7)
    2e84:	0009883a 	mov	r4,zero
    2e88:	39c00104 	addi	r7,r7,4
    2e8c:	0023883a 	mov	r17,zero
    2e90:	d9c14015 	stw	r7,1280(sp)
    2e94:	d8000405 	stb	zero,16(sp)
    2e98:	003fd306 	br	2de8 <___vfprintf_internal_r+0xa38>
    2e9c:	d9014c17 	ldw	r4,1328(sp)
    2ea0:	21000414 	ori	r4,r4,16
    2ea4:	d9014c15 	stw	r4,1328(sp)
    2ea8:	d9414c17 	ldw	r5,1328(sp)
    2eac:	2880080c 	andi	r2,r5,32
    2eb0:	1001081e 	bne	r2,zero,32d4 <___vfprintf_internal_r+0xf24>
    2eb4:	d8c14c17 	ldw	r3,1328(sp)
    2eb8:	1880040c 	andi	r2,r3,16
    2ebc:	1002b01e 	bne	r2,zero,3980 <___vfprintf_internal_r+0x15d0>
    2ec0:	d9014c17 	ldw	r4,1328(sp)
    2ec4:	2080100c 	andi	r2,r4,64
    2ec8:	1002ad26 	beq	r2,zero,3980 <___vfprintf_internal_r+0x15d0>
    2ecc:	3c00000b 	ldhu	r16,0(r7)
    2ed0:	01000044 	movi	r4,1
    2ed4:	39c00104 	addi	r7,r7,4
    2ed8:	0023883a 	mov	r17,zero
    2edc:	d9c14015 	stw	r7,1280(sp)
    2ee0:	d8000405 	stb	zero,16(sp)
    2ee4:	003fc006 	br	2de8 <___vfprintf_internal_r+0xa38>
    2ee8:	d9014f17 	ldw	r4,1340(sp)
    2eec:	b00b883a 	mov	r5,r22
    2ef0:	d9800c04 	addi	r6,sp,48
    2ef4:	00023580 	call	2358 <__sprint_r>
    2ef8:	103ee51e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2efc:	dc800e17 	ldw	r18,56(sp)
    2f00:	d8c01904 	addi	r3,sp,100
    2f04:	d9814c17 	ldw	r6,1328(sp)
    2f08:	3080004c 	andi	r2,r6,1
    2f0c:	1005003a 	cmpeq	r2,r2,zero
    2f10:	103ea51e 	bne	r2,zero,29a8 <___vfprintf_internal_r+0x5f8>
    2f14:	00800044 	movi	r2,1
    2f18:	dc400d17 	ldw	r17,52(sp)
    2f1c:	18800115 	stw	r2,4(r3)
    2f20:	d8814917 	ldw	r2,1316(sp)
    2f24:	94800044 	addi	r18,r18,1
    2f28:	8c400044 	addi	r17,r17,1
    2f2c:	18800015 	stw	r2,0(r3)
    2f30:	008001c4 	movi	r2,7
    2f34:	dc800e15 	stw	r18,56(sp)
    2f38:	dc400d15 	stw	r17,52(sp)
    2f3c:	14421e0e 	bge	r2,r17,37b8 <___vfprintf_internal_r+0x1408>
    2f40:	d9014f17 	ldw	r4,1340(sp)
    2f44:	b00b883a 	mov	r5,r22
    2f48:	d9800c04 	addi	r6,sp,48
    2f4c:	00023580 	call	2358 <__sprint_r>
    2f50:	103ecf1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2f54:	dc800e17 	ldw	r18,56(sp)
    2f58:	d8c01904 	addi	r3,sp,100
    2f5c:	003e9206 	br	29a8 <___vfprintf_internal_r+0x5f8>
    2f60:	d9014f17 	ldw	r4,1340(sp)
    2f64:	b00b883a 	mov	r5,r22
    2f68:	d9800c04 	addi	r6,sp,48
    2f6c:	00023580 	call	2358 <__sprint_r>
    2f70:	103ec026 	beq	r2,zero,2a74 <___vfprintf_internal_r+0x6c4>
    2f74:	003ec606 	br	2a90 <___vfprintf_internal_r+0x6e0>
    2f78:	d9014f17 	ldw	r4,1340(sp)
    2f7c:	b00b883a 	mov	r5,r22
    2f80:	d9800c04 	addi	r6,sp,48
    2f84:	d9c15115 	stw	r7,1348(sp)
    2f88:	00023580 	call	2358 <__sprint_r>
    2f8c:	d9c15117 	ldw	r7,1348(sp)
    2f90:	103ebf1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2f94:	dc800e17 	ldw	r18,56(sp)
    2f98:	dc400d17 	ldw	r17,52(sp)
    2f9c:	dd401904 	addi	r21,sp,100
    2fa0:	003e7406 	br	2974 <___vfprintf_internal_r+0x5c4>
    2fa4:	d9014f17 	ldw	r4,1340(sp)
    2fa8:	b00b883a 	mov	r5,r22
    2fac:	d9800c04 	addi	r6,sp,48
    2fb0:	d9c15115 	stw	r7,1348(sp)
    2fb4:	00023580 	call	2358 <__sprint_r>
    2fb8:	d9c15117 	ldw	r7,1348(sp)
    2fbc:	103eb41e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2fc0:	dd401904 	addi	r21,sp,100
    2fc4:	003d6d06 	br	257c <___vfprintf_internal_r+0x1cc>
    2fc8:	d9014f17 	ldw	r4,1340(sp)
    2fcc:	b00b883a 	mov	r5,r22
    2fd0:	d9800c04 	addi	r6,sp,48
    2fd4:	d9c15115 	stw	r7,1348(sp)
    2fd8:	00023580 	call	2358 <__sprint_r>
    2fdc:	d9c15117 	ldw	r7,1348(sp)
    2fe0:	103eab1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    2fe4:	dc800e17 	ldw	r18,56(sp)
    2fe8:	dc400d17 	ldw	r17,52(sp)
    2fec:	dd401904 	addi	r21,sp,100
    2ff0:	003e3406 	br	28c4 <___vfprintf_internal_r+0x514>
    2ff4:	d9014f17 	ldw	r4,1340(sp)
    2ff8:	b00b883a 	mov	r5,r22
    2ffc:	d9800c04 	addi	r6,sp,48
    3000:	d9c15115 	stw	r7,1348(sp)
    3004:	00023580 	call	2358 <__sprint_r>
    3008:	d9c15117 	ldw	r7,1348(sp)
    300c:	103ea01e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3010:	dc800e17 	ldw	r18,56(sp)
    3014:	dc400d17 	ldw	r17,52(sp)
    3018:	dd401904 	addi	r21,sp,100
    301c:	003e1c06 	br	2890 <___vfprintf_internal_r+0x4e0>
    3020:	d9014f17 	ldw	r4,1340(sp)
    3024:	b00b883a 	mov	r5,r22
    3028:	d9800c04 	addi	r6,sp,48
    302c:	d9c15115 	stw	r7,1348(sp)
    3030:	00023580 	call	2358 <__sprint_r>
    3034:	d9c15117 	ldw	r7,1348(sp)
    3038:	103e951e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    303c:	dc800e17 	ldw	r18,56(sp)
    3040:	dc400d17 	ldw	r17,52(sp)
    3044:	dd401904 	addi	r21,sp,100
    3048:	003e0406 	br	285c <___vfprintf_internal_r+0x4ac>
    304c:	d9000517 	ldw	r4,20(sp)
    3050:	0102520e 	bge	zero,r4,399c <___vfprintf_internal_r+0x15ec>
    3054:	d9814717 	ldw	r6,1308(sp)
    3058:	21807a16 	blt	r4,r6,3244 <___vfprintf_internal_r+0xe94>
    305c:	d8814117 	ldw	r2,1284(sp)
    3060:	91a5883a 	add	r18,r18,r6
    3064:	8c400044 	addi	r17,r17,1
    3068:	a8800015 	stw	r2,0(r21)
    306c:	008001c4 	movi	r2,7
    3070:	a9800115 	stw	r6,4(r21)
    3074:	dc800e15 	stw	r18,56(sp)
    3078:	dc400d15 	stw	r17,52(sp)
    307c:	1442f616 	blt	r2,r17,3c58 <___vfprintf_internal_r+0x18a8>
    3080:	a8c00204 	addi	r3,r21,8
    3084:	d9414717 	ldw	r5,1308(sp)
    3088:	2161c83a 	sub	r16,r4,r5
    308c:	043f9d0e 	bge	zero,r16,2f04 <___vfprintf_internal_r+0xb54>
    3090:	00800404 	movi	r2,16
    3094:	1402130e 	bge	r2,r16,38e4 <___vfprintf_internal_r+0x1534>
    3098:	dc400d17 	ldw	r17,52(sp)
    309c:	1027883a 	mov	r19,r2
    30a0:	07000074 	movhi	fp,1
    30a4:	e7372684 	addi	fp,fp,-9062
    30a8:	050001c4 	movi	r20,7
    30ac:	00000306 	br	30bc <___vfprintf_internal_r+0xd0c>
    30b0:	18c00204 	addi	r3,r3,8
    30b4:	843ffc04 	addi	r16,r16,-16
    30b8:	9c020d0e 	bge	r19,r16,38f0 <___vfprintf_internal_r+0x1540>
    30bc:	94800404 	addi	r18,r18,16
    30c0:	8c400044 	addi	r17,r17,1
    30c4:	1f000015 	stw	fp,0(r3)
    30c8:	1cc00115 	stw	r19,4(r3)
    30cc:	dc800e15 	stw	r18,56(sp)
    30d0:	dc400d15 	stw	r17,52(sp)
    30d4:	a47ff60e 	bge	r20,r17,30b0 <___vfprintf_internal_r+0xd00>
    30d8:	d9014f17 	ldw	r4,1340(sp)
    30dc:	b00b883a 	mov	r5,r22
    30e0:	d9800c04 	addi	r6,sp,48
    30e4:	00023580 	call	2358 <__sprint_r>
    30e8:	103e691e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    30ec:	dc800e17 	ldw	r18,56(sp)
    30f0:	dc400d17 	ldw	r17,52(sp)
    30f4:	d8c01904 	addi	r3,sp,100
    30f8:	003fee06 	br	30b4 <___vfprintf_internal_r+0xd04>
    30fc:	d8814717 	ldw	r2,1308(sp)
    3100:	143fffc4 	addi	r16,r2,-1
    3104:	043e970e 	bge	zero,r16,2b64 <___vfprintf_internal_r+0x7b4>
    3108:	00800404 	movi	r2,16
    310c:	1400180e 	bge	r2,r16,3170 <___vfprintf_internal_r+0xdc0>
    3110:	1029883a 	mov	r20,r2
    3114:	07000074 	movhi	fp,1
    3118:	e7372684 	addi	fp,fp,-9062
    311c:	054001c4 	movi	r21,7
    3120:	00000306 	br	3130 <___vfprintf_internal_r+0xd80>
    3124:	9cc00204 	addi	r19,r19,8
    3128:	843ffc04 	addi	r16,r16,-16
    312c:	a400120e 	bge	r20,r16,3178 <___vfprintf_internal_r+0xdc8>
    3130:	94800404 	addi	r18,r18,16
    3134:	8c400044 	addi	r17,r17,1
    3138:	9f000015 	stw	fp,0(r19)
    313c:	9d000115 	stw	r20,4(r19)
    3140:	dc800e15 	stw	r18,56(sp)
    3144:	dc400d15 	stw	r17,52(sp)
    3148:	ac7ff60e 	bge	r21,r17,3124 <___vfprintf_internal_r+0xd74>
    314c:	d9014f17 	ldw	r4,1340(sp)
    3150:	b00b883a 	mov	r5,r22
    3154:	d9800c04 	addi	r6,sp,48
    3158:	00023580 	call	2358 <__sprint_r>
    315c:	103e4c1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3160:	dc800e17 	ldw	r18,56(sp)
    3164:	dc400d17 	ldw	r17,52(sp)
    3168:	dcc01904 	addi	r19,sp,100
    316c:	003fee06 	br	3128 <___vfprintf_internal_r+0xd78>
    3170:	07000074 	movhi	fp,1
    3174:	e7372684 	addi	fp,fp,-9062
    3178:	9425883a 	add	r18,r18,r16
    317c:	8c400044 	addi	r17,r17,1
    3180:	008001c4 	movi	r2,7
    3184:	9f000015 	stw	fp,0(r19)
    3188:	9c000115 	stw	r16,4(r19)
    318c:	dc800e15 	stw	r18,56(sp)
    3190:	dc400d15 	stw	r17,52(sp)
    3194:	147e720e 	bge	r2,r17,2b60 <___vfprintf_internal_r+0x7b0>
    3198:	d9014f17 	ldw	r4,1340(sp)
    319c:	b00b883a 	mov	r5,r22
    31a0:	d9800c04 	addi	r6,sp,48
    31a4:	00023580 	call	2358 <__sprint_r>
    31a8:	103e391e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    31ac:	dc800e17 	ldw	r18,56(sp)
    31b0:	dc400d17 	ldw	r17,52(sp)
    31b4:	dcc01904 	addi	r19,sp,100
    31b8:	003e6a06 	br	2b64 <___vfprintf_internal_r+0x7b4>
    31bc:	d9014f17 	ldw	r4,1340(sp)
    31c0:	b00b883a 	mov	r5,r22
    31c4:	d9800c04 	addi	r6,sp,48
    31c8:	d9c15115 	stw	r7,1348(sp)
    31cc:	00023580 	call	2358 <__sprint_r>
    31d0:	d9c15117 	ldw	r7,1348(sp)
    31d4:	103e2e1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    31d8:	dc800e17 	ldw	r18,56(sp)
    31dc:	dc400d17 	ldw	r17,52(sp)
    31e0:	dd401904 	addi	r21,sp,100
    31e4:	003dba06 	br	28d0 <___vfprintf_internal_r+0x520>
    31e8:	d9014f17 	ldw	r4,1340(sp)
    31ec:	b00b883a 	mov	r5,r22
    31f0:	d9800c04 	addi	r6,sp,48
    31f4:	00023580 	call	2358 <__sprint_r>
    31f8:	103e251e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    31fc:	dc800e17 	ldw	r18,56(sp)
    3200:	dc400d17 	ldw	r17,52(sp)
    3204:	dcc01904 	addi	r19,sp,100
    3208:	003e4206 	br	2b14 <___vfprintf_internal_r+0x764>
    320c:	d9014f17 	ldw	r4,1340(sp)
    3210:	b00b883a 	mov	r5,r22
    3214:	d9800c04 	addi	r6,sp,48
    3218:	00023580 	call	2358 <__sprint_r>
    321c:	103e1c1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3220:	dc800e17 	ldw	r18,56(sp)
    3224:	dc400d17 	ldw	r17,52(sp)
    3228:	d8c01904 	addi	r3,sp,100
    322c:	003e2e06 	br	2ae8 <___vfprintf_internal_r+0x738>
    3230:	d9414c17 	ldw	r5,1328(sp)
    3234:	2880004c 	andi	r2,r5,1
    3238:	1005003a 	cmpeq	r2,r2,zero
    323c:	103dda1e 	bne	r2,zero,29a8 <___vfprintf_internal_r+0x5f8>
    3240:	003e9f06 	br	2cc0 <___vfprintf_internal_r+0x910>
    3244:	d8c14117 	ldw	r3,1284(sp)
    3248:	9125883a 	add	r18,r18,r4
    324c:	8c400044 	addi	r17,r17,1
    3250:	008001c4 	movi	r2,7
    3254:	a8c00015 	stw	r3,0(r21)
    3258:	a9000115 	stw	r4,4(r21)
    325c:	dc800e15 	stw	r18,56(sp)
    3260:	dc400d15 	stw	r17,52(sp)
    3264:	14426616 	blt	r2,r17,3c00 <___vfprintf_internal_r+0x1850>
    3268:	a8c00204 	addi	r3,r21,8
    326c:	d9414917 	ldw	r5,1316(sp)
    3270:	00800044 	movi	r2,1
    3274:	94800044 	addi	r18,r18,1
    3278:	8c400044 	addi	r17,r17,1
    327c:	18800115 	stw	r2,4(r3)
    3280:	008001c4 	movi	r2,7
    3284:	19400015 	stw	r5,0(r3)
    3288:	dc800e15 	stw	r18,56(sp)
    328c:	dc400d15 	stw	r17,52(sp)
    3290:	2021883a 	mov	r16,r4
    3294:	14425016 	blt	r2,r17,3bd8 <___vfprintf_internal_r+0x1828>
    3298:	19400204 	addi	r5,r3,8
    329c:	d9814717 	ldw	r6,1308(sp)
    32a0:	8c400044 	addi	r17,r17,1
    32a4:	dc400d15 	stw	r17,52(sp)
    32a8:	3107c83a 	sub	r3,r6,r4
    32ac:	d9014117 	ldw	r4,1284(sp)
    32b0:	90e5883a 	add	r18,r18,r3
    32b4:	28c00115 	stw	r3,4(r5)
    32b8:	8105883a 	add	r2,r16,r4
    32bc:	28800015 	stw	r2,0(r5)
    32c0:	008001c4 	movi	r2,7
    32c4:	dc800e15 	stw	r18,56(sp)
    32c8:	147f1d16 	blt	r2,r17,2f40 <___vfprintf_internal_r+0xb90>
    32cc:	28c00204 	addi	r3,r5,8
    32d0:	003db506 	br	29a8 <___vfprintf_internal_r+0x5f8>
    32d4:	3c000017 	ldw	r16,0(r7)
    32d8:	3c400117 	ldw	r17,4(r7)
    32dc:	39800204 	addi	r6,r7,8
    32e0:	01000044 	movi	r4,1
    32e4:	d9814015 	stw	r6,1280(sp)
    32e8:	d8000405 	stb	zero,16(sp)
    32ec:	003ebe06 	br	2de8 <___vfprintf_internal_r+0xa38>
    32f0:	3c000017 	ldw	r16,0(r7)
    32f4:	3c400117 	ldw	r17,4(r7)
    32f8:	38800204 	addi	r2,r7,8
    32fc:	d8814015 	stw	r2,1280(sp)
    3300:	003eb706 	br	2de0 <___vfprintf_internal_r+0xa30>
    3304:	3c000017 	ldw	r16,0(r7)
    3308:	3c400117 	ldw	r17,4(r7)
    330c:	39000204 	addi	r4,r7,8
    3310:	d9014015 	stw	r4,1280(sp)
    3314:	0009883a 	mov	r4,zero
    3318:	d8000405 	stb	zero,16(sp)
    331c:	003eb206 	br	2de8 <___vfprintf_internal_r+0xa38>
    3320:	38c00017 	ldw	r3,0(r7)
    3324:	39c00104 	addi	r7,r7,4
    3328:	d8c14a15 	stw	r3,1320(sp)
    332c:	1800d10e 	bge	r3,zero,3674 <___vfprintf_internal_r+0x12c4>
    3330:	00c7c83a 	sub	r3,zero,r3
    3334:	d8c14a15 	stw	r3,1320(sp)
    3338:	d9014c17 	ldw	r4,1328(sp)
    333c:	b8c00007 	ldb	r3,0(r23)
    3340:	21000114 	ori	r4,r4,4
    3344:	d9014c15 	stw	r4,1328(sp)
    3348:	003c9806 	br	25ac <___vfprintf_internal_r+0x1fc>
    334c:	d9814c17 	ldw	r6,1328(sp)
    3350:	3080080c 	andi	r2,r6,32
    3354:	1001f026 	beq	r2,zero,3b18 <___vfprintf_internal_r+0x1768>
    3358:	d9014b17 	ldw	r4,1324(sp)
    335c:	38800017 	ldw	r2,0(r7)
    3360:	39c00104 	addi	r7,r7,4
    3364:	d9c14015 	stw	r7,1280(sp)
    3368:	2007d7fa 	srai	r3,r4,31
    336c:	d9c14017 	ldw	r7,1280(sp)
    3370:	11000015 	stw	r4,0(r2)
    3374:	10c00115 	stw	r3,4(r2)
    3378:	003c6906 	br	2520 <___vfprintf_internal_r+0x170>
    337c:	b8c00007 	ldb	r3,0(r23)
    3380:	00801b04 	movi	r2,108
    3384:	18824f26 	beq	r3,r2,3cc4 <___vfprintf_internal_r+0x1914>
    3388:	d9414c17 	ldw	r5,1328(sp)
    338c:	29400414 	ori	r5,r5,16
    3390:	d9414c15 	stw	r5,1328(sp)
    3394:	003c8506 	br	25ac <___vfprintf_internal_r+0x1fc>
    3398:	d9814c17 	ldw	r6,1328(sp)
    339c:	b8c00007 	ldb	r3,0(r23)
    33a0:	31800814 	ori	r6,r6,32
    33a4:	d9814c15 	stw	r6,1328(sp)
    33a8:	003c8006 	br	25ac <___vfprintf_internal_r+0x1fc>
    33ac:	d8814c17 	ldw	r2,1328(sp)
    33b0:	3c000017 	ldw	r16,0(r7)
    33b4:	00c01e04 	movi	r3,120
    33b8:	10800094 	ori	r2,r2,2
    33bc:	d8814c15 	stw	r2,1328(sp)
    33c0:	39c00104 	addi	r7,r7,4
    33c4:	01400074 	movhi	r5,1
    33c8:	29770f04 	addi	r5,r5,-9156
    33cc:	00800c04 	movi	r2,48
    33d0:	0023883a 	mov	r17,zero
    33d4:	01000084 	movi	r4,2
    33d8:	d9c14015 	stw	r7,1280(sp)
    33dc:	d8c14d15 	stw	r3,1332(sp)
    33e0:	d9414415 	stw	r5,1296(sp)
    33e4:	d8800445 	stb	r2,17(sp)
    33e8:	d8c00485 	stb	r3,18(sp)
    33ec:	d8000405 	stb	zero,16(sp)
    33f0:	003e7d06 	br	2de8 <___vfprintf_internal_r+0xa38>
    33f4:	d8814c17 	ldw	r2,1328(sp)
    33f8:	b8c00007 	ldb	r3,0(r23)
    33fc:	10801014 	ori	r2,r2,64
    3400:	d8814c15 	stw	r2,1328(sp)
    3404:	003c6906 	br	25ac <___vfprintf_internal_r+0x1fc>
    3408:	d9414c17 	ldw	r5,1328(sp)
    340c:	2880020c 	andi	r2,r5,8
    3410:	1001df26 	beq	r2,zero,3b90 <___vfprintf_internal_r+0x17e0>
    3414:	39800017 	ldw	r6,0(r7)
    3418:	38800204 	addi	r2,r7,8
    341c:	d8814015 	stw	r2,1280(sp)
    3420:	d9814215 	stw	r6,1288(sp)
    3424:	39c00117 	ldw	r7,4(r7)
    3428:	d9c14315 	stw	r7,1292(sp)
    342c:	d9014217 	ldw	r4,1288(sp)
    3430:	d9414317 	ldw	r5,1292(sp)
    3434:	00087240 	call	8724 <__isinfd>
    3438:	10021726 	beq	r2,zero,3c98 <___vfprintf_internal_r+0x18e8>
    343c:	d9014217 	ldw	r4,1288(sp)
    3440:	d9414317 	ldw	r5,1292(sp)
    3444:	000d883a 	mov	r6,zero
    3448:	000f883a 	mov	r7,zero
    344c:	000a6fc0 	call	a6fc <__ltdf2>
    3450:	1002ca16 	blt	r2,zero,3f7c <___vfprintf_internal_r+0x1bcc>
    3454:	d9414d17 	ldw	r5,1332(sp)
    3458:	008011c4 	movi	r2,71
    345c:	11420a16 	blt	r2,r5,3c88 <___vfprintf_internal_r+0x18d8>
    3460:	01800074 	movhi	r6,1
    3464:	31b71404 	addi	r6,r6,-9136
    3468:	d9814115 	stw	r6,1284(sp)
    346c:	d9014c17 	ldw	r4,1328(sp)
    3470:	00c000c4 	movi	r3,3
    3474:	00bfdfc4 	movi	r2,-129
    3478:	2088703a 	and	r4,r4,r2
    347c:	180f883a 	mov	r7,r3
    3480:	d8c14515 	stw	r3,1300(sp)
    3484:	d9014c15 	stw	r4,1328(sp)
    3488:	d8014615 	stw	zero,1304(sp)
    348c:	003e6a06 	br	2e38 <___vfprintf_internal_r+0xa88>
    3490:	38800017 	ldw	r2,0(r7)
    3494:	00c00044 	movi	r3,1
    3498:	39c00104 	addi	r7,r7,4
    349c:	d9c14015 	stw	r7,1280(sp)
    34a0:	d9000f04 	addi	r4,sp,60
    34a4:	180f883a 	mov	r7,r3
    34a8:	d8c14515 	stw	r3,1300(sp)
    34ac:	d9014115 	stw	r4,1284(sp)
    34b0:	d8800f05 	stb	r2,60(sp)
    34b4:	d8000405 	stb	zero,16(sp)
    34b8:	003cac06 	br	276c <___vfprintf_internal_r+0x3bc>
    34bc:	01400074 	movhi	r5,1
    34c0:	29771a04 	addi	r5,r5,-9112
    34c4:	d9414415 	stw	r5,1296(sp)
    34c8:	d9814c17 	ldw	r6,1328(sp)
    34cc:	3080080c 	andi	r2,r6,32
    34d0:	1000f926 	beq	r2,zero,38b8 <___vfprintf_internal_r+0x1508>
    34d4:	3c000017 	ldw	r16,0(r7)
    34d8:	3c400117 	ldw	r17,4(r7)
    34dc:	38800204 	addi	r2,r7,8
    34e0:	d8814015 	stw	r2,1280(sp)
    34e4:	d9414c17 	ldw	r5,1328(sp)
    34e8:	2880004c 	andi	r2,r5,1
    34ec:	1005003a 	cmpeq	r2,r2,zero
    34f0:	1000b31e 	bne	r2,zero,37c0 <___vfprintf_internal_r+0x1410>
    34f4:	8444b03a 	or	r2,r16,r17
    34f8:	1000b126 	beq	r2,zero,37c0 <___vfprintf_internal_r+0x1410>
    34fc:	d9814d17 	ldw	r6,1332(sp)
    3500:	29400094 	ori	r5,r5,2
    3504:	00800c04 	movi	r2,48
    3508:	01000084 	movi	r4,2
    350c:	d9414c15 	stw	r5,1328(sp)
    3510:	d8800445 	stb	r2,17(sp)
    3514:	d9800485 	stb	r6,18(sp)
    3518:	d8000405 	stb	zero,16(sp)
    351c:	003e3206 	br	2de8 <___vfprintf_internal_r+0xa38>
    3520:	01800074 	movhi	r6,1
    3524:	31b70f04 	addi	r6,r6,-9156
    3528:	d9814415 	stw	r6,1296(sp)
    352c:	003fe606 	br	34c8 <___vfprintf_internal_r+0x1118>
    3530:	00800ac4 	movi	r2,43
    3534:	d8800405 	stb	r2,16(sp)
    3538:	b8c00007 	ldb	r3,0(r23)
    353c:	003c1b06 	br	25ac <___vfprintf_internal_r+0x1fc>
    3540:	d8814c17 	ldw	r2,1328(sp)
    3544:	b8c00007 	ldb	r3,0(r23)
    3548:	10800054 	ori	r2,r2,1
    354c:	d8814c15 	stw	r2,1328(sp)
    3550:	003c1606 	br	25ac <___vfprintf_internal_r+0x1fc>
    3554:	d8800407 	ldb	r2,16(sp)
    3558:	1000461e 	bne	r2,zero,3674 <___vfprintf_internal_r+0x12c4>
    355c:	00800804 	movi	r2,32
    3560:	d8800405 	stb	r2,16(sp)
    3564:	b8c00007 	ldb	r3,0(r23)
    3568:	003c1006 	br	25ac <___vfprintf_internal_r+0x1fc>
    356c:	d9814c17 	ldw	r6,1328(sp)
    3570:	b8c00007 	ldb	r3,0(r23)
    3574:	31800214 	ori	r6,r6,8
    3578:	d9814c15 	stw	r6,1328(sp)
    357c:	003c0b06 	br	25ac <___vfprintf_internal_r+0x1fc>
    3580:	0007883a 	mov	r3,zero
    3584:	01000244 	movi	r4,9
    3588:	188002a4 	muli	r2,r3,10
    358c:	b8c00007 	ldb	r3,0(r23)
    3590:	d9814d17 	ldw	r6,1332(sp)
    3594:	bdc00044 	addi	r23,r23,1
    3598:	d8c14d15 	stw	r3,1332(sp)
    359c:	d9414d17 	ldw	r5,1332(sp)
    35a0:	3085883a 	add	r2,r6,r2
    35a4:	10fff404 	addi	r3,r2,-48
    35a8:	28bff404 	addi	r2,r5,-48
    35ac:	20bff62e 	bgeu	r4,r2,3588 <___vfprintf_internal_r+0x11d8>
    35b0:	d8c14a15 	stw	r3,1320(sp)
    35b4:	003bff06 	br	25b4 <___vfprintf_internal_r+0x204>
    35b8:	d9414c17 	ldw	r5,1328(sp)
    35bc:	b8c00007 	ldb	r3,0(r23)
    35c0:	29402014 	ori	r5,r5,128
    35c4:	d9414c15 	stw	r5,1328(sp)
    35c8:	003bf806 	br	25ac <___vfprintf_internal_r+0x1fc>
    35cc:	b8c00007 	ldb	r3,0(r23)
    35d0:	00800a84 	movi	r2,42
    35d4:	bdc00044 	addi	r23,r23,1
    35d8:	18831526 	beq	r3,r2,4230 <___vfprintf_internal_r+0x1e80>
    35dc:	d8c14d15 	stw	r3,1332(sp)
    35e0:	18bff404 	addi	r2,r3,-48
    35e4:	00c00244 	movi	r3,9
    35e8:	18827836 	bltu	r3,r2,3fcc <___vfprintf_internal_r+0x1c1c>
    35ec:	000d883a 	mov	r6,zero
    35f0:	308002a4 	muli	r2,r6,10
    35f4:	b9800007 	ldb	r6,0(r23)
    35f8:	d9414d17 	ldw	r5,1332(sp)
    35fc:	bdc00044 	addi	r23,r23,1
    3600:	d9814d15 	stw	r6,1332(sp)
    3604:	d9014d17 	ldw	r4,1332(sp)
    3608:	1145883a 	add	r2,r2,r5
    360c:	11bff404 	addi	r6,r2,-48
    3610:	20bff404 	addi	r2,r4,-48
    3614:	18bff62e 	bgeu	r3,r2,35f0 <___vfprintf_internal_r+0x1240>
    3618:	3027883a 	mov	r19,r6
    361c:	303be50e 	bge	r6,zero,25b4 <___vfprintf_internal_r+0x204>
    3620:	04ffffc4 	movi	r19,-1
    3624:	003be306 	br	25b4 <___vfprintf_internal_r+0x204>
    3628:	d8000405 	stb	zero,16(sp)
    362c:	39800017 	ldw	r6,0(r7)
    3630:	39c00104 	addi	r7,r7,4
    3634:	d9c14015 	stw	r7,1280(sp)
    3638:	d9814115 	stw	r6,1284(sp)
    363c:	3001c926 	beq	r6,zero,3d64 <___vfprintf_internal_r+0x19b4>
    3640:	98000e16 	blt	r19,zero,367c <___vfprintf_internal_r+0x12cc>
    3644:	d9014117 	ldw	r4,1284(sp)
    3648:	000b883a 	mov	r5,zero
    364c:	980d883a 	mov	r6,r19
    3650:	0006ee00 	call	6ee0 <memchr>
    3654:	10025926 	beq	r2,zero,3fbc <___vfprintf_internal_r+0x1c0c>
    3658:	d8c14117 	ldw	r3,1284(sp)
    365c:	10cfc83a 	sub	r7,r2,r3
    3660:	99c19e16 	blt	r19,r7,3cdc <___vfprintf_internal_r+0x192c>
    3664:	d9c14515 	stw	r7,1300(sp)
    3668:	38000916 	blt	r7,zero,3690 <___vfprintf_internal_r+0x12e0>
    366c:	d8014615 	stw	zero,1304(sp)
    3670:	003df106 	br	2e38 <___vfprintf_internal_r+0xa88>
    3674:	b8c00007 	ldb	r3,0(r23)
    3678:	003bcc06 	br	25ac <___vfprintf_internal_r+0x1fc>
    367c:	d9014117 	ldw	r4,1284(sp)
    3680:	00022e40 	call	22e4 <strlen>
    3684:	d8814515 	stw	r2,1300(sp)
    3688:	100f883a 	mov	r7,r2
    368c:	103ff70e 	bge	r2,zero,366c <___vfprintf_internal_r+0x12bc>
    3690:	d8014515 	stw	zero,1300(sp)
    3694:	d8014615 	stw	zero,1304(sp)
    3698:	003de706 	br	2e38 <___vfprintf_internal_r+0xa88>
    369c:	20c03fcc 	andi	r3,r4,255
    36a0:	00800044 	movi	r2,1
    36a4:	18802d26 	beq	r3,r2,375c <___vfprintf_internal_r+0x13ac>
    36a8:	18800e36 	bltu	r3,r2,36e4 <___vfprintf_internal_r+0x1334>
    36ac:	00800084 	movi	r2,2
    36b0:	1880fa26 	beq	r3,r2,3a9c <___vfprintf_internal_r+0x16ec>
    36b4:	01000074 	movhi	r4,1
    36b8:	21371f04 	addi	r4,r4,-9092
    36bc:	00022e40 	call	22e4 <strlen>
    36c0:	100f883a 	mov	r7,r2
    36c4:	dcc14515 	stw	r19,1300(sp)
    36c8:	9880010e 	bge	r19,r2,36d0 <___vfprintf_internal_r+0x1320>
    36cc:	d8814515 	stw	r2,1300(sp)
    36d0:	00800074 	movhi	r2,1
    36d4:	10b71f04 	addi	r2,r2,-9092
    36d8:	dcc14615 	stw	r19,1304(sp)
    36dc:	d8814115 	stw	r2,1284(sp)
    36e0:	003dd506 	br	2e38 <___vfprintf_internal_r+0xa88>
    36e4:	d9401904 	addi	r5,sp,100
    36e8:	dd000f04 	addi	r20,sp,60
    36ec:	d9414115 	stw	r5,1284(sp)
    36f0:	880a977a 	slli	r5,r17,29
    36f4:	d9814117 	ldw	r6,1284(sp)
    36f8:	8004d0fa 	srli	r2,r16,3
    36fc:	8806d0fa 	srli	r3,r17,3
    3700:	810001cc 	andi	r4,r16,7
    3704:	2884b03a 	or	r2,r5,r2
    3708:	31bfffc4 	addi	r6,r6,-1
    370c:	21000c04 	addi	r4,r4,48
    3710:	d9814115 	stw	r6,1284(sp)
    3714:	10cab03a 	or	r5,r2,r3
    3718:	31000005 	stb	r4,0(r6)
    371c:	1021883a 	mov	r16,r2
    3720:	1823883a 	mov	r17,r3
    3724:	283ff21e 	bne	r5,zero,36f0 <___vfprintf_internal_r+0x1340>
    3728:	d8c14c17 	ldw	r3,1328(sp)
    372c:	1880004c 	andi	r2,r3,1
    3730:	1005003a 	cmpeq	r2,r2,zero
    3734:	103db91e 	bne	r2,zero,2e1c <___vfprintf_internal_r+0xa6c>
    3738:	20803fcc 	andi	r2,r4,255
    373c:	1080201c 	xori	r2,r2,128
    3740:	10bfe004 	addi	r2,r2,-128
    3744:	00c00c04 	movi	r3,48
    3748:	10fdb426 	beq	r2,r3,2e1c <___vfprintf_internal_r+0xa6c>
    374c:	31bfffc4 	addi	r6,r6,-1
    3750:	d9814115 	stw	r6,1284(sp)
    3754:	30c00005 	stb	r3,0(r6)
    3758:	003db006 	br	2e1c <___vfprintf_internal_r+0xa6c>
    375c:	88800068 	cmpgeui	r2,r17,1
    3760:	10002c1e 	bne	r2,zero,3814 <___vfprintf_internal_r+0x1464>
    3764:	8800021e 	bne	r17,zero,3770 <___vfprintf_internal_r+0x13c0>
    3768:	00800244 	movi	r2,9
    376c:	14002936 	bltu	r2,r16,3814 <___vfprintf_internal_r+0x1464>
    3770:	d90018c4 	addi	r4,sp,99
    3774:	dd000f04 	addi	r20,sp,60
    3778:	d9014115 	stw	r4,1284(sp)
    377c:	d9014117 	ldw	r4,1284(sp)
    3780:	80800c04 	addi	r2,r16,48
    3784:	20800005 	stb	r2,0(r4)
    3788:	003da406 	br	2e1c <___vfprintf_internal_r+0xa6c>
    378c:	dc400d17 	ldw	r17,52(sp)
    3790:	07000074 	movhi	fp,1
    3794:	e7372684 	addi	fp,fp,-9062
    3798:	9425883a 	add	r18,r18,r16
    379c:	8c400044 	addi	r17,r17,1
    37a0:	008001c4 	movi	r2,7
    37a4:	1f000015 	stw	fp,0(r3)
    37a8:	1c000115 	stw	r16,4(r3)
    37ac:	dc800e15 	stw	r18,56(sp)
    37b0:	dc400d15 	stw	r17,52(sp)
    37b4:	147de216 	blt	r2,r17,2f40 <___vfprintf_internal_r+0xb90>
    37b8:	18c00204 	addi	r3,r3,8
    37bc:	003c7a06 	br	29a8 <___vfprintf_internal_r+0x5f8>
    37c0:	01000084 	movi	r4,2
    37c4:	d8000405 	stb	zero,16(sp)
    37c8:	003d8706 	br	2de8 <___vfprintf_internal_r+0xa38>
    37cc:	d9814c17 	ldw	r6,1328(sp)
    37d0:	30c4703a 	and	r2,r6,r3
    37d4:	1005003a 	cmpeq	r2,r2,zero
    37d8:	103cb926 	beq	r2,zero,2ac0 <___vfprintf_internal_r+0x710>
    37dc:	d9014117 	ldw	r4,1284(sp)
    37e0:	94800044 	addi	r18,r18,1
    37e4:	8c400044 	addi	r17,r17,1
    37e8:	008001c4 	movi	r2,7
    37ec:	a9000015 	stw	r4,0(r21)
    37f0:	a8c00115 	stw	r3,4(r21)
    37f4:	dc800e15 	stw	r18,56(sp)
    37f8:	dc400d15 	stw	r17,52(sp)
    37fc:	147e6616 	blt	r2,r17,3198 <___vfprintf_internal_r+0xde8>
    3800:	acc00204 	addi	r19,r21,8
    3804:	003cd706 	br	2b64 <___vfprintf_internal_r+0x7b4>
    3808:	07000074 	movhi	fp,1
    380c:	e7372684 	addi	fp,fp,-9062
    3810:	003c4f06 	br	2950 <___vfprintf_internal_r+0x5a0>
    3814:	dd000f04 	addi	r20,sp,60
    3818:	dc801904 	addi	r18,sp,100
    381c:	8009883a 	mov	r4,r16
    3820:	880b883a 	mov	r5,r17
    3824:	01800284 	movi	r6,10
    3828:	000f883a 	mov	r7,zero
    382c:	000940c0 	call	940c <__umoddi3>
    3830:	12000c04 	addi	r8,r2,48
    3834:	94bfffc4 	addi	r18,r18,-1
    3838:	8009883a 	mov	r4,r16
    383c:	880b883a 	mov	r5,r17
    3840:	01800284 	movi	r6,10
    3844:	000f883a 	mov	r7,zero
    3848:	92000005 	stb	r8,0(r18)
    384c:	0008e300 	call	8e30 <__udivdi3>
    3850:	1009883a 	mov	r4,r2
    3854:	1021883a 	mov	r16,r2
    3858:	18800068 	cmpgeui	r2,r3,1
    385c:	1823883a 	mov	r17,r3
    3860:	103fee1e 	bne	r2,zero,381c <___vfprintf_internal_r+0x146c>
    3864:	1800021e 	bne	r3,zero,3870 <___vfprintf_internal_r+0x14c0>
    3868:	00800244 	movi	r2,9
    386c:	113feb36 	bltu	r2,r4,381c <___vfprintf_internal_r+0x146c>
    3870:	94bfffc4 	addi	r18,r18,-1
    3874:	dc814115 	stw	r18,1284(sp)
    3878:	003fc006 	br	377c <___vfprintf_internal_r+0x13cc>
    387c:	d9014c17 	ldw	r4,1328(sp)
    3880:	2080004c 	andi	r2,r4,1
    3884:	10009a1e 	bne	r2,zero,3af0 <___vfprintf_internal_r+0x1740>
    3888:	d9401904 	addi	r5,sp,100
    388c:	dd000f04 	addi	r20,sp,60
    3890:	d9414115 	stw	r5,1284(sp)
    3894:	003d6106 	br	2e1c <___vfprintf_internal_r+0xa6c>
    3898:	d9014f17 	ldw	r4,1340(sp)
    389c:	b00b883a 	mov	r5,r22
    38a0:	d9800c04 	addi	r6,sp,48
    38a4:	00023580 	call	2358 <__sprint_r>
    38a8:	103c791e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    38ac:	dc800e17 	ldw	r18,56(sp)
    38b0:	d8c01904 	addi	r3,sp,100
    38b4:	003cff06 	br	2cb4 <___vfprintf_internal_r+0x904>
    38b8:	d8c14c17 	ldw	r3,1328(sp)
    38bc:	1880040c 	andi	r2,r3,16
    38c0:	1000711e 	bne	r2,zero,3a88 <___vfprintf_internal_r+0x16d8>
    38c4:	d9014c17 	ldw	r4,1328(sp)
    38c8:	2080100c 	andi	r2,r4,64
    38cc:	10006e26 	beq	r2,zero,3a88 <___vfprintf_internal_r+0x16d8>
    38d0:	3c00000b 	ldhu	r16,0(r7)
    38d4:	0023883a 	mov	r17,zero
    38d8:	39c00104 	addi	r7,r7,4
    38dc:	d9c14015 	stw	r7,1280(sp)
    38e0:	003f0006 	br	34e4 <___vfprintf_internal_r+0x1134>
    38e4:	dc400d17 	ldw	r17,52(sp)
    38e8:	07000074 	movhi	fp,1
    38ec:	e7372684 	addi	fp,fp,-9062
    38f0:	9425883a 	add	r18,r18,r16
    38f4:	8c400044 	addi	r17,r17,1
    38f8:	008001c4 	movi	r2,7
    38fc:	1f000015 	stw	fp,0(r3)
    3900:	1c000115 	stw	r16,4(r3)
    3904:	dc800e15 	stw	r18,56(sp)
    3908:	dc400d15 	stw	r17,52(sp)
    390c:	147d7616 	blt	r2,r17,2ee8 <___vfprintf_internal_r+0xb38>
    3910:	18c00204 	addi	r3,r3,8
    3914:	003d7b06 	br	2f04 <___vfprintf_internal_r+0xb54>
    3918:	dc800e17 	ldw	r18,56(sp)
    391c:	dc400d17 	ldw	r17,52(sp)
    3920:	07000074 	movhi	fp,1
    3924:	e7372a84 	addi	fp,fp,-9046
    3928:	003bc006 	br	282c <___vfprintf_internal_r+0x47c>
    392c:	d9014f17 	ldw	r4,1340(sp)
    3930:	b00b883a 	mov	r5,r22
    3934:	d9800c04 	addi	r6,sp,48
    3938:	00023580 	call	2358 <__sprint_r>
    393c:	103c541e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3940:	dc800e17 	ldw	r18,56(sp)
    3944:	d8c01904 	addi	r3,sp,100
    3948:	003ce906 	br	2cf0 <___vfprintf_internal_r+0x940>
    394c:	3c000017 	ldw	r16,0(r7)
    3950:	0009883a 	mov	r4,zero
    3954:	39c00104 	addi	r7,r7,4
    3958:	0023883a 	mov	r17,zero
    395c:	d9c14015 	stw	r7,1280(sp)
    3960:	d8000405 	stb	zero,16(sp)
    3964:	003d2006 	br	2de8 <___vfprintf_internal_r+0xa38>
    3968:	38800017 	ldw	r2,0(r7)
    396c:	39c00104 	addi	r7,r7,4
    3970:	d9c14015 	stw	r7,1280(sp)
    3974:	1023d7fa 	srai	r17,r2,31
    3978:	1021883a 	mov	r16,r2
    397c:	003d1806 	br	2de0 <___vfprintf_internal_r+0xa30>
    3980:	3c000017 	ldw	r16,0(r7)
    3984:	01000044 	movi	r4,1
    3988:	39c00104 	addi	r7,r7,4
    398c:	0023883a 	mov	r17,zero
    3990:	d9c14015 	stw	r7,1280(sp)
    3994:	d8000405 	stb	zero,16(sp)
    3998:	003d1306 	br	2de8 <___vfprintf_internal_r+0xa38>
    399c:	00800074 	movhi	r2,1
    39a0:	10b72604 	addi	r2,r2,-9064
    39a4:	94800044 	addi	r18,r18,1
    39a8:	8c400044 	addi	r17,r17,1
    39ac:	a8800015 	stw	r2,0(r21)
    39b0:	00c00044 	movi	r3,1
    39b4:	008001c4 	movi	r2,7
    39b8:	a8c00115 	stw	r3,4(r21)
    39bc:	dc800e15 	stw	r18,56(sp)
    39c0:	dc400d15 	stw	r17,52(sp)
    39c4:	1440ca16 	blt	r2,r17,3cf0 <___vfprintf_internal_r+0x1940>
    39c8:	a8c00204 	addi	r3,r21,8
    39cc:	2000061e 	bne	r4,zero,39e8 <___vfprintf_internal_r+0x1638>
    39d0:	d9414717 	ldw	r5,1308(sp)
    39d4:	2800041e 	bne	r5,zero,39e8 <___vfprintf_internal_r+0x1638>
    39d8:	d9814c17 	ldw	r6,1328(sp)
    39dc:	3080004c 	andi	r2,r6,1
    39e0:	1005003a 	cmpeq	r2,r2,zero
    39e4:	103bf01e 	bne	r2,zero,29a8 <___vfprintf_internal_r+0x5f8>
    39e8:	00800044 	movi	r2,1
    39ec:	dc400d17 	ldw	r17,52(sp)
    39f0:	18800115 	stw	r2,4(r3)
    39f4:	d8814917 	ldw	r2,1316(sp)
    39f8:	94800044 	addi	r18,r18,1
    39fc:	8c400044 	addi	r17,r17,1
    3a00:	18800015 	stw	r2,0(r3)
    3a04:	008001c4 	movi	r2,7
    3a08:	dc800e15 	stw	r18,56(sp)
    3a0c:	dc400d15 	stw	r17,52(sp)
    3a10:	1440ca16 	blt	r2,r17,3d3c <___vfprintf_internal_r+0x198c>
    3a14:	18c00204 	addi	r3,r3,8
    3a18:	0121c83a 	sub	r16,zero,r4
    3a1c:	0400500e 	bge	zero,r16,3b60 <___vfprintf_internal_r+0x17b0>
    3a20:	00800404 	movi	r2,16
    3a24:	1400800e 	bge	r2,r16,3c28 <___vfprintf_internal_r+0x1878>
    3a28:	1027883a 	mov	r19,r2
    3a2c:	07000074 	movhi	fp,1
    3a30:	e7372684 	addi	fp,fp,-9062
    3a34:	050001c4 	movi	r20,7
    3a38:	00000306 	br	3a48 <___vfprintf_internal_r+0x1698>
    3a3c:	18c00204 	addi	r3,r3,8
    3a40:	843ffc04 	addi	r16,r16,-16
    3a44:	9c007a0e 	bge	r19,r16,3c30 <___vfprintf_internal_r+0x1880>
    3a48:	94800404 	addi	r18,r18,16
    3a4c:	8c400044 	addi	r17,r17,1
    3a50:	1f000015 	stw	fp,0(r3)
    3a54:	1cc00115 	stw	r19,4(r3)
    3a58:	dc800e15 	stw	r18,56(sp)
    3a5c:	dc400d15 	stw	r17,52(sp)
    3a60:	a47ff60e 	bge	r20,r17,3a3c <___vfprintf_internal_r+0x168c>
    3a64:	d9014f17 	ldw	r4,1340(sp)
    3a68:	b00b883a 	mov	r5,r22
    3a6c:	d9800c04 	addi	r6,sp,48
    3a70:	00023580 	call	2358 <__sprint_r>
    3a74:	103c061e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3a78:	dc800e17 	ldw	r18,56(sp)
    3a7c:	dc400d17 	ldw	r17,52(sp)
    3a80:	d8c01904 	addi	r3,sp,100
    3a84:	003fee06 	br	3a40 <___vfprintf_internal_r+0x1690>
    3a88:	3c000017 	ldw	r16,0(r7)
    3a8c:	0023883a 	mov	r17,zero
    3a90:	39c00104 	addi	r7,r7,4
    3a94:	d9c14015 	stw	r7,1280(sp)
    3a98:	003e9206 	br	34e4 <___vfprintf_internal_r+0x1134>
    3a9c:	d9401904 	addi	r5,sp,100
    3aa0:	dd000f04 	addi	r20,sp,60
    3aa4:	d9414115 	stw	r5,1284(sp)
    3aa8:	d9814417 	ldw	r6,1296(sp)
    3aac:	880a973a 	slli	r5,r17,28
    3ab0:	8004d13a 	srli	r2,r16,4
    3ab4:	810003cc 	andi	r4,r16,15
    3ab8:	3109883a 	add	r4,r6,r4
    3abc:	2884b03a 	or	r2,r5,r2
    3ac0:	21400003 	ldbu	r5,0(r4)
    3ac4:	d9014117 	ldw	r4,1284(sp)
    3ac8:	8806d13a 	srli	r3,r17,4
    3acc:	1021883a 	mov	r16,r2
    3ad0:	213fffc4 	addi	r4,r4,-1
    3ad4:	d9014115 	stw	r4,1284(sp)
    3ad8:	d9814117 	ldw	r6,1284(sp)
    3adc:	10c8b03a 	or	r4,r2,r3
    3ae0:	1823883a 	mov	r17,r3
    3ae4:	31400005 	stb	r5,0(r6)
    3ae8:	203fef1e 	bne	r4,zero,3aa8 <___vfprintf_internal_r+0x16f8>
    3aec:	003ccb06 	br	2e1c <___vfprintf_internal_r+0xa6c>
    3af0:	00800c04 	movi	r2,48
    3af4:	d98018c4 	addi	r6,sp,99
    3af8:	dd000f04 	addi	r20,sp,60
    3afc:	d88018c5 	stb	r2,99(sp)
    3b00:	d9814115 	stw	r6,1284(sp)
    3b04:	003cc506 	br	2e1c <___vfprintf_internal_r+0xa6c>
    3b08:	dc400d17 	ldw	r17,52(sp)
    3b0c:	07000074 	movhi	fp,1
    3b10:	e7372a84 	addi	fp,fp,-9046
    3b14:	003bc706 	br	2a34 <___vfprintf_internal_r+0x684>
    3b18:	d9414c17 	ldw	r5,1328(sp)
    3b1c:	2880040c 	andi	r2,r5,16
    3b20:	10007c26 	beq	r2,zero,3d14 <___vfprintf_internal_r+0x1964>
    3b24:	38800017 	ldw	r2,0(r7)
    3b28:	39c00104 	addi	r7,r7,4
    3b2c:	d9c14015 	stw	r7,1280(sp)
    3b30:	d9814b17 	ldw	r6,1324(sp)
    3b34:	d9c14017 	ldw	r7,1280(sp)
    3b38:	11800015 	stw	r6,0(r2)
    3b3c:	003a7806 	br	2520 <___vfprintf_internal_r+0x170>
    3b40:	d9014f17 	ldw	r4,1340(sp)
    3b44:	b00b883a 	mov	r5,r22
    3b48:	d9800c04 	addi	r6,sp,48
    3b4c:	00023580 	call	2358 <__sprint_r>
    3b50:	103bcf1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3b54:	dc800e17 	ldw	r18,56(sp)
    3b58:	dc400d17 	ldw	r17,52(sp)
    3b5c:	d8c01904 	addi	r3,sp,100
    3b60:	d9014717 	ldw	r4,1308(sp)
    3b64:	d9414117 	ldw	r5,1284(sp)
    3b68:	8c400044 	addi	r17,r17,1
    3b6c:	9125883a 	add	r18,r18,r4
    3b70:	008001c4 	movi	r2,7
    3b74:	19400015 	stw	r5,0(r3)
    3b78:	19000115 	stw	r4,4(r3)
    3b7c:	dc800e15 	stw	r18,56(sp)
    3b80:	dc400d15 	stw	r17,52(sp)
    3b84:	147cee16 	blt	r2,r17,2f40 <___vfprintf_internal_r+0xb90>
    3b88:	18c00204 	addi	r3,r3,8
    3b8c:	003b8606 	br	29a8 <___vfprintf_internal_r+0x5f8>
    3b90:	38c00017 	ldw	r3,0(r7)
    3b94:	39000204 	addi	r4,r7,8
    3b98:	d9014015 	stw	r4,1280(sp)
    3b9c:	d8c14215 	stw	r3,1288(sp)
    3ba0:	39c00117 	ldw	r7,4(r7)
    3ba4:	d9c14315 	stw	r7,1292(sp)
    3ba8:	003e2006 	br	342c <___vfprintf_internal_r+0x107c>
    3bac:	0005883a 	mov	r2,zero
    3bb0:	1409c83a 	sub	r4,r2,r16
    3bb4:	1105803a 	cmpltu	r2,r2,r4
    3bb8:	044bc83a 	sub	r5,zero,r17
    3bbc:	2885c83a 	sub	r2,r5,r2
    3bc0:	2021883a 	mov	r16,r4
    3bc4:	1023883a 	mov	r17,r2
    3bc8:	01000044 	movi	r4,1
    3bcc:	00800b44 	movi	r2,45
    3bd0:	d8800405 	stb	r2,16(sp)
    3bd4:	003c8406 	br	2de8 <___vfprintf_internal_r+0xa38>
    3bd8:	d9014f17 	ldw	r4,1340(sp)
    3bdc:	b00b883a 	mov	r5,r22
    3be0:	d9800c04 	addi	r6,sp,48
    3be4:	00023580 	call	2358 <__sprint_r>
    3be8:	103ba91e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3bec:	dc800e17 	ldw	r18,56(sp)
    3bf0:	dc400d17 	ldw	r17,52(sp)
    3bf4:	d9000517 	ldw	r4,20(sp)
    3bf8:	d9401904 	addi	r5,sp,100
    3bfc:	003da706 	br	329c <___vfprintf_internal_r+0xeec>
    3c00:	d9014f17 	ldw	r4,1340(sp)
    3c04:	b00b883a 	mov	r5,r22
    3c08:	d9800c04 	addi	r6,sp,48
    3c0c:	00023580 	call	2358 <__sprint_r>
    3c10:	103b9f1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3c14:	dc800e17 	ldw	r18,56(sp)
    3c18:	dc400d17 	ldw	r17,52(sp)
    3c1c:	d9000517 	ldw	r4,20(sp)
    3c20:	d8c01904 	addi	r3,sp,100
    3c24:	003d9106 	br	326c <___vfprintf_internal_r+0xebc>
    3c28:	07000074 	movhi	fp,1
    3c2c:	e7372684 	addi	fp,fp,-9062
    3c30:	9425883a 	add	r18,r18,r16
    3c34:	8c400044 	addi	r17,r17,1
    3c38:	008001c4 	movi	r2,7
    3c3c:	1f000015 	stw	fp,0(r3)
    3c40:	1c000115 	stw	r16,4(r3)
    3c44:	dc800e15 	stw	r18,56(sp)
    3c48:	dc400d15 	stw	r17,52(sp)
    3c4c:	147fbc16 	blt	r2,r17,3b40 <___vfprintf_internal_r+0x1790>
    3c50:	18c00204 	addi	r3,r3,8
    3c54:	003fc206 	br	3b60 <___vfprintf_internal_r+0x17b0>
    3c58:	d9014f17 	ldw	r4,1340(sp)
    3c5c:	b00b883a 	mov	r5,r22
    3c60:	d9800c04 	addi	r6,sp,48
    3c64:	00023580 	call	2358 <__sprint_r>
    3c68:	103b891e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3c6c:	dc800e17 	ldw	r18,56(sp)
    3c70:	d9000517 	ldw	r4,20(sp)
    3c74:	d8c01904 	addi	r3,sp,100
    3c78:	003d0206 	br	3084 <___vfprintf_internal_r+0xcd4>
    3c7c:	07000074 	movhi	fp,1
    3c80:	e7372684 	addi	fp,fp,-9062
    3c84:	003be406 	br	2c18 <___vfprintf_internal_r+0x868>
    3c88:	00800074 	movhi	r2,1
    3c8c:	10b71504 	addi	r2,r2,-9132
    3c90:	d8814115 	stw	r2,1284(sp)
    3c94:	003df506 	br	346c <___vfprintf_internal_r+0x10bc>
    3c98:	d9014217 	ldw	r4,1288(sp)
    3c9c:	d9414317 	ldw	r5,1292(sp)
    3ca0:	00087640 	call	8764 <__isnand>
    3ca4:	10003926 	beq	r2,zero,3d8c <___vfprintf_internal_r+0x19dc>
    3ca8:	d9414d17 	ldw	r5,1332(sp)
    3cac:	008011c4 	movi	r2,71
    3cb0:	1140ce16 	blt	r2,r5,3fec <___vfprintf_internal_r+0x1c3c>
    3cb4:	01800074 	movhi	r6,1
    3cb8:	31b71604 	addi	r6,r6,-9128
    3cbc:	d9814115 	stw	r6,1284(sp)
    3cc0:	003dea06 	br	346c <___vfprintf_internal_r+0x10bc>
    3cc4:	d9014c17 	ldw	r4,1328(sp)
    3cc8:	bdc00044 	addi	r23,r23,1
    3ccc:	b8c00007 	ldb	r3,0(r23)
    3cd0:	21000814 	ori	r4,r4,32
    3cd4:	d9014c15 	stw	r4,1328(sp)
    3cd8:	003a3406 	br	25ac <___vfprintf_internal_r+0x1fc>
    3cdc:	dcc14515 	stw	r19,1300(sp)
    3ce0:	98011016 	blt	r19,zero,4124 <___vfprintf_internal_r+0x1d74>
    3ce4:	980f883a 	mov	r7,r19
    3ce8:	d8014615 	stw	zero,1304(sp)
    3cec:	003c5206 	br	2e38 <___vfprintf_internal_r+0xa88>
    3cf0:	d9014f17 	ldw	r4,1340(sp)
    3cf4:	b00b883a 	mov	r5,r22
    3cf8:	d9800c04 	addi	r6,sp,48
    3cfc:	00023580 	call	2358 <__sprint_r>
    3d00:	103b631e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3d04:	dc800e17 	ldw	r18,56(sp)
    3d08:	d9000517 	ldw	r4,20(sp)
    3d0c:	d8c01904 	addi	r3,sp,100
    3d10:	003f2e06 	br	39cc <___vfprintf_internal_r+0x161c>
    3d14:	d8c14c17 	ldw	r3,1328(sp)
    3d18:	1880100c 	andi	r2,r3,64
    3d1c:	1000a026 	beq	r2,zero,3fa0 <___vfprintf_internal_r+0x1bf0>
    3d20:	38800017 	ldw	r2,0(r7)
    3d24:	39c00104 	addi	r7,r7,4
    3d28:	d9c14015 	stw	r7,1280(sp)
    3d2c:	d9014b17 	ldw	r4,1324(sp)
    3d30:	d9c14017 	ldw	r7,1280(sp)
    3d34:	1100000d 	sth	r4,0(r2)
    3d38:	0039f906 	br	2520 <___vfprintf_internal_r+0x170>
    3d3c:	d9014f17 	ldw	r4,1340(sp)
    3d40:	b00b883a 	mov	r5,r22
    3d44:	d9800c04 	addi	r6,sp,48
    3d48:	00023580 	call	2358 <__sprint_r>
    3d4c:	103b501e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3d50:	dc800e17 	ldw	r18,56(sp)
    3d54:	dc400d17 	ldw	r17,52(sp)
    3d58:	d9000517 	ldw	r4,20(sp)
    3d5c:	d8c01904 	addi	r3,sp,100
    3d60:	003f2d06 	br	3a18 <___vfprintf_internal_r+0x1668>
    3d64:	00800184 	movi	r2,6
    3d68:	14c09a36 	bltu	r2,r19,3fd4 <___vfprintf_internal_r+0x1c24>
    3d6c:	dcc14515 	stw	r19,1300(sp)
    3d70:	9800010e 	bge	r19,zero,3d78 <___vfprintf_internal_r+0x19c8>
    3d74:	d8014515 	stw	zero,1300(sp)
    3d78:	00800074 	movhi	r2,1
    3d7c:	10b71804 	addi	r2,r2,-9120
    3d80:	980f883a 	mov	r7,r19
    3d84:	d8814115 	stw	r2,1284(sp)
    3d88:	003a7806 	br	276c <___vfprintf_internal_r+0x3bc>
    3d8c:	00bfffc4 	movi	r2,-1
    3d90:	9880e226 	beq	r19,r2,411c <___vfprintf_internal_r+0x1d6c>
    3d94:	d9414d17 	ldw	r5,1332(sp)
    3d98:	008019c4 	movi	r2,103
    3d9c:	2880dc26 	beq	r5,r2,4110 <___vfprintf_internal_r+0x1d60>
    3da0:	008011c4 	movi	r2,71
    3da4:	2880da26 	beq	r5,r2,4110 <___vfprintf_internal_r+0x1d60>
    3da8:	d9414c17 	ldw	r5,1328(sp)
    3dac:	d9014317 	ldw	r4,1292(sp)
    3db0:	d9814217 	ldw	r6,1288(sp)
    3db4:	29404014 	ori	r5,r5,256
    3db8:	d9414c15 	stw	r5,1328(sp)
    3dbc:	2000cc16 	blt	r4,zero,40f0 <___vfprintf_internal_r+0x1d40>
    3dc0:	3021883a 	mov	r16,r6
    3dc4:	2023883a 	mov	r17,r4
    3dc8:	0039883a 	mov	fp,zero
    3dcc:	d9414d17 	ldw	r5,1332(sp)
    3dd0:	00801984 	movi	r2,102
    3dd4:	2880b726 	beq	r5,r2,40b4 <___vfprintf_internal_r+0x1d04>
    3dd8:	00801184 	movi	r2,70
    3ddc:	2880b526 	beq	r5,r2,40b4 <___vfprintf_internal_r+0x1d04>
    3de0:	00801944 	movi	r2,101
    3de4:	2880c826 	beq	r5,r2,4108 <___vfprintf_internal_r+0x1d58>
    3de8:	00801144 	movi	r2,69
    3dec:	2880c626 	beq	r5,r2,4108 <___vfprintf_internal_r+0x1d58>
    3df0:	9829883a 	mov	r20,r19
    3df4:	d9014f17 	ldw	r4,1340(sp)
    3df8:	d8800504 	addi	r2,sp,20
    3dfc:	880d883a 	mov	r6,r17
    3e00:	d8800115 	stw	r2,4(sp)
    3e04:	d8c00604 	addi	r3,sp,24
    3e08:	d8800704 	addi	r2,sp,28
    3e0c:	800b883a 	mov	r5,r16
    3e10:	01c00084 	movi	r7,2
    3e14:	d8c00215 	stw	r3,8(sp)
    3e18:	d8800315 	stw	r2,12(sp)
    3e1c:	dd000015 	stw	r20,0(sp)
    3e20:	00047880 	call	4788 <_dtoa_r>
    3e24:	d9814d17 	ldw	r6,1332(sp)
    3e28:	d8814115 	stw	r2,1284(sp)
    3e2c:	008019c4 	movi	r2,103
    3e30:	30809526 	beq	r6,r2,4088 <___vfprintf_internal_r+0x1cd8>
    3e34:	d8c14d17 	ldw	r3,1332(sp)
    3e38:	008011c4 	movi	r2,71
    3e3c:	18809226 	beq	r3,r2,4088 <___vfprintf_internal_r+0x1cd8>
    3e40:	d9414117 	ldw	r5,1284(sp)
    3e44:	d9814d17 	ldw	r6,1332(sp)
    3e48:	00801984 	movi	r2,102
    3e4c:	2d25883a 	add	r18,r5,r20
    3e50:	30808626 	beq	r6,r2,406c <___vfprintf_internal_r+0x1cbc>
    3e54:	00801184 	movi	r2,70
    3e58:	30808426 	beq	r6,r2,406c <___vfprintf_internal_r+0x1cbc>
    3e5c:	000d883a 	mov	r6,zero
    3e60:	000f883a 	mov	r7,zero
    3e64:	880b883a 	mov	r5,r17
    3e68:	8009883a 	mov	r4,r16
    3e6c:	000a4dc0 	call	a4dc <__eqdf2>
    3e70:	1000751e 	bne	r2,zero,4048 <___vfprintf_internal_r+0x1c98>
    3e74:	9005883a 	mov	r2,r18
    3e78:	dc800715 	stw	r18,28(sp)
    3e7c:	d9014117 	ldw	r4,1284(sp)
    3e80:	d9414d17 	ldw	r5,1332(sp)
    3e84:	00c019c4 	movi	r3,103
    3e88:	1125c83a 	sub	r18,r2,r4
    3e8c:	28c06826 	beq	r5,r3,4030 <___vfprintf_internal_r+0x1c80>
    3e90:	008011c4 	movi	r2,71
    3e94:	28806626 	beq	r5,r2,4030 <___vfprintf_internal_r+0x1c80>
    3e98:	d9000517 	ldw	r4,20(sp)
    3e9c:	d8c14d17 	ldw	r3,1332(sp)
    3ea0:	00801944 	movi	r2,101
    3ea4:	10c05516 	blt	r2,r3,3ffc <___vfprintf_internal_r+0x1c4c>
    3ea8:	213fffc4 	addi	r4,r4,-1
    3eac:	d9000515 	stw	r4,20(sp)
    3eb0:	d8c00805 	stb	r3,32(sp)
    3eb4:	2021883a 	mov	r16,r4
    3eb8:	2000c116 	blt	r4,zero,41c0 <___vfprintf_internal_r+0x1e10>
    3ebc:	00800ac4 	movi	r2,43
    3ec0:	d8800845 	stb	r2,33(sp)
    3ec4:	00800244 	movi	r2,9
    3ec8:	1400af0e 	bge	r2,r16,4188 <___vfprintf_internal_r+0x1dd8>
    3ecc:	1027883a 	mov	r19,r2
    3ed0:	dc400b84 	addi	r17,sp,46
    3ed4:	8009883a 	mov	r4,r16
    3ed8:	01400284 	movi	r5,10
    3edc:	00018980 	call	1898 <__modsi3>
    3ee0:	10800c04 	addi	r2,r2,48
    3ee4:	8c7fffc4 	addi	r17,r17,-1
    3ee8:	8009883a 	mov	r4,r16
    3eec:	01400284 	movi	r5,10
    3ef0:	88800005 	stb	r2,0(r17)
    3ef4:	00018380 	call	1838 <__divsi3>
    3ef8:	1021883a 	mov	r16,r2
    3efc:	98bff516 	blt	r19,r2,3ed4 <___vfprintf_internal_r+0x1b24>
    3f00:	10c00c04 	addi	r3,r2,48
    3f04:	d88009c4 	addi	r2,sp,39
    3f08:	108001c4 	addi	r2,r2,7
    3f0c:	897fffc4 	addi	r5,r17,-1
    3f10:	88ffffc5 	stb	r3,-1(r17)
    3f14:	2880a72e 	bgeu	r5,r2,41b4 <___vfprintf_internal_r+0x1e04>
    3f18:	1009883a 	mov	r4,r2
    3f1c:	d9800804 	addi	r6,sp,32
    3f20:	d8c00884 	addi	r3,sp,34
    3f24:	28800003 	ldbu	r2,0(r5)
    3f28:	29400044 	addi	r5,r5,1
    3f2c:	18800005 	stb	r2,0(r3)
    3f30:	18c00044 	addi	r3,r3,1
    3f34:	293ffb36 	bltu	r5,r4,3f24 <___vfprintf_internal_r+0x1b74>
    3f38:	1987c83a 	sub	r3,r3,r6
    3f3c:	00800044 	movi	r2,1
    3f40:	d8c14815 	stw	r3,1312(sp)
    3f44:	90cf883a 	add	r7,r18,r3
    3f48:	1480960e 	bge	r2,r18,41a4 <___vfprintf_internal_r+0x1df4>
    3f4c:	39c00044 	addi	r7,r7,1
    3f50:	d9c14515 	stw	r7,1300(sp)
    3f54:	38003416 	blt	r7,zero,4028 <___vfprintf_internal_r+0x1c78>
    3f58:	e0803fcc 	andi	r2,fp,255
    3f5c:	1080201c 	xori	r2,r2,128
    3f60:	10bfe004 	addi	r2,r2,-128
    3f64:	10004e26 	beq	r2,zero,40a0 <___vfprintf_internal_r+0x1cf0>
    3f68:	00800b44 	movi	r2,45
    3f6c:	dc814715 	stw	r18,1308(sp)
    3f70:	d8014615 	stw	zero,1304(sp)
    3f74:	d8800405 	stb	r2,16(sp)
    3f78:	003bb106 	br	2e40 <___vfprintf_internal_r+0xa90>
    3f7c:	00800b44 	movi	r2,45
    3f80:	d8800405 	stb	r2,16(sp)
    3f84:	003d3306 	br	3454 <___vfprintf_internal_r+0x10a4>
    3f88:	d9014f17 	ldw	r4,1340(sp)
    3f8c:	b00b883a 	mov	r5,r22
    3f90:	d9800c04 	addi	r6,sp,48
    3f94:	00023580 	call	2358 <__sprint_r>
    3f98:	103abd1e 	bne	r2,zero,2a90 <___vfprintf_internal_r+0x6e0>
    3f9c:	003abb06 	br	2a8c <___vfprintf_internal_r+0x6dc>
    3fa0:	38800017 	ldw	r2,0(r7)
    3fa4:	39c00104 	addi	r7,r7,4
    3fa8:	d9c14015 	stw	r7,1280(sp)
    3fac:	d9414b17 	ldw	r5,1324(sp)
    3fb0:	d9c14017 	ldw	r7,1280(sp)
    3fb4:	11400015 	stw	r5,0(r2)
    3fb8:	00395906 	br	2520 <___vfprintf_internal_r+0x170>
    3fbc:	980f883a 	mov	r7,r19
    3fc0:	dcc14515 	stw	r19,1300(sp)
    3fc4:	d8014615 	stw	zero,1304(sp)
    3fc8:	003b9b06 	br	2e38 <___vfprintf_internal_r+0xa88>
    3fcc:	0027883a 	mov	r19,zero
    3fd0:	00397806 	br	25b4 <___vfprintf_internal_r+0x204>
    3fd4:	00c00074 	movhi	r3,1
    3fd8:	18f71804 	addi	r3,r3,-9120
    3fdc:	100f883a 	mov	r7,r2
    3fe0:	d8814515 	stw	r2,1300(sp)
    3fe4:	d8c14115 	stw	r3,1284(sp)
    3fe8:	0039e006 	br	276c <___vfprintf_internal_r+0x3bc>
    3fec:	00800074 	movhi	r2,1
    3ff0:	10b71704 	addi	r2,r2,-9124
    3ff4:	d8814115 	stw	r2,1284(sp)
    3ff8:	003d1c06 	br	346c <___vfprintf_internal_r+0x10bc>
    3ffc:	d9414d17 	ldw	r5,1332(sp)
    4000:	00801984 	movi	r2,102
    4004:	28804926 	beq	r5,r2,412c <___vfprintf_internal_r+0x1d7c>
    4008:	200f883a 	mov	r7,r4
    400c:	24805716 	blt	r4,r18,416c <___vfprintf_internal_r+0x1dbc>
    4010:	d9414c17 	ldw	r5,1328(sp)
    4014:	2880004c 	andi	r2,r5,1
    4018:	10000126 	beq	r2,zero,4020 <___vfprintf_internal_r+0x1c70>
    401c:	21c00044 	addi	r7,r4,1
    4020:	d9c14515 	stw	r7,1300(sp)
    4024:	383fcc0e 	bge	r7,zero,3f58 <___vfprintf_internal_r+0x1ba8>
    4028:	d8014515 	stw	zero,1300(sp)
    402c:	003fca06 	br	3f58 <___vfprintf_internal_r+0x1ba8>
    4030:	d9000517 	ldw	r4,20(sp)
    4034:	00bfff04 	movi	r2,-4
    4038:	1100480e 	bge	r2,r4,415c <___vfprintf_internal_r+0x1dac>
    403c:	99004716 	blt	r19,r4,415c <___vfprintf_internal_r+0x1dac>
    4040:	d8c14d15 	stw	r3,1332(sp)
    4044:	003ff006 	br	4008 <___vfprintf_internal_r+0x1c58>
    4048:	d8800717 	ldw	r2,28(sp)
    404c:	14bf8b2e 	bgeu	r2,r18,3e7c <___vfprintf_internal_r+0x1acc>
    4050:	9007883a 	mov	r3,r18
    4054:	01000c04 	movi	r4,48
    4058:	11000005 	stb	r4,0(r2)
    405c:	10800044 	addi	r2,r2,1
    4060:	d8800715 	stw	r2,28(sp)
    4064:	18bffc1e 	bne	r3,r2,4058 <___vfprintf_internal_r+0x1ca8>
    4068:	003f8406 	br	3e7c <___vfprintf_internal_r+0x1acc>
    406c:	d8814117 	ldw	r2,1284(sp)
    4070:	10c00007 	ldb	r3,0(r2)
    4074:	00800c04 	movi	r2,48
    4078:	18805b26 	beq	r3,r2,41e8 <___vfprintf_internal_r+0x1e38>
    407c:	d9000517 	ldw	r4,20(sp)
    4080:	9125883a 	add	r18,r18,r4
    4084:	003f7506 	br	3e5c <___vfprintf_internal_r+0x1aac>
    4088:	d9014c17 	ldw	r4,1328(sp)
    408c:	2080004c 	andi	r2,r4,1
    4090:	1005003a 	cmpeq	r2,r2,zero
    4094:	103f6a26 	beq	r2,zero,3e40 <___vfprintf_internal_r+0x1a90>
    4098:	d8800717 	ldw	r2,28(sp)
    409c:	003f7706 	br	3e7c <___vfprintf_internal_r+0x1acc>
    40a0:	d9c14515 	stw	r7,1300(sp)
    40a4:	38004d16 	blt	r7,zero,41dc <___vfprintf_internal_r+0x1e2c>
    40a8:	dc814715 	stw	r18,1308(sp)
    40ac:	d8014615 	stw	zero,1304(sp)
    40b0:	003b6106 	br	2e38 <___vfprintf_internal_r+0xa88>
    40b4:	d9014f17 	ldw	r4,1340(sp)
    40b8:	d8800504 	addi	r2,sp,20
    40bc:	d8800115 	stw	r2,4(sp)
    40c0:	d8c00604 	addi	r3,sp,24
    40c4:	d8800704 	addi	r2,sp,28
    40c8:	800b883a 	mov	r5,r16
    40cc:	880d883a 	mov	r6,r17
    40d0:	01c000c4 	movi	r7,3
    40d4:	d8c00215 	stw	r3,8(sp)
    40d8:	d8800315 	stw	r2,12(sp)
    40dc:	dcc00015 	stw	r19,0(sp)
    40e0:	9829883a 	mov	r20,r19
    40e4:	00047880 	call	4788 <_dtoa_r>
    40e8:	d8814115 	stw	r2,1284(sp)
    40ec:	003f5106 	br	3e34 <___vfprintf_internal_r+0x1a84>
    40f0:	d8c14217 	ldw	r3,1288(sp)
    40f4:	d9014317 	ldw	r4,1292(sp)
    40f8:	07000b44 	movi	fp,45
    40fc:	1821883a 	mov	r16,r3
    4100:	2460003c 	xorhi	r17,r4,32768
    4104:	003f3106 	br	3dcc <___vfprintf_internal_r+0x1a1c>
    4108:	9d000044 	addi	r20,r19,1
    410c:	003f3906 	br	3df4 <___vfprintf_internal_r+0x1a44>
    4110:	983f251e 	bne	r19,zero,3da8 <___vfprintf_internal_r+0x19f8>
    4114:	04c00044 	movi	r19,1
    4118:	003f2306 	br	3da8 <___vfprintf_internal_r+0x19f8>
    411c:	04c00184 	movi	r19,6
    4120:	003f2106 	br	3da8 <___vfprintf_internal_r+0x19f8>
    4124:	d8014515 	stw	zero,1300(sp)
    4128:	003eee06 	br	3ce4 <___vfprintf_internal_r+0x1934>
    412c:	200f883a 	mov	r7,r4
    4130:	0100370e 	bge	zero,r4,4210 <___vfprintf_internal_r+0x1e60>
    4134:	9800031e 	bne	r19,zero,4144 <___vfprintf_internal_r+0x1d94>
    4138:	d9814c17 	ldw	r6,1328(sp)
    413c:	3080004c 	andi	r2,r6,1
    4140:	103fb726 	beq	r2,zero,4020 <___vfprintf_internal_r+0x1c70>
    4144:	20800044 	addi	r2,r4,1
    4148:	98a7883a 	add	r19,r19,r2
    414c:	dcc14515 	stw	r19,1300(sp)
    4150:	980f883a 	mov	r7,r19
    4154:	983f800e 	bge	r19,zero,3f58 <___vfprintf_internal_r+0x1ba8>
    4158:	003fb306 	br	4028 <___vfprintf_internal_r+0x1c78>
    415c:	d9814d17 	ldw	r6,1332(sp)
    4160:	31bfff84 	addi	r6,r6,-2
    4164:	d9814d15 	stw	r6,1332(sp)
    4168:	003f4c06 	br	3e9c <___vfprintf_internal_r+0x1aec>
    416c:	0100180e 	bge	zero,r4,41d0 <___vfprintf_internal_r+0x1e20>
    4170:	00800044 	movi	r2,1
    4174:	1485883a 	add	r2,r2,r18
    4178:	d8814515 	stw	r2,1300(sp)
    417c:	100f883a 	mov	r7,r2
    4180:	103f750e 	bge	r2,zero,3f58 <___vfprintf_internal_r+0x1ba8>
    4184:	003fa806 	br	4028 <___vfprintf_internal_r+0x1c78>
    4188:	80c00c04 	addi	r3,r16,48
    418c:	00800c04 	movi	r2,48
    4190:	d8c008c5 	stb	r3,35(sp)
    4194:	d9800804 	addi	r6,sp,32
    4198:	d8c00904 	addi	r3,sp,36
    419c:	d8800885 	stb	r2,34(sp)
    41a0:	003f6506 	br	3f38 <___vfprintf_internal_r+0x1b88>
    41a4:	d9014c17 	ldw	r4,1328(sp)
    41a8:	2084703a 	and	r2,r4,r2
    41ac:	103f9c26 	beq	r2,zero,4020 <___vfprintf_internal_r+0x1c70>
    41b0:	003f6606 	br	3f4c <___vfprintf_internal_r+0x1b9c>
    41b4:	d9800804 	addi	r6,sp,32
    41b8:	d8c00884 	addi	r3,sp,34
    41bc:	003f5e06 	br	3f38 <___vfprintf_internal_r+0x1b88>
    41c0:	00800b44 	movi	r2,45
    41c4:	0121c83a 	sub	r16,zero,r4
    41c8:	d8800845 	stb	r2,33(sp)
    41cc:	003f3d06 	br	3ec4 <___vfprintf_internal_r+0x1b14>
    41d0:	00800084 	movi	r2,2
    41d4:	1105c83a 	sub	r2,r2,r4
    41d8:	003fe606 	br	4174 <___vfprintf_internal_r+0x1dc4>
    41dc:	d8014515 	stw	zero,1300(sp)
    41e0:	dc814715 	stw	r18,1308(sp)
    41e4:	003fb106 	br	40ac <___vfprintf_internal_r+0x1cfc>
    41e8:	000d883a 	mov	r6,zero
    41ec:	000f883a 	mov	r7,zero
    41f0:	8009883a 	mov	r4,r16
    41f4:	880b883a 	mov	r5,r17
    41f8:	000a5640 	call	a564 <__nedf2>
    41fc:	103f9f26 	beq	r2,zero,407c <___vfprintf_internal_r+0x1ccc>
    4200:	00800044 	movi	r2,1
    4204:	1509c83a 	sub	r4,r2,r20
    4208:	d9000515 	stw	r4,20(sp)
    420c:	003f9b06 	br	407c <___vfprintf_internal_r+0x1ccc>
    4210:	98000d1e 	bne	r19,zero,4248 <___vfprintf_internal_r+0x1e98>
    4214:	d8c14c17 	ldw	r3,1328(sp)
    4218:	1880004c 	andi	r2,r3,1
    421c:	10000a1e 	bne	r2,zero,4248 <___vfprintf_internal_r+0x1e98>
    4220:	01000044 	movi	r4,1
    4224:	200f883a 	mov	r7,r4
    4228:	d9014515 	stw	r4,1300(sp)
    422c:	003f4a06 	br	3f58 <___vfprintf_internal_r+0x1ba8>
    4230:	3cc00017 	ldw	r19,0(r7)
    4234:	39c00104 	addi	r7,r7,4
    4238:	983d0e0e 	bge	r19,zero,3674 <___vfprintf_internal_r+0x12c4>
    423c:	b8c00007 	ldb	r3,0(r23)
    4240:	04ffffc4 	movi	r19,-1
    4244:	0038d906 	br	25ac <___vfprintf_internal_r+0x1fc>
    4248:	9cc00084 	addi	r19,r19,2
    424c:	dcc14515 	stw	r19,1300(sp)
    4250:	980f883a 	mov	r7,r19
    4254:	983f400e 	bge	r19,zero,3f58 <___vfprintf_internal_r+0x1ba8>
    4258:	003f7306 	br	4028 <___vfprintf_internal_r+0x1c78>

0000425c <__vfprintf_internal>:
    425c:	00800074 	movhi	r2,1
    4260:	10be6604 	addi	r2,r2,-1640
    4264:	2013883a 	mov	r9,r4
    4268:	11000017 	ldw	r4,0(r2)
    426c:	2805883a 	mov	r2,r5
    4270:	300f883a 	mov	r7,r6
    4274:	480b883a 	mov	r5,r9
    4278:	100d883a 	mov	r6,r2
    427c:	00023b01 	jmpi	23b0 <___vfprintf_internal_r>

00004280 <__swsetup_r>:
    4280:	00800074 	movhi	r2,1
    4284:	10be6604 	addi	r2,r2,-1640
    4288:	10c00017 	ldw	r3,0(r2)
    428c:	defffd04 	addi	sp,sp,-12
    4290:	dc400115 	stw	r17,4(sp)
    4294:	dc000015 	stw	r16,0(sp)
    4298:	dfc00215 	stw	ra,8(sp)
    429c:	2023883a 	mov	r17,r4
    42a0:	2821883a 	mov	r16,r5
    42a4:	18000226 	beq	r3,zero,42b0 <__swsetup_r+0x30>
    42a8:	18800e17 	ldw	r2,56(r3)
    42ac:	10001f26 	beq	r2,zero,432c <__swsetup_r+0xac>
    42b0:	8100030b 	ldhu	r4,12(r16)
    42b4:	2080020c 	andi	r2,r4,8
    42b8:	10002826 	beq	r2,zero,435c <__swsetup_r+0xdc>
    42bc:	81400417 	ldw	r5,16(r16)
    42c0:	28001d26 	beq	r5,zero,4338 <__swsetup_r+0xb8>
    42c4:	2080004c 	andi	r2,r4,1
    42c8:	1005003a 	cmpeq	r2,r2,zero
    42cc:	10000b26 	beq	r2,zero,42fc <__swsetup_r+0x7c>
    42d0:	2080008c 	andi	r2,r4,2
    42d4:	10001226 	beq	r2,zero,4320 <__swsetup_r+0xa0>
    42d8:	0005883a 	mov	r2,zero
    42dc:	80800215 	stw	r2,8(r16)
    42e0:	28000b26 	beq	r5,zero,4310 <__swsetup_r+0x90>
    42e4:	0005883a 	mov	r2,zero
    42e8:	dfc00217 	ldw	ra,8(sp)
    42ec:	dc400117 	ldw	r17,4(sp)
    42f0:	dc000017 	ldw	r16,0(sp)
    42f4:	dec00304 	addi	sp,sp,12
    42f8:	f800283a 	ret
    42fc:	80800517 	ldw	r2,20(r16)
    4300:	80000215 	stw	zero,8(r16)
    4304:	0085c83a 	sub	r2,zero,r2
    4308:	80800615 	stw	r2,24(r16)
    430c:	283ff51e 	bne	r5,zero,42e4 <__swsetup_r+0x64>
    4310:	2080200c 	andi	r2,r4,128
    4314:	103ff326 	beq	r2,zero,42e4 <__swsetup_r+0x64>
    4318:	00bfffc4 	movi	r2,-1
    431c:	003ff206 	br	42e8 <__swsetup_r+0x68>
    4320:	80800517 	ldw	r2,20(r16)
    4324:	80800215 	stw	r2,8(r16)
    4328:	003fed06 	br	42e0 <__swsetup_r+0x60>
    432c:	1809883a 	mov	r4,r3
    4330:	0005fd40 	call	5fd4 <__sinit>
    4334:	003fde06 	br	42b0 <__swsetup_r+0x30>
    4338:	20c0a00c 	andi	r3,r4,640
    433c:	00808004 	movi	r2,512
    4340:	18bfe026 	beq	r3,r2,42c4 <__swsetup_r+0x44>
    4344:	8809883a 	mov	r4,r17
    4348:	800b883a 	mov	r5,r16
    434c:	0006d4c0 	call	6d4c <__smakebuf_r>
    4350:	8100030b 	ldhu	r4,12(r16)
    4354:	81400417 	ldw	r5,16(r16)
    4358:	003fda06 	br	42c4 <__swsetup_r+0x44>
    435c:	2080040c 	andi	r2,r4,16
    4360:	103fed26 	beq	r2,zero,4318 <__swsetup_r+0x98>
    4364:	2080010c 	andi	r2,r4,4
    4368:	10001226 	beq	r2,zero,43b4 <__swsetup_r+0x134>
    436c:	81400c17 	ldw	r5,48(r16)
    4370:	28000526 	beq	r5,zero,4388 <__swsetup_r+0x108>
    4374:	80801004 	addi	r2,r16,64
    4378:	28800226 	beq	r5,r2,4384 <__swsetup_r+0x104>
    437c:	8809883a 	mov	r4,r17
    4380:	00063580 	call	6358 <_free_r>
    4384:	80000c15 	stw	zero,48(r16)
    4388:	8080030b 	ldhu	r2,12(r16)
    438c:	81400417 	ldw	r5,16(r16)
    4390:	80000115 	stw	zero,4(r16)
    4394:	10bff6cc 	andi	r2,r2,65499
    4398:	8080030d 	sth	r2,12(r16)
    439c:	81400015 	stw	r5,0(r16)
    43a0:	8080030b 	ldhu	r2,12(r16)
    43a4:	10800214 	ori	r2,r2,8
    43a8:	113fffcc 	andi	r4,r2,65535
    43ac:	8080030d 	sth	r2,12(r16)
    43b0:	003fc306 	br	42c0 <__swsetup_r+0x40>
    43b4:	81400417 	ldw	r5,16(r16)
    43b8:	003ff906 	br	43a0 <__swsetup_r+0x120>

000043bc <register_fini>:
    43bc:	f800283a 	ret

000043c0 <__call_exitprocs>:
    43c0:	00800074 	movhi	r2,1
    43c4:	10be6704 	addi	r2,r2,-1636
    43c8:	10800017 	ldw	r2,0(r2)
    43cc:	defff304 	addi	sp,sp,-52
    43d0:	df000b15 	stw	fp,44(sp)
    43d4:	d8800115 	stw	r2,4(sp)
    43d8:	00800034 	movhi	r2,0
    43dc:	10865004 	addi	r2,r2,6464
    43e0:	1005003a 	cmpeq	r2,r2,zero
    43e4:	d8800215 	stw	r2,8(sp)
    43e8:	d8800117 	ldw	r2,4(sp)
    43ec:	dd400815 	stw	r21,32(sp)
    43f0:	dd000715 	stw	r20,28(sp)
    43f4:	10805204 	addi	r2,r2,328
    43f8:	dfc00c15 	stw	ra,48(sp)
    43fc:	ddc00a15 	stw	r23,40(sp)
    4400:	dd800915 	stw	r22,36(sp)
    4404:	dcc00615 	stw	r19,24(sp)
    4408:	dc800515 	stw	r18,20(sp)
    440c:	dc400415 	stw	r17,16(sp)
    4410:	dc000315 	stw	r16,12(sp)
    4414:	282b883a 	mov	r21,r5
    4418:	2039883a 	mov	fp,r4
    441c:	d8800015 	stw	r2,0(sp)
    4420:	2829003a 	cmpeq	r20,r5,zero
    4424:	d8800117 	ldw	r2,4(sp)
    4428:	14405217 	ldw	r17,328(r2)
    442c:	88001026 	beq	r17,zero,4470 <__call_exitprocs+0xb0>
    4430:	ddc00017 	ldw	r23,0(sp)
    4434:	88800117 	ldw	r2,4(r17)
    4438:	8c802204 	addi	r18,r17,136
    443c:	143fffc4 	addi	r16,r2,-1
    4440:	80000916 	blt	r16,zero,4468 <__call_exitprocs+0xa8>
    4444:	05bfffc4 	movi	r22,-1
    4448:	a000151e 	bne	r20,zero,44a0 <__call_exitprocs+0xe0>
    444c:	8409883a 	add	r4,r16,r16
    4450:	2105883a 	add	r2,r4,r4
    4454:	1485883a 	add	r2,r2,r18
    4458:	10c02017 	ldw	r3,128(r2)
    445c:	a8c01126 	beq	r21,r3,44a4 <__call_exitprocs+0xe4>
    4460:	843fffc4 	addi	r16,r16,-1
    4464:	85bff81e 	bne	r16,r22,4448 <__call_exitprocs+0x88>
    4468:	d8800217 	ldw	r2,8(sp)
    446c:	10003126 	beq	r2,zero,4534 <__call_exitprocs+0x174>
    4470:	dfc00c17 	ldw	ra,48(sp)
    4474:	df000b17 	ldw	fp,44(sp)
    4478:	ddc00a17 	ldw	r23,40(sp)
    447c:	dd800917 	ldw	r22,36(sp)
    4480:	dd400817 	ldw	r21,32(sp)
    4484:	dd000717 	ldw	r20,28(sp)
    4488:	dcc00617 	ldw	r19,24(sp)
    448c:	dc800517 	ldw	r18,20(sp)
    4490:	dc400417 	ldw	r17,16(sp)
    4494:	dc000317 	ldw	r16,12(sp)
    4498:	dec00d04 	addi	sp,sp,52
    449c:	f800283a 	ret
    44a0:	8409883a 	add	r4,r16,r16
    44a4:	88c00117 	ldw	r3,4(r17)
    44a8:	2105883a 	add	r2,r4,r4
    44ac:	1445883a 	add	r2,r2,r17
    44b0:	18ffffc4 	addi	r3,r3,-1
    44b4:	11800217 	ldw	r6,8(r2)
    44b8:	1c001526 	beq	r3,r16,4510 <__call_exitprocs+0x150>
    44bc:	10000215 	stw	zero,8(r2)
    44c0:	303fe726 	beq	r6,zero,4460 <__call_exitprocs+0xa0>
    44c4:	00c00044 	movi	r3,1
    44c8:	1c06983a 	sll	r3,r3,r16
    44cc:	90804017 	ldw	r2,256(r18)
    44d0:	8cc00117 	ldw	r19,4(r17)
    44d4:	1884703a 	and	r2,r3,r2
    44d8:	10001426 	beq	r2,zero,452c <__call_exitprocs+0x16c>
    44dc:	90804117 	ldw	r2,260(r18)
    44e0:	1884703a 	and	r2,r3,r2
    44e4:	10000c1e 	bne	r2,zero,4518 <__call_exitprocs+0x158>
    44e8:	2105883a 	add	r2,r4,r4
    44ec:	1485883a 	add	r2,r2,r18
    44f0:	11400017 	ldw	r5,0(r2)
    44f4:	e009883a 	mov	r4,fp
    44f8:	303ee83a 	callr	r6
    44fc:	88800117 	ldw	r2,4(r17)
    4500:	98bfc81e 	bne	r19,r2,4424 <__call_exitprocs+0x64>
    4504:	b8800017 	ldw	r2,0(r23)
    4508:	147fd526 	beq	r2,r17,4460 <__call_exitprocs+0xa0>
    450c:	003fc506 	br	4424 <__call_exitprocs+0x64>
    4510:	8c000115 	stw	r16,4(r17)
    4514:	003fea06 	br	44c0 <__call_exitprocs+0x100>
    4518:	2105883a 	add	r2,r4,r4
    451c:	1485883a 	add	r2,r2,r18
    4520:	11000017 	ldw	r4,0(r2)
    4524:	303ee83a 	callr	r6
    4528:	003ff406 	br	44fc <__call_exitprocs+0x13c>
    452c:	303ee83a 	callr	r6
    4530:	003ff206 	br	44fc <__call_exitprocs+0x13c>
    4534:	88800117 	ldw	r2,4(r17)
    4538:	1000081e 	bne	r2,zero,455c <__call_exitprocs+0x19c>
    453c:	89000017 	ldw	r4,0(r17)
    4540:	20000726 	beq	r4,zero,4560 <__call_exitprocs+0x1a0>
    4544:	b9000015 	stw	r4,0(r23)
    4548:	8809883a 	mov	r4,r17
    454c:	00019400 	call	1940 <free>
    4550:	bc400017 	ldw	r17,0(r23)
    4554:	883fb71e 	bne	r17,zero,4434 <__call_exitprocs+0x74>
    4558:	003fc506 	br	4470 <__call_exitprocs+0xb0>
    455c:	89000017 	ldw	r4,0(r17)
    4560:	882f883a 	mov	r23,r17
    4564:	2023883a 	mov	r17,r4
    4568:	883fb21e 	bne	r17,zero,4434 <__call_exitprocs+0x74>
    456c:	003fc006 	br	4470 <__call_exitprocs+0xb0>

00004570 <quorem>:
    4570:	28c00417 	ldw	r3,16(r5)
    4574:	20800417 	ldw	r2,16(r4)
    4578:	defff604 	addi	sp,sp,-40
    457c:	ddc00715 	stw	r23,28(sp)
    4580:	dd400515 	stw	r21,20(sp)
    4584:	dfc00915 	stw	ra,36(sp)
    4588:	df000815 	stw	fp,32(sp)
    458c:	dd800615 	stw	r22,24(sp)
    4590:	dd000415 	stw	r20,16(sp)
    4594:	dcc00315 	stw	r19,12(sp)
    4598:	dc800215 	stw	r18,8(sp)
    459c:	dc400115 	stw	r17,4(sp)
    45a0:	dc000015 	stw	r16,0(sp)
    45a4:	202f883a 	mov	r23,r4
    45a8:	282b883a 	mov	r21,r5
    45ac:	10c07416 	blt	r2,r3,4780 <quorem+0x210>
    45b0:	1c7fffc4 	addi	r17,r3,-1
    45b4:	8c45883a 	add	r2,r17,r17
    45b8:	1085883a 	add	r2,r2,r2
    45bc:	2c000504 	addi	r16,r5,20
    45c0:	24c00504 	addi	r19,r4,20
    45c4:	14ed883a 	add	r22,r2,r19
    45c8:	80a5883a 	add	r18,r16,r2
    45cc:	b7000017 	ldw	fp,0(r22)
    45d0:	91400017 	ldw	r5,0(r18)
    45d4:	e009883a 	mov	r4,fp
    45d8:	29400044 	addi	r5,r5,1
    45dc:	00018f80 	call	18f8 <__udivsi3>
    45e0:	1029883a 	mov	r20,r2
    45e4:	10003c1e 	bne	r2,zero,46d8 <quorem+0x168>
    45e8:	a80b883a 	mov	r5,r21
    45ec:	b809883a 	mov	r4,r23
    45f0:	00072980 	call	7298 <__mcmp>
    45f4:	10002b16 	blt	r2,zero,46a4 <quorem+0x134>
    45f8:	a5000044 	addi	r20,r20,1
    45fc:	980f883a 	mov	r7,r19
    4600:	0011883a 	mov	r8,zero
    4604:	0009883a 	mov	r4,zero
    4608:	81400017 	ldw	r5,0(r16)
    460c:	38c00017 	ldw	r3,0(r7)
    4610:	84000104 	addi	r16,r16,4
    4614:	28bfffcc 	andi	r2,r5,65535
    4618:	2085883a 	add	r2,r4,r2
    461c:	11bfffcc 	andi	r6,r2,65535
    4620:	193fffcc 	andi	r4,r3,65535
    4624:	1004d43a 	srli	r2,r2,16
    4628:	280ad43a 	srli	r5,r5,16
    462c:	2189c83a 	sub	r4,r4,r6
    4630:	2209883a 	add	r4,r4,r8
    4634:	1806d43a 	srli	r3,r3,16
    4638:	288b883a 	add	r5,r5,r2
    463c:	200dd43a 	srai	r6,r4,16
    4640:	28bfffcc 	andi	r2,r5,65535
    4644:	1887c83a 	sub	r3,r3,r2
    4648:	1987883a 	add	r3,r3,r6
    464c:	3900000d 	sth	r4,0(r7)
    4650:	38c0008d 	sth	r3,2(r7)
    4654:	2808d43a 	srli	r4,r5,16
    4658:	39c00104 	addi	r7,r7,4
    465c:	1811d43a 	srai	r8,r3,16
    4660:	943fe92e 	bgeu	r18,r16,4608 <quorem+0x98>
    4664:	8c45883a 	add	r2,r17,r17
    4668:	1085883a 	add	r2,r2,r2
    466c:	9885883a 	add	r2,r19,r2
    4670:	10c00017 	ldw	r3,0(r2)
    4674:	18000b1e 	bne	r3,zero,46a4 <quorem+0x134>
    4678:	113fff04 	addi	r4,r2,-4
    467c:	9900082e 	bgeu	r19,r4,46a0 <quorem+0x130>
    4680:	10bfff17 	ldw	r2,-4(r2)
    4684:	10000326 	beq	r2,zero,4694 <quorem+0x124>
    4688:	00000506 	br	46a0 <quorem+0x130>
    468c:	20800017 	ldw	r2,0(r4)
    4690:	1000031e 	bne	r2,zero,46a0 <quorem+0x130>
    4694:	213fff04 	addi	r4,r4,-4
    4698:	8c7fffc4 	addi	r17,r17,-1
    469c:	993ffb36 	bltu	r19,r4,468c <quorem+0x11c>
    46a0:	bc400415 	stw	r17,16(r23)
    46a4:	a005883a 	mov	r2,r20
    46a8:	dfc00917 	ldw	ra,36(sp)
    46ac:	df000817 	ldw	fp,32(sp)
    46b0:	ddc00717 	ldw	r23,28(sp)
    46b4:	dd800617 	ldw	r22,24(sp)
    46b8:	dd400517 	ldw	r21,20(sp)
    46bc:	dd000417 	ldw	r20,16(sp)
    46c0:	dcc00317 	ldw	r19,12(sp)
    46c4:	dc800217 	ldw	r18,8(sp)
    46c8:	dc400117 	ldw	r17,4(sp)
    46cc:	dc000017 	ldw	r16,0(sp)
    46d0:	dec00a04 	addi	sp,sp,40
    46d4:	f800283a 	ret
    46d8:	980f883a 	mov	r7,r19
    46dc:	8011883a 	mov	r8,r16
    46e0:	0013883a 	mov	r9,zero
    46e4:	000d883a 	mov	r6,zero
    46e8:	40c00017 	ldw	r3,0(r8)
    46ec:	39000017 	ldw	r4,0(r7)
    46f0:	42000104 	addi	r8,r8,4
    46f4:	18bfffcc 	andi	r2,r3,65535
    46f8:	a085383a 	mul	r2,r20,r2
    46fc:	1806d43a 	srli	r3,r3,16
    4700:	217fffcc 	andi	r5,r4,65535
    4704:	3085883a 	add	r2,r6,r2
    4708:	11bfffcc 	andi	r6,r2,65535
    470c:	a0c7383a 	mul	r3,r20,r3
    4710:	1004d43a 	srli	r2,r2,16
    4714:	298bc83a 	sub	r5,r5,r6
    4718:	2a4b883a 	add	r5,r5,r9
    471c:	2008d43a 	srli	r4,r4,16
    4720:	1887883a 	add	r3,r3,r2
    4724:	280dd43a 	srai	r6,r5,16
    4728:	18bfffcc 	andi	r2,r3,65535
    472c:	2089c83a 	sub	r4,r4,r2
    4730:	2189883a 	add	r4,r4,r6
    4734:	3900008d 	sth	r4,2(r7)
    4738:	3940000d 	sth	r5,0(r7)
    473c:	180cd43a 	srli	r6,r3,16
    4740:	39c00104 	addi	r7,r7,4
    4744:	2013d43a 	srai	r9,r4,16
    4748:	923fe72e 	bgeu	r18,r8,46e8 <quorem+0x178>
    474c:	e03fa61e 	bne	fp,zero,45e8 <quorem+0x78>
    4750:	b0ffff04 	addi	r3,r22,-4
    4754:	98c0082e 	bgeu	r19,r3,4778 <quorem+0x208>
    4758:	b0bfff17 	ldw	r2,-4(r22)
    475c:	10000326 	beq	r2,zero,476c <quorem+0x1fc>
    4760:	00000506 	br	4778 <quorem+0x208>
    4764:	18800017 	ldw	r2,0(r3)
    4768:	1000031e 	bne	r2,zero,4778 <quorem+0x208>
    476c:	18ffff04 	addi	r3,r3,-4
    4770:	8c7fffc4 	addi	r17,r17,-1
    4774:	98fffb36 	bltu	r19,r3,4764 <quorem+0x1f4>
    4778:	bc400415 	stw	r17,16(r23)
    477c:	003f9a06 	br	45e8 <quorem+0x78>
    4780:	0005883a 	mov	r2,zero
    4784:	003fc806 	br	46a8 <quorem+0x138>

00004788 <_dtoa_r>:
    4788:	22001017 	ldw	r8,64(r4)
    478c:	deffda04 	addi	sp,sp,-152
    4790:	dd402115 	stw	r21,132(sp)
    4794:	dd002015 	stw	r20,128(sp)
    4798:	dc801e15 	stw	r18,120(sp)
    479c:	dc401d15 	stw	r17,116(sp)
    47a0:	dfc02515 	stw	ra,148(sp)
    47a4:	df002415 	stw	fp,144(sp)
    47a8:	ddc02315 	stw	r23,140(sp)
    47ac:	dd802215 	stw	r22,136(sp)
    47b0:	dcc01f15 	stw	r19,124(sp)
    47b4:	dc001c15 	stw	r16,112(sp)
    47b8:	d9001615 	stw	r4,88(sp)
    47bc:	3023883a 	mov	r17,r6
    47c0:	2829883a 	mov	r20,r5
    47c4:	d9c01715 	stw	r7,92(sp)
    47c8:	dc802817 	ldw	r18,160(sp)
    47cc:	302b883a 	mov	r21,r6
    47d0:	40000a26 	beq	r8,zero,47fc <_dtoa_r+0x74>
    47d4:	20801117 	ldw	r2,68(r4)
    47d8:	400b883a 	mov	r5,r8
    47dc:	40800115 	stw	r2,4(r8)
    47e0:	20c01117 	ldw	r3,68(r4)
    47e4:	00800044 	movi	r2,1
    47e8:	10c4983a 	sll	r2,r2,r3
    47ec:	40800215 	stw	r2,8(r8)
    47f0:	000713c0 	call	713c <_Bfree>
    47f4:	d8c01617 	ldw	r3,88(sp)
    47f8:	18001015 	stw	zero,64(r3)
    47fc:	8800a316 	blt	r17,zero,4a8c <_dtoa_r+0x304>
    4800:	90000015 	stw	zero,0(r18)
    4804:	a8dffc2c 	andhi	r3,r21,32752
    4808:	009ffc34 	movhi	r2,32752
    480c:	18809126 	beq	r3,r2,4a54 <_dtoa_r+0x2cc>
    4810:	000d883a 	mov	r6,zero
    4814:	000f883a 	mov	r7,zero
    4818:	a009883a 	mov	r4,r20
    481c:	a80b883a 	mov	r5,r21
    4820:	dd001215 	stw	r20,72(sp)
    4824:	dd401315 	stw	r21,76(sp)
    4828:	000a5640 	call	a564 <__nedf2>
    482c:	1000171e 	bne	r2,zero,488c <_dtoa_r+0x104>
    4830:	d9802717 	ldw	r6,156(sp)
    4834:	00800044 	movi	r2,1
    4838:	30800015 	stw	r2,0(r6)
    483c:	d8802917 	ldw	r2,164(sp)
    4840:	10029b26 	beq	r2,zero,52b0 <_dtoa_r+0xb28>
    4844:	d9002917 	ldw	r4,164(sp)
    4848:	00800074 	movhi	r2,1
    484c:	10b72644 	addi	r2,r2,-9063
    4850:	10ffffc4 	addi	r3,r2,-1
    4854:	20800015 	stw	r2,0(r4)
    4858:	1805883a 	mov	r2,r3
    485c:	dfc02517 	ldw	ra,148(sp)
    4860:	df002417 	ldw	fp,144(sp)
    4864:	ddc02317 	ldw	r23,140(sp)
    4868:	dd802217 	ldw	r22,136(sp)
    486c:	dd402117 	ldw	r21,132(sp)
    4870:	dd002017 	ldw	r20,128(sp)
    4874:	dcc01f17 	ldw	r19,124(sp)
    4878:	dc801e17 	ldw	r18,120(sp)
    487c:	dc401d17 	ldw	r17,116(sp)
    4880:	dc001c17 	ldw	r16,112(sp)
    4884:	dec02604 	addi	sp,sp,152
    4888:	f800283a 	ret
    488c:	d9001617 	ldw	r4,88(sp)
    4890:	d9401217 	ldw	r5,72(sp)
    4894:	d8800104 	addi	r2,sp,4
    4898:	a80d883a 	mov	r6,r21
    489c:	d9c00204 	addi	r7,sp,8
    48a0:	d8800015 	stw	r2,0(sp)
    48a4:	00077780 	call	7778 <__d2b>
    48a8:	d8800715 	stw	r2,28(sp)
    48ac:	a804d53a 	srli	r2,r21,20
    48b0:	1101ffcc 	andi	r4,r2,2047
    48b4:	20008626 	beq	r4,zero,4ad0 <_dtoa_r+0x348>
    48b8:	d8c01217 	ldw	r3,72(sp)
    48bc:	00800434 	movhi	r2,16
    48c0:	10bfffc4 	addi	r2,r2,-1
    48c4:	ddc00117 	ldw	r23,4(sp)
    48c8:	a884703a 	and	r2,r21,r2
    48cc:	1811883a 	mov	r8,r3
    48d0:	124ffc34 	orhi	r9,r2,16368
    48d4:	25bf0044 	addi	r22,r4,-1023
    48d8:	d8000815 	stw	zero,32(sp)
    48dc:	0005883a 	mov	r2,zero
    48e0:	00cffe34 	movhi	r3,16376
    48e4:	480b883a 	mov	r5,r9
    48e8:	4009883a 	mov	r4,r8
    48ec:	180f883a 	mov	r7,r3
    48f0:	100d883a 	mov	r6,r2
    48f4:	0009dcc0 	call	9dcc <__subdf3>
    48f8:	0218dbf4 	movhi	r8,25455
    48fc:	4210d844 	addi	r8,r8,17249
    4900:	024ff4f4 	movhi	r9,16339
    4904:	4a61e9c4 	addi	r9,r9,-30809
    4908:	480f883a 	mov	r7,r9
    490c:	400d883a 	mov	r6,r8
    4910:	180b883a 	mov	r5,r3
    4914:	1009883a 	mov	r4,r2
    4918:	0009ec00 	call	9ec0 <__muldf3>
    491c:	0222d874 	movhi	r8,35681
    4920:	42322cc4 	addi	r8,r8,-14157
    4924:	024ff1f4 	movhi	r9,16327
    4928:	4a628a04 	addi	r9,r9,-30168
    492c:	480f883a 	mov	r7,r9
    4930:	400d883a 	mov	r6,r8
    4934:	180b883a 	mov	r5,r3
    4938:	1009883a 	mov	r4,r2
    493c:	0009e4c0 	call	9e4c <__adddf3>
    4940:	b009883a 	mov	r4,r22
    4944:	1021883a 	mov	r16,r2
    4948:	1823883a 	mov	r17,r3
    494c:	000a7840 	call	a784 <__floatsidf>
    4950:	021427f4 	movhi	r8,20639
    4954:	421e7ec4 	addi	r8,r8,31227
    4958:	024ff4f4 	movhi	r9,16339
    495c:	4a5104c4 	addi	r9,r9,17427
    4960:	480f883a 	mov	r7,r9
    4964:	400d883a 	mov	r6,r8
    4968:	180b883a 	mov	r5,r3
    496c:	1009883a 	mov	r4,r2
    4970:	0009ec00 	call	9ec0 <__muldf3>
    4974:	180f883a 	mov	r7,r3
    4978:	880b883a 	mov	r5,r17
    497c:	100d883a 	mov	r6,r2
    4980:	8009883a 	mov	r4,r16
    4984:	0009e4c0 	call	9e4c <__adddf3>
    4988:	1009883a 	mov	r4,r2
    498c:	180b883a 	mov	r5,r3
    4990:	1021883a 	mov	r16,r2
    4994:	1823883a 	mov	r17,r3
    4998:	000a87c0 	call	a87c <__fixdfsi>
    499c:	000d883a 	mov	r6,zero
    49a0:	000f883a 	mov	r7,zero
    49a4:	8009883a 	mov	r4,r16
    49a8:	880b883a 	mov	r5,r17
    49ac:	d8800d15 	stw	r2,52(sp)
    49b0:	000a6fc0 	call	a6fc <__ltdf2>
    49b4:	10031716 	blt	r2,zero,5614 <_dtoa_r+0xe8c>
    49b8:	d8c00d17 	ldw	r3,52(sp)
    49bc:	00800584 	movi	r2,22
    49c0:	10c1482e 	bgeu	r2,r3,4ee4 <_dtoa_r+0x75c>
    49c4:	01000044 	movi	r4,1
    49c8:	d9000c15 	stw	r4,48(sp)
    49cc:	bd85c83a 	sub	r2,r23,r22
    49d0:	11bfffc4 	addi	r6,r2,-1
    49d4:	30030b16 	blt	r6,zero,5604 <_dtoa_r+0xe7c>
    49d8:	d9800a15 	stw	r6,40(sp)
    49dc:	d8001115 	stw	zero,68(sp)
    49e0:	d8c00d17 	ldw	r3,52(sp)
    49e4:	1802ff16 	blt	r3,zero,55e4 <_dtoa_r+0xe5c>
    49e8:	d9000a17 	ldw	r4,40(sp)
    49ec:	d8c00915 	stw	r3,36(sp)
    49f0:	d8001015 	stw	zero,64(sp)
    49f4:	20c9883a 	add	r4,r4,r3
    49f8:	d9000a15 	stw	r4,40(sp)
    49fc:	d9001717 	ldw	r4,92(sp)
    4a00:	00800244 	movi	r2,9
    4a04:	11004636 	bltu	r2,r4,4b20 <_dtoa_r+0x398>
    4a08:	00800144 	movi	r2,5
    4a0c:	11020416 	blt	r2,r4,5220 <_dtoa_r+0xa98>
    4a10:	04400044 	movi	r17,1
    4a14:	d8c01717 	ldw	r3,92(sp)
    4a18:	00800144 	movi	r2,5
    4a1c:	10c1ed36 	bltu	r2,r3,51d4 <_dtoa_r+0xa4c>
    4a20:	18c5883a 	add	r2,r3,r3
    4a24:	1085883a 	add	r2,r2,r2
    4a28:	00c00034 	movhi	r3,0
    4a2c:	18d28f04 	addi	r3,r3,19004
    4a30:	10c5883a 	add	r2,r2,r3
    4a34:	11000017 	ldw	r4,0(r2)
    4a38:	2000683a 	jmp	r4
    4a3c:	00004b28 	cmpgeui	zero,zero,300
    4a40:	00004b28 	cmpgeui	zero,zero,300
    4a44:	00005528 	cmpgeui	zero,zero,340
    4a48:	00005500 	call	550 <producteur+0x2c>
    4a4c:	00005544 	movi	zero,341
    4a50:	00005550 	cmplti	zero,zero,341
    4a54:	d9002717 	ldw	r4,156(sp)
    4a58:	0089c3c4 	movi	r2,9999
    4a5c:	20800015 	stw	r2,0(r4)
    4a60:	a0001026 	beq	r20,zero,4aa4 <_dtoa_r+0x31c>
    4a64:	00c00074 	movhi	r3,1
    4a68:	18f73204 	addi	r3,r3,-9016
    4a6c:	d9802917 	ldw	r6,164(sp)
    4a70:	303f7926 	beq	r6,zero,4858 <_dtoa_r+0xd0>
    4a74:	188000c7 	ldb	r2,3(r3)
    4a78:	190000c4 	addi	r4,r3,3
    4a7c:	1000101e 	bne	r2,zero,4ac0 <_dtoa_r+0x338>
    4a80:	d8802917 	ldw	r2,164(sp)
    4a84:	11000015 	stw	r4,0(r2)
    4a88:	003f7306 	br	4858 <_dtoa_r+0xd0>
    4a8c:	00a00034 	movhi	r2,32768
    4a90:	10bfffc4 	addi	r2,r2,-1
    4a94:	00c00044 	movi	r3,1
    4a98:	88aa703a 	and	r21,r17,r2
    4a9c:	90c00015 	stw	r3,0(r18)
    4aa0:	003f5806 	br	4804 <_dtoa_r+0x7c>
    4aa4:	00800434 	movhi	r2,16
    4aa8:	10bfffc4 	addi	r2,r2,-1
    4aac:	a884703a 	and	r2,r21,r2
    4ab0:	103fec1e 	bne	r2,zero,4a64 <_dtoa_r+0x2dc>
    4ab4:	00c00074 	movhi	r3,1
    4ab8:	18f72f04 	addi	r3,r3,-9028
    4abc:	003feb06 	br	4a6c <_dtoa_r+0x2e4>
    4ac0:	d8802917 	ldw	r2,164(sp)
    4ac4:	19000204 	addi	r4,r3,8
    4ac8:	11000015 	stw	r4,0(r2)
    4acc:	003f6206 	br	4858 <_dtoa_r+0xd0>
    4ad0:	ddc00117 	ldw	r23,4(sp)
    4ad4:	d8800217 	ldw	r2,8(sp)
    4ad8:	01000804 	movi	r4,32
    4adc:	b8c10c84 	addi	r3,r23,1074
    4ae0:	18a3883a 	add	r17,r3,r2
    4ae4:	2441b80e 	bge	r4,r17,51c8 <_dtoa_r+0xa40>
    4ae8:	00c01004 	movi	r3,64
    4aec:	1c47c83a 	sub	r3,r3,r17
    4af0:	88bff804 	addi	r2,r17,-32
    4af4:	a8c6983a 	sll	r3,r21,r3
    4af8:	a084d83a 	srl	r2,r20,r2
    4afc:	1888b03a 	or	r4,r3,r2
    4b00:	000a9540 	call	a954 <__floatunsidf>
    4b04:	1011883a 	mov	r8,r2
    4b08:	00bf8434 	movhi	r2,65040
    4b0c:	01000044 	movi	r4,1
    4b10:	10d3883a 	add	r9,r2,r3
    4b14:	8dbef344 	addi	r22,r17,-1075
    4b18:	d9000815 	stw	r4,32(sp)
    4b1c:	003f6f06 	br	48dc <_dtoa_r+0x154>
    4b20:	d8001715 	stw	zero,92(sp)
    4b24:	04400044 	movi	r17,1
    4b28:	00bfffc4 	movi	r2,-1
    4b2c:	00c00044 	movi	r3,1
    4b30:	d8800e15 	stw	r2,56(sp)
    4b34:	d8002615 	stw	zero,152(sp)
    4b38:	d8800f15 	stw	r2,60(sp)
    4b3c:	d8c00b15 	stw	r3,44(sp)
    4b40:	1021883a 	mov	r16,r2
    4b44:	d8801617 	ldw	r2,88(sp)
    4b48:	10001115 	stw	zero,68(r2)
    4b4c:	d8801617 	ldw	r2,88(sp)
    4b50:	11401117 	ldw	r5,68(r2)
    4b54:	1009883a 	mov	r4,r2
    4b58:	00076bc0 	call	76bc <_Balloc>
    4b5c:	d8c01617 	ldw	r3,88(sp)
    4b60:	d8800515 	stw	r2,20(sp)
    4b64:	18801015 	stw	r2,64(r3)
    4b68:	00800384 	movi	r2,14
    4b6c:	14006836 	bltu	r2,r16,4d10 <_dtoa_r+0x588>
    4b70:	8805003a 	cmpeq	r2,r17,zero
    4b74:	1000661e 	bne	r2,zero,4d10 <_dtoa_r+0x588>
    4b78:	d9000d17 	ldw	r4,52(sp)
    4b7c:	0102300e 	bge	zero,r4,5440 <_dtoa_r+0xcb8>
    4b80:	208003cc 	andi	r2,r4,15
    4b84:	100490fa 	slli	r2,r2,3
    4b88:	2025d13a 	srai	r18,r4,4
    4b8c:	00c00074 	movhi	r3,1
    4b90:	18f74304 	addi	r3,r3,-8948
    4b94:	10c5883a 	add	r2,r2,r3
    4b98:	90c0040c 	andi	r3,r18,16
    4b9c:	14000017 	ldw	r16,0(r2)
    4ba0:	14400117 	ldw	r17,4(r2)
    4ba4:	18036a1e 	bne	r3,zero,5950 <_dtoa_r+0x11c8>
    4ba8:	05800084 	movi	r22,2
    4bac:	90001026 	beq	r18,zero,4bf0 <_dtoa_r+0x468>
    4bb0:	04c00074 	movhi	r19,1
    4bb4:	9cf77504 	addi	r19,r19,-8748
    4bb8:	9080004c 	andi	r2,r18,1
    4bbc:	1005003a 	cmpeq	r2,r2,zero
    4bc0:	1000081e 	bne	r2,zero,4be4 <_dtoa_r+0x45c>
    4bc4:	99800017 	ldw	r6,0(r19)
    4bc8:	99c00117 	ldw	r7,4(r19)
    4bcc:	880b883a 	mov	r5,r17
    4bd0:	8009883a 	mov	r4,r16
    4bd4:	0009ec00 	call	9ec0 <__muldf3>
    4bd8:	1021883a 	mov	r16,r2
    4bdc:	b5800044 	addi	r22,r22,1
    4be0:	1823883a 	mov	r17,r3
    4be4:	9025d07a 	srai	r18,r18,1
    4be8:	9cc00204 	addi	r19,r19,8
    4bec:	903ff21e 	bne	r18,zero,4bb8 <_dtoa_r+0x430>
    4bf0:	a80b883a 	mov	r5,r21
    4bf4:	a009883a 	mov	r4,r20
    4bf8:	880f883a 	mov	r7,r17
    4bfc:	800d883a 	mov	r6,r16
    4c00:	000a2840 	call	a284 <__divdf3>
    4c04:	1029883a 	mov	r20,r2
    4c08:	182b883a 	mov	r21,r3
    4c0c:	d8c00c17 	ldw	r3,48(sp)
    4c10:	1805003a 	cmpeq	r2,r3,zero
    4c14:	1000081e 	bne	r2,zero,4c38 <_dtoa_r+0x4b0>
    4c18:	0005883a 	mov	r2,zero
    4c1c:	00cffc34 	movhi	r3,16368
    4c20:	180f883a 	mov	r7,r3
    4c24:	a009883a 	mov	r4,r20
    4c28:	a80b883a 	mov	r5,r21
    4c2c:	100d883a 	mov	r6,r2
    4c30:	000a6fc0 	call	a6fc <__ltdf2>
    4c34:	1003fe16 	blt	r2,zero,5c30 <_dtoa_r+0x14a8>
    4c38:	b009883a 	mov	r4,r22
    4c3c:	000a7840 	call	a784 <__floatsidf>
    4c40:	180b883a 	mov	r5,r3
    4c44:	1009883a 	mov	r4,r2
    4c48:	a00d883a 	mov	r6,r20
    4c4c:	a80f883a 	mov	r7,r21
    4c50:	0009ec00 	call	9ec0 <__muldf3>
    4c54:	0011883a 	mov	r8,zero
    4c58:	02500734 	movhi	r9,16412
    4c5c:	1009883a 	mov	r4,r2
    4c60:	180b883a 	mov	r5,r3
    4c64:	480f883a 	mov	r7,r9
    4c68:	400d883a 	mov	r6,r8
    4c6c:	0009e4c0 	call	9e4c <__adddf3>
    4c70:	d9000f17 	ldw	r4,60(sp)
    4c74:	102d883a 	mov	r22,r2
    4c78:	00bf3034 	movhi	r2,64704
    4c7c:	18b9883a 	add	fp,r3,r2
    4c80:	e02f883a 	mov	r23,fp
    4c84:	20028f1e 	bne	r4,zero,56c4 <_dtoa_r+0xf3c>
    4c88:	0005883a 	mov	r2,zero
    4c8c:	00d00534 	movhi	r3,16404
    4c90:	a009883a 	mov	r4,r20
    4c94:	a80b883a 	mov	r5,r21
    4c98:	180f883a 	mov	r7,r3
    4c9c:	100d883a 	mov	r6,r2
    4ca0:	0009dcc0 	call	9dcc <__subdf3>
    4ca4:	1009883a 	mov	r4,r2
    4ca8:	e00f883a 	mov	r7,fp
    4cac:	180b883a 	mov	r5,r3
    4cb0:	b00d883a 	mov	r6,r22
    4cb4:	1025883a 	mov	r18,r2
    4cb8:	1827883a 	mov	r19,r3
    4cbc:	000a5ec0 	call	a5ec <__gtdf2>
    4cc0:	00834f16 	blt	zero,r2,5a00 <_dtoa_r+0x1278>
    4cc4:	e0e0003c 	xorhi	r3,fp,32768
    4cc8:	9009883a 	mov	r4,r18
    4ccc:	980b883a 	mov	r5,r19
    4cd0:	180f883a 	mov	r7,r3
    4cd4:	b00d883a 	mov	r6,r22
    4cd8:	000a6fc0 	call	a6fc <__ltdf2>
    4cdc:	1000080e 	bge	r2,zero,4d00 <_dtoa_r+0x578>
    4ce0:	0027883a 	mov	r19,zero
    4ce4:	0025883a 	mov	r18,zero
    4ce8:	d8802617 	ldw	r2,152(sp)
    4cec:	df000517 	ldw	fp,20(sp)
    4cf0:	d8000615 	stw	zero,24(sp)
    4cf4:	0084303a 	nor	r2,zero,r2
    4cf8:	d8800d15 	stw	r2,52(sp)
    4cfc:	00019b06 	br	536c <_dtoa_r+0xbe4>
    4d00:	d9801217 	ldw	r6,72(sp)
    4d04:	d8801317 	ldw	r2,76(sp)
    4d08:	3029883a 	mov	r20,r6
    4d0c:	102b883a 	mov	r21,r2
    4d10:	d8c00217 	ldw	r3,8(sp)
    4d14:	18008516 	blt	r3,zero,4f2c <_dtoa_r+0x7a4>
    4d18:	d9000d17 	ldw	r4,52(sp)
    4d1c:	00800384 	movi	r2,14
    4d20:	11008216 	blt	r2,r4,4f2c <_dtoa_r+0x7a4>
    4d24:	200490fa 	slli	r2,r4,3
    4d28:	d9802617 	ldw	r6,152(sp)
    4d2c:	00c00074 	movhi	r3,1
    4d30:	18f74304 	addi	r3,r3,-8948
    4d34:	10c5883a 	add	r2,r2,r3
    4d38:	14800017 	ldw	r18,0(r2)
    4d3c:	14c00117 	ldw	r19,4(r2)
    4d40:	30031e16 	blt	r6,zero,59bc <_dtoa_r+0x1234>
    4d44:	d9000517 	ldw	r4,20(sp)
    4d48:	d8c00f17 	ldw	r3,60(sp)
    4d4c:	a823883a 	mov	r17,r21
    4d50:	a021883a 	mov	r16,r20
    4d54:	192b883a 	add	r21,r3,r4
    4d58:	2039883a 	mov	fp,r4
    4d5c:	00000f06 	br	4d9c <_dtoa_r+0x614>
    4d60:	0005883a 	mov	r2,zero
    4d64:	00d00934 	movhi	r3,16420
    4d68:	5009883a 	mov	r4,r10
    4d6c:	580b883a 	mov	r5,r11
    4d70:	180f883a 	mov	r7,r3
    4d74:	100d883a 	mov	r6,r2
    4d78:	0009ec00 	call	9ec0 <__muldf3>
    4d7c:	180b883a 	mov	r5,r3
    4d80:	000d883a 	mov	r6,zero
    4d84:	000f883a 	mov	r7,zero
    4d88:	1009883a 	mov	r4,r2
    4d8c:	1021883a 	mov	r16,r2
    4d90:	1823883a 	mov	r17,r3
    4d94:	000a5640 	call	a564 <__nedf2>
    4d98:	10004526 	beq	r2,zero,4eb0 <_dtoa_r+0x728>
    4d9c:	900d883a 	mov	r6,r18
    4da0:	980f883a 	mov	r7,r19
    4da4:	8009883a 	mov	r4,r16
    4da8:	880b883a 	mov	r5,r17
    4dac:	000a2840 	call	a284 <__divdf3>
    4db0:	180b883a 	mov	r5,r3
    4db4:	1009883a 	mov	r4,r2
    4db8:	000a87c0 	call	a87c <__fixdfsi>
    4dbc:	1009883a 	mov	r4,r2
    4dc0:	1029883a 	mov	r20,r2
    4dc4:	000a7840 	call	a784 <__floatsidf>
    4dc8:	180f883a 	mov	r7,r3
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	980b883a 	mov	r5,r19
    4dd4:	100d883a 	mov	r6,r2
    4dd8:	0009ec00 	call	9ec0 <__muldf3>
    4ddc:	180f883a 	mov	r7,r3
    4de0:	880b883a 	mov	r5,r17
    4de4:	8009883a 	mov	r4,r16
    4de8:	100d883a 	mov	r6,r2
    4dec:	0009dcc0 	call	9dcc <__subdf3>
    4df0:	1015883a 	mov	r10,r2
    4df4:	a0800c04 	addi	r2,r20,48
    4df8:	e0800005 	stb	r2,0(fp)
    4dfc:	e7000044 	addi	fp,fp,1
    4e00:	1817883a 	mov	r11,r3
    4e04:	e57fd61e 	bne	fp,r21,4d60 <_dtoa_r+0x5d8>
    4e08:	500d883a 	mov	r6,r10
    4e0c:	180f883a 	mov	r7,r3
    4e10:	5009883a 	mov	r4,r10
    4e14:	180b883a 	mov	r5,r3
    4e18:	0009e4c0 	call	9e4c <__adddf3>
    4e1c:	100d883a 	mov	r6,r2
    4e20:	9009883a 	mov	r4,r18
    4e24:	980b883a 	mov	r5,r19
    4e28:	180f883a 	mov	r7,r3
    4e2c:	1021883a 	mov	r16,r2
    4e30:	1823883a 	mov	r17,r3
    4e34:	000a6fc0 	call	a6fc <__ltdf2>
    4e38:	10000816 	blt	r2,zero,4e5c <_dtoa_r+0x6d4>
    4e3c:	980b883a 	mov	r5,r19
    4e40:	800d883a 	mov	r6,r16
    4e44:	880f883a 	mov	r7,r17
    4e48:	9009883a 	mov	r4,r18
    4e4c:	000a4dc0 	call	a4dc <__eqdf2>
    4e50:	1000171e 	bne	r2,zero,4eb0 <_dtoa_r+0x728>
    4e54:	a080004c 	andi	r2,r20,1
    4e58:	10001526 	beq	r2,zero,4eb0 <_dtoa_r+0x728>
    4e5c:	d8800d17 	ldw	r2,52(sp)
    4e60:	d8800415 	stw	r2,16(sp)
    4e64:	e009883a 	mov	r4,fp
    4e68:	213fffc4 	addi	r4,r4,-1
    4e6c:	20c00007 	ldb	r3,0(r4)
    4e70:	00800e44 	movi	r2,57
    4e74:	1880081e 	bne	r3,r2,4e98 <_dtoa_r+0x710>
    4e78:	d8800517 	ldw	r2,20(sp)
    4e7c:	113ffa1e 	bne	r2,r4,4e68 <_dtoa_r+0x6e0>
    4e80:	d8c00417 	ldw	r3,16(sp)
    4e84:	d9800517 	ldw	r6,20(sp)
    4e88:	00800c04 	movi	r2,48
    4e8c:	18c00044 	addi	r3,r3,1
    4e90:	d8c00415 	stw	r3,16(sp)
    4e94:	30800005 	stb	r2,0(r6)
    4e98:	20800003 	ldbu	r2,0(r4)
    4e9c:	d8c00417 	ldw	r3,16(sp)
    4ea0:	27000044 	addi	fp,r4,1
    4ea4:	10800044 	addi	r2,r2,1
    4ea8:	d8c00d15 	stw	r3,52(sp)
    4eac:	20800005 	stb	r2,0(r4)
    4eb0:	d9001617 	ldw	r4,88(sp)
    4eb4:	d9400717 	ldw	r5,28(sp)
    4eb8:	000713c0 	call	713c <_Bfree>
    4ebc:	e0000005 	stb	zero,0(fp)
    4ec0:	d9800d17 	ldw	r6,52(sp)
    4ec4:	d8c02717 	ldw	r3,156(sp)
    4ec8:	d9002917 	ldw	r4,164(sp)
    4ecc:	30800044 	addi	r2,r6,1
    4ed0:	18800015 	stw	r2,0(r3)
    4ed4:	20029c26 	beq	r4,zero,5948 <_dtoa_r+0x11c0>
    4ed8:	d8c00517 	ldw	r3,20(sp)
    4edc:	27000015 	stw	fp,0(r4)
    4ee0:	003e5d06 	br	4858 <_dtoa_r+0xd0>
    4ee4:	d9800d17 	ldw	r6,52(sp)
    4ee8:	00c00074 	movhi	r3,1
    4eec:	18f74304 	addi	r3,r3,-8948
    4ef0:	d9001217 	ldw	r4,72(sp)
    4ef4:	300490fa 	slli	r2,r6,3
    4ef8:	d9401317 	ldw	r5,76(sp)
    4efc:	10c5883a 	add	r2,r2,r3
    4f00:	12000017 	ldw	r8,0(r2)
    4f04:	12400117 	ldw	r9,4(r2)
    4f08:	400d883a 	mov	r6,r8
    4f0c:	480f883a 	mov	r7,r9
    4f10:	000a6fc0 	call	a6fc <__ltdf2>
    4f14:	1000030e 	bge	r2,zero,4f24 <_dtoa_r+0x79c>
    4f18:	d8800d17 	ldw	r2,52(sp)
    4f1c:	10bfffc4 	addi	r2,r2,-1
    4f20:	d8800d15 	stw	r2,52(sp)
    4f24:	d8000c15 	stw	zero,48(sp)
    4f28:	003ea806 	br	49cc <_dtoa_r+0x244>
    4f2c:	d9000b17 	ldw	r4,44(sp)
    4f30:	202cc03a 	cmpne	r22,r4,zero
    4f34:	b000c71e 	bne	r22,zero,5254 <_dtoa_r+0xacc>
    4f38:	dc001117 	ldw	r16,68(sp)
    4f3c:	dc801017 	ldw	r18,64(sp)
    4f40:	0027883a 	mov	r19,zero
    4f44:	04000b0e 	bge	zero,r16,4f74 <_dtoa_r+0x7ec>
    4f48:	d8c00a17 	ldw	r3,40(sp)
    4f4c:	00c0090e 	bge	zero,r3,4f74 <_dtoa_r+0x7ec>
    4f50:	8005883a 	mov	r2,r16
    4f54:	1c011316 	blt	r3,r16,53a4 <_dtoa_r+0xc1c>
    4f58:	d9000a17 	ldw	r4,40(sp)
    4f5c:	d9801117 	ldw	r6,68(sp)
    4f60:	80a1c83a 	sub	r16,r16,r2
    4f64:	2089c83a 	sub	r4,r4,r2
    4f68:	308dc83a 	sub	r6,r6,r2
    4f6c:	d9000a15 	stw	r4,40(sp)
    4f70:	d9801115 	stw	r6,68(sp)
    4f74:	d8801017 	ldw	r2,64(sp)
    4f78:	0080150e 	bge	zero,r2,4fd0 <_dtoa_r+0x848>
    4f7c:	d8c00b17 	ldw	r3,44(sp)
    4f80:	1805003a 	cmpeq	r2,r3,zero
    4f84:	1001c91e 	bne	r2,zero,56ac <_dtoa_r+0xf24>
    4f88:	04800e0e 	bge	zero,r18,4fc4 <_dtoa_r+0x83c>
    4f8c:	d9001617 	ldw	r4,88(sp)
    4f90:	980b883a 	mov	r5,r19
    4f94:	900d883a 	mov	r6,r18
    4f98:	0007ef00 	call	7ef0 <__pow5mult>
    4f9c:	d9001617 	ldw	r4,88(sp)
    4fa0:	d9800717 	ldw	r6,28(sp)
    4fa4:	100b883a 	mov	r5,r2
    4fa8:	1027883a 	mov	r19,r2
    4fac:	0007bcc0 	call	7bcc <__multiply>
    4fb0:	d9001617 	ldw	r4,88(sp)
    4fb4:	d9400717 	ldw	r5,28(sp)
    4fb8:	1023883a 	mov	r17,r2
    4fbc:	000713c0 	call	713c <_Bfree>
    4fc0:	dc400715 	stw	r17,28(sp)
    4fc4:	d9001017 	ldw	r4,64(sp)
    4fc8:	248dc83a 	sub	r6,r4,r18
    4fcc:	30010e1e 	bne	r6,zero,5408 <_dtoa_r+0xc80>
    4fd0:	d9001617 	ldw	r4,88(sp)
    4fd4:	04400044 	movi	r17,1
    4fd8:	880b883a 	mov	r5,r17
    4fdc:	0007db40 	call	7db4 <__i2b>
    4fe0:	d9800917 	ldw	r6,36(sp)
    4fe4:	1025883a 	mov	r18,r2
    4fe8:	0180040e 	bge	zero,r6,4ffc <_dtoa_r+0x874>
    4fec:	d9001617 	ldw	r4,88(sp)
    4ff0:	100b883a 	mov	r5,r2
    4ff4:	0007ef00 	call	7ef0 <__pow5mult>
    4ff8:	1025883a 	mov	r18,r2
    4ffc:	d8801717 	ldw	r2,92(sp)
    5000:	8880f30e 	bge	r17,r2,53d0 <_dtoa_r+0xc48>
    5004:	0023883a 	mov	r17,zero
    5008:	d9800917 	ldw	r6,36(sp)
    500c:	30019e1e 	bne	r6,zero,5688 <_dtoa_r+0xf00>
    5010:	00c00044 	movi	r3,1
    5014:	d9000a17 	ldw	r4,40(sp)
    5018:	20c5883a 	add	r2,r4,r3
    501c:	10c007cc 	andi	r3,r2,31
    5020:	1800841e 	bne	r3,zero,5234 <_dtoa_r+0xaac>
    5024:	00800704 	movi	r2,28
    5028:	d9000a17 	ldw	r4,40(sp)
    502c:	d9801117 	ldw	r6,68(sp)
    5030:	80a1883a 	add	r16,r16,r2
    5034:	2089883a 	add	r4,r4,r2
    5038:	308d883a 	add	r6,r6,r2
    503c:	d9000a15 	stw	r4,40(sp)
    5040:	d9801115 	stw	r6,68(sp)
    5044:	d8801117 	ldw	r2,68(sp)
    5048:	0080050e 	bge	zero,r2,5060 <_dtoa_r+0x8d8>
    504c:	d9400717 	ldw	r5,28(sp)
    5050:	d9001617 	ldw	r4,88(sp)
    5054:	100d883a 	mov	r6,r2
    5058:	0007a800 	call	7a80 <__lshift>
    505c:	d8800715 	stw	r2,28(sp)
    5060:	d8c00a17 	ldw	r3,40(sp)
    5064:	00c0050e 	bge	zero,r3,507c <_dtoa_r+0x8f4>
    5068:	d9001617 	ldw	r4,88(sp)
    506c:	900b883a 	mov	r5,r18
    5070:	180d883a 	mov	r6,r3
    5074:	0007a800 	call	7a80 <__lshift>
    5078:	1025883a 	mov	r18,r2
    507c:	d9000c17 	ldw	r4,48(sp)
    5080:	2005003a 	cmpeq	r2,r4,zero
    5084:	10016f26 	beq	r2,zero,5644 <_dtoa_r+0xebc>
    5088:	d9000f17 	ldw	r4,60(sp)
    508c:	0102170e 	bge	zero,r4,58ec <_dtoa_r+0x1164>
    5090:	d9800b17 	ldw	r6,44(sp)
    5094:	3005003a 	cmpeq	r2,r6,zero
    5098:	1000881e 	bne	r2,zero,52bc <_dtoa_r+0xb34>
    509c:	0400050e 	bge	zero,r16,50b4 <_dtoa_r+0x92c>
    50a0:	d9001617 	ldw	r4,88(sp)
    50a4:	980b883a 	mov	r5,r19
    50a8:	800d883a 	mov	r6,r16
    50ac:	0007a800 	call	7a80 <__lshift>
    50b0:	1027883a 	mov	r19,r2
    50b4:	8804c03a 	cmpne	r2,r17,zero
    50b8:	1002541e 	bne	r2,zero,5a0c <_dtoa_r+0x1284>
    50bc:	980b883a 	mov	r5,r19
    50c0:	dd800517 	ldw	r22,20(sp)
    50c4:	dcc00615 	stw	r19,24(sp)
    50c8:	a700004c 	andi	fp,r20,1
    50cc:	2827883a 	mov	r19,r5
    50d0:	d9000717 	ldw	r4,28(sp)
    50d4:	900b883a 	mov	r5,r18
    50d8:	00045700 	call	4570 <quorem>
    50dc:	d9000717 	ldw	r4,28(sp)
    50e0:	d9400617 	ldw	r5,24(sp)
    50e4:	1023883a 	mov	r17,r2
    50e8:	8dc00c04 	addi	r23,r17,48
    50ec:	00072980 	call	7298 <__mcmp>
    50f0:	d9001617 	ldw	r4,88(sp)
    50f4:	900b883a 	mov	r5,r18
    50f8:	980d883a 	mov	r6,r19
    50fc:	1029883a 	mov	r20,r2
    5100:	00078f40 	call	78f4 <__mdiff>
    5104:	102b883a 	mov	r21,r2
    5108:	10800317 	ldw	r2,12(r2)
    510c:	1001281e 	bne	r2,zero,55b0 <_dtoa_r+0xe28>
    5110:	d9000717 	ldw	r4,28(sp)
    5114:	a80b883a 	mov	r5,r21
    5118:	00072980 	call	7298 <__mcmp>
    511c:	d9001617 	ldw	r4,88(sp)
    5120:	1021883a 	mov	r16,r2
    5124:	a80b883a 	mov	r5,r21
    5128:	000713c0 	call	713c <_Bfree>
    512c:	8000041e 	bne	r16,zero,5140 <_dtoa_r+0x9b8>
    5130:	d8801717 	ldw	r2,92(sp)
    5134:	1000021e 	bne	r2,zero,5140 <_dtoa_r+0x9b8>
    5138:	e004c03a 	cmpne	r2,fp,zero
    513c:	10011726 	beq	r2,zero,559c <_dtoa_r+0xe14>
    5140:	a0010616 	blt	r20,zero,555c <_dtoa_r+0xdd4>
    5144:	a000041e 	bne	r20,zero,5158 <_dtoa_r+0x9d0>
    5148:	d8c01717 	ldw	r3,92(sp)
    514c:	1800021e 	bne	r3,zero,5158 <_dtoa_r+0x9d0>
    5150:	e004c03a 	cmpne	r2,fp,zero
    5154:	10010126 	beq	r2,zero,555c <_dtoa_r+0xdd4>
    5158:	04023d16 	blt	zero,r16,5a50 <_dtoa_r+0x12c8>
    515c:	b5c00005 	stb	r23,0(r22)
    5160:	d9800517 	ldw	r6,20(sp)
    5164:	d9000f17 	ldw	r4,60(sp)
    5168:	b5800044 	addi	r22,r22,1
    516c:	3105883a 	add	r2,r6,r4
    5170:	b0806526 	beq	r22,r2,5308 <_dtoa_r+0xb80>
    5174:	d9400717 	ldw	r5,28(sp)
    5178:	d9001617 	ldw	r4,88(sp)
    517c:	01800284 	movi	r6,10
    5180:	000f883a 	mov	r7,zero
    5184:	0007df00 	call	7df0 <__multadd>
    5188:	d8800715 	stw	r2,28(sp)
    518c:	d8800617 	ldw	r2,24(sp)
    5190:	14c10c26 	beq	r2,r19,55c4 <_dtoa_r+0xe3c>
    5194:	d9400617 	ldw	r5,24(sp)
    5198:	d9001617 	ldw	r4,88(sp)
    519c:	01800284 	movi	r6,10
    51a0:	000f883a 	mov	r7,zero
    51a4:	0007df00 	call	7df0 <__multadd>
    51a8:	d9001617 	ldw	r4,88(sp)
    51ac:	980b883a 	mov	r5,r19
    51b0:	01800284 	movi	r6,10
    51b4:	000f883a 	mov	r7,zero
    51b8:	d8800615 	stw	r2,24(sp)
    51bc:	0007df00 	call	7df0 <__multadd>
    51c0:	1027883a 	mov	r19,r2
    51c4:	003fc206 	br	50d0 <_dtoa_r+0x948>
    51c8:	2445c83a 	sub	r2,r4,r17
    51cc:	a088983a 	sll	r4,r20,r2
    51d0:	003e4b06 	br	4b00 <_dtoa_r+0x378>
    51d4:	01bfffc4 	movi	r6,-1
    51d8:	00800044 	movi	r2,1
    51dc:	d9800e15 	stw	r6,56(sp)
    51e0:	d9800f15 	stw	r6,60(sp)
    51e4:	d8800b15 	stw	r2,44(sp)
    51e8:	d8c01617 	ldw	r3,88(sp)
    51ec:	008005c4 	movi	r2,23
    51f0:	18001115 	stw	zero,68(r3)
    51f4:	1580082e 	bgeu	r2,r22,5218 <_dtoa_r+0xa90>
    51f8:	00c00104 	movi	r3,4
    51fc:	0009883a 	mov	r4,zero
    5200:	18c7883a 	add	r3,r3,r3
    5204:	18800504 	addi	r2,r3,20
    5208:	21000044 	addi	r4,r4,1
    520c:	b0bffc2e 	bgeu	r22,r2,5200 <_dtoa_r+0xa78>
    5210:	d9801617 	ldw	r6,88(sp)
    5214:	31001115 	stw	r4,68(r6)
    5218:	dc000f17 	ldw	r16,60(sp)
    521c:	003e4b06 	br	4b4c <_dtoa_r+0x3c4>
    5220:	d9801717 	ldw	r6,92(sp)
    5224:	0023883a 	mov	r17,zero
    5228:	31bfff04 	addi	r6,r6,-4
    522c:	d9801715 	stw	r6,92(sp)
    5230:	003df806 	br	4a14 <_dtoa_r+0x28c>
    5234:	00800804 	movi	r2,32
    5238:	10c9c83a 	sub	r4,r2,r3
    523c:	00c00104 	movi	r3,4
    5240:	19005a16 	blt	r3,r4,53ac <_dtoa_r+0xc24>
    5244:	008000c4 	movi	r2,3
    5248:	113f7e16 	blt	r2,r4,5044 <_dtoa_r+0x8bc>
    524c:	20800704 	addi	r2,r4,28
    5250:	003f7506 	br	5028 <_dtoa_r+0x8a0>
    5254:	d9801717 	ldw	r6,92(sp)
    5258:	00800044 	movi	r2,1
    525c:	1180a10e 	bge	r2,r6,54e4 <_dtoa_r+0xd5c>
    5260:	d9800f17 	ldw	r6,60(sp)
    5264:	d8c01017 	ldw	r3,64(sp)
    5268:	30bfffc4 	addi	r2,r6,-1
    526c:	1881c616 	blt	r3,r2,5988 <_dtoa_r+0x1200>
    5270:	18a5c83a 	sub	r18,r3,r2
    5274:	d8800f17 	ldw	r2,60(sp)
    5278:	10026216 	blt	r2,zero,5c04 <_dtoa_r+0x147c>
    527c:	dc001117 	ldw	r16,68(sp)
    5280:	1007883a 	mov	r3,r2
    5284:	d9800a17 	ldw	r6,40(sp)
    5288:	d8801117 	ldw	r2,68(sp)
    528c:	d9001617 	ldw	r4,88(sp)
    5290:	30cd883a 	add	r6,r6,r3
    5294:	10c5883a 	add	r2,r2,r3
    5298:	01400044 	movi	r5,1
    529c:	d9800a15 	stw	r6,40(sp)
    52a0:	d8801115 	stw	r2,68(sp)
    52a4:	0007db40 	call	7db4 <__i2b>
    52a8:	1027883a 	mov	r19,r2
    52ac:	003f2506 	br	4f44 <_dtoa_r+0x7bc>
    52b0:	00c00074 	movhi	r3,1
    52b4:	18f72604 	addi	r3,r3,-9064
    52b8:	003d6706 	br	4858 <_dtoa_r+0xd0>
    52bc:	dd800517 	ldw	r22,20(sp)
    52c0:	04000044 	movi	r16,1
    52c4:	00000706 	br	52e4 <_dtoa_r+0xb5c>
    52c8:	d9400717 	ldw	r5,28(sp)
    52cc:	d9001617 	ldw	r4,88(sp)
    52d0:	01800284 	movi	r6,10
    52d4:	000f883a 	mov	r7,zero
    52d8:	0007df00 	call	7df0 <__multadd>
    52dc:	d8800715 	stw	r2,28(sp)
    52e0:	84000044 	addi	r16,r16,1
    52e4:	d9000717 	ldw	r4,28(sp)
    52e8:	900b883a 	mov	r5,r18
    52ec:	00045700 	call	4570 <quorem>
    52f0:	15c00c04 	addi	r23,r2,48
    52f4:	b5c00005 	stb	r23,0(r22)
    52f8:	d8c00f17 	ldw	r3,60(sp)
    52fc:	b5800044 	addi	r22,r22,1
    5300:	80fff116 	blt	r16,r3,52c8 <_dtoa_r+0xb40>
    5304:	d8000615 	stw	zero,24(sp)
    5308:	d9400717 	ldw	r5,28(sp)
    530c:	d9001617 	ldw	r4,88(sp)
    5310:	01800044 	movi	r6,1
    5314:	0007a800 	call	7a80 <__lshift>
    5318:	1009883a 	mov	r4,r2
    531c:	900b883a 	mov	r5,r18
    5320:	d8800715 	stw	r2,28(sp)
    5324:	00072980 	call	7298 <__mcmp>
    5328:	00803c0e 	bge	zero,r2,541c <_dtoa_r+0xc94>
    532c:	b009883a 	mov	r4,r22
    5330:	213fffc4 	addi	r4,r4,-1
    5334:	21400003 	ldbu	r5,0(r4)
    5338:	00800e44 	movi	r2,57
    533c:	28c03fcc 	andi	r3,r5,255
    5340:	18c0201c 	xori	r3,r3,128
    5344:	18ffe004 	addi	r3,r3,-128
    5348:	1881981e 	bne	r3,r2,59ac <_dtoa_r+0x1224>
    534c:	d9800517 	ldw	r6,20(sp)
    5350:	21bff71e 	bne	r4,r6,5330 <_dtoa_r+0xba8>
    5354:	d8800d17 	ldw	r2,52(sp)
    5358:	37000044 	addi	fp,r6,1
    535c:	10800044 	addi	r2,r2,1
    5360:	d8800d15 	stw	r2,52(sp)
    5364:	00800c44 	movi	r2,49
    5368:	30800005 	stb	r2,0(r6)
    536c:	d9001617 	ldw	r4,88(sp)
    5370:	900b883a 	mov	r5,r18
    5374:	000713c0 	call	713c <_Bfree>
    5378:	983ecd26 	beq	r19,zero,4eb0 <_dtoa_r+0x728>
    537c:	d8c00617 	ldw	r3,24(sp)
    5380:	18000426 	beq	r3,zero,5394 <_dtoa_r+0xc0c>
    5384:	1cc00326 	beq	r3,r19,5394 <_dtoa_r+0xc0c>
    5388:	d9001617 	ldw	r4,88(sp)
    538c:	180b883a 	mov	r5,r3
    5390:	000713c0 	call	713c <_Bfree>
    5394:	d9001617 	ldw	r4,88(sp)
    5398:	980b883a 	mov	r5,r19
    539c:	000713c0 	call	713c <_Bfree>
    53a0:	003ec306 	br	4eb0 <_dtoa_r+0x728>
    53a4:	1805883a 	mov	r2,r3
    53a8:	003eeb06 	br	4f58 <_dtoa_r+0x7d0>
    53ac:	d9800a17 	ldw	r6,40(sp)
    53b0:	d8c01117 	ldw	r3,68(sp)
    53b4:	20bfff04 	addi	r2,r4,-4
    53b8:	308d883a 	add	r6,r6,r2
    53bc:	1887883a 	add	r3,r3,r2
    53c0:	80a1883a 	add	r16,r16,r2
    53c4:	d9800a15 	stw	r6,40(sp)
    53c8:	d8c01115 	stw	r3,68(sp)
    53cc:	003f1d06 	br	5044 <_dtoa_r+0x8bc>
    53d0:	a03f0c1e 	bne	r20,zero,5004 <_dtoa_r+0x87c>
    53d4:	00800434 	movhi	r2,16
    53d8:	10bfffc4 	addi	r2,r2,-1
    53dc:	a884703a 	and	r2,r21,r2
    53e0:	103f081e 	bne	r2,zero,5004 <_dtoa_r+0x87c>
    53e4:	a89ffc2c 	andhi	r2,r21,32752
    53e8:	103f0626 	beq	r2,zero,5004 <_dtoa_r+0x87c>
    53ec:	d8c01117 	ldw	r3,68(sp)
    53f0:	d9000a17 	ldw	r4,40(sp)
    53f4:	18c00044 	addi	r3,r3,1
    53f8:	21000044 	addi	r4,r4,1
    53fc:	d8c01115 	stw	r3,68(sp)
    5400:	d9000a15 	stw	r4,40(sp)
    5404:	003f0006 	br	5008 <_dtoa_r+0x880>
    5408:	d9400717 	ldw	r5,28(sp)
    540c:	d9001617 	ldw	r4,88(sp)
    5410:	0007ef00 	call	7ef0 <__pow5mult>
    5414:	d8800715 	stw	r2,28(sp)
    5418:	003eed06 	br	4fd0 <_dtoa_r+0x848>
    541c:	1000021e 	bne	r2,zero,5428 <_dtoa_r+0xca0>
    5420:	b880004c 	andi	r2,r23,1
    5424:	103fc11e 	bne	r2,zero,532c <_dtoa_r+0xba4>
    5428:	b5bfffc4 	addi	r22,r22,-1
    542c:	b0c00007 	ldb	r3,0(r22)
    5430:	00800c04 	movi	r2,48
    5434:	18bffc26 	beq	r3,r2,5428 <_dtoa_r+0xca0>
    5438:	b7000044 	addi	fp,r22,1
    543c:	003fcb06 	br	536c <_dtoa_r+0xbe4>
    5440:	d9800d17 	ldw	r6,52(sp)
    5444:	018fc83a 	sub	r7,zero,r6
    5448:	3801f726 	beq	r7,zero,5c28 <_dtoa_r+0x14a0>
    544c:	398003cc 	andi	r6,r7,15
    5450:	300c90fa 	slli	r6,r6,3
    5454:	01400074 	movhi	r5,1
    5458:	29774304 	addi	r5,r5,-8948
    545c:	d9001217 	ldw	r4,72(sp)
    5460:	314d883a 	add	r6,r6,r5
    5464:	30c00117 	ldw	r3,4(r6)
    5468:	30800017 	ldw	r2,0(r6)
    546c:	d9401317 	ldw	r5,76(sp)
    5470:	3821d13a 	srai	r16,r7,4
    5474:	100d883a 	mov	r6,r2
    5478:	180f883a 	mov	r7,r3
    547c:	0009ec00 	call	9ec0 <__muldf3>
    5480:	1011883a 	mov	r8,r2
    5484:	1813883a 	mov	r9,r3
    5488:	1029883a 	mov	r20,r2
    548c:	182b883a 	mov	r21,r3
    5490:	8001e526 	beq	r16,zero,5c28 <_dtoa_r+0x14a0>
    5494:	05800084 	movi	r22,2
    5498:	04400074 	movhi	r17,1
    549c:	8c777504 	addi	r17,r17,-8748
    54a0:	8080004c 	andi	r2,r16,1
    54a4:	1005003a 	cmpeq	r2,r2,zero
    54a8:	1000081e 	bne	r2,zero,54cc <_dtoa_r+0xd44>
    54ac:	89800017 	ldw	r6,0(r17)
    54b0:	89c00117 	ldw	r7,4(r17)
    54b4:	480b883a 	mov	r5,r9
    54b8:	4009883a 	mov	r4,r8
    54bc:	0009ec00 	call	9ec0 <__muldf3>
    54c0:	1011883a 	mov	r8,r2
    54c4:	b5800044 	addi	r22,r22,1
    54c8:	1813883a 	mov	r9,r3
    54cc:	8021d07a 	srai	r16,r16,1
    54d0:	8c400204 	addi	r17,r17,8
    54d4:	803ff21e 	bne	r16,zero,54a0 <_dtoa_r+0xd18>
    54d8:	4029883a 	mov	r20,r8
    54dc:	482b883a 	mov	r21,r9
    54e0:	003dca06 	br	4c0c <_dtoa_r+0x484>
    54e4:	d9000817 	ldw	r4,32(sp)
    54e8:	2005003a 	cmpeq	r2,r4,zero
    54ec:	1001f61e 	bne	r2,zero,5cc8 <_dtoa_r+0x1540>
    54f0:	dc001117 	ldw	r16,68(sp)
    54f4:	dc801017 	ldw	r18,64(sp)
    54f8:	18c10cc4 	addi	r3,r3,1075
    54fc:	003f6106 	br	5284 <_dtoa_r+0xafc>
    5500:	d8000b15 	stw	zero,44(sp)
    5504:	d9802617 	ldw	r6,152(sp)
    5508:	d8c00d17 	ldw	r3,52(sp)
    550c:	30800044 	addi	r2,r6,1
    5510:	18ad883a 	add	r22,r3,r2
    5514:	b13fffc4 	addi	r4,r22,-1
    5518:	d9000e15 	stw	r4,56(sp)
    551c:	0581f60e 	bge	zero,r22,5cf8 <_dtoa_r+0x1570>
    5520:	dd800f15 	stw	r22,60(sp)
    5524:	003f3006 	br	51e8 <_dtoa_r+0xa60>
    5528:	d8000b15 	stw	zero,44(sp)
    552c:	d9002617 	ldw	r4,152(sp)
    5530:	0101eb0e 	bge	zero,r4,5ce0 <_dtoa_r+0x1558>
    5534:	202d883a 	mov	r22,r4
    5538:	d9000e15 	stw	r4,56(sp)
    553c:	d9000f15 	stw	r4,60(sp)
    5540:	003f2906 	br	51e8 <_dtoa_r+0xa60>
    5544:	01800044 	movi	r6,1
    5548:	d9800b15 	stw	r6,44(sp)
    554c:	003ff706 	br	552c <_dtoa_r+0xda4>
    5550:	01000044 	movi	r4,1
    5554:	d9000b15 	stw	r4,44(sp)
    5558:	003fea06 	br	5504 <_dtoa_r+0xd7c>
    555c:	04000c0e 	bge	zero,r16,5590 <_dtoa_r+0xe08>
    5560:	d9400717 	ldw	r5,28(sp)
    5564:	d9001617 	ldw	r4,88(sp)
    5568:	01800044 	movi	r6,1
    556c:	0007a800 	call	7a80 <__lshift>
    5570:	1009883a 	mov	r4,r2
    5574:	900b883a 	mov	r5,r18
    5578:	d8800715 	stw	r2,28(sp)
    557c:	00072980 	call	7298 <__mcmp>
    5580:	0081e00e 	bge	zero,r2,5d04 <_dtoa_r+0x157c>
    5584:	bdc00044 	addi	r23,r23,1
    5588:	00800e84 	movi	r2,58
    558c:	b881a226 	beq	r23,r2,5c18 <_dtoa_r+0x1490>
    5590:	b7000044 	addi	fp,r22,1
    5594:	b5c00005 	stb	r23,0(r22)
    5598:	003f7406 	br	536c <_dtoa_r+0xbe4>
    559c:	00800e44 	movi	r2,57
    55a0:	b8819d26 	beq	r23,r2,5c18 <_dtoa_r+0x1490>
    55a4:	053ffa0e 	bge	zero,r20,5590 <_dtoa_r+0xe08>
    55a8:	8dc00c44 	addi	r23,r17,49
    55ac:	003ff806 	br	5590 <_dtoa_r+0xe08>
    55b0:	d9001617 	ldw	r4,88(sp)
    55b4:	a80b883a 	mov	r5,r21
    55b8:	04000044 	movi	r16,1
    55bc:	000713c0 	call	713c <_Bfree>
    55c0:	003edf06 	br	5140 <_dtoa_r+0x9b8>
    55c4:	d9001617 	ldw	r4,88(sp)
    55c8:	980b883a 	mov	r5,r19
    55cc:	01800284 	movi	r6,10
    55d0:	000f883a 	mov	r7,zero
    55d4:	0007df00 	call	7df0 <__multadd>
    55d8:	1027883a 	mov	r19,r2
    55dc:	d8800615 	stw	r2,24(sp)
    55e0:	003ebb06 	br	50d0 <_dtoa_r+0x948>
    55e4:	d9801117 	ldw	r6,68(sp)
    55e8:	d8800d17 	ldw	r2,52(sp)
    55ec:	d8000915 	stw	zero,36(sp)
    55f0:	308dc83a 	sub	r6,r6,r2
    55f4:	0087c83a 	sub	r3,zero,r2
    55f8:	d9801115 	stw	r6,68(sp)
    55fc:	d8c01015 	stw	r3,64(sp)
    5600:	003cfe06 	br	49fc <_dtoa_r+0x274>
    5604:	018dc83a 	sub	r6,zero,r6
    5608:	d9801115 	stw	r6,68(sp)
    560c:	d8000a15 	stw	zero,40(sp)
    5610:	003cf306 	br	49e0 <_dtoa_r+0x258>
    5614:	d9000d17 	ldw	r4,52(sp)
    5618:	000a7840 	call	a784 <__floatsidf>
    561c:	880b883a 	mov	r5,r17
    5620:	8009883a 	mov	r4,r16
    5624:	180f883a 	mov	r7,r3
    5628:	100d883a 	mov	r6,r2
    562c:	000a5640 	call	a564 <__nedf2>
    5630:	103ce126 	beq	r2,zero,49b8 <_dtoa_r+0x230>
    5634:	d9800d17 	ldw	r6,52(sp)
    5638:	31bfffc4 	addi	r6,r6,-1
    563c:	d9800d15 	stw	r6,52(sp)
    5640:	003cdd06 	br	49b8 <_dtoa_r+0x230>
    5644:	d9000717 	ldw	r4,28(sp)
    5648:	900b883a 	mov	r5,r18
    564c:	00072980 	call	7298 <__mcmp>
    5650:	103e8d0e 	bge	r2,zero,5088 <_dtoa_r+0x900>
    5654:	d9400717 	ldw	r5,28(sp)
    5658:	d9001617 	ldw	r4,88(sp)
    565c:	01800284 	movi	r6,10
    5660:	000f883a 	mov	r7,zero
    5664:	0007df00 	call	7df0 <__multadd>
    5668:	d9800d17 	ldw	r6,52(sp)
    566c:	d8800715 	stw	r2,28(sp)
    5670:	31bfffc4 	addi	r6,r6,-1
    5674:	d9800d15 	stw	r6,52(sp)
    5678:	b001a71e 	bne	r22,zero,5d18 <_dtoa_r+0x1590>
    567c:	d8800e17 	ldw	r2,56(sp)
    5680:	d8800f15 	stw	r2,60(sp)
    5684:	003e8006 	br	5088 <_dtoa_r+0x900>
    5688:	90800417 	ldw	r2,16(r18)
    568c:	1085883a 	add	r2,r2,r2
    5690:	1085883a 	add	r2,r2,r2
    5694:	1485883a 	add	r2,r2,r18
    5698:	11000417 	ldw	r4,16(r2)
    569c:	00071640 	call	7164 <__hi0bits>
    56a0:	00c00804 	movi	r3,32
    56a4:	1887c83a 	sub	r3,r3,r2
    56a8:	003e5a06 	br	5014 <_dtoa_r+0x88c>
    56ac:	d9400717 	ldw	r5,28(sp)
    56b0:	d9801017 	ldw	r6,64(sp)
    56b4:	d9001617 	ldw	r4,88(sp)
    56b8:	0007ef00 	call	7ef0 <__pow5mult>
    56bc:	d8800715 	stw	r2,28(sp)
    56c0:	003e4306 	br	4fd0 <_dtoa_r+0x848>
    56c4:	d9800f17 	ldw	r6,60(sp)
    56c8:	d8800d17 	ldw	r2,52(sp)
    56cc:	d9800315 	stw	r6,12(sp)
    56d0:	d8800415 	stw	r2,16(sp)
    56d4:	d8c00b17 	ldw	r3,44(sp)
    56d8:	1805003a 	cmpeq	r2,r3,zero
    56dc:	1000e21e 	bne	r2,zero,5a68 <_dtoa_r+0x12e0>
    56e0:	d9000317 	ldw	r4,12(sp)
    56e4:	0005883a 	mov	r2,zero
    56e8:	00cff834 	movhi	r3,16352
    56ec:	200c90fa 	slli	r6,r4,3
    56f0:	01000074 	movhi	r4,1
    56f4:	21374304 	addi	r4,r4,-8948
    56f8:	180b883a 	mov	r5,r3
    56fc:	310d883a 	add	r6,r6,r4
    5700:	327fff17 	ldw	r9,-4(r6)
    5704:	323ffe17 	ldw	r8,-8(r6)
    5708:	1009883a 	mov	r4,r2
    570c:	480f883a 	mov	r7,r9
    5710:	400d883a 	mov	r6,r8
    5714:	000a2840 	call	a284 <__divdf3>
    5718:	180b883a 	mov	r5,r3
    571c:	b00d883a 	mov	r6,r22
    5720:	b80f883a 	mov	r7,r23
    5724:	1009883a 	mov	r4,r2
    5728:	0009dcc0 	call	9dcc <__subdf3>
    572c:	a80b883a 	mov	r5,r21
    5730:	a009883a 	mov	r4,r20
    5734:	d8c01915 	stw	r3,100(sp)
    5738:	d8801815 	stw	r2,96(sp)
    573c:	000a87c0 	call	a87c <__fixdfsi>
    5740:	1009883a 	mov	r4,r2
    5744:	1027883a 	mov	r19,r2
    5748:	000a7840 	call	a784 <__floatsidf>
    574c:	a80b883a 	mov	r5,r21
    5750:	a009883a 	mov	r4,r20
    5754:	180f883a 	mov	r7,r3
    5758:	100d883a 	mov	r6,r2
    575c:	0009dcc0 	call	9dcc <__subdf3>
    5760:	d9801817 	ldw	r6,96(sp)
    5764:	1823883a 	mov	r17,r3
    5768:	d8801415 	stw	r2,80(sp)
    576c:	302d883a 	mov	r22,r6
    5770:	d9800517 	ldw	r6,20(sp)
    5774:	9cc00c04 	addi	r19,r19,48
    5778:	dc401515 	stw	r17,84(sp)
    577c:	d8c01917 	ldw	r3,100(sp)
    5780:	34c00005 	stb	r19,0(r6)
    5784:	d8800517 	ldw	r2,20(sp)
    5788:	d9401917 	ldw	r5,100(sp)
    578c:	d9801417 	ldw	r6,80(sp)
    5790:	b009883a 	mov	r4,r22
    5794:	880f883a 	mov	r7,r17
    5798:	182f883a 	mov	r23,r3
    579c:	17000044 	addi	fp,r2,1
    57a0:	000a5ec0 	call	a5ec <__gtdf2>
    57a4:	00804e16 	blt	zero,r2,58e0 <_dtoa_r+0x1158>
    57a8:	d9801417 	ldw	r6,80(sp)
    57ac:	0005883a 	mov	r2,zero
    57b0:	00cffc34 	movhi	r3,16368
    57b4:	180b883a 	mov	r5,r3
    57b8:	880f883a 	mov	r7,r17
    57bc:	1009883a 	mov	r4,r2
    57c0:	0009dcc0 	call	9dcc <__subdf3>
    57c4:	d9401917 	ldw	r5,100(sp)
    57c8:	180f883a 	mov	r7,r3
    57cc:	b009883a 	mov	r4,r22
    57d0:	100d883a 	mov	r6,r2
    57d4:	000a5ec0 	call	a5ec <__gtdf2>
    57d8:	00bda216 	blt	zero,r2,4e64 <_dtoa_r+0x6dc>
    57dc:	d8c00317 	ldw	r3,12(sp)
    57e0:	00800044 	movi	r2,1
    57e4:	10c01216 	blt	r2,r3,5830 <_dtoa_r+0x10a8>
    57e8:	003d4506 	br	4d00 <_dtoa_r+0x578>
    57ec:	d9801417 	ldw	r6,80(sp)
    57f0:	0005883a 	mov	r2,zero
    57f4:	00cffc34 	movhi	r3,16368
    57f8:	180b883a 	mov	r5,r3
    57fc:	880f883a 	mov	r7,r17
    5800:	1009883a 	mov	r4,r2
    5804:	0009dcc0 	call	9dcc <__subdf3>
    5808:	d9c01b17 	ldw	r7,108(sp)
    580c:	180b883a 	mov	r5,r3
    5810:	1009883a 	mov	r4,r2
    5814:	b00d883a 	mov	r6,r22
    5818:	000a6fc0 	call	a6fc <__ltdf2>
    581c:	103d9116 	blt	r2,zero,4e64 <_dtoa_r+0x6dc>
    5820:	d9800517 	ldw	r6,20(sp)
    5824:	d9000317 	ldw	r4,12(sp)
    5828:	3105883a 	add	r2,r6,r4
    582c:	e0bd3426 	beq	fp,r2,4d00 <_dtoa_r+0x578>
    5830:	04500934 	movhi	r17,16420
    5834:	0021883a 	mov	r16,zero
    5838:	b80b883a 	mov	r5,r23
    583c:	b009883a 	mov	r4,r22
    5840:	800d883a 	mov	r6,r16
    5844:	880f883a 	mov	r7,r17
    5848:	0009ec00 	call	9ec0 <__muldf3>
    584c:	d9401517 	ldw	r5,84(sp)
    5850:	d9001417 	ldw	r4,80(sp)
    5854:	880f883a 	mov	r7,r17
    5858:	000d883a 	mov	r6,zero
    585c:	d8801a15 	stw	r2,104(sp)
    5860:	d8c01b15 	stw	r3,108(sp)
    5864:	0009ec00 	call	9ec0 <__muldf3>
    5868:	180b883a 	mov	r5,r3
    586c:	1009883a 	mov	r4,r2
    5870:	1823883a 	mov	r17,r3
    5874:	1021883a 	mov	r16,r2
    5878:	000a87c0 	call	a87c <__fixdfsi>
    587c:	1009883a 	mov	r4,r2
    5880:	102b883a 	mov	r21,r2
    5884:	000a7840 	call	a784 <__floatsidf>
    5888:	880b883a 	mov	r5,r17
    588c:	8009883a 	mov	r4,r16
    5890:	180f883a 	mov	r7,r3
    5894:	100d883a 	mov	r6,r2
    5898:	0009dcc0 	call	9dcc <__subdf3>
    589c:	1021883a 	mov	r16,r2
    58a0:	d9001b17 	ldw	r4,108(sp)
    58a4:	1823883a 	mov	r17,r3
    58a8:	dc001415 	stw	r16,80(sp)
    58ac:	ad400c04 	addi	r21,r21,48
    58b0:	dc401515 	stw	r17,84(sp)
    58b4:	d8801a17 	ldw	r2,104(sp)
    58b8:	e5400005 	stb	r21,0(fp)
    58bc:	202f883a 	mov	r23,r4
    58c0:	d9c01b17 	ldw	r7,108(sp)
    58c4:	d9001417 	ldw	r4,80(sp)
    58c8:	880b883a 	mov	r5,r17
    58cc:	100d883a 	mov	r6,r2
    58d0:	102d883a 	mov	r22,r2
    58d4:	e7000044 	addi	fp,fp,1
    58d8:	000a6fc0 	call	a6fc <__ltdf2>
    58dc:	103fc30e 	bge	r2,zero,57ec <_dtoa_r+0x1064>
    58e0:	d9000417 	ldw	r4,16(sp)
    58e4:	d9000d15 	stw	r4,52(sp)
    58e8:	003d7106 	br	4eb0 <_dtoa_r+0x728>
    58ec:	d9801717 	ldw	r6,92(sp)
    58f0:	00800084 	movi	r2,2
    58f4:	11bde60e 	bge	r2,r6,5090 <_dtoa_r+0x908>
    58f8:	203cfb1e 	bne	r4,zero,4ce8 <_dtoa_r+0x560>
    58fc:	d9001617 	ldw	r4,88(sp)
    5900:	900b883a 	mov	r5,r18
    5904:	01800144 	movi	r6,5
    5908:	000f883a 	mov	r7,zero
    590c:	0007df00 	call	7df0 <__multadd>
    5910:	d9000717 	ldw	r4,28(sp)
    5914:	100b883a 	mov	r5,r2
    5918:	1025883a 	mov	r18,r2
    591c:	00072980 	call	7298 <__mcmp>
    5920:	00bcf10e 	bge	zero,r2,4ce8 <_dtoa_r+0x560>
    5924:	d8c00d17 	ldw	r3,52(sp)
    5928:	d9000517 	ldw	r4,20(sp)
    592c:	d8000615 	stw	zero,24(sp)
    5930:	18c00044 	addi	r3,r3,1
    5934:	d8c00d15 	stw	r3,52(sp)
    5938:	00800c44 	movi	r2,49
    593c:	27000044 	addi	fp,r4,1
    5940:	20800005 	stb	r2,0(r4)
    5944:	003e8906 	br	536c <_dtoa_r+0xbe4>
    5948:	d8c00517 	ldw	r3,20(sp)
    594c:	003bc206 	br	4858 <_dtoa_r+0xd0>
    5950:	01800074 	movhi	r6,1
    5954:	31b77504 	addi	r6,r6,-8748
    5958:	30c00917 	ldw	r3,36(r6)
    595c:	30800817 	ldw	r2,32(r6)
    5960:	d9001217 	ldw	r4,72(sp)
    5964:	d9401317 	ldw	r5,76(sp)
    5968:	180f883a 	mov	r7,r3
    596c:	100d883a 	mov	r6,r2
    5970:	000a2840 	call	a284 <__divdf3>
    5974:	948003cc 	andi	r18,r18,15
    5978:	058000c4 	movi	r22,3
    597c:	1029883a 	mov	r20,r2
    5980:	182b883a 	mov	r21,r3
    5984:	003c8906 	br	4bac <_dtoa_r+0x424>
    5988:	d9001017 	ldw	r4,64(sp)
    598c:	d9800917 	ldw	r6,36(sp)
    5990:	0025883a 	mov	r18,zero
    5994:	1105c83a 	sub	r2,r2,r4
    5998:	2089883a 	add	r4,r4,r2
    599c:	308d883a 	add	r6,r6,r2
    59a0:	d9001015 	stw	r4,64(sp)
    59a4:	d9800915 	stw	r6,36(sp)
    59a8:	003e3206 	br	5274 <_dtoa_r+0xaec>
    59ac:	28800044 	addi	r2,r5,1
    59b0:	27000044 	addi	fp,r4,1
    59b4:	20800005 	stb	r2,0(r4)
    59b8:	003e6c06 	br	536c <_dtoa_r+0xbe4>
    59bc:	d8800f17 	ldw	r2,60(sp)
    59c0:	00bce016 	blt	zero,r2,4d44 <_dtoa_r+0x5bc>
    59c4:	d9800f17 	ldw	r6,60(sp)
    59c8:	303cc51e 	bne	r6,zero,4ce0 <_dtoa_r+0x558>
    59cc:	0005883a 	mov	r2,zero
    59d0:	00d00534 	movhi	r3,16404
    59d4:	980b883a 	mov	r5,r19
    59d8:	180f883a 	mov	r7,r3
    59dc:	9009883a 	mov	r4,r18
    59e0:	100d883a 	mov	r6,r2
    59e4:	0009ec00 	call	9ec0 <__muldf3>
    59e8:	180b883a 	mov	r5,r3
    59ec:	a80f883a 	mov	r7,r21
    59f0:	1009883a 	mov	r4,r2
    59f4:	a00d883a 	mov	r6,r20
    59f8:	000a6740 	call	a674 <__gedf2>
    59fc:	103cb80e 	bge	r2,zero,4ce0 <_dtoa_r+0x558>
    5a00:	0027883a 	mov	r19,zero
    5a04:	0025883a 	mov	r18,zero
    5a08:	003fc606 	br	5924 <_dtoa_r+0x119c>
    5a0c:	99400117 	ldw	r5,4(r19)
    5a10:	d9001617 	ldw	r4,88(sp)
    5a14:	00076bc0 	call	76bc <_Balloc>
    5a18:	99800417 	ldw	r6,16(r19)
    5a1c:	11000304 	addi	r4,r2,12
    5a20:	99400304 	addi	r5,r19,12
    5a24:	318d883a 	add	r6,r6,r6
    5a28:	318d883a 	add	r6,r6,r6
    5a2c:	31800204 	addi	r6,r6,8
    5a30:	1023883a 	mov	r17,r2
    5a34:	00020a80 	call	20a8 <memcpy>
    5a38:	d9001617 	ldw	r4,88(sp)
    5a3c:	880b883a 	mov	r5,r17
    5a40:	01800044 	movi	r6,1
    5a44:	0007a800 	call	7a80 <__lshift>
    5a48:	100b883a 	mov	r5,r2
    5a4c:	003d9c06 	br	50c0 <_dtoa_r+0x938>
    5a50:	00800e44 	movi	r2,57
    5a54:	b8807026 	beq	r23,r2,5c18 <_dtoa_r+0x1490>
    5a58:	b8800044 	addi	r2,r23,1
    5a5c:	b7000044 	addi	fp,r22,1
    5a60:	b0800005 	stb	r2,0(r22)
    5a64:	003e4106 	br	536c <_dtoa_r+0xbe4>
    5a68:	d8800317 	ldw	r2,12(sp)
    5a6c:	01800074 	movhi	r6,1
    5a70:	31b74304 	addi	r6,r6,-8948
    5a74:	b009883a 	mov	r4,r22
    5a78:	100e90fa 	slli	r7,r2,3
    5a7c:	b80b883a 	mov	r5,r23
    5a80:	398f883a 	add	r7,r7,r6
    5a84:	38bffe17 	ldw	r2,-8(r7)
    5a88:	d9800517 	ldw	r6,20(sp)
    5a8c:	38ffff17 	ldw	r3,-4(r7)
    5a90:	37000044 	addi	fp,r6,1
    5a94:	180f883a 	mov	r7,r3
    5a98:	100d883a 	mov	r6,r2
    5a9c:	0009ec00 	call	9ec0 <__muldf3>
    5aa0:	a80b883a 	mov	r5,r21
    5aa4:	a009883a 	mov	r4,r20
    5aa8:	182f883a 	mov	r23,r3
    5aac:	102d883a 	mov	r22,r2
    5ab0:	000a87c0 	call	a87c <__fixdfsi>
    5ab4:	1009883a 	mov	r4,r2
    5ab8:	1027883a 	mov	r19,r2
    5abc:	000a7840 	call	a784 <__floatsidf>
    5ac0:	a80b883a 	mov	r5,r21
    5ac4:	a009883a 	mov	r4,r20
    5ac8:	180f883a 	mov	r7,r3
    5acc:	100d883a 	mov	r6,r2
    5ad0:	0009dcc0 	call	9dcc <__subdf3>
    5ad4:	180b883a 	mov	r5,r3
    5ad8:	d8c00517 	ldw	r3,20(sp)
    5adc:	9cc00c04 	addi	r19,r19,48
    5ae0:	1009883a 	mov	r4,r2
    5ae4:	1cc00005 	stb	r19,0(r3)
    5ae8:	2021883a 	mov	r16,r4
    5aec:	d9000317 	ldw	r4,12(sp)
    5af0:	00800044 	movi	r2,1
    5af4:	2823883a 	mov	r17,r5
    5af8:	20802226 	beq	r4,r2,5b84 <_dtoa_r+0x13fc>
    5afc:	1029883a 	mov	r20,r2
    5b00:	0005883a 	mov	r2,zero
    5b04:	00d00934 	movhi	r3,16420
    5b08:	180f883a 	mov	r7,r3
    5b0c:	100d883a 	mov	r6,r2
    5b10:	880b883a 	mov	r5,r17
    5b14:	8009883a 	mov	r4,r16
    5b18:	0009ec00 	call	9ec0 <__muldf3>
    5b1c:	180b883a 	mov	r5,r3
    5b20:	1009883a 	mov	r4,r2
    5b24:	1823883a 	mov	r17,r3
    5b28:	1021883a 	mov	r16,r2
    5b2c:	000a87c0 	call	a87c <__fixdfsi>
    5b30:	1009883a 	mov	r4,r2
    5b34:	102b883a 	mov	r21,r2
    5b38:	000a7840 	call	a784 <__floatsidf>
    5b3c:	880b883a 	mov	r5,r17
    5b40:	8009883a 	mov	r4,r16
    5b44:	180f883a 	mov	r7,r3
    5b48:	100d883a 	mov	r6,r2
    5b4c:	0009dcc0 	call	9dcc <__subdf3>
    5b50:	180b883a 	mov	r5,r3
    5b54:	d8c00517 	ldw	r3,20(sp)
    5b58:	1009883a 	mov	r4,r2
    5b5c:	ad400c04 	addi	r21,r21,48
    5b60:	1d05883a 	add	r2,r3,r20
    5b64:	15400005 	stb	r21,0(r2)
    5b68:	2021883a 	mov	r16,r4
    5b6c:	d9000317 	ldw	r4,12(sp)
    5b70:	a5000044 	addi	r20,r20,1
    5b74:	2823883a 	mov	r17,r5
    5b78:	a13fe11e 	bne	r20,r4,5b00 <_dtoa_r+0x1378>
    5b7c:	e505883a 	add	r2,fp,r20
    5b80:	173fffc4 	addi	fp,r2,-1
    5b84:	0025883a 	mov	r18,zero
    5b88:	04cff834 	movhi	r19,16352
    5b8c:	b009883a 	mov	r4,r22
    5b90:	b80b883a 	mov	r5,r23
    5b94:	900d883a 	mov	r6,r18
    5b98:	980f883a 	mov	r7,r19
    5b9c:	0009e4c0 	call	9e4c <__adddf3>
    5ba0:	180b883a 	mov	r5,r3
    5ba4:	1009883a 	mov	r4,r2
    5ba8:	800d883a 	mov	r6,r16
    5bac:	880f883a 	mov	r7,r17
    5bb0:	000a6fc0 	call	a6fc <__ltdf2>
    5bb4:	103cab16 	blt	r2,zero,4e64 <_dtoa_r+0x6dc>
    5bb8:	0009883a 	mov	r4,zero
    5bbc:	980b883a 	mov	r5,r19
    5bc0:	b80f883a 	mov	r7,r23
    5bc4:	b00d883a 	mov	r6,r22
    5bc8:	0009dcc0 	call	9dcc <__subdf3>
    5bcc:	180b883a 	mov	r5,r3
    5bd0:	880f883a 	mov	r7,r17
    5bd4:	1009883a 	mov	r4,r2
    5bd8:	800d883a 	mov	r6,r16
    5bdc:	000a5ec0 	call	a5ec <__gtdf2>
    5be0:	00bc470e 	bge	zero,r2,4d00 <_dtoa_r+0x578>
    5be4:	00c00c04 	movi	r3,48
    5be8:	e73fffc4 	addi	fp,fp,-1
    5bec:	e0800007 	ldb	r2,0(fp)
    5bf0:	10fffd26 	beq	r2,r3,5be8 <_dtoa_r+0x1460>
    5bf4:	d9800417 	ldw	r6,16(sp)
    5bf8:	e7000044 	addi	fp,fp,1
    5bfc:	d9800d15 	stw	r6,52(sp)
    5c00:	003cab06 	br	4eb0 <_dtoa_r+0x728>
    5c04:	d8c00f17 	ldw	r3,60(sp)
    5c08:	d9001117 	ldw	r4,68(sp)
    5c0c:	20e1c83a 	sub	r16,r4,r3
    5c10:	0007883a 	mov	r3,zero
    5c14:	003d9b06 	br	5284 <_dtoa_r+0xafc>
    5c18:	00800e44 	movi	r2,57
    5c1c:	b0800005 	stb	r2,0(r22)
    5c20:	b5800044 	addi	r22,r22,1
    5c24:	003dc106 	br	532c <_dtoa_r+0xba4>
    5c28:	05800084 	movi	r22,2
    5c2c:	003bf706 	br	4c0c <_dtoa_r+0x484>
    5c30:	d9000f17 	ldw	r4,60(sp)
    5c34:	013c000e 	bge	zero,r4,4c38 <_dtoa_r+0x4b0>
    5c38:	d9800e17 	ldw	r6,56(sp)
    5c3c:	01bc300e 	bge	zero,r6,4d00 <_dtoa_r+0x578>
    5c40:	0005883a 	mov	r2,zero
    5c44:	00d00934 	movhi	r3,16420
    5c48:	a80b883a 	mov	r5,r21
    5c4c:	180f883a 	mov	r7,r3
    5c50:	a009883a 	mov	r4,r20
    5c54:	100d883a 	mov	r6,r2
    5c58:	0009ec00 	call	9ec0 <__muldf3>
    5c5c:	b1000044 	addi	r4,r22,1
    5c60:	1021883a 	mov	r16,r2
    5c64:	1823883a 	mov	r17,r3
    5c68:	000a7840 	call	a784 <__floatsidf>
    5c6c:	880b883a 	mov	r5,r17
    5c70:	8009883a 	mov	r4,r16
    5c74:	180f883a 	mov	r7,r3
    5c78:	100d883a 	mov	r6,r2
    5c7c:	0009ec00 	call	9ec0 <__muldf3>
    5c80:	0011883a 	mov	r8,zero
    5c84:	02500734 	movhi	r9,16412
    5c88:	180b883a 	mov	r5,r3
    5c8c:	480f883a 	mov	r7,r9
    5c90:	1009883a 	mov	r4,r2
    5c94:	400d883a 	mov	r6,r8
    5c98:	0009e4c0 	call	9e4c <__adddf3>
    5c9c:	102d883a 	mov	r22,r2
    5ca0:	00bf3034 	movhi	r2,64704
    5ca4:	10ef883a 	add	r23,r2,r3
    5ca8:	d8800d17 	ldw	r2,52(sp)
    5cac:	d8c00e17 	ldw	r3,56(sp)
    5cb0:	8029883a 	mov	r20,r16
    5cb4:	10bfffc4 	addi	r2,r2,-1
    5cb8:	882b883a 	mov	r21,r17
    5cbc:	d8800415 	stw	r2,16(sp)
    5cc0:	d8c00315 	stw	r3,12(sp)
    5cc4:	003e8306 	br	56d4 <_dtoa_r+0xf4c>
    5cc8:	d8800117 	ldw	r2,4(sp)
    5ccc:	dc001117 	ldw	r16,68(sp)
    5cd0:	dc801017 	ldw	r18,64(sp)
    5cd4:	00c00d84 	movi	r3,54
    5cd8:	1887c83a 	sub	r3,r3,r2
    5cdc:	003d6906 	br	5284 <_dtoa_r+0xafc>
    5ce0:	01800044 	movi	r6,1
    5ce4:	3021883a 	mov	r16,r6
    5ce8:	d9800f15 	stw	r6,60(sp)
    5cec:	d9802615 	stw	r6,152(sp)
    5cf0:	d9800e15 	stw	r6,56(sp)
    5cf4:	003b9306 	br	4b44 <_dtoa_r+0x3bc>
    5cf8:	b021883a 	mov	r16,r22
    5cfc:	dd800f15 	stw	r22,60(sp)
    5d00:	003b9006 	br	4b44 <_dtoa_r+0x3bc>
    5d04:	103e221e 	bne	r2,zero,5590 <_dtoa_r+0xe08>
    5d08:	b880004c 	andi	r2,r23,1
    5d0c:	1005003a 	cmpeq	r2,r2,zero
    5d10:	103e1f1e 	bne	r2,zero,5590 <_dtoa_r+0xe08>
    5d14:	003e1b06 	br	5584 <_dtoa_r+0xdfc>
    5d18:	d9001617 	ldw	r4,88(sp)
    5d1c:	980b883a 	mov	r5,r19
    5d20:	01800284 	movi	r6,10
    5d24:	000f883a 	mov	r7,zero
    5d28:	0007df00 	call	7df0 <__multadd>
    5d2c:	d8c00e17 	ldw	r3,56(sp)
    5d30:	1027883a 	mov	r19,r2
    5d34:	d8c00f15 	stw	r3,60(sp)
    5d38:	003cd306 	br	5088 <_dtoa_r+0x900>

00005d3c <_fflush_r>:
    5d3c:	defffb04 	addi	sp,sp,-20
    5d40:	dcc00315 	stw	r19,12(sp)
    5d44:	dc800215 	stw	r18,8(sp)
    5d48:	dfc00415 	stw	ra,16(sp)
    5d4c:	dc400115 	stw	r17,4(sp)
    5d50:	dc000015 	stw	r16,0(sp)
    5d54:	2027883a 	mov	r19,r4
    5d58:	2825883a 	mov	r18,r5
    5d5c:	20000226 	beq	r4,zero,5d68 <_fflush_r+0x2c>
    5d60:	20800e17 	ldw	r2,56(r4)
    5d64:	10005626 	beq	r2,zero,5ec0 <_fflush_r+0x184>
    5d68:	9100030b 	ldhu	r4,12(r18)
    5d6c:	20ffffcc 	andi	r3,r4,65535
    5d70:	18e0001c 	xori	r3,r3,32768
    5d74:	18e00004 	addi	r3,r3,-32768
    5d78:	1880020c 	andi	r2,r3,8
    5d7c:	1000261e 	bne	r2,zero,5e18 <_fflush_r+0xdc>
    5d80:	90c00117 	ldw	r3,4(r18)
    5d84:	20820014 	ori	r2,r4,2048
    5d88:	9080030d 	sth	r2,12(r18)
    5d8c:	1009883a 	mov	r4,r2
    5d90:	00c0400e 	bge	zero,r3,5e94 <_fflush_r+0x158>
    5d94:	92000a17 	ldw	r8,40(r18)
    5d98:	40004026 	beq	r8,zero,5e9c <_fflush_r+0x160>
    5d9c:	2084000c 	andi	r2,r4,4096
    5da0:	10005326 	beq	r2,zero,5ef0 <_fflush_r+0x1b4>
    5da4:	94001417 	ldw	r16,80(r18)
    5da8:	9080030b 	ldhu	r2,12(r18)
    5dac:	1080010c 	andi	r2,r2,4
    5db0:	1000481e 	bne	r2,zero,5ed4 <_fflush_r+0x198>
    5db4:	91400717 	ldw	r5,28(r18)
    5db8:	9809883a 	mov	r4,r19
    5dbc:	800d883a 	mov	r6,r16
    5dc0:	000f883a 	mov	r7,zero
    5dc4:	403ee83a 	callr	r8
    5dc8:	8080261e 	bne	r16,r2,5e64 <_fflush_r+0x128>
    5dcc:	9080030b 	ldhu	r2,12(r18)
    5dd0:	91000417 	ldw	r4,16(r18)
    5dd4:	90000115 	stw	zero,4(r18)
    5dd8:	10bdffcc 	andi	r2,r2,63487
    5ddc:	10ffffcc 	andi	r3,r2,65535
    5de0:	18c4000c 	andi	r3,r3,4096
    5de4:	9080030d 	sth	r2,12(r18)
    5de8:	91000015 	stw	r4,0(r18)
    5dec:	18002b26 	beq	r3,zero,5e9c <_fflush_r+0x160>
    5df0:	0007883a 	mov	r3,zero
    5df4:	1805883a 	mov	r2,r3
    5df8:	94001415 	stw	r16,80(r18)
    5dfc:	dfc00417 	ldw	ra,16(sp)
    5e00:	dcc00317 	ldw	r19,12(sp)
    5e04:	dc800217 	ldw	r18,8(sp)
    5e08:	dc400117 	ldw	r17,4(sp)
    5e0c:	dc000017 	ldw	r16,0(sp)
    5e10:	dec00504 	addi	sp,sp,20
    5e14:	f800283a 	ret
    5e18:	94400417 	ldw	r17,16(r18)
    5e1c:	88001f26 	beq	r17,zero,5e9c <_fflush_r+0x160>
    5e20:	90800017 	ldw	r2,0(r18)
    5e24:	18c000cc 	andi	r3,r3,3
    5e28:	94400015 	stw	r17,0(r18)
    5e2c:	1461c83a 	sub	r16,r2,r17
    5e30:	18002526 	beq	r3,zero,5ec8 <_fflush_r+0x18c>
    5e34:	0005883a 	mov	r2,zero
    5e38:	90800215 	stw	r2,8(r18)
    5e3c:	0400170e 	bge	zero,r16,5e9c <_fflush_r+0x160>
    5e40:	90c00917 	ldw	r3,36(r18)
    5e44:	91400717 	ldw	r5,28(r18)
    5e48:	880d883a 	mov	r6,r17
    5e4c:	800f883a 	mov	r7,r16
    5e50:	9809883a 	mov	r4,r19
    5e54:	183ee83a 	callr	r3
    5e58:	88a3883a 	add	r17,r17,r2
    5e5c:	80a1c83a 	sub	r16,r16,r2
    5e60:	00bff616 	blt	zero,r2,5e3c <_fflush_r+0x100>
    5e64:	9080030b 	ldhu	r2,12(r18)
    5e68:	00ffffc4 	movi	r3,-1
    5e6c:	10801014 	ori	r2,r2,64
    5e70:	9080030d 	sth	r2,12(r18)
    5e74:	1805883a 	mov	r2,r3
    5e78:	dfc00417 	ldw	ra,16(sp)
    5e7c:	dcc00317 	ldw	r19,12(sp)
    5e80:	dc800217 	ldw	r18,8(sp)
    5e84:	dc400117 	ldw	r17,4(sp)
    5e88:	dc000017 	ldw	r16,0(sp)
    5e8c:	dec00504 	addi	sp,sp,20
    5e90:	f800283a 	ret
    5e94:	90800f17 	ldw	r2,60(r18)
    5e98:	00bfbe16 	blt	zero,r2,5d94 <_fflush_r+0x58>
    5e9c:	0007883a 	mov	r3,zero
    5ea0:	1805883a 	mov	r2,r3
    5ea4:	dfc00417 	ldw	ra,16(sp)
    5ea8:	dcc00317 	ldw	r19,12(sp)
    5eac:	dc800217 	ldw	r18,8(sp)
    5eb0:	dc400117 	ldw	r17,4(sp)
    5eb4:	dc000017 	ldw	r16,0(sp)
    5eb8:	dec00504 	addi	sp,sp,20
    5ebc:	f800283a 	ret
    5ec0:	0005fd40 	call	5fd4 <__sinit>
    5ec4:	003fa806 	br	5d68 <_fflush_r+0x2c>
    5ec8:	90800517 	ldw	r2,20(r18)
    5ecc:	90800215 	stw	r2,8(r18)
    5ed0:	003fda06 	br	5e3c <_fflush_r+0x100>
    5ed4:	90800117 	ldw	r2,4(r18)
    5ed8:	90c00c17 	ldw	r3,48(r18)
    5edc:	80a1c83a 	sub	r16,r16,r2
    5ee0:	183fb426 	beq	r3,zero,5db4 <_fflush_r+0x78>
    5ee4:	90800f17 	ldw	r2,60(r18)
    5ee8:	80a1c83a 	sub	r16,r16,r2
    5eec:	003fb106 	br	5db4 <_fflush_r+0x78>
    5ef0:	91400717 	ldw	r5,28(r18)
    5ef4:	9809883a 	mov	r4,r19
    5ef8:	000d883a 	mov	r6,zero
    5efc:	01c00044 	movi	r7,1
    5f00:	403ee83a 	callr	r8
    5f04:	1021883a 	mov	r16,r2
    5f08:	00bfffc4 	movi	r2,-1
    5f0c:	80800226 	beq	r16,r2,5f18 <_fflush_r+0x1dc>
    5f10:	92000a17 	ldw	r8,40(r18)
    5f14:	003fa406 	br	5da8 <_fflush_r+0x6c>
    5f18:	98c00017 	ldw	r3,0(r19)
    5f1c:	00800744 	movi	r2,29
    5f20:	18bfde26 	beq	r3,r2,5e9c <_fflush_r+0x160>
    5f24:	9080030b 	ldhu	r2,12(r18)
    5f28:	8007883a 	mov	r3,r16
    5f2c:	10801014 	ori	r2,r2,64
    5f30:	9080030d 	sth	r2,12(r18)
    5f34:	003fcf06 	br	5e74 <_fflush_r+0x138>

00005f38 <fflush>:
    5f38:	01400034 	movhi	r5,0
    5f3c:	29574f04 	addi	r5,r5,23868
    5f40:	2007883a 	mov	r3,r4
    5f44:	20000526 	beq	r4,zero,5f5c <fflush+0x24>
    5f48:	00800074 	movhi	r2,1
    5f4c:	10be6604 	addi	r2,r2,-1640
    5f50:	11000017 	ldw	r4,0(r2)
    5f54:	180b883a 	mov	r5,r3
    5f58:	0005d3c1 	jmpi	5d3c <_fflush_r>
    5f5c:	00800074 	movhi	r2,1
    5f60:	10be6704 	addi	r2,r2,-1636
    5f64:	11000017 	ldw	r4,0(r2)
    5f68:	0006b081 	jmpi	6b08 <_fwalk_reent>

00005f6c <std>:
    5f6c:	00800074 	movhi	r2,1
    5f70:	10a1e504 	addi	r2,r2,-30828
    5f74:	20800b15 	stw	r2,44(r4)
    5f78:	00800074 	movhi	r2,1
    5f7c:	10a22004 	addi	r2,r2,-30592
    5f80:	20800815 	stw	r2,32(r4)
    5f84:	00c00074 	movhi	r3,1
    5f88:	18e20104 	addi	r3,r3,-30716
    5f8c:	00800074 	movhi	r2,1
    5f90:	10a1e704 	addi	r2,r2,-30820
    5f94:	2140030d 	sth	r5,12(r4)
    5f98:	2180038d 	sth	r6,14(r4)
    5f9c:	20c00915 	stw	r3,36(r4)
    5fa0:	20800a15 	stw	r2,40(r4)
    5fa4:	20000015 	stw	zero,0(r4)
    5fa8:	20000115 	stw	zero,4(r4)
    5fac:	20000215 	stw	zero,8(r4)
    5fb0:	20000415 	stw	zero,16(r4)
    5fb4:	20000515 	stw	zero,20(r4)
    5fb8:	20000615 	stw	zero,24(r4)
    5fbc:	21000715 	stw	r4,28(r4)
    5fc0:	f800283a 	ret

00005fc4 <__sfp_lock_acquire>:
    5fc4:	f800283a 	ret

00005fc8 <__sfp_lock_release>:
    5fc8:	f800283a 	ret

00005fcc <__sinit_lock_acquire>:
    5fcc:	f800283a 	ret

00005fd0 <__sinit_lock_release>:
    5fd0:	f800283a 	ret

00005fd4 <__sinit>:
    5fd4:	20800e17 	ldw	r2,56(r4)
    5fd8:	defffd04 	addi	sp,sp,-12
    5fdc:	dc400115 	stw	r17,4(sp)
    5fe0:	dc000015 	stw	r16,0(sp)
    5fe4:	dfc00215 	stw	ra,8(sp)
    5fe8:	04400044 	movi	r17,1
    5fec:	01400104 	movi	r5,4
    5ff0:	000d883a 	mov	r6,zero
    5ff4:	2021883a 	mov	r16,r4
    5ff8:	2200bb04 	addi	r8,r4,748
    5ffc:	200f883a 	mov	r7,r4
    6000:	10000526 	beq	r2,zero,6018 <__sinit+0x44>
    6004:	dfc00217 	ldw	ra,8(sp)
    6008:	dc400117 	ldw	r17,4(sp)
    600c:	dc000017 	ldw	r16,0(sp)
    6010:	dec00304 	addi	sp,sp,12
    6014:	f800283a 	ret
    6018:	21000117 	ldw	r4,4(r4)
    601c:	00800034 	movhi	r2,0
    6020:	10982e04 	addi	r2,r2,24760
    6024:	00c000c4 	movi	r3,3
    6028:	80800f15 	stw	r2,60(r16)
    602c:	80c0b915 	stw	r3,740(r16)
    6030:	8200ba15 	stw	r8,744(r16)
    6034:	84400e15 	stw	r17,56(r16)
    6038:	8000b815 	stw	zero,736(r16)
    603c:	0005f6c0 	call	5f6c <std>
    6040:	81000217 	ldw	r4,8(r16)
    6044:	880d883a 	mov	r6,r17
    6048:	800f883a 	mov	r7,r16
    604c:	01400284 	movi	r5,10
    6050:	0005f6c0 	call	5f6c <std>
    6054:	81000317 	ldw	r4,12(r16)
    6058:	800f883a 	mov	r7,r16
    605c:	01400484 	movi	r5,18
    6060:	01800084 	movi	r6,2
    6064:	dfc00217 	ldw	ra,8(sp)
    6068:	dc400117 	ldw	r17,4(sp)
    606c:	dc000017 	ldw	r16,0(sp)
    6070:	dec00304 	addi	sp,sp,12
    6074:	0005f6c1 	jmpi	5f6c <std>

00006078 <__fp_lock>:
    6078:	0005883a 	mov	r2,zero
    607c:	f800283a 	ret

00006080 <__fp_unlock>:
    6080:	0005883a 	mov	r2,zero
    6084:	f800283a 	ret

00006088 <__fp_unlock_all>:
    6088:	00800074 	movhi	r2,1
    608c:	10be6604 	addi	r2,r2,-1640
    6090:	11000017 	ldw	r4,0(r2)
    6094:	01400034 	movhi	r5,0
    6098:	29582004 	addi	r5,r5,24704
    609c:	0006bd01 	jmpi	6bd0 <_fwalk>

000060a0 <__fp_lock_all>:
    60a0:	00800074 	movhi	r2,1
    60a4:	10be6604 	addi	r2,r2,-1640
    60a8:	11000017 	ldw	r4,0(r2)
    60ac:	01400034 	movhi	r5,0
    60b0:	29581e04 	addi	r5,r5,24696
    60b4:	0006bd01 	jmpi	6bd0 <_fwalk>

000060b8 <_cleanup_r>:
    60b8:	01400074 	movhi	r5,1
    60bc:	29631204 	addi	r5,r5,-29624
    60c0:	0006bd01 	jmpi	6bd0 <_fwalk>

000060c4 <_cleanup>:
    60c4:	00800074 	movhi	r2,1
    60c8:	10be6704 	addi	r2,r2,-1636
    60cc:	11000017 	ldw	r4,0(r2)
    60d0:	00060b81 	jmpi	60b8 <_cleanup_r>

000060d4 <__sfmoreglue>:
    60d4:	defffc04 	addi	sp,sp,-16
    60d8:	dc400115 	stw	r17,4(sp)
    60dc:	2c401724 	muli	r17,r5,92
    60e0:	dc800215 	stw	r18,8(sp)
    60e4:	2825883a 	mov	r18,r5
    60e8:	89400304 	addi	r5,r17,12
    60ec:	dc000015 	stw	r16,0(sp)
    60f0:	dfc00315 	stw	ra,12(sp)
    60f4:	00019680 	call	1968 <_malloc_r>
    60f8:	0021883a 	mov	r16,zero
    60fc:	880d883a 	mov	r6,r17
    6100:	000b883a 	mov	r5,zero
    6104:	10000626 	beq	r2,zero,6120 <__sfmoreglue+0x4c>
    6108:	11000304 	addi	r4,r2,12
    610c:	14800115 	stw	r18,4(r2)
    6110:	10000015 	stw	zero,0(r2)
    6114:	11000215 	stw	r4,8(r2)
    6118:	1021883a 	mov	r16,r2
    611c:	00070a40 	call	70a4 <memset>
    6120:	8005883a 	mov	r2,r16
    6124:	dfc00317 	ldw	ra,12(sp)
    6128:	dc800217 	ldw	r18,8(sp)
    612c:	dc400117 	ldw	r17,4(sp)
    6130:	dc000017 	ldw	r16,0(sp)
    6134:	dec00404 	addi	sp,sp,16
    6138:	f800283a 	ret

0000613c <__sfp>:
    613c:	defffd04 	addi	sp,sp,-12
    6140:	00800074 	movhi	r2,1
    6144:	10be6704 	addi	r2,r2,-1636
    6148:	dc000015 	stw	r16,0(sp)
    614c:	14000017 	ldw	r16,0(r2)
    6150:	dc400115 	stw	r17,4(sp)
    6154:	dfc00215 	stw	ra,8(sp)
    6158:	80800e17 	ldw	r2,56(r16)
    615c:	2023883a 	mov	r17,r4
    6160:	10002626 	beq	r2,zero,61fc <__sfp+0xc0>
    6164:	8400b804 	addi	r16,r16,736
    6168:	80800117 	ldw	r2,4(r16)
    616c:	81000217 	ldw	r4,8(r16)
    6170:	10ffffc4 	addi	r3,r2,-1
    6174:	18000916 	blt	r3,zero,619c <__sfp+0x60>
    6178:	2080030f 	ldh	r2,12(r4)
    617c:	10000b26 	beq	r2,zero,61ac <__sfp+0x70>
    6180:	017fffc4 	movi	r5,-1
    6184:	00000206 	br	6190 <__sfp+0x54>
    6188:	2080030f 	ldh	r2,12(r4)
    618c:	10000726 	beq	r2,zero,61ac <__sfp+0x70>
    6190:	18ffffc4 	addi	r3,r3,-1
    6194:	21001704 	addi	r4,r4,92
    6198:	197ffb1e 	bne	r3,r5,6188 <__sfp+0x4c>
    619c:	80800017 	ldw	r2,0(r16)
    61a0:	10001926 	beq	r2,zero,6208 <__sfp+0xcc>
    61a4:	1021883a 	mov	r16,r2
    61a8:	003fef06 	br	6168 <__sfp+0x2c>
    61ac:	00bfffc4 	movi	r2,-1
    61b0:	00c00044 	movi	r3,1
    61b4:	2080038d 	sth	r2,14(r4)
    61b8:	20c0030d 	sth	r3,12(r4)
    61bc:	20000015 	stw	zero,0(r4)
    61c0:	20000215 	stw	zero,8(r4)
    61c4:	20000115 	stw	zero,4(r4)
    61c8:	20000415 	stw	zero,16(r4)
    61cc:	20000515 	stw	zero,20(r4)
    61d0:	20000615 	stw	zero,24(r4)
    61d4:	20000c15 	stw	zero,48(r4)
    61d8:	20000d15 	stw	zero,52(r4)
    61dc:	20001115 	stw	zero,68(r4)
    61e0:	20001215 	stw	zero,72(r4)
    61e4:	2005883a 	mov	r2,r4
    61e8:	dfc00217 	ldw	ra,8(sp)
    61ec:	dc400117 	ldw	r17,4(sp)
    61f0:	dc000017 	ldw	r16,0(sp)
    61f4:	dec00304 	addi	sp,sp,12
    61f8:	f800283a 	ret
    61fc:	8009883a 	mov	r4,r16
    6200:	0005fd40 	call	5fd4 <__sinit>
    6204:	003fd706 	br	6164 <__sfp+0x28>
    6208:	8809883a 	mov	r4,r17
    620c:	01400104 	movi	r5,4
    6210:	00060d40 	call	60d4 <__sfmoreglue>
    6214:	80800015 	stw	r2,0(r16)
    6218:	103fe21e 	bne	r2,zero,61a4 <__sfp+0x68>
    621c:	00800304 	movi	r2,12
    6220:	0009883a 	mov	r4,zero
    6224:	88800015 	stw	r2,0(r17)
    6228:	003fee06 	br	61e4 <__sfp+0xa8>

0000622c <_malloc_trim_r>:
    622c:	defffb04 	addi	sp,sp,-20
    6230:	dcc00315 	stw	r19,12(sp)
    6234:	04c00074 	movhi	r19,1
    6238:	9cf8de04 	addi	r19,r19,-7304
    623c:	dc800215 	stw	r18,8(sp)
    6240:	dc400115 	stw	r17,4(sp)
    6244:	dc000015 	stw	r16,0(sp)
    6248:	2823883a 	mov	r17,r5
    624c:	2025883a 	mov	r18,r4
    6250:	dfc00415 	stw	ra,16(sp)
    6254:	000b9b80 	call	b9b8 <__malloc_lock>
    6258:	98800217 	ldw	r2,8(r19)
    625c:	9009883a 	mov	r4,r18
    6260:	000b883a 	mov	r5,zero
    6264:	10c00117 	ldw	r3,4(r2)
    6268:	00bfff04 	movi	r2,-4
    626c:	18a0703a 	and	r16,r3,r2
    6270:	8463c83a 	sub	r17,r16,r17
    6274:	8c43fbc4 	addi	r17,r17,4079
    6278:	8822d33a 	srli	r17,r17,12
    627c:	0083ffc4 	movi	r2,4095
    6280:	8c7fffc4 	addi	r17,r17,-1
    6284:	8822933a 	slli	r17,r17,12
    6288:	1440060e 	bge	r2,r17,62a4 <_malloc_trim_r+0x78>
    628c:	00022740 	call	2274 <_sbrk_r>
    6290:	98c00217 	ldw	r3,8(r19)
    6294:	9009883a 	mov	r4,r18
    6298:	044bc83a 	sub	r5,zero,r17
    629c:	80c7883a 	add	r3,r16,r3
    62a0:	10c00926 	beq	r2,r3,62c8 <_malloc_trim_r+0x9c>
    62a4:	000b9d80 	call	b9d8 <__malloc_unlock>
    62a8:	0005883a 	mov	r2,zero
    62ac:	dfc00417 	ldw	ra,16(sp)
    62b0:	dcc00317 	ldw	r19,12(sp)
    62b4:	dc800217 	ldw	r18,8(sp)
    62b8:	dc400117 	ldw	r17,4(sp)
    62bc:	dc000017 	ldw	r16,0(sp)
    62c0:	dec00504 	addi	sp,sp,20
    62c4:	f800283a 	ret
    62c8:	9009883a 	mov	r4,r18
    62cc:	00022740 	call	2274 <_sbrk_r>
    62d0:	844dc83a 	sub	r6,r16,r17
    62d4:	00ffffc4 	movi	r3,-1
    62d8:	9009883a 	mov	r4,r18
    62dc:	000b883a 	mov	r5,zero
    62e0:	01c00074 	movhi	r7,1
    62e4:	39c53504 	addi	r7,r7,5332
    62e8:	31800054 	ori	r6,r6,1
    62ec:	10c00926 	beq	r2,r3,6314 <_malloc_trim_r+0xe8>
    62f0:	38800017 	ldw	r2,0(r7)
    62f4:	98c00217 	ldw	r3,8(r19)
    62f8:	9009883a 	mov	r4,r18
    62fc:	1445c83a 	sub	r2,r2,r17
    6300:	38800015 	stw	r2,0(r7)
    6304:	19800115 	stw	r6,4(r3)
    6308:	000b9d80 	call	b9d8 <__malloc_unlock>
    630c:	00800044 	movi	r2,1
    6310:	003fe606 	br	62ac <_malloc_trim_r+0x80>
    6314:	00022740 	call	2274 <_sbrk_r>
    6318:	99800217 	ldw	r6,8(r19)
    631c:	100f883a 	mov	r7,r2
    6320:	9009883a 	mov	r4,r18
    6324:	1187c83a 	sub	r3,r2,r6
    6328:	008003c4 	movi	r2,15
    632c:	19400054 	ori	r5,r3,1
    6330:	10ffdc0e 	bge	r2,r3,62a4 <_malloc_trim_r+0x78>
    6334:	00800074 	movhi	r2,1
    6338:	10be6904 	addi	r2,r2,-1628
    633c:	10c00017 	ldw	r3,0(r2)
    6340:	00800074 	movhi	r2,1
    6344:	10853504 	addi	r2,r2,5332
    6348:	31400115 	stw	r5,4(r6)
    634c:	38c7c83a 	sub	r3,r7,r3
    6350:	10c00015 	stw	r3,0(r2)
    6354:	003fd306 	br	62a4 <_malloc_trim_r+0x78>

00006358 <_free_r>:
    6358:	defffd04 	addi	sp,sp,-12
    635c:	dc400115 	stw	r17,4(sp)
    6360:	dc000015 	stw	r16,0(sp)
    6364:	dfc00215 	stw	ra,8(sp)
    6368:	2821883a 	mov	r16,r5
    636c:	2023883a 	mov	r17,r4
    6370:	28005a26 	beq	r5,zero,64dc <_free_r+0x184>
    6374:	000b9b80 	call	b9b8 <__malloc_lock>
    6378:	823ffe04 	addi	r8,r16,-8
    637c:	41400117 	ldw	r5,4(r8)
    6380:	00bfff84 	movi	r2,-2
    6384:	02800074 	movhi	r10,1
    6388:	52b8de04 	addi	r10,r10,-7304
    638c:	288e703a 	and	r7,r5,r2
    6390:	41cd883a 	add	r6,r8,r7
    6394:	30c00117 	ldw	r3,4(r6)
    6398:	51000217 	ldw	r4,8(r10)
    639c:	00bfff04 	movi	r2,-4
    63a0:	1892703a 	and	r9,r3,r2
    63a4:	5017883a 	mov	r11,r10
    63a8:	31006726 	beq	r6,r4,6548 <_free_r+0x1f0>
    63ac:	2880004c 	andi	r2,r5,1
    63b0:	1005003a 	cmpeq	r2,r2,zero
    63b4:	32400115 	stw	r9,4(r6)
    63b8:	10001a1e 	bne	r2,zero,6424 <_free_r+0xcc>
    63bc:	000b883a 	mov	r5,zero
    63c0:	3247883a 	add	r3,r6,r9
    63c4:	18800117 	ldw	r2,4(r3)
    63c8:	1080004c 	andi	r2,r2,1
    63cc:	1000231e 	bne	r2,zero,645c <_free_r+0x104>
    63d0:	280ac03a 	cmpne	r5,r5,zero
    63d4:	3a4f883a 	add	r7,r7,r9
    63d8:	2800451e 	bne	r5,zero,64f0 <_free_r+0x198>
    63dc:	31000217 	ldw	r4,8(r6)
    63e0:	00800074 	movhi	r2,1
    63e4:	10b8e004 	addi	r2,r2,-7296
    63e8:	20807b26 	beq	r4,r2,65d8 <_free_r+0x280>
    63ec:	30800317 	ldw	r2,12(r6)
    63f0:	3a07883a 	add	r3,r7,r8
    63f4:	19c00015 	stw	r7,0(r3)
    63f8:	11000215 	stw	r4,8(r2)
    63fc:	20800315 	stw	r2,12(r4)
    6400:	38800054 	ori	r2,r7,1
    6404:	40800115 	stw	r2,4(r8)
    6408:	28001a26 	beq	r5,zero,6474 <_free_r+0x11c>
    640c:	8809883a 	mov	r4,r17
    6410:	dfc00217 	ldw	ra,8(sp)
    6414:	dc400117 	ldw	r17,4(sp)
    6418:	dc000017 	ldw	r16,0(sp)
    641c:	dec00304 	addi	sp,sp,12
    6420:	000b9d81 	jmpi	b9d8 <__malloc_unlock>
    6424:	80bffe17 	ldw	r2,-8(r16)
    6428:	50c00204 	addi	r3,r10,8
    642c:	4091c83a 	sub	r8,r8,r2
    6430:	41000217 	ldw	r4,8(r8)
    6434:	388f883a 	add	r7,r7,r2
    6438:	20c06126 	beq	r4,r3,65c0 <_free_r+0x268>
    643c:	40800317 	ldw	r2,12(r8)
    6440:	3247883a 	add	r3,r6,r9
    6444:	000b883a 	mov	r5,zero
    6448:	11000215 	stw	r4,8(r2)
    644c:	20800315 	stw	r2,12(r4)
    6450:	18800117 	ldw	r2,4(r3)
    6454:	1080004c 	andi	r2,r2,1
    6458:	103fdd26 	beq	r2,zero,63d0 <_free_r+0x78>
    645c:	38800054 	ori	r2,r7,1
    6460:	3a07883a 	add	r3,r7,r8
    6464:	280ac03a 	cmpne	r5,r5,zero
    6468:	40800115 	stw	r2,4(r8)
    646c:	19c00015 	stw	r7,0(r3)
    6470:	283fe61e 	bne	r5,zero,640c <_free_r+0xb4>
    6474:	00807fc4 	movi	r2,511
    6478:	11c01f2e 	bgeu	r2,r7,64f8 <_free_r+0x1a0>
    647c:	3806d27a 	srli	r3,r7,9
    6480:	1800481e 	bne	r3,zero,65a4 <_free_r+0x24c>
    6484:	3804d0fa 	srli	r2,r7,3
    6488:	100690fa 	slli	r3,r2,3
    648c:	1acd883a 	add	r6,r3,r11
    6490:	31400217 	ldw	r5,8(r6)
    6494:	31405926 	beq	r6,r5,65fc <_free_r+0x2a4>
    6498:	28800117 	ldw	r2,4(r5)
    649c:	00ffff04 	movi	r3,-4
    64a0:	10c4703a 	and	r2,r2,r3
    64a4:	3880022e 	bgeu	r7,r2,64b0 <_free_r+0x158>
    64a8:	29400217 	ldw	r5,8(r5)
    64ac:	317ffa1e 	bne	r6,r5,6498 <_free_r+0x140>
    64b0:	29800317 	ldw	r6,12(r5)
    64b4:	41800315 	stw	r6,12(r8)
    64b8:	41400215 	stw	r5,8(r8)
    64bc:	8809883a 	mov	r4,r17
    64c0:	2a000315 	stw	r8,12(r5)
    64c4:	32000215 	stw	r8,8(r6)
    64c8:	dfc00217 	ldw	ra,8(sp)
    64cc:	dc400117 	ldw	r17,4(sp)
    64d0:	dc000017 	ldw	r16,0(sp)
    64d4:	dec00304 	addi	sp,sp,12
    64d8:	000b9d81 	jmpi	b9d8 <__malloc_unlock>
    64dc:	dfc00217 	ldw	ra,8(sp)
    64e0:	dc400117 	ldw	r17,4(sp)
    64e4:	dc000017 	ldw	r16,0(sp)
    64e8:	dec00304 	addi	sp,sp,12
    64ec:	f800283a 	ret
    64f0:	31000217 	ldw	r4,8(r6)
    64f4:	003fbd06 	br	63ec <_free_r+0x94>
    64f8:	3806d0fa 	srli	r3,r7,3
    64fc:	00800044 	movi	r2,1
    6500:	51400117 	ldw	r5,4(r10)
    6504:	180890fa 	slli	r4,r3,3
    6508:	1807d0ba 	srai	r3,r3,2
    650c:	22c9883a 	add	r4,r4,r11
    6510:	21800217 	ldw	r6,8(r4)
    6514:	10c4983a 	sll	r2,r2,r3
    6518:	41000315 	stw	r4,12(r8)
    651c:	41800215 	stw	r6,8(r8)
    6520:	288ab03a 	or	r5,r5,r2
    6524:	22000215 	stw	r8,8(r4)
    6528:	8809883a 	mov	r4,r17
    652c:	51400115 	stw	r5,4(r10)
    6530:	32000315 	stw	r8,12(r6)
    6534:	dfc00217 	ldw	ra,8(sp)
    6538:	dc400117 	ldw	r17,4(sp)
    653c:	dc000017 	ldw	r16,0(sp)
    6540:	dec00304 	addi	sp,sp,12
    6544:	000b9d81 	jmpi	b9d8 <__malloc_unlock>
    6548:	2880004c 	andi	r2,r5,1
    654c:	3a4d883a 	add	r6,r7,r9
    6550:	1000071e 	bne	r2,zero,6570 <_free_r+0x218>
    6554:	80bffe17 	ldw	r2,-8(r16)
    6558:	4091c83a 	sub	r8,r8,r2
    655c:	41000317 	ldw	r4,12(r8)
    6560:	40c00217 	ldw	r3,8(r8)
    6564:	308d883a 	add	r6,r6,r2
    6568:	20c00215 	stw	r3,8(r4)
    656c:	19000315 	stw	r4,12(r3)
    6570:	00800074 	movhi	r2,1
    6574:	10be6804 	addi	r2,r2,-1632
    6578:	11000017 	ldw	r4,0(r2)
    657c:	30c00054 	ori	r3,r6,1
    6580:	52000215 	stw	r8,8(r10)
    6584:	40c00115 	stw	r3,4(r8)
    6588:	313fa036 	bltu	r6,r4,640c <_free_r+0xb4>
    658c:	00800074 	movhi	r2,1
    6590:	10851604 	addi	r2,r2,5208
    6594:	11400017 	ldw	r5,0(r2)
    6598:	8809883a 	mov	r4,r17
    659c:	000622c0 	call	622c <_malloc_trim_r>
    65a0:	003f9a06 	br	640c <_free_r+0xb4>
    65a4:	00800104 	movi	r2,4
    65a8:	10c0072e 	bgeu	r2,r3,65c8 <_free_r+0x270>
    65ac:	00800504 	movi	r2,20
    65b0:	10c01936 	bltu	r2,r3,6618 <_free_r+0x2c0>
    65b4:	188016c4 	addi	r2,r3,91
    65b8:	100690fa 	slli	r3,r2,3
    65bc:	003fb306 	br	648c <_free_r+0x134>
    65c0:	01400044 	movi	r5,1
    65c4:	003f7e06 	br	63c0 <_free_r+0x68>
    65c8:	3804d1ba 	srli	r2,r7,6
    65cc:	10800e04 	addi	r2,r2,56
    65d0:	100690fa 	slli	r3,r2,3
    65d4:	003fad06 	br	648c <_free_r+0x134>
    65d8:	22000315 	stw	r8,12(r4)
    65dc:	22000215 	stw	r8,8(r4)
    65e0:	3a05883a 	add	r2,r7,r8
    65e4:	38c00054 	ori	r3,r7,1
    65e8:	11c00015 	stw	r7,0(r2)
    65ec:	41000215 	stw	r4,8(r8)
    65f0:	40c00115 	stw	r3,4(r8)
    65f4:	41000315 	stw	r4,12(r8)
    65f8:	003f8406 	br	640c <_free_r+0xb4>
    65fc:	1005d0ba 	srai	r2,r2,2
    6600:	00c00044 	movi	r3,1
    6604:	51000117 	ldw	r4,4(r10)
    6608:	1886983a 	sll	r3,r3,r2
    660c:	20c8b03a 	or	r4,r4,r3
    6610:	51000115 	stw	r4,4(r10)
    6614:	003fa706 	br	64b4 <_free_r+0x15c>
    6618:	00801504 	movi	r2,84
    661c:	10c00436 	bltu	r2,r3,6630 <_free_r+0x2d8>
    6620:	3804d33a 	srli	r2,r7,12
    6624:	10801b84 	addi	r2,r2,110
    6628:	100690fa 	slli	r3,r2,3
    662c:	003f9706 	br	648c <_free_r+0x134>
    6630:	00805504 	movi	r2,340
    6634:	10c00436 	bltu	r2,r3,6648 <_free_r+0x2f0>
    6638:	3804d3fa 	srli	r2,r7,15
    663c:	10801dc4 	addi	r2,r2,119
    6640:	100690fa 	slli	r3,r2,3
    6644:	003f9106 	br	648c <_free_r+0x134>
    6648:	00815504 	movi	r2,1364
    664c:	10c0032e 	bgeu	r2,r3,665c <_free_r+0x304>
    6650:	00801f84 	movi	r2,126
    6654:	00c0fc04 	movi	r3,1008
    6658:	003f8c06 	br	648c <_free_r+0x134>
    665c:	3804d4ba 	srli	r2,r7,18
    6660:	10801f04 	addi	r2,r2,124
    6664:	100690fa 	slli	r3,r2,3
    6668:	003f8806 	br	648c <_free_r+0x134>

0000666c <__sfvwrite_r>:
    666c:	30800217 	ldw	r2,8(r6)
    6670:	defff504 	addi	sp,sp,-44
    6674:	df000915 	stw	fp,36(sp)
    6678:	dd800715 	stw	r22,28(sp)
    667c:	dc800315 	stw	r18,12(sp)
    6680:	dfc00a15 	stw	ra,40(sp)
    6684:	ddc00815 	stw	r23,32(sp)
    6688:	dd400615 	stw	r21,24(sp)
    668c:	dd000515 	stw	r20,20(sp)
    6690:	dcc00415 	stw	r19,16(sp)
    6694:	dc400215 	stw	r17,8(sp)
    6698:	dc000115 	stw	r16,4(sp)
    669c:	302d883a 	mov	r22,r6
    66a0:	2039883a 	mov	fp,r4
    66a4:	2825883a 	mov	r18,r5
    66a8:	10001c26 	beq	r2,zero,671c <__sfvwrite_r+0xb0>
    66ac:	29c0030b 	ldhu	r7,12(r5)
    66b0:	3880020c 	andi	r2,r7,8
    66b4:	10002726 	beq	r2,zero,6754 <__sfvwrite_r+0xe8>
    66b8:	28800417 	ldw	r2,16(r5)
    66bc:	10002526 	beq	r2,zero,6754 <__sfvwrite_r+0xe8>
    66c0:	3880008c 	andi	r2,r7,2
    66c4:	b5400017 	ldw	r21,0(r22)
    66c8:	10002826 	beq	r2,zero,676c <__sfvwrite_r+0x100>
    66cc:	0021883a 	mov	r16,zero
    66d0:	0023883a 	mov	r17,zero
    66d4:	880d883a 	mov	r6,r17
    66d8:	e009883a 	mov	r4,fp
    66dc:	00810004 	movi	r2,1024
    66e0:	80006e26 	beq	r16,zero,689c <__sfvwrite_r+0x230>
    66e4:	800f883a 	mov	r7,r16
    66e8:	91400717 	ldw	r5,28(r18)
    66ec:	1400012e 	bgeu	r2,r16,66f4 <__sfvwrite_r+0x88>
    66f0:	100f883a 	mov	r7,r2
    66f4:	90c00917 	ldw	r3,36(r18)
    66f8:	183ee83a 	callr	r3
    66fc:	1007883a 	mov	r3,r2
    6700:	80a1c83a 	sub	r16,r16,r2
    6704:	88a3883a 	add	r17,r17,r2
    6708:	00806d0e 	bge	zero,r2,68c0 <__sfvwrite_r+0x254>
    670c:	b0800217 	ldw	r2,8(r22)
    6710:	10c5c83a 	sub	r2,r2,r3
    6714:	b0800215 	stw	r2,8(r22)
    6718:	103fee1e 	bne	r2,zero,66d4 <__sfvwrite_r+0x68>
    671c:	0009883a 	mov	r4,zero
    6720:	2005883a 	mov	r2,r4
    6724:	dfc00a17 	ldw	ra,40(sp)
    6728:	df000917 	ldw	fp,36(sp)
    672c:	ddc00817 	ldw	r23,32(sp)
    6730:	dd800717 	ldw	r22,28(sp)
    6734:	dd400617 	ldw	r21,24(sp)
    6738:	dd000517 	ldw	r20,20(sp)
    673c:	dcc00417 	ldw	r19,16(sp)
    6740:	dc800317 	ldw	r18,12(sp)
    6744:	dc400217 	ldw	r17,8(sp)
    6748:	dc000117 	ldw	r16,4(sp)
    674c:	dec00b04 	addi	sp,sp,44
    6750:	f800283a 	ret
    6754:	00042800 	call	4280 <__swsetup_r>
    6758:	1000e41e 	bne	r2,zero,6aec <__sfvwrite_r+0x480>
    675c:	91c0030b 	ldhu	r7,12(r18)
    6760:	b5400017 	ldw	r21,0(r22)
    6764:	3880008c 	andi	r2,r7,2
    6768:	103fd81e 	bne	r2,zero,66cc <__sfvwrite_r+0x60>
    676c:	3880004c 	andi	r2,r7,1
    6770:	1005003a 	cmpeq	r2,r2,zero
    6774:	10005726 	beq	r2,zero,68d4 <__sfvwrite_r+0x268>
    6778:	0029883a 	mov	r20,zero
    677c:	002f883a 	mov	r23,zero
    6780:	a0004226 	beq	r20,zero,688c <__sfvwrite_r+0x220>
    6784:	3880800c 	andi	r2,r7,512
    6788:	94000217 	ldw	r16,8(r18)
    678c:	10008b26 	beq	r2,zero,69bc <__sfvwrite_r+0x350>
    6790:	800d883a 	mov	r6,r16
    6794:	a400a536 	bltu	r20,r16,6a2c <__sfvwrite_r+0x3c0>
    6798:	3881200c 	andi	r2,r7,1152
    679c:	10002726 	beq	r2,zero,683c <__sfvwrite_r+0x1d0>
    67a0:	90800517 	ldw	r2,20(r18)
    67a4:	92000417 	ldw	r8,16(r18)
    67a8:	91400017 	ldw	r5,0(r18)
    67ac:	1087883a 	add	r3,r2,r2
    67b0:	1887883a 	add	r3,r3,r2
    67b4:	1808d7fa 	srli	r4,r3,31
    67b8:	2a21c83a 	sub	r16,r5,r8
    67bc:	80800044 	addi	r2,r16,1
    67c0:	20c9883a 	add	r4,r4,r3
    67c4:	2027d07a 	srai	r19,r4,1
    67c8:	a085883a 	add	r2,r20,r2
    67cc:	980d883a 	mov	r6,r19
    67d0:	9880022e 	bgeu	r19,r2,67dc <__sfvwrite_r+0x170>
    67d4:	1027883a 	mov	r19,r2
    67d8:	100d883a 	mov	r6,r2
    67dc:	3881000c 	andi	r2,r7,1024
    67e0:	1000b826 	beq	r2,zero,6ac4 <__sfvwrite_r+0x458>
    67e4:	300b883a 	mov	r5,r6
    67e8:	e009883a 	mov	r4,fp
    67ec:	00019680 	call	1968 <_malloc_r>
    67f0:	10003126 	beq	r2,zero,68b8 <__sfvwrite_r+0x24c>
    67f4:	91400417 	ldw	r5,16(r18)
    67f8:	1009883a 	mov	r4,r2
    67fc:	800d883a 	mov	r6,r16
    6800:	1023883a 	mov	r17,r2
    6804:	00020a80 	call	20a8 <memcpy>
    6808:	90c0030b 	ldhu	r3,12(r18)
    680c:	00beffc4 	movi	r2,-1025
    6810:	1886703a 	and	r3,r3,r2
    6814:	18c02014 	ori	r3,r3,128
    6818:	90c0030d 	sth	r3,12(r18)
    681c:	9c07c83a 	sub	r3,r19,r16
    6820:	8c05883a 	add	r2,r17,r16
    6824:	a00d883a 	mov	r6,r20
    6828:	a021883a 	mov	r16,r20
    682c:	90800015 	stw	r2,0(r18)
    6830:	90c00215 	stw	r3,8(r18)
    6834:	94400415 	stw	r17,16(r18)
    6838:	94c00515 	stw	r19,20(r18)
    683c:	91000017 	ldw	r4,0(r18)
    6840:	b80b883a 	mov	r5,r23
    6844:	a023883a 	mov	r17,r20
    6848:	0006fc40 	call	6fc4 <memmove>
    684c:	90c00217 	ldw	r3,8(r18)
    6850:	90800017 	ldw	r2,0(r18)
    6854:	a027883a 	mov	r19,r20
    6858:	1c07c83a 	sub	r3,r3,r16
    685c:	1405883a 	add	r2,r2,r16
    6860:	90c00215 	stw	r3,8(r18)
    6864:	a021883a 	mov	r16,r20
    6868:	90800015 	stw	r2,0(r18)
    686c:	b0800217 	ldw	r2,8(r22)
    6870:	1405c83a 	sub	r2,r2,r16
    6874:	b0800215 	stw	r2,8(r22)
    6878:	103fa826 	beq	r2,zero,671c <__sfvwrite_r+0xb0>
    687c:	a469c83a 	sub	r20,r20,r17
    6880:	91c0030b 	ldhu	r7,12(r18)
    6884:	bcef883a 	add	r23,r23,r19
    6888:	a03fbe1e 	bne	r20,zero,6784 <__sfvwrite_r+0x118>
    688c:	adc00017 	ldw	r23,0(r21)
    6890:	ad000117 	ldw	r20,4(r21)
    6894:	ad400204 	addi	r21,r21,8
    6898:	003fb906 	br	6780 <__sfvwrite_r+0x114>
    689c:	ac400017 	ldw	r17,0(r21)
    68a0:	ac000117 	ldw	r16,4(r21)
    68a4:	ad400204 	addi	r21,r21,8
    68a8:	003f8a06 	br	66d4 <__sfvwrite_r+0x68>
    68ac:	91400417 	ldw	r5,16(r18)
    68b0:	e009883a 	mov	r4,fp
    68b4:	00063580 	call	6358 <_free_r>
    68b8:	00800304 	movi	r2,12
    68bc:	e0800015 	stw	r2,0(fp)
    68c0:	9080030b 	ldhu	r2,12(r18)
    68c4:	013fffc4 	movi	r4,-1
    68c8:	10801014 	ori	r2,r2,64
    68cc:	9080030d 	sth	r2,12(r18)
    68d0:	003f9306 	br	6720 <__sfvwrite_r+0xb4>
    68d4:	0027883a 	mov	r19,zero
    68d8:	002f883a 	mov	r23,zero
    68dc:	d8000015 	stw	zero,0(sp)
    68e0:	0029883a 	mov	r20,zero
    68e4:	98001e26 	beq	r19,zero,6960 <__sfvwrite_r+0x2f4>
    68e8:	d8c00017 	ldw	r3,0(sp)
    68ec:	1804c03a 	cmpne	r2,r3,zero
    68f0:	10005e26 	beq	r2,zero,6a6c <__sfvwrite_r+0x400>
    68f4:	9821883a 	mov	r16,r19
    68f8:	a4c0012e 	bgeu	r20,r19,6900 <__sfvwrite_r+0x294>
    68fc:	a021883a 	mov	r16,r20
    6900:	91000017 	ldw	r4,0(r18)
    6904:	90800417 	ldw	r2,16(r18)
    6908:	91800217 	ldw	r6,8(r18)
    690c:	91c00517 	ldw	r7,20(r18)
    6910:	1100022e 	bgeu	r2,r4,691c <__sfvwrite_r+0x2b0>
    6914:	31e3883a 	add	r17,r6,r7
    6918:	8c001616 	blt	r17,r16,6974 <__sfvwrite_r+0x308>
    691c:	81c03816 	blt	r16,r7,6a00 <__sfvwrite_r+0x394>
    6920:	90c00917 	ldw	r3,36(r18)
    6924:	91400717 	ldw	r5,28(r18)
    6928:	e009883a 	mov	r4,fp
    692c:	b80d883a 	mov	r6,r23
    6930:	183ee83a 	callr	r3
    6934:	1023883a 	mov	r17,r2
    6938:	00bfe10e 	bge	zero,r2,68c0 <__sfvwrite_r+0x254>
    693c:	a469c83a 	sub	r20,r20,r17
    6940:	a0001826 	beq	r20,zero,69a4 <__sfvwrite_r+0x338>
    6944:	b0800217 	ldw	r2,8(r22)
    6948:	1445c83a 	sub	r2,r2,r17
    694c:	b0800215 	stw	r2,8(r22)
    6950:	103f7226 	beq	r2,zero,671c <__sfvwrite_r+0xb0>
    6954:	9c67c83a 	sub	r19,r19,r17
    6958:	bc6f883a 	add	r23,r23,r17
    695c:	983fe21e 	bne	r19,zero,68e8 <__sfvwrite_r+0x27c>
    6960:	adc00017 	ldw	r23,0(r21)
    6964:	acc00117 	ldw	r19,4(r21)
    6968:	ad400204 	addi	r21,r21,8
    696c:	d8000015 	stw	zero,0(sp)
    6970:	003fdc06 	br	68e4 <__sfvwrite_r+0x278>
    6974:	b80b883a 	mov	r5,r23
    6978:	880d883a 	mov	r6,r17
    697c:	0006fc40 	call	6fc4 <memmove>
    6980:	90c00017 	ldw	r3,0(r18)
    6984:	e009883a 	mov	r4,fp
    6988:	900b883a 	mov	r5,r18
    698c:	1c47883a 	add	r3,r3,r17
    6990:	90c00015 	stw	r3,0(r18)
    6994:	0005d3c0 	call	5d3c <_fflush_r>
    6998:	103fc91e 	bne	r2,zero,68c0 <__sfvwrite_r+0x254>
    699c:	a469c83a 	sub	r20,r20,r17
    69a0:	a03fe81e 	bne	r20,zero,6944 <__sfvwrite_r+0x2d8>
    69a4:	e009883a 	mov	r4,fp
    69a8:	900b883a 	mov	r5,r18
    69ac:	0005d3c0 	call	5d3c <_fflush_r>
    69b0:	103fc31e 	bne	r2,zero,68c0 <__sfvwrite_r+0x254>
    69b4:	d8000015 	stw	zero,0(sp)
    69b8:	003fe206 	br	6944 <__sfvwrite_r+0x2d8>
    69bc:	91000017 	ldw	r4,0(r18)
    69c0:	90800417 	ldw	r2,16(r18)
    69c4:	1100022e 	bgeu	r2,r4,69d0 <__sfvwrite_r+0x364>
    69c8:	8023883a 	mov	r17,r16
    69cc:	85003136 	bltu	r16,r20,6a94 <__sfvwrite_r+0x428>
    69d0:	91c00517 	ldw	r7,20(r18)
    69d4:	a1c01836 	bltu	r20,r7,6a38 <__sfvwrite_r+0x3cc>
    69d8:	90c00917 	ldw	r3,36(r18)
    69dc:	91400717 	ldw	r5,28(r18)
    69e0:	e009883a 	mov	r4,fp
    69e4:	b80d883a 	mov	r6,r23
    69e8:	183ee83a 	callr	r3
    69ec:	1021883a 	mov	r16,r2
    69f0:	00bfb30e 	bge	zero,r2,68c0 <__sfvwrite_r+0x254>
    69f4:	1023883a 	mov	r17,r2
    69f8:	1027883a 	mov	r19,r2
    69fc:	003f9b06 	br	686c <__sfvwrite_r+0x200>
    6a00:	b80b883a 	mov	r5,r23
    6a04:	800d883a 	mov	r6,r16
    6a08:	0006fc40 	call	6fc4 <memmove>
    6a0c:	90c00217 	ldw	r3,8(r18)
    6a10:	90800017 	ldw	r2,0(r18)
    6a14:	8023883a 	mov	r17,r16
    6a18:	1c07c83a 	sub	r3,r3,r16
    6a1c:	1405883a 	add	r2,r2,r16
    6a20:	90c00215 	stw	r3,8(r18)
    6a24:	90800015 	stw	r2,0(r18)
    6a28:	003fc406 	br	693c <__sfvwrite_r+0x2d0>
    6a2c:	a00d883a 	mov	r6,r20
    6a30:	a021883a 	mov	r16,r20
    6a34:	003f8106 	br	683c <__sfvwrite_r+0x1d0>
    6a38:	b80b883a 	mov	r5,r23
    6a3c:	a00d883a 	mov	r6,r20
    6a40:	0006fc40 	call	6fc4 <memmove>
    6a44:	90c00217 	ldw	r3,8(r18)
    6a48:	90800017 	ldw	r2,0(r18)
    6a4c:	a021883a 	mov	r16,r20
    6a50:	1d07c83a 	sub	r3,r3,r20
    6a54:	1505883a 	add	r2,r2,r20
    6a58:	a023883a 	mov	r17,r20
    6a5c:	a027883a 	mov	r19,r20
    6a60:	90c00215 	stw	r3,8(r18)
    6a64:	90800015 	stw	r2,0(r18)
    6a68:	003f8006 	br	686c <__sfvwrite_r+0x200>
    6a6c:	b809883a 	mov	r4,r23
    6a70:	01400284 	movi	r5,10
    6a74:	980d883a 	mov	r6,r19
    6a78:	0006ee00 	call	6ee0 <memchr>
    6a7c:	10001726 	beq	r2,zero,6adc <__sfvwrite_r+0x470>
    6a80:	15c5c83a 	sub	r2,r2,r23
    6a84:	15000044 	addi	r20,r2,1
    6a88:	00800044 	movi	r2,1
    6a8c:	d8800015 	stw	r2,0(sp)
    6a90:	003f9806 	br	68f4 <__sfvwrite_r+0x288>
    6a94:	b80b883a 	mov	r5,r23
    6a98:	800d883a 	mov	r6,r16
    6a9c:	0006fc40 	call	6fc4 <memmove>
    6aa0:	90c00017 	ldw	r3,0(r18)
    6aa4:	e009883a 	mov	r4,fp
    6aa8:	900b883a 	mov	r5,r18
    6aac:	1c07883a 	add	r3,r3,r16
    6ab0:	90c00015 	stw	r3,0(r18)
    6ab4:	8027883a 	mov	r19,r16
    6ab8:	0005d3c0 	call	5d3c <_fflush_r>
    6abc:	103f6b26 	beq	r2,zero,686c <__sfvwrite_r+0x200>
    6ac0:	003f7f06 	br	68c0 <__sfvwrite_r+0x254>
    6ac4:	400b883a 	mov	r5,r8
    6ac8:	e009883a 	mov	r4,fp
    6acc:	00081300 	call	8130 <_realloc_r>
    6ad0:	103f7626 	beq	r2,zero,68ac <__sfvwrite_r+0x240>
    6ad4:	1023883a 	mov	r17,r2
    6ad8:	003f5006 	br	681c <__sfvwrite_r+0x1b0>
    6adc:	00c00044 	movi	r3,1
    6ae0:	9d000044 	addi	r20,r19,1
    6ae4:	d8c00015 	stw	r3,0(sp)
    6ae8:	003f8206 	br	68f4 <__sfvwrite_r+0x288>
    6aec:	9080030b 	ldhu	r2,12(r18)
    6af0:	00c00244 	movi	r3,9
    6af4:	013fffc4 	movi	r4,-1
    6af8:	10801014 	ori	r2,r2,64
    6afc:	9080030d 	sth	r2,12(r18)
    6b00:	e0c00015 	stw	r3,0(fp)
    6b04:	003f0606 	br	6720 <__sfvwrite_r+0xb4>

00006b08 <_fwalk_reent>:
    6b08:	defff704 	addi	sp,sp,-36
    6b0c:	dcc00315 	stw	r19,12(sp)
    6b10:	24c0b804 	addi	r19,r4,736
    6b14:	dd800615 	stw	r22,24(sp)
    6b18:	dd400515 	stw	r21,20(sp)
    6b1c:	dfc00815 	stw	ra,32(sp)
    6b20:	ddc00715 	stw	r23,28(sp)
    6b24:	dd000415 	stw	r20,16(sp)
    6b28:	dc800215 	stw	r18,8(sp)
    6b2c:	dc400115 	stw	r17,4(sp)
    6b30:	dc000015 	stw	r16,0(sp)
    6b34:	202b883a 	mov	r21,r4
    6b38:	282d883a 	mov	r22,r5
    6b3c:	0005fc40 	call	5fc4 <__sfp_lock_acquire>
    6b40:	98002126 	beq	r19,zero,6bc8 <_fwalk_reent+0xc0>
    6b44:	002f883a 	mov	r23,zero
    6b48:	9c800117 	ldw	r18,4(r19)
    6b4c:	9c000217 	ldw	r16,8(r19)
    6b50:	90bfffc4 	addi	r2,r18,-1
    6b54:	10000d16 	blt	r2,zero,6b8c <_fwalk_reent+0x84>
    6b58:	0023883a 	mov	r17,zero
    6b5c:	053fffc4 	movi	r20,-1
    6b60:	8080030f 	ldh	r2,12(r16)
    6b64:	8c400044 	addi	r17,r17,1
    6b68:	10000626 	beq	r2,zero,6b84 <_fwalk_reent+0x7c>
    6b6c:	8080038f 	ldh	r2,14(r16)
    6b70:	800b883a 	mov	r5,r16
    6b74:	a809883a 	mov	r4,r21
    6b78:	15000226 	beq	r2,r20,6b84 <_fwalk_reent+0x7c>
    6b7c:	b03ee83a 	callr	r22
    6b80:	b8aeb03a 	or	r23,r23,r2
    6b84:	84001704 	addi	r16,r16,92
    6b88:	947ff51e 	bne	r18,r17,6b60 <_fwalk_reent+0x58>
    6b8c:	9cc00017 	ldw	r19,0(r19)
    6b90:	983fed1e 	bne	r19,zero,6b48 <_fwalk_reent+0x40>
    6b94:	0005fc80 	call	5fc8 <__sfp_lock_release>
    6b98:	b805883a 	mov	r2,r23
    6b9c:	dfc00817 	ldw	ra,32(sp)
    6ba0:	ddc00717 	ldw	r23,28(sp)
    6ba4:	dd800617 	ldw	r22,24(sp)
    6ba8:	dd400517 	ldw	r21,20(sp)
    6bac:	dd000417 	ldw	r20,16(sp)
    6bb0:	dcc00317 	ldw	r19,12(sp)
    6bb4:	dc800217 	ldw	r18,8(sp)
    6bb8:	dc400117 	ldw	r17,4(sp)
    6bbc:	dc000017 	ldw	r16,0(sp)
    6bc0:	dec00904 	addi	sp,sp,36
    6bc4:	f800283a 	ret
    6bc8:	002f883a 	mov	r23,zero
    6bcc:	003ff106 	br	6b94 <_fwalk_reent+0x8c>

00006bd0 <_fwalk>:
    6bd0:	defff804 	addi	sp,sp,-32
    6bd4:	dcc00315 	stw	r19,12(sp)
    6bd8:	24c0b804 	addi	r19,r4,736
    6bdc:	dd400515 	stw	r21,20(sp)
    6be0:	dfc00715 	stw	ra,28(sp)
    6be4:	dd800615 	stw	r22,24(sp)
    6be8:	dd000415 	stw	r20,16(sp)
    6bec:	dc800215 	stw	r18,8(sp)
    6bf0:	dc400115 	stw	r17,4(sp)
    6bf4:	dc000015 	stw	r16,0(sp)
    6bf8:	282b883a 	mov	r21,r5
    6bfc:	0005fc40 	call	5fc4 <__sfp_lock_acquire>
    6c00:	98001f26 	beq	r19,zero,6c80 <_fwalk+0xb0>
    6c04:	002d883a 	mov	r22,zero
    6c08:	9c800117 	ldw	r18,4(r19)
    6c0c:	9c000217 	ldw	r16,8(r19)
    6c10:	90bfffc4 	addi	r2,r18,-1
    6c14:	10000c16 	blt	r2,zero,6c48 <_fwalk+0x78>
    6c18:	0023883a 	mov	r17,zero
    6c1c:	053fffc4 	movi	r20,-1
    6c20:	8080030f 	ldh	r2,12(r16)
    6c24:	8c400044 	addi	r17,r17,1
    6c28:	10000526 	beq	r2,zero,6c40 <_fwalk+0x70>
    6c2c:	8080038f 	ldh	r2,14(r16)
    6c30:	8009883a 	mov	r4,r16
    6c34:	15000226 	beq	r2,r20,6c40 <_fwalk+0x70>
    6c38:	a83ee83a 	callr	r21
    6c3c:	b0acb03a 	or	r22,r22,r2
    6c40:	84001704 	addi	r16,r16,92
    6c44:	947ff61e 	bne	r18,r17,6c20 <_fwalk+0x50>
    6c48:	9cc00017 	ldw	r19,0(r19)
    6c4c:	983fee1e 	bne	r19,zero,6c08 <_fwalk+0x38>
    6c50:	0005fc80 	call	5fc8 <__sfp_lock_release>
    6c54:	b005883a 	mov	r2,r22
    6c58:	dfc00717 	ldw	ra,28(sp)
    6c5c:	dd800617 	ldw	r22,24(sp)
    6c60:	dd400517 	ldw	r21,20(sp)
    6c64:	dd000417 	ldw	r20,16(sp)
    6c68:	dcc00317 	ldw	r19,12(sp)
    6c6c:	dc800217 	ldw	r18,8(sp)
    6c70:	dc400117 	ldw	r17,4(sp)
    6c74:	dc000017 	ldw	r16,0(sp)
    6c78:	dec00804 	addi	sp,sp,32
    6c7c:	f800283a 	ret
    6c80:	002d883a 	mov	r22,zero
    6c84:	003ff206 	br	6c50 <_fwalk+0x80>

00006c88 <__locale_charset>:
    6c88:	d0a00617 	ldw	r2,-32744(gp)
    6c8c:	f800283a 	ret

00006c90 <_localeconv_r>:
    6c90:	00800074 	movhi	r2,1
    6c94:	10b73704 	addi	r2,r2,-8996
    6c98:	f800283a 	ret

00006c9c <localeconv>:
    6c9c:	00800074 	movhi	r2,1
    6ca0:	10be6604 	addi	r2,r2,-1640
    6ca4:	11000017 	ldw	r4,0(r2)
    6ca8:	0006c901 	jmpi	6c90 <_localeconv_r>

00006cac <_setlocale_r>:
    6cac:	defffc04 	addi	sp,sp,-16
    6cb0:	00c00074 	movhi	r3,1
    6cb4:	18f70d04 	addi	r3,r3,-9164
    6cb8:	dc800215 	stw	r18,8(sp)
    6cbc:	dc400115 	stw	r17,4(sp)
    6cc0:	dc000015 	stw	r16,0(sp)
    6cc4:	2023883a 	mov	r17,r4
    6cc8:	2825883a 	mov	r18,r5
    6ccc:	dfc00315 	stw	ra,12(sp)
    6cd0:	3021883a 	mov	r16,r6
    6cd4:	3009883a 	mov	r4,r6
    6cd8:	180b883a 	mov	r5,r3
    6cdc:	30000926 	beq	r6,zero,6d04 <_setlocale_r+0x58>
    6ce0:	00088e00 	call	88e0 <strcmp>
    6ce4:	8009883a 	mov	r4,r16
    6ce8:	01400074 	movhi	r5,1
    6cec:	29771e04 	addi	r5,r5,-9096
    6cf0:	10000b1e 	bne	r2,zero,6d20 <_setlocale_r+0x74>
    6cf4:	8c000d15 	stw	r16,52(r17)
    6cf8:	8c800c15 	stw	r18,48(r17)
    6cfc:	00c00074 	movhi	r3,1
    6d00:	18f70d04 	addi	r3,r3,-9164
    6d04:	1805883a 	mov	r2,r3
    6d08:	dfc00317 	ldw	ra,12(sp)
    6d0c:	dc800217 	ldw	r18,8(sp)
    6d10:	dc400117 	ldw	r17,4(sp)
    6d14:	dc000017 	ldw	r16,0(sp)
    6d18:	dec00404 	addi	sp,sp,16
    6d1c:	f800283a 	ret
    6d20:	00088e00 	call	88e0 <strcmp>
    6d24:	0007883a 	mov	r3,zero
    6d28:	103ff226 	beq	r2,zero,6cf4 <_setlocale_r+0x48>
    6d2c:	003ff506 	br	6d04 <_setlocale_r+0x58>

00006d30 <setlocale>:
    6d30:	01800074 	movhi	r6,1
    6d34:	31be6604 	addi	r6,r6,-1640
    6d38:	2007883a 	mov	r3,r4
    6d3c:	31000017 	ldw	r4,0(r6)
    6d40:	280d883a 	mov	r6,r5
    6d44:	180b883a 	mov	r5,r3
    6d48:	0006cac1 	jmpi	6cac <_setlocale_r>

00006d4c <__smakebuf_r>:
    6d4c:	2880030b 	ldhu	r2,12(r5)
    6d50:	deffed04 	addi	sp,sp,-76
    6d54:	dc401015 	stw	r17,64(sp)
    6d58:	1080008c 	andi	r2,r2,2
    6d5c:	dc000f15 	stw	r16,60(sp)
    6d60:	dfc01215 	stw	ra,72(sp)
    6d64:	dc801115 	stw	r18,68(sp)
    6d68:	2821883a 	mov	r16,r5
    6d6c:	2023883a 	mov	r17,r4
    6d70:	10000b26 	beq	r2,zero,6da0 <__smakebuf_r+0x54>
    6d74:	28c010c4 	addi	r3,r5,67
    6d78:	00800044 	movi	r2,1
    6d7c:	28800515 	stw	r2,20(r5)
    6d80:	28c00415 	stw	r3,16(r5)
    6d84:	28c00015 	stw	r3,0(r5)
    6d88:	dfc01217 	ldw	ra,72(sp)
    6d8c:	dc801117 	ldw	r18,68(sp)
    6d90:	dc401017 	ldw	r17,64(sp)
    6d94:	dc000f17 	ldw	r16,60(sp)
    6d98:	dec01304 	addi	sp,sp,76
    6d9c:	f800283a 	ret
    6da0:	2940038f 	ldh	r5,14(r5)
    6da4:	28002116 	blt	r5,zero,6e2c <__smakebuf_r+0xe0>
    6da8:	d80d883a 	mov	r6,sp
    6dac:	0008c5c0 	call	8c5c <_fstat_r>
    6db0:	10001e16 	blt	r2,zero,6e2c <__smakebuf_r+0xe0>
    6db4:	d8800117 	ldw	r2,4(sp)
    6db8:	00e00014 	movui	r3,32768
    6dbc:	113c000c 	andi	r4,r2,61440
    6dc0:	20c03126 	beq	r4,r3,6e88 <__smakebuf_r+0x13c>
    6dc4:	8080030b 	ldhu	r2,12(r16)
    6dc8:	00c80004 	movi	r3,8192
    6dcc:	10820014 	ori	r2,r2,2048
    6dd0:	8080030d 	sth	r2,12(r16)
    6dd4:	20c01e26 	beq	r4,r3,6e50 <__smakebuf_r+0x104>
    6dd8:	04810004 	movi	r18,1024
    6ddc:	8809883a 	mov	r4,r17
    6de0:	900b883a 	mov	r5,r18
    6de4:	00019680 	call	1968 <_malloc_r>
    6de8:	1009883a 	mov	r4,r2
    6dec:	10003126 	beq	r2,zero,6eb4 <__smakebuf_r+0x168>
    6df0:	80c0030b 	ldhu	r3,12(r16)
    6df4:	00800034 	movhi	r2,0
    6df8:	10982e04 	addi	r2,r2,24760
    6dfc:	88800f15 	stw	r2,60(r17)
    6e00:	18c02014 	ori	r3,r3,128
    6e04:	84800515 	stw	r18,20(r16)
    6e08:	80c0030d 	sth	r3,12(r16)
    6e0c:	81000415 	stw	r4,16(r16)
    6e10:	81000015 	stw	r4,0(r16)
    6e14:	dfc01217 	ldw	ra,72(sp)
    6e18:	dc801117 	ldw	r18,68(sp)
    6e1c:	dc401017 	ldw	r17,64(sp)
    6e20:	dc000f17 	ldw	r16,60(sp)
    6e24:	dec01304 	addi	sp,sp,76
    6e28:	f800283a 	ret
    6e2c:	80c0030b 	ldhu	r3,12(r16)
    6e30:	1880200c 	andi	r2,r3,128
    6e34:	10000426 	beq	r2,zero,6e48 <__smakebuf_r+0xfc>
    6e38:	04801004 	movi	r18,64
    6e3c:	18820014 	ori	r2,r3,2048
    6e40:	8080030d 	sth	r2,12(r16)
    6e44:	003fe506 	br	6ddc <__smakebuf_r+0x90>
    6e48:	04810004 	movi	r18,1024
    6e4c:	003ffb06 	br	6e3c <__smakebuf_r+0xf0>
    6e50:	8140038f 	ldh	r5,14(r16)
    6e54:	8809883a 	mov	r4,r17
    6e58:	0008cd00 	call	8cd0 <_isatty_r>
    6e5c:	103fde26 	beq	r2,zero,6dd8 <__smakebuf_r+0x8c>
    6e60:	8080030b 	ldhu	r2,12(r16)
    6e64:	80c010c4 	addi	r3,r16,67
    6e68:	04810004 	movi	r18,1024
    6e6c:	10800054 	ori	r2,r2,1
    6e70:	8080030d 	sth	r2,12(r16)
    6e74:	00800044 	movi	r2,1
    6e78:	80c00415 	stw	r3,16(r16)
    6e7c:	80800515 	stw	r2,20(r16)
    6e80:	80c00015 	stw	r3,0(r16)
    6e84:	003fd506 	br	6ddc <__smakebuf_r+0x90>
    6e88:	80c00a17 	ldw	r3,40(r16)
    6e8c:	00800074 	movhi	r2,1
    6e90:	10a1e704 	addi	r2,r2,-30820
    6e94:	18bfcb1e 	bne	r3,r2,6dc4 <__smakebuf_r+0x78>
    6e98:	8080030b 	ldhu	r2,12(r16)
    6e9c:	00c10004 	movi	r3,1024
    6ea0:	1825883a 	mov	r18,r3
    6ea4:	10c4b03a 	or	r2,r2,r3
    6ea8:	8080030d 	sth	r2,12(r16)
    6eac:	80c01315 	stw	r3,76(r16)
    6eb0:	003fca06 	br	6ddc <__smakebuf_r+0x90>
    6eb4:	8100030b 	ldhu	r4,12(r16)
    6eb8:	2080800c 	andi	r2,r4,512
    6ebc:	103fb21e 	bne	r2,zero,6d88 <__smakebuf_r+0x3c>
    6ec0:	80c010c4 	addi	r3,r16,67
    6ec4:	21000094 	ori	r4,r4,2
    6ec8:	00800044 	movi	r2,1
    6ecc:	80800515 	stw	r2,20(r16)
    6ed0:	8100030d 	sth	r4,12(r16)
    6ed4:	80c00415 	stw	r3,16(r16)
    6ed8:	80c00015 	stw	r3,0(r16)
    6edc:	003faa06 	br	6d88 <__smakebuf_r+0x3c>

00006ee0 <memchr>:
    6ee0:	008000c4 	movi	r2,3
    6ee4:	29403fcc 	andi	r5,r5,255
    6ee8:	2007883a 	mov	r3,r4
    6eec:	1180022e 	bgeu	r2,r6,6ef8 <memchr+0x18>
    6ef0:	2084703a 	and	r2,r4,r2
    6ef4:	10000b26 	beq	r2,zero,6f24 <memchr+0x44>
    6ef8:	313fffc4 	addi	r4,r6,-1
    6efc:	3000051e 	bne	r6,zero,6f14 <memchr+0x34>
    6f00:	00002c06 	br	6fb4 <memchr+0xd4>
    6f04:	213fffc4 	addi	r4,r4,-1
    6f08:	00bfffc4 	movi	r2,-1
    6f0c:	18c00044 	addi	r3,r3,1
    6f10:	20802826 	beq	r4,r2,6fb4 <memchr+0xd4>
    6f14:	18800003 	ldbu	r2,0(r3)
    6f18:	28bffa1e 	bne	r5,r2,6f04 <memchr+0x24>
    6f1c:	1805883a 	mov	r2,r3
    6f20:	f800283a 	ret
    6f24:	0011883a 	mov	r8,zero
    6f28:	0007883a 	mov	r3,zero
    6f2c:	01c00104 	movi	r7,4
    6f30:	4004923a 	slli	r2,r8,8
    6f34:	18c00044 	addi	r3,r3,1
    6f38:	1151883a 	add	r8,r2,r5
    6f3c:	19fffc1e 	bne	r3,r7,6f30 <memchr+0x50>
    6f40:	02bfbff4 	movhi	r10,65279
    6f44:	52bfbfc4 	addi	r10,r10,-257
    6f48:	02602074 	movhi	r9,32897
    6f4c:	4a602004 	addi	r9,r9,-32640
    6f50:	02c000c4 	movi	r11,3
    6f54:	20800017 	ldw	r2,0(r4)
    6f58:	31bfff04 	addi	r6,r6,-4
    6f5c:	200f883a 	mov	r7,r4
    6f60:	1204f03a 	xor	r2,r2,r8
    6f64:	1287883a 	add	r3,r2,r10
    6f68:	1a46703a 	and	r3,r3,r9
    6f6c:	0084303a 	nor	r2,zero,r2
    6f70:	10c4703a 	and	r2,r2,r3
    6f74:	10000b26 	beq	r2,zero,6fa4 <memchr+0xc4>
    6f78:	20800003 	ldbu	r2,0(r4)
    6f7c:	28800f26 	beq	r5,r2,6fbc <memchr+0xdc>
    6f80:	20800043 	ldbu	r2,1(r4)
    6f84:	21c00044 	addi	r7,r4,1
    6f88:	28800c26 	beq	r5,r2,6fbc <memchr+0xdc>
    6f8c:	20800083 	ldbu	r2,2(r4)
    6f90:	21c00084 	addi	r7,r4,2
    6f94:	28800926 	beq	r5,r2,6fbc <memchr+0xdc>
    6f98:	208000c3 	ldbu	r2,3(r4)
    6f9c:	21c000c4 	addi	r7,r4,3
    6fa0:	28800626 	beq	r5,r2,6fbc <memchr+0xdc>
    6fa4:	21000104 	addi	r4,r4,4
    6fa8:	59bfea36 	bltu	r11,r6,6f54 <memchr+0x74>
    6fac:	2007883a 	mov	r3,r4
    6fb0:	003fd106 	br	6ef8 <memchr+0x18>
    6fb4:	0005883a 	mov	r2,zero
    6fb8:	f800283a 	ret
    6fbc:	3805883a 	mov	r2,r7
    6fc0:	f800283a 	ret

00006fc4 <memmove>:
    6fc4:	2807883a 	mov	r3,r5
    6fc8:	2011883a 	mov	r8,r4
    6fcc:	29000c2e 	bgeu	r5,r4,7000 <memmove+0x3c>
    6fd0:	298f883a 	add	r7,r5,r6
    6fd4:	21c00a2e 	bgeu	r4,r7,7000 <memmove+0x3c>
    6fd8:	30000726 	beq	r6,zero,6ff8 <memmove+0x34>
    6fdc:	2187883a 	add	r3,r4,r6
    6fe0:	198dc83a 	sub	r6,r3,r6
    6fe4:	39ffffc4 	addi	r7,r7,-1
    6fe8:	38800003 	ldbu	r2,0(r7)
    6fec:	18ffffc4 	addi	r3,r3,-1
    6ff0:	18800005 	stb	r2,0(r3)
    6ff4:	19bffb1e 	bne	r3,r6,6fe4 <memmove+0x20>
    6ff8:	2005883a 	mov	r2,r4
    6ffc:	f800283a 	ret
    7000:	01c003c4 	movi	r7,15
    7004:	39800a36 	bltu	r7,r6,7030 <memmove+0x6c>
    7008:	303ffb26 	beq	r6,zero,6ff8 <memmove+0x34>
    700c:	400f883a 	mov	r7,r8
    7010:	320d883a 	add	r6,r6,r8
    7014:	28800003 	ldbu	r2,0(r5)
    7018:	29400044 	addi	r5,r5,1
    701c:	38800005 	stb	r2,0(r7)
    7020:	39c00044 	addi	r7,r7,1
    7024:	39bffb1e 	bne	r7,r6,7014 <memmove+0x50>
    7028:	2005883a 	mov	r2,r4
    702c:	f800283a 	ret
    7030:	1904b03a 	or	r2,r3,r4
    7034:	108000cc 	andi	r2,r2,3
    7038:	103ff31e 	bne	r2,zero,7008 <memmove+0x44>
    703c:	3811883a 	mov	r8,r7
    7040:	180b883a 	mov	r5,r3
    7044:	200f883a 	mov	r7,r4
    7048:	28c00017 	ldw	r3,0(r5)
    704c:	31bffc04 	addi	r6,r6,-16
    7050:	38c00015 	stw	r3,0(r7)
    7054:	28800117 	ldw	r2,4(r5)
    7058:	38800115 	stw	r2,4(r7)
    705c:	28c00217 	ldw	r3,8(r5)
    7060:	38c00215 	stw	r3,8(r7)
    7064:	28800317 	ldw	r2,12(r5)
    7068:	29400404 	addi	r5,r5,16
    706c:	38800315 	stw	r2,12(r7)
    7070:	39c00404 	addi	r7,r7,16
    7074:	41bff436 	bltu	r8,r6,7048 <memmove+0x84>
    7078:	008000c4 	movi	r2,3
    707c:	1180072e 	bgeu	r2,r6,709c <memmove+0xd8>
    7080:	1007883a 	mov	r3,r2
    7084:	28800017 	ldw	r2,0(r5)
    7088:	31bfff04 	addi	r6,r6,-4
    708c:	29400104 	addi	r5,r5,4
    7090:	38800015 	stw	r2,0(r7)
    7094:	39c00104 	addi	r7,r7,4
    7098:	19bffa36 	bltu	r3,r6,7084 <memmove+0xc0>
    709c:	3811883a 	mov	r8,r7
    70a0:	003fd906 	br	7008 <memmove+0x44>

000070a4 <memset>:
    70a4:	008000c4 	movi	r2,3
    70a8:	29403fcc 	andi	r5,r5,255
    70ac:	2007883a 	mov	r3,r4
    70b0:	1180022e 	bgeu	r2,r6,70bc <memset+0x18>
    70b4:	2084703a 	and	r2,r4,r2
    70b8:	10000826 	beq	r2,zero,70dc <memset+0x38>
    70bc:	30000526 	beq	r6,zero,70d4 <memset+0x30>
    70c0:	2805883a 	mov	r2,r5
    70c4:	30cd883a 	add	r6,r6,r3
    70c8:	18800005 	stb	r2,0(r3)
    70cc:	18c00044 	addi	r3,r3,1
    70d0:	19bffd1e 	bne	r3,r6,70c8 <memset+0x24>
    70d4:	2005883a 	mov	r2,r4
    70d8:	f800283a 	ret
    70dc:	2804923a 	slli	r2,r5,8
    70e0:	020003c4 	movi	r8,15
    70e4:	200f883a 	mov	r7,r4
    70e8:	2884b03a 	or	r2,r5,r2
    70ec:	1006943a 	slli	r3,r2,16
    70f0:	10c6b03a 	or	r3,r2,r3
    70f4:	41800a2e 	bgeu	r8,r6,7120 <memset+0x7c>
    70f8:	4005883a 	mov	r2,r8
    70fc:	31bffc04 	addi	r6,r6,-16
    7100:	38c00015 	stw	r3,0(r7)
    7104:	38c00115 	stw	r3,4(r7)
    7108:	38c00215 	stw	r3,8(r7)
    710c:	38c00315 	stw	r3,12(r7)
    7110:	39c00404 	addi	r7,r7,16
    7114:	11bff936 	bltu	r2,r6,70fc <memset+0x58>
    7118:	008000c4 	movi	r2,3
    711c:	1180052e 	bgeu	r2,r6,7134 <memset+0x90>
    7120:	31bfff04 	addi	r6,r6,-4
    7124:	008000c4 	movi	r2,3
    7128:	38c00015 	stw	r3,0(r7)
    712c:	39c00104 	addi	r7,r7,4
    7130:	11bffb36 	bltu	r2,r6,7120 <memset+0x7c>
    7134:	3807883a 	mov	r3,r7
    7138:	003fe006 	br	70bc <memset+0x18>

0000713c <_Bfree>:
    713c:	28000826 	beq	r5,zero,7160 <_Bfree+0x24>
    7140:	28800117 	ldw	r2,4(r5)
    7144:	21001317 	ldw	r4,76(r4)
    7148:	1085883a 	add	r2,r2,r2
    714c:	1085883a 	add	r2,r2,r2
    7150:	1105883a 	add	r2,r2,r4
    7154:	10c00017 	ldw	r3,0(r2)
    7158:	28c00015 	stw	r3,0(r5)
    715c:	11400015 	stw	r5,0(r2)
    7160:	f800283a 	ret

00007164 <__hi0bits>:
    7164:	20bfffec 	andhi	r2,r4,65535
    7168:	10001426 	beq	r2,zero,71bc <__hi0bits+0x58>
    716c:	0007883a 	mov	r3,zero
    7170:	20bfc02c 	andhi	r2,r4,65280
    7174:	1000021e 	bne	r2,zero,7180 <__hi0bits+0x1c>
    7178:	2008923a 	slli	r4,r4,8
    717c:	18c00204 	addi	r3,r3,8
    7180:	20bc002c 	andhi	r2,r4,61440
    7184:	1000021e 	bne	r2,zero,7190 <__hi0bits+0x2c>
    7188:	2008913a 	slli	r4,r4,4
    718c:	18c00104 	addi	r3,r3,4
    7190:	20b0002c 	andhi	r2,r4,49152
    7194:	1000031e 	bne	r2,zero,71a4 <__hi0bits+0x40>
    7198:	2105883a 	add	r2,r4,r4
    719c:	18c00084 	addi	r3,r3,2
    71a0:	1089883a 	add	r4,r2,r2
    71a4:	20000316 	blt	r4,zero,71b4 <__hi0bits+0x50>
    71a8:	2090002c 	andhi	r2,r4,16384
    71ac:	10000626 	beq	r2,zero,71c8 <__hi0bits+0x64>
    71b0:	18c00044 	addi	r3,r3,1
    71b4:	1805883a 	mov	r2,r3
    71b8:	f800283a 	ret
    71bc:	2008943a 	slli	r4,r4,16
    71c0:	00c00404 	movi	r3,16
    71c4:	003fea06 	br	7170 <__hi0bits+0xc>
    71c8:	00c00804 	movi	r3,32
    71cc:	1805883a 	mov	r2,r3
    71d0:	f800283a 	ret

000071d4 <__lo0bits>:
    71d4:	20c00017 	ldw	r3,0(r4)
    71d8:	188001cc 	andi	r2,r3,7
    71dc:	10000a26 	beq	r2,zero,7208 <__lo0bits+0x34>
    71e0:	1880004c 	andi	r2,r3,1
    71e4:	1005003a 	cmpeq	r2,r2,zero
    71e8:	10002126 	beq	r2,zero,7270 <__lo0bits+0x9c>
    71ec:	1880008c 	andi	r2,r3,2
    71f0:	1000251e 	bne	r2,zero,7288 <__lo0bits+0xb4>
    71f4:	1804d0ba 	srli	r2,r3,2
    71f8:	01400084 	movi	r5,2
    71fc:	20800015 	stw	r2,0(r4)
    7200:	2805883a 	mov	r2,r5
    7204:	f800283a 	ret
    7208:	18bfffcc 	andi	r2,r3,65535
    720c:	10001526 	beq	r2,zero,7264 <__lo0bits+0x90>
    7210:	000b883a 	mov	r5,zero
    7214:	18803fcc 	andi	r2,r3,255
    7218:	1000021e 	bne	r2,zero,7224 <__lo0bits+0x50>
    721c:	1806d23a 	srli	r3,r3,8
    7220:	29400204 	addi	r5,r5,8
    7224:	188003cc 	andi	r2,r3,15
    7228:	1000021e 	bne	r2,zero,7234 <__lo0bits+0x60>
    722c:	1806d13a 	srli	r3,r3,4
    7230:	29400104 	addi	r5,r5,4
    7234:	188000cc 	andi	r2,r3,3
    7238:	1000021e 	bne	r2,zero,7244 <__lo0bits+0x70>
    723c:	1806d0ba 	srli	r3,r3,2
    7240:	29400084 	addi	r5,r5,2
    7244:	1880004c 	andi	r2,r3,1
    7248:	1000031e 	bne	r2,zero,7258 <__lo0bits+0x84>
    724c:	1806d07a 	srli	r3,r3,1
    7250:	18000a26 	beq	r3,zero,727c <__lo0bits+0xa8>
    7254:	29400044 	addi	r5,r5,1
    7258:	2805883a 	mov	r2,r5
    725c:	20c00015 	stw	r3,0(r4)
    7260:	f800283a 	ret
    7264:	1806d43a 	srli	r3,r3,16
    7268:	01400404 	movi	r5,16
    726c:	003fe906 	br	7214 <__lo0bits+0x40>
    7270:	000b883a 	mov	r5,zero
    7274:	2805883a 	mov	r2,r5
    7278:	f800283a 	ret
    727c:	01400804 	movi	r5,32
    7280:	2805883a 	mov	r2,r5
    7284:	f800283a 	ret
    7288:	1804d07a 	srli	r2,r3,1
    728c:	01400044 	movi	r5,1
    7290:	20800015 	stw	r2,0(r4)
    7294:	003fda06 	br	7200 <__lo0bits+0x2c>

00007298 <__mcmp>:
    7298:	20800417 	ldw	r2,16(r4)
    729c:	28c00417 	ldw	r3,16(r5)
    72a0:	10cfc83a 	sub	r7,r2,r3
    72a4:	38000c1e 	bne	r7,zero,72d8 <__mcmp+0x40>
    72a8:	18c5883a 	add	r2,r3,r3
    72ac:	1085883a 	add	r2,r2,r2
    72b0:	10c00504 	addi	r3,r2,20
    72b4:	21000504 	addi	r4,r4,20
    72b8:	28cb883a 	add	r5,r5,r3
    72bc:	2085883a 	add	r2,r4,r2
    72c0:	10bfff04 	addi	r2,r2,-4
    72c4:	297fff04 	addi	r5,r5,-4
    72c8:	11800017 	ldw	r6,0(r2)
    72cc:	28c00017 	ldw	r3,0(r5)
    72d0:	30c0031e 	bne	r6,r3,72e0 <__mcmp+0x48>
    72d4:	20bffa36 	bltu	r4,r2,72c0 <__mcmp+0x28>
    72d8:	3805883a 	mov	r2,r7
    72dc:	f800283a 	ret
    72e0:	30c00336 	bltu	r6,r3,72f0 <__mcmp+0x58>
    72e4:	01c00044 	movi	r7,1
    72e8:	3805883a 	mov	r2,r7
    72ec:	f800283a 	ret
    72f0:	01ffffc4 	movi	r7,-1
    72f4:	003ff806 	br	72d8 <__mcmp+0x40>

000072f8 <__ulp>:
    72f8:	295ffc2c 	andhi	r5,r5,32752
    72fc:	013f3034 	movhi	r4,64704
    7300:	290b883a 	add	r5,r5,r4
    7304:	0145c83a 	sub	r2,zero,r5
    7308:	1007d53a 	srai	r3,r2,20
    730c:	000d883a 	mov	r6,zero
    7310:	0140040e 	bge	zero,r5,7324 <__ulp+0x2c>
    7314:	280f883a 	mov	r7,r5
    7318:	3807883a 	mov	r3,r7
    731c:	3005883a 	mov	r2,r6
    7320:	f800283a 	ret
    7324:	008004c4 	movi	r2,19
    7328:	193ffb04 	addi	r4,r3,-20
    732c:	10c00c0e 	bge	r2,r3,7360 <__ulp+0x68>
    7330:	008007c4 	movi	r2,31
    7334:	1107c83a 	sub	r3,r2,r4
    7338:	00800784 	movi	r2,30
    733c:	01400044 	movi	r5,1
    7340:	11000216 	blt	r2,r4,734c <__ulp+0x54>
    7344:	00800044 	movi	r2,1
    7348:	10ca983a 	sll	r5,r2,r3
    734c:	000f883a 	mov	r7,zero
    7350:	280d883a 	mov	r6,r5
    7354:	3807883a 	mov	r3,r7
    7358:	3005883a 	mov	r2,r6
    735c:	f800283a 	ret
    7360:	00800234 	movhi	r2,8
    7364:	10cfd83a 	sra	r7,r2,r3
    7368:	000d883a 	mov	r6,zero
    736c:	3005883a 	mov	r2,r6
    7370:	3807883a 	mov	r3,r7
    7374:	f800283a 	ret

00007378 <__b2d>:
    7378:	20800417 	ldw	r2,16(r4)
    737c:	defff904 	addi	sp,sp,-28
    7380:	dd000415 	stw	r20,16(sp)
    7384:	1085883a 	add	r2,r2,r2
    7388:	25000504 	addi	r20,r4,20
    738c:	1085883a 	add	r2,r2,r2
    7390:	dc000015 	stw	r16,0(sp)
    7394:	a0a1883a 	add	r16,r20,r2
    7398:	dd400515 	stw	r21,20(sp)
    739c:	857fff17 	ldw	r21,-4(r16)
    73a0:	dc400115 	stw	r17,4(sp)
    73a4:	dfc00615 	stw	ra,24(sp)
    73a8:	a809883a 	mov	r4,r21
    73ac:	2823883a 	mov	r17,r5
    73b0:	dcc00315 	stw	r19,12(sp)
    73b4:	dc800215 	stw	r18,8(sp)
    73b8:	00071640 	call	7164 <__hi0bits>
    73bc:	100b883a 	mov	r5,r2
    73c0:	00800804 	movi	r2,32
    73c4:	1145c83a 	sub	r2,r2,r5
    73c8:	88800015 	stw	r2,0(r17)
    73cc:	00800284 	movi	r2,10
    73d0:	80ffff04 	addi	r3,r16,-4
    73d4:	11401416 	blt	r2,r5,7428 <__b2d+0xb0>
    73d8:	008002c4 	movi	r2,11
    73dc:	1149c83a 	sub	r4,r2,r5
    73e0:	a0c02736 	bltu	r20,r3,7480 <__b2d+0x108>
    73e4:	000d883a 	mov	r6,zero
    73e8:	28800544 	addi	r2,r5,21
    73ec:	a906d83a 	srl	r3,r21,r4
    73f0:	a884983a 	sll	r2,r21,r2
    73f4:	1ccffc34 	orhi	r19,r3,16368
    73f8:	11a4b03a 	or	r18,r2,r6
    73fc:	9005883a 	mov	r2,r18
    7400:	9807883a 	mov	r3,r19
    7404:	dfc00617 	ldw	ra,24(sp)
    7408:	dd400517 	ldw	r21,20(sp)
    740c:	dd000417 	ldw	r20,16(sp)
    7410:	dcc00317 	ldw	r19,12(sp)
    7414:	dc800217 	ldw	r18,8(sp)
    7418:	dc400117 	ldw	r17,4(sp)
    741c:	dc000017 	ldw	r16,0(sp)
    7420:	dec00704 	addi	sp,sp,28
    7424:	f800283a 	ret
    7428:	a0c00e36 	bltu	r20,r3,7464 <__b2d+0xec>
    742c:	293ffd44 	addi	r4,r5,-11
    7430:	000d883a 	mov	r6,zero
    7434:	20000f26 	beq	r4,zero,7474 <__b2d+0xfc>
    7438:	00800804 	movi	r2,32
    743c:	110bc83a 	sub	r5,r2,r4
    7440:	a0c01236 	bltu	r20,r3,748c <__b2d+0x114>
    7444:	000f883a 	mov	r7,zero
    7448:	a904983a 	sll	r2,r21,r4
    744c:	3146d83a 	srl	r3,r6,r5
    7450:	3108983a 	sll	r4,r6,r4
    7454:	108ffc34 	orhi	r2,r2,16368
    7458:	18a6b03a 	or	r19,r3,r2
    745c:	3924b03a 	or	r18,r7,r4
    7460:	003fe606 	br	73fc <__b2d+0x84>
    7464:	293ffd44 	addi	r4,r5,-11
    7468:	81bffe17 	ldw	r6,-8(r16)
    746c:	80fffe04 	addi	r3,r16,-8
    7470:	203ff11e 	bne	r4,zero,7438 <__b2d+0xc0>
    7474:	accffc34 	orhi	r19,r21,16368
    7478:	3025883a 	mov	r18,r6
    747c:	003fdf06 	br	73fc <__b2d+0x84>
    7480:	18bfff17 	ldw	r2,-4(r3)
    7484:	110cd83a 	srl	r6,r2,r4
    7488:	003fd706 	br	73e8 <__b2d+0x70>
    748c:	18bfff17 	ldw	r2,-4(r3)
    7490:	114ed83a 	srl	r7,r2,r5
    7494:	003fec06 	br	7448 <__b2d+0xd0>

00007498 <__ratio>:
    7498:	defff904 	addi	sp,sp,-28
    749c:	dc400215 	stw	r17,8(sp)
    74a0:	2823883a 	mov	r17,r5
    74a4:	d80b883a 	mov	r5,sp
    74a8:	dfc00615 	stw	ra,24(sp)
    74ac:	dd000515 	stw	r20,20(sp)
    74b0:	dcc00415 	stw	r19,16(sp)
    74b4:	dc800315 	stw	r18,12(sp)
    74b8:	2025883a 	mov	r18,r4
    74bc:	00073780 	call	7378 <__b2d>
    74c0:	8809883a 	mov	r4,r17
    74c4:	d9400104 	addi	r5,sp,4
    74c8:	1027883a 	mov	r19,r2
    74cc:	1829883a 	mov	r20,r3
    74d0:	00073780 	call	7378 <__b2d>
    74d4:	89000417 	ldw	r4,16(r17)
    74d8:	91c00417 	ldw	r7,16(r18)
    74dc:	d9800117 	ldw	r6,4(sp)
    74e0:	180b883a 	mov	r5,r3
    74e4:	390fc83a 	sub	r7,r7,r4
    74e8:	1009883a 	mov	r4,r2
    74ec:	d8800017 	ldw	r2,0(sp)
    74f0:	380e917a 	slli	r7,r7,5
    74f4:	2011883a 	mov	r8,r4
    74f8:	1185c83a 	sub	r2,r2,r6
    74fc:	11c5883a 	add	r2,r2,r7
    7500:	1006953a 	slli	r3,r2,20
    7504:	2813883a 	mov	r9,r5
    7508:	00800d0e 	bge	zero,r2,7540 <__ratio+0xa8>
    750c:	1d29883a 	add	r20,r3,r20
    7510:	a00b883a 	mov	r5,r20
    7514:	480f883a 	mov	r7,r9
    7518:	9809883a 	mov	r4,r19
    751c:	400d883a 	mov	r6,r8
    7520:	000a2840 	call	a284 <__divdf3>
    7524:	dfc00617 	ldw	ra,24(sp)
    7528:	dd000517 	ldw	r20,20(sp)
    752c:	dcc00417 	ldw	r19,16(sp)
    7530:	dc800317 	ldw	r18,12(sp)
    7534:	dc400217 	ldw	r17,8(sp)
    7538:	dec00704 	addi	sp,sp,28
    753c:	f800283a 	ret
    7540:	28d3c83a 	sub	r9,r5,r3
    7544:	003ff206 	br	7510 <__ratio+0x78>

00007548 <_mprec_log10>:
    7548:	defffe04 	addi	sp,sp,-8
    754c:	008005c4 	movi	r2,23
    7550:	dc000015 	stw	r16,0(sp)
    7554:	dfc00115 	stw	ra,4(sp)
    7558:	2021883a 	mov	r16,r4
    755c:	11000c16 	blt	r2,r4,7590 <_mprec_log10+0x48>
    7560:	200490fa 	slli	r2,r4,3
    7564:	00c00074 	movhi	r3,1
    7568:	18f74304 	addi	r3,r3,-8948
    756c:	10c5883a 	add	r2,r2,r3
    7570:	12400117 	ldw	r9,4(r2)
    7574:	12000017 	ldw	r8,0(r2)
    7578:	4807883a 	mov	r3,r9
    757c:	4005883a 	mov	r2,r8
    7580:	dfc00117 	ldw	ra,4(sp)
    7584:	dc000017 	ldw	r16,0(sp)
    7588:	dec00204 	addi	sp,sp,8
    758c:	f800283a 	ret
    7590:	0011883a 	mov	r8,zero
    7594:	024ffc34 	movhi	r9,16368
    7598:	0005883a 	mov	r2,zero
    759c:	00d00934 	movhi	r3,16420
    75a0:	480b883a 	mov	r5,r9
    75a4:	4009883a 	mov	r4,r8
    75a8:	180f883a 	mov	r7,r3
    75ac:	100d883a 	mov	r6,r2
    75b0:	0009ec00 	call	9ec0 <__muldf3>
    75b4:	843fffc4 	addi	r16,r16,-1
    75b8:	1011883a 	mov	r8,r2
    75bc:	1813883a 	mov	r9,r3
    75c0:	803ff51e 	bne	r16,zero,7598 <_mprec_log10+0x50>
    75c4:	4005883a 	mov	r2,r8
    75c8:	4807883a 	mov	r3,r9
    75cc:	dfc00117 	ldw	ra,4(sp)
    75d0:	dc000017 	ldw	r16,0(sp)
    75d4:	dec00204 	addi	sp,sp,8
    75d8:	f800283a 	ret

000075dc <__copybits>:
    75dc:	297fffc4 	addi	r5,r5,-1
    75e0:	30800417 	ldw	r2,16(r6)
    75e4:	280bd17a 	srai	r5,r5,5
    75e8:	31800504 	addi	r6,r6,20
    75ec:	1085883a 	add	r2,r2,r2
    75f0:	294b883a 	add	r5,r5,r5
    75f4:	294b883a 	add	r5,r5,r5
    75f8:	1085883a 	add	r2,r2,r2
    75fc:	290b883a 	add	r5,r5,r4
    7600:	3087883a 	add	r3,r6,r2
    7604:	29400104 	addi	r5,r5,4
    7608:	30c0052e 	bgeu	r6,r3,7620 <__copybits+0x44>
    760c:	30800017 	ldw	r2,0(r6)
    7610:	31800104 	addi	r6,r6,4
    7614:	20800015 	stw	r2,0(r4)
    7618:	21000104 	addi	r4,r4,4
    761c:	30fffb36 	bltu	r6,r3,760c <__copybits+0x30>
    7620:	2140032e 	bgeu	r4,r5,7630 <__copybits+0x54>
    7624:	20000015 	stw	zero,0(r4)
    7628:	21000104 	addi	r4,r4,4
    762c:	217ffd36 	bltu	r4,r5,7624 <__copybits+0x48>
    7630:	f800283a 	ret

00007634 <__any_on>:
    7634:	20800417 	ldw	r2,16(r4)
    7638:	2807d17a 	srai	r3,r5,5
    763c:	21000504 	addi	r4,r4,20
    7640:	10c00d0e 	bge	r2,r3,7678 <__any_on+0x44>
    7644:	1085883a 	add	r2,r2,r2
    7648:	1085883a 	add	r2,r2,r2
    764c:	208d883a 	add	r6,r4,r2
    7650:	2180182e 	bgeu	r4,r6,76b4 <__any_on+0x80>
    7654:	30bfff17 	ldw	r2,-4(r6)
    7658:	30ffff04 	addi	r3,r6,-4
    765c:	1000041e 	bne	r2,zero,7670 <__any_on+0x3c>
    7660:	20c0142e 	bgeu	r4,r3,76b4 <__any_on+0x80>
    7664:	18ffff04 	addi	r3,r3,-4
    7668:	18800017 	ldw	r2,0(r3)
    766c:	103ffc26 	beq	r2,zero,7660 <__any_on+0x2c>
    7670:	00800044 	movi	r2,1
    7674:	f800283a 	ret
    7678:	18800a0e 	bge	r3,r2,76a4 <__any_on+0x70>
    767c:	294007cc 	andi	r5,r5,31
    7680:	28000826 	beq	r5,zero,76a4 <__any_on+0x70>
    7684:	18c5883a 	add	r2,r3,r3
    7688:	1085883a 	add	r2,r2,r2
    768c:	208d883a 	add	r6,r4,r2
    7690:	30c00017 	ldw	r3,0(r6)
    7694:	1944d83a 	srl	r2,r3,r5
    7698:	1144983a 	sll	r2,r2,r5
    769c:	18bff41e 	bne	r3,r2,7670 <__any_on+0x3c>
    76a0:	003feb06 	br	7650 <__any_on+0x1c>
    76a4:	18c5883a 	add	r2,r3,r3
    76a8:	1085883a 	add	r2,r2,r2
    76ac:	208d883a 	add	r6,r4,r2
    76b0:	003fe706 	br	7650 <__any_on+0x1c>
    76b4:	0005883a 	mov	r2,zero
    76b8:	f800283a 	ret

000076bc <_Balloc>:
    76bc:	20c01317 	ldw	r3,76(r4)
    76c0:	defffb04 	addi	sp,sp,-20
    76c4:	dcc00315 	stw	r19,12(sp)
    76c8:	dc800215 	stw	r18,8(sp)
    76cc:	dfc00415 	stw	ra,16(sp)
    76d0:	2825883a 	mov	r18,r5
    76d4:	dc400115 	stw	r17,4(sp)
    76d8:	dc000015 	stw	r16,0(sp)
    76dc:	2027883a 	mov	r19,r4
    76e0:	01800404 	movi	r6,16
    76e4:	01400104 	movi	r5,4
    76e8:	18001726 	beq	r3,zero,7748 <_Balloc+0x8c>
    76ec:	01400044 	movi	r5,1
    76f0:	9485883a 	add	r2,r18,r18
    76f4:	2ca2983a 	sll	r17,r5,r18
    76f8:	1085883a 	add	r2,r2,r2
    76fc:	10c7883a 	add	r3,r2,r3
    7700:	1c000017 	ldw	r16,0(r3)
    7704:	8c4d883a 	add	r6,r17,r17
    7708:	318d883a 	add	r6,r6,r6
    770c:	9809883a 	mov	r4,r19
    7710:	31800504 	addi	r6,r6,20
    7714:	80001226 	beq	r16,zero,7760 <_Balloc+0xa4>
    7718:	80800017 	ldw	r2,0(r16)
    771c:	18800015 	stw	r2,0(r3)
    7720:	80000415 	stw	zero,16(r16)
    7724:	80000315 	stw	zero,12(r16)
    7728:	8005883a 	mov	r2,r16
    772c:	dfc00417 	ldw	ra,16(sp)
    7730:	dcc00317 	ldw	r19,12(sp)
    7734:	dc800217 	ldw	r18,8(sp)
    7738:	dc400117 	ldw	r17,4(sp)
    773c:	dc000017 	ldw	r16,0(sp)
    7740:	dec00504 	addi	sp,sp,20
    7744:	f800283a 	ret
    7748:	0008a140 	call	8a14 <_calloc_r>
    774c:	1007883a 	mov	r3,r2
    7750:	0021883a 	mov	r16,zero
    7754:	98801315 	stw	r2,76(r19)
    7758:	103fe41e 	bne	r2,zero,76ec <_Balloc+0x30>
    775c:	003ff206 	br	7728 <_Balloc+0x6c>
    7760:	0008a140 	call	8a14 <_calloc_r>
    7764:	103ff026 	beq	r2,zero,7728 <_Balloc+0x6c>
    7768:	1021883a 	mov	r16,r2
    776c:	14800115 	stw	r18,4(r2)
    7770:	14400215 	stw	r17,8(r2)
    7774:	003fea06 	br	7720 <_Balloc+0x64>

00007778 <__d2b>:
    7778:	defff504 	addi	sp,sp,-44
    777c:	dcc00515 	stw	r19,20(sp)
    7780:	04c00044 	movi	r19,1
    7784:	dc000215 	stw	r16,8(sp)
    7788:	2821883a 	mov	r16,r5
    778c:	980b883a 	mov	r5,r19
    7790:	ddc00915 	stw	r23,36(sp)
    7794:	dd800815 	stw	r22,32(sp)
    7798:	dd400715 	stw	r21,28(sp)
    779c:	dd000615 	stw	r20,24(sp)
    77a0:	dc800415 	stw	r18,16(sp)
    77a4:	dc400315 	stw	r17,12(sp)
    77a8:	dfc00a15 	stw	ra,40(sp)
    77ac:	3023883a 	mov	r17,r6
    77b0:	382d883a 	mov	r22,r7
    77b4:	ddc00b17 	ldw	r23,44(sp)
    77b8:	00076bc0 	call	76bc <_Balloc>
    77bc:	1025883a 	mov	r18,r2
    77c0:	00a00034 	movhi	r2,32768
    77c4:	10bfffc4 	addi	r2,r2,-1
    77c8:	8888703a 	and	r4,r17,r2
    77cc:	202ad53a 	srli	r21,r4,20
    77d0:	00800434 	movhi	r2,16
    77d4:	10bfffc4 	addi	r2,r2,-1
    77d8:	8886703a 	and	r3,r17,r2
    77dc:	a829003a 	cmpeq	r20,r21,zero
    77e0:	800b883a 	mov	r5,r16
    77e4:	d8c00115 	stw	r3,4(sp)
    77e8:	94000504 	addi	r16,r18,20
    77ec:	a000021e 	bne	r20,zero,77f8 <__d2b+0x80>
    77f0:	18c00434 	orhi	r3,r3,16
    77f4:	d8c00115 	stw	r3,4(sp)
    77f8:	28002726 	beq	r5,zero,7898 <__d2b+0x120>
    77fc:	d809883a 	mov	r4,sp
    7800:	d9400015 	stw	r5,0(sp)
    7804:	00071d40 	call	71d4 <__lo0bits>
    7808:	100d883a 	mov	r6,r2
    780c:	10003526 	beq	r2,zero,78e4 <__d2b+0x16c>
    7810:	d8c00117 	ldw	r3,4(sp)
    7814:	00800804 	movi	r2,32
    7818:	1185c83a 	sub	r2,r2,r6
    781c:	d9000017 	ldw	r4,0(sp)
    7820:	1886983a 	sll	r3,r3,r2
    7824:	1906b03a 	or	r3,r3,r4
    7828:	90c00515 	stw	r3,20(r18)
    782c:	d8c00117 	ldw	r3,4(sp)
    7830:	1986d83a 	srl	r3,r3,r6
    7834:	d8c00115 	stw	r3,4(sp)
    7838:	180b003a 	cmpeq	r5,r3,zero
    783c:	00800084 	movi	r2,2
    7840:	114bc83a 	sub	r5,r2,r5
    7844:	80c00115 	stw	r3,4(r16)
    7848:	91400415 	stw	r5,16(r18)
    784c:	a0001a1e 	bne	r20,zero,78b8 <__d2b+0x140>
    7850:	3545883a 	add	r2,r6,r21
    7854:	10bef344 	addi	r2,r2,-1075
    7858:	00c00d44 	movi	r3,53
    785c:	b0800015 	stw	r2,0(r22)
    7860:	1987c83a 	sub	r3,r3,r6
    7864:	b8c00015 	stw	r3,0(r23)
    7868:	9005883a 	mov	r2,r18
    786c:	dfc00a17 	ldw	ra,40(sp)
    7870:	ddc00917 	ldw	r23,36(sp)
    7874:	dd800817 	ldw	r22,32(sp)
    7878:	dd400717 	ldw	r21,28(sp)
    787c:	dd000617 	ldw	r20,24(sp)
    7880:	dcc00517 	ldw	r19,20(sp)
    7884:	dc800417 	ldw	r18,16(sp)
    7888:	dc400317 	ldw	r17,12(sp)
    788c:	dc000217 	ldw	r16,8(sp)
    7890:	dec00b04 	addi	sp,sp,44
    7894:	f800283a 	ret
    7898:	d9000104 	addi	r4,sp,4
    789c:	00071d40 	call	71d4 <__lo0bits>
    78a0:	11800804 	addi	r6,r2,32
    78a4:	d8800117 	ldw	r2,4(sp)
    78a8:	94c00415 	stw	r19,16(r18)
    78ac:	980b883a 	mov	r5,r19
    78b0:	90800515 	stw	r2,20(r18)
    78b4:	a03fe626 	beq	r20,zero,7850 <__d2b+0xd8>
    78b8:	2945883a 	add	r2,r5,r5
    78bc:	1085883a 	add	r2,r2,r2
    78c0:	1405883a 	add	r2,r2,r16
    78c4:	113fff17 	ldw	r4,-4(r2)
    78c8:	30fef384 	addi	r3,r6,-1074
    78cc:	2820917a 	slli	r16,r5,5
    78d0:	b0c00015 	stw	r3,0(r22)
    78d4:	00071640 	call	7164 <__hi0bits>
    78d8:	80a1c83a 	sub	r16,r16,r2
    78dc:	bc000015 	stw	r16,0(r23)
    78e0:	003fe106 	br	7868 <__d2b+0xf0>
    78e4:	d8800017 	ldw	r2,0(sp)
    78e8:	90800515 	stw	r2,20(r18)
    78ec:	d8c00117 	ldw	r3,4(sp)
    78f0:	003fd106 	br	7838 <__d2b+0xc0>

000078f4 <__mdiff>:
    78f4:	defffb04 	addi	sp,sp,-20
    78f8:	dc000015 	stw	r16,0(sp)
    78fc:	2821883a 	mov	r16,r5
    7900:	dc800215 	stw	r18,8(sp)
    7904:	300b883a 	mov	r5,r6
    7908:	2025883a 	mov	r18,r4
    790c:	8009883a 	mov	r4,r16
    7910:	dc400115 	stw	r17,4(sp)
    7914:	dfc00415 	stw	ra,16(sp)
    7918:	dcc00315 	stw	r19,12(sp)
    791c:	3023883a 	mov	r17,r6
    7920:	00072980 	call	7298 <__mcmp>
    7924:	10004226 	beq	r2,zero,7a30 <__mdiff+0x13c>
    7928:	10005016 	blt	r2,zero,7a6c <__mdiff+0x178>
    792c:	0027883a 	mov	r19,zero
    7930:	81400117 	ldw	r5,4(r16)
    7934:	9009883a 	mov	r4,r18
    7938:	00076bc0 	call	76bc <_Balloc>
    793c:	1019883a 	mov	r12,r2
    7940:	82800417 	ldw	r10,16(r16)
    7944:	88800417 	ldw	r2,16(r17)
    7948:	81800504 	addi	r6,r16,20
    794c:	5287883a 	add	r3,r10,r10
    7950:	1085883a 	add	r2,r2,r2
    7954:	18c7883a 	add	r3,r3,r3
    7958:	1085883a 	add	r2,r2,r2
    795c:	8a000504 	addi	r8,r17,20
    7960:	64c00315 	stw	r19,12(r12)
    7964:	30db883a 	add	r13,r6,r3
    7968:	4097883a 	add	r11,r8,r2
    796c:	61c00504 	addi	r7,r12,20
    7970:	0013883a 	mov	r9,zero
    7974:	31000017 	ldw	r4,0(r6)
    7978:	41400017 	ldw	r5,0(r8)
    797c:	42000104 	addi	r8,r8,4
    7980:	20bfffcc 	andi	r2,r4,65535
    7984:	28ffffcc 	andi	r3,r5,65535
    7988:	10c5c83a 	sub	r2,r2,r3
    798c:	1245883a 	add	r2,r2,r9
    7990:	2008d43a 	srli	r4,r4,16
    7994:	280ad43a 	srli	r5,r5,16
    7998:	1007d43a 	srai	r3,r2,16
    799c:	3880000d 	sth	r2,0(r7)
    79a0:	2149c83a 	sub	r4,r4,r5
    79a4:	20c9883a 	add	r4,r4,r3
    79a8:	3900008d 	sth	r4,2(r7)
    79ac:	31800104 	addi	r6,r6,4
    79b0:	39c00104 	addi	r7,r7,4
    79b4:	2013d43a 	srai	r9,r4,16
    79b8:	42ffee36 	bltu	r8,r11,7974 <__mdiff+0x80>
    79bc:	33400c2e 	bgeu	r6,r13,79f0 <__mdiff+0xfc>
    79c0:	30800017 	ldw	r2,0(r6)
    79c4:	31800104 	addi	r6,r6,4
    79c8:	10ffffcc 	andi	r3,r2,65535
    79cc:	1a47883a 	add	r3,r3,r9
    79d0:	1004d43a 	srli	r2,r2,16
    79d4:	1809d43a 	srai	r4,r3,16
    79d8:	38c0000d 	sth	r3,0(r7)
    79dc:	1105883a 	add	r2,r2,r4
    79e0:	3880008d 	sth	r2,2(r7)
    79e4:	1013d43a 	srai	r9,r2,16
    79e8:	39c00104 	addi	r7,r7,4
    79ec:	337ff436 	bltu	r6,r13,79c0 <__mdiff+0xcc>
    79f0:	38bfff17 	ldw	r2,-4(r7)
    79f4:	38ffff04 	addi	r3,r7,-4
    79f8:	1000041e 	bne	r2,zero,7a0c <__mdiff+0x118>
    79fc:	18ffff04 	addi	r3,r3,-4
    7a00:	18800017 	ldw	r2,0(r3)
    7a04:	52bfffc4 	addi	r10,r10,-1
    7a08:	103ffc26 	beq	r2,zero,79fc <__mdiff+0x108>
    7a0c:	6005883a 	mov	r2,r12
    7a10:	62800415 	stw	r10,16(r12)
    7a14:	dfc00417 	ldw	ra,16(sp)
    7a18:	dcc00317 	ldw	r19,12(sp)
    7a1c:	dc800217 	ldw	r18,8(sp)
    7a20:	dc400117 	ldw	r17,4(sp)
    7a24:	dc000017 	ldw	r16,0(sp)
    7a28:	dec00504 	addi	sp,sp,20
    7a2c:	f800283a 	ret
    7a30:	9009883a 	mov	r4,r18
    7a34:	000b883a 	mov	r5,zero
    7a38:	00076bc0 	call	76bc <_Balloc>
    7a3c:	1019883a 	mov	r12,r2
    7a40:	00800044 	movi	r2,1
    7a44:	60800415 	stw	r2,16(r12)
    7a48:	6005883a 	mov	r2,r12
    7a4c:	60000515 	stw	zero,20(r12)
    7a50:	dfc00417 	ldw	ra,16(sp)
    7a54:	dcc00317 	ldw	r19,12(sp)
    7a58:	dc800217 	ldw	r18,8(sp)
    7a5c:	dc400117 	ldw	r17,4(sp)
    7a60:	dc000017 	ldw	r16,0(sp)
    7a64:	dec00504 	addi	sp,sp,20
    7a68:	f800283a 	ret
    7a6c:	880d883a 	mov	r6,r17
    7a70:	04c00044 	movi	r19,1
    7a74:	8023883a 	mov	r17,r16
    7a78:	3021883a 	mov	r16,r6
    7a7c:	003fac06 	br	7930 <__mdiff+0x3c>

00007a80 <__lshift>:
    7a80:	defff904 	addi	sp,sp,-28
    7a84:	28800417 	ldw	r2,16(r5)
    7a88:	dc000015 	stw	r16,0(sp)
    7a8c:	3021d17a 	srai	r16,r6,5
    7a90:	28c00217 	ldw	r3,8(r5)
    7a94:	10800044 	addi	r2,r2,1
    7a98:	dc400115 	stw	r17,4(sp)
    7a9c:	80a3883a 	add	r17,r16,r2
    7aa0:	dd400515 	stw	r21,20(sp)
    7aa4:	dd000415 	stw	r20,16(sp)
    7aa8:	dc800215 	stw	r18,8(sp)
    7aac:	dfc00615 	stw	ra,24(sp)
    7ab0:	2825883a 	mov	r18,r5
    7ab4:	dcc00315 	stw	r19,12(sp)
    7ab8:	3029883a 	mov	r20,r6
    7abc:	202b883a 	mov	r21,r4
    7ac0:	29400117 	ldw	r5,4(r5)
    7ac4:	1c40030e 	bge	r3,r17,7ad4 <__lshift+0x54>
    7ac8:	18c7883a 	add	r3,r3,r3
    7acc:	29400044 	addi	r5,r5,1
    7ad0:	1c7ffd16 	blt	r3,r17,7ac8 <__lshift+0x48>
    7ad4:	a809883a 	mov	r4,r21
    7ad8:	00076bc0 	call	76bc <_Balloc>
    7adc:	1027883a 	mov	r19,r2
    7ae0:	11400504 	addi	r5,r2,20
    7ae4:	0400090e 	bge	zero,r16,7b0c <__lshift+0x8c>
    7ae8:	2805883a 	mov	r2,r5
    7aec:	0007883a 	mov	r3,zero
    7af0:	18c00044 	addi	r3,r3,1
    7af4:	10000015 	stw	zero,0(r2)
    7af8:	10800104 	addi	r2,r2,4
    7afc:	80fffc1e 	bne	r16,r3,7af0 <__lshift+0x70>
    7b00:	8405883a 	add	r2,r16,r16
    7b04:	1085883a 	add	r2,r2,r2
    7b08:	288b883a 	add	r5,r5,r2
    7b0c:	90800417 	ldw	r2,16(r18)
    7b10:	91000504 	addi	r4,r18,20
    7b14:	a18007cc 	andi	r6,r20,31
    7b18:	1085883a 	add	r2,r2,r2
    7b1c:	1085883a 	add	r2,r2,r2
    7b20:	208f883a 	add	r7,r4,r2
    7b24:	30001e26 	beq	r6,zero,7ba0 <__lshift+0x120>
    7b28:	00800804 	movi	r2,32
    7b2c:	1191c83a 	sub	r8,r2,r6
    7b30:	0007883a 	mov	r3,zero
    7b34:	20800017 	ldw	r2,0(r4)
    7b38:	1184983a 	sll	r2,r2,r6
    7b3c:	1884b03a 	or	r2,r3,r2
    7b40:	28800015 	stw	r2,0(r5)
    7b44:	20c00017 	ldw	r3,0(r4)
    7b48:	21000104 	addi	r4,r4,4
    7b4c:	29400104 	addi	r5,r5,4
    7b50:	1a06d83a 	srl	r3,r3,r8
    7b54:	21fff736 	bltu	r4,r7,7b34 <__lshift+0xb4>
    7b58:	28c00015 	stw	r3,0(r5)
    7b5c:	18000126 	beq	r3,zero,7b64 <__lshift+0xe4>
    7b60:	8c400044 	addi	r17,r17,1
    7b64:	88bfffc4 	addi	r2,r17,-1
    7b68:	98800415 	stw	r2,16(r19)
    7b6c:	a809883a 	mov	r4,r21
    7b70:	900b883a 	mov	r5,r18
    7b74:	000713c0 	call	713c <_Bfree>
    7b78:	9805883a 	mov	r2,r19
    7b7c:	dfc00617 	ldw	ra,24(sp)
    7b80:	dd400517 	ldw	r21,20(sp)
    7b84:	dd000417 	ldw	r20,16(sp)
    7b88:	dcc00317 	ldw	r19,12(sp)
    7b8c:	dc800217 	ldw	r18,8(sp)
    7b90:	dc400117 	ldw	r17,4(sp)
    7b94:	dc000017 	ldw	r16,0(sp)
    7b98:	dec00704 	addi	sp,sp,28
    7b9c:	f800283a 	ret
    7ba0:	20800017 	ldw	r2,0(r4)
    7ba4:	21000104 	addi	r4,r4,4
    7ba8:	28800015 	stw	r2,0(r5)
    7bac:	29400104 	addi	r5,r5,4
    7bb0:	21ffec2e 	bgeu	r4,r7,7b64 <__lshift+0xe4>
    7bb4:	20800017 	ldw	r2,0(r4)
    7bb8:	21000104 	addi	r4,r4,4
    7bbc:	28800015 	stw	r2,0(r5)
    7bc0:	29400104 	addi	r5,r5,4
    7bc4:	21fff636 	bltu	r4,r7,7ba0 <__lshift+0x120>
    7bc8:	003fe606 	br	7b64 <__lshift+0xe4>

00007bcc <__multiply>:
    7bcc:	defff904 	addi	sp,sp,-28
    7bd0:	dcc00315 	stw	r19,12(sp)
    7bd4:	dc800215 	stw	r18,8(sp)
    7bd8:	2cc00417 	ldw	r19,16(r5)
    7bdc:	34800417 	ldw	r18,16(r6)
    7be0:	dd000415 	stw	r20,16(sp)
    7be4:	dc400115 	stw	r17,4(sp)
    7be8:	dfc00615 	stw	ra,24(sp)
    7bec:	dd400515 	stw	r21,20(sp)
    7bf0:	dc000015 	stw	r16,0(sp)
    7bf4:	2823883a 	mov	r17,r5
    7bf8:	3029883a 	mov	r20,r6
    7bfc:	9c80040e 	bge	r19,r18,7c10 <__multiply+0x44>
    7c00:	9027883a 	mov	r19,r18
    7c04:	2c800417 	ldw	r18,16(r5)
    7c08:	2829883a 	mov	r20,r5
    7c0c:	3023883a 	mov	r17,r6
    7c10:	88800217 	ldw	r2,8(r17)
    7c14:	9ca1883a 	add	r16,r19,r18
    7c18:	89400117 	ldw	r5,4(r17)
    7c1c:	1400010e 	bge	r2,r16,7c24 <__multiply+0x58>
    7c20:	29400044 	addi	r5,r5,1
    7c24:	00076bc0 	call	76bc <_Balloc>
    7c28:	102b883a 	mov	r21,r2
    7c2c:	8405883a 	add	r2,r16,r16
    7c30:	1085883a 	add	r2,r2,r2
    7c34:	a9000504 	addi	r4,r21,20
    7c38:	209d883a 	add	r14,r4,r2
    7c3c:	2380042e 	bgeu	r4,r14,7c50 <__multiply+0x84>
    7c40:	2005883a 	mov	r2,r4
    7c44:	10000015 	stw	zero,0(r2)
    7c48:	10800104 	addi	r2,r2,4
    7c4c:	13bffd36 	bltu	r2,r14,7c44 <__multiply+0x78>
    7c50:	9485883a 	add	r2,r18,r18
    7c54:	9cc7883a 	add	r3,r19,r19
    7c58:	a1800504 	addi	r6,r20,20
    7c5c:	1085883a 	add	r2,r2,r2
    7c60:	8b400504 	addi	r13,r17,20
    7c64:	18c7883a 	add	r3,r3,r3
    7c68:	309f883a 	add	r15,r6,r2
    7c6c:	68d7883a 	add	r11,r13,r3
    7c70:	33c03b2e 	bgeu	r6,r15,7d60 <__multiply+0x194>
    7c74:	2019883a 	mov	r12,r4
    7c78:	30800017 	ldw	r2,0(r6)
    7c7c:	127fffcc 	andi	r9,r2,65535
    7c80:	48001826 	beq	r9,zero,7ce4 <__multiply+0x118>
    7c84:	6811883a 	mov	r8,r13
    7c88:	600f883a 	mov	r7,r12
    7c8c:	0015883a 	mov	r10,zero
    7c90:	40c00017 	ldw	r3,0(r8)
    7c94:	39400017 	ldw	r5,0(r7)
    7c98:	42000104 	addi	r8,r8,4
    7c9c:	193fffcc 	andi	r4,r3,65535
    7ca0:	4909383a 	mul	r4,r9,r4
    7ca4:	1806d43a 	srli	r3,r3,16
    7ca8:	28bfffcc 	andi	r2,r5,65535
    7cac:	5085883a 	add	r2,r10,r2
    7cb0:	2089883a 	add	r4,r4,r2
    7cb4:	48c7383a 	mul	r3,r9,r3
    7cb8:	280ad43a 	srli	r5,r5,16
    7cbc:	2004d43a 	srli	r2,r4,16
    7cc0:	3900000d 	sth	r4,0(r7)
    7cc4:	1947883a 	add	r3,r3,r5
    7cc8:	10c5883a 	add	r2,r2,r3
    7ccc:	3880008d 	sth	r2,2(r7)
    7cd0:	1014d43a 	srli	r10,r2,16
    7cd4:	39c00104 	addi	r7,r7,4
    7cd8:	42ffed36 	bltu	r8,r11,7c90 <__multiply+0xc4>
    7cdc:	3a800015 	stw	r10,0(r7)
    7ce0:	30800017 	ldw	r2,0(r6)
    7ce4:	1012d43a 	srli	r9,r2,16
    7ce8:	48001926 	beq	r9,zero,7d50 <__multiply+0x184>
    7cec:	60800017 	ldw	r2,0(r12)
    7cf0:	6811883a 	mov	r8,r13
    7cf4:	600f883a 	mov	r7,r12
    7cf8:	0015883a 	mov	r10,zero
    7cfc:	100b883a 	mov	r5,r2
    7d00:	41000017 	ldw	r4,0(r8)
    7d04:	2806d43a 	srli	r3,r5,16
    7d08:	3880000d 	sth	r2,0(r7)
    7d0c:	20bfffcc 	andi	r2,r4,65535
    7d10:	4885383a 	mul	r2,r9,r2
    7d14:	50c7883a 	add	r3,r10,r3
    7d18:	2008d43a 	srli	r4,r4,16
    7d1c:	10c5883a 	add	r2,r2,r3
    7d20:	3880008d 	sth	r2,2(r7)
    7d24:	39c00104 	addi	r7,r7,4
    7d28:	39400017 	ldw	r5,0(r7)
    7d2c:	4909383a 	mul	r4,r9,r4
    7d30:	1004d43a 	srli	r2,r2,16
    7d34:	28ffffcc 	andi	r3,r5,65535
    7d38:	20c9883a 	add	r4,r4,r3
    7d3c:	1105883a 	add	r2,r2,r4
    7d40:	42000104 	addi	r8,r8,4
    7d44:	1014d43a 	srli	r10,r2,16
    7d48:	42ffed36 	bltu	r8,r11,7d00 <__multiply+0x134>
    7d4c:	38800015 	stw	r2,0(r7)
    7d50:	31800104 	addi	r6,r6,4
    7d54:	33c0022e 	bgeu	r6,r15,7d60 <__multiply+0x194>
    7d58:	63000104 	addi	r12,r12,4
    7d5c:	003fc606 	br	7c78 <__multiply+0xac>
    7d60:	0400090e 	bge	zero,r16,7d88 <__multiply+0x1bc>
    7d64:	70bfff17 	ldw	r2,-4(r14)
    7d68:	70ffff04 	addi	r3,r14,-4
    7d6c:	10000326 	beq	r2,zero,7d7c <__multiply+0x1b0>
    7d70:	00000506 	br	7d88 <__multiply+0x1bc>
    7d74:	18800017 	ldw	r2,0(r3)
    7d78:	1000031e 	bne	r2,zero,7d88 <__multiply+0x1bc>
    7d7c:	843fffc4 	addi	r16,r16,-1
    7d80:	18ffff04 	addi	r3,r3,-4
    7d84:	803ffb1e 	bne	r16,zero,7d74 <__multiply+0x1a8>
    7d88:	a805883a 	mov	r2,r21
    7d8c:	ac000415 	stw	r16,16(r21)
    7d90:	dfc00617 	ldw	ra,24(sp)
    7d94:	dd400517 	ldw	r21,20(sp)
    7d98:	dd000417 	ldw	r20,16(sp)
    7d9c:	dcc00317 	ldw	r19,12(sp)
    7da0:	dc800217 	ldw	r18,8(sp)
    7da4:	dc400117 	ldw	r17,4(sp)
    7da8:	dc000017 	ldw	r16,0(sp)
    7dac:	dec00704 	addi	sp,sp,28
    7db0:	f800283a 	ret

00007db4 <__i2b>:
    7db4:	defffd04 	addi	sp,sp,-12
    7db8:	dc000015 	stw	r16,0(sp)
    7dbc:	04000044 	movi	r16,1
    7dc0:	dc800115 	stw	r18,4(sp)
    7dc4:	2825883a 	mov	r18,r5
    7dc8:	800b883a 	mov	r5,r16
    7dcc:	dfc00215 	stw	ra,8(sp)
    7dd0:	00076bc0 	call	76bc <_Balloc>
    7dd4:	14000415 	stw	r16,16(r2)
    7dd8:	14800515 	stw	r18,20(r2)
    7ddc:	dfc00217 	ldw	ra,8(sp)
    7de0:	dc800117 	ldw	r18,4(sp)
    7de4:	dc000017 	ldw	r16,0(sp)
    7de8:	dec00304 	addi	sp,sp,12
    7dec:	f800283a 	ret

00007df0 <__multadd>:
    7df0:	defffa04 	addi	sp,sp,-24
    7df4:	dc800215 	stw	r18,8(sp)
    7df8:	2c800417 	ldw	r18,16(r5)
    7dfc:	dd000415 	stw	r20,16(sp)
    7e00:	dcc00315 	stw	r19,12(sp)
    7e04:	dc000015 	stw	r16,0(sp)
    7e08:	dfc00515 	stw	ra,20(sp)
    7e0c:	3821883a 	mov	r16,r7
    7e10:	dc400115 	stw	r17,4(sp)
    7e14:	2827883a 	mov	r19,r5
    7e18:	2029883a 	mov	r20,r4
    7e1c:	2a000504 	addi	r8,r5,20
    7e20:	000f883a 	mov	r7,zero
    7e24:	40800017 	ldw	r2,0(r8)
    7e28:	39c00044 	addi	r7,r7,1
    7e2c:	10ffffcc 	andi	r3,r2,65535
    7e30:	1987383a 	mul	r3,r3,r6
    7e34:	1004d43a 	srli	r2,r2,16
    7e38:	1c07883a 	add	r3,r3,r16
    7e3c:	180ad43a 	srli	r5,r3,16
    7e40:	1185383a 	mul	r2,r2,r6
    7e44:	18ffffcc 	andi	r3,r3,65535
    7e48:	1145883a 	add	r2,r2,r5
    7e4c:	1008943a 	slli	r4,r2,16
    7e50:	1020d43a 	srli	r16,r2,16
    7e54:	20c9883a 	add	r4,r4,r3
    7e58:	41000015 	stw	r4,0(r8)
    7e5c:	42000104 	addi	r8,r8,4
    7e60:	3cbff016 	blt	r7,r18,7e24 <__multadd+0x34>
    7e64:	80000826 	beq	r16,zero,7e88 <__multadd+0x98>
    7e68:	98800217 	ldw	r2,8(r19)
    7e6c:	90800f0e 	bge	r18,r2,7eac <__multadd+0xbc>
    7e70:	9485883a 	add	r2,r18,r18
    7e74:	1085883a 	add	r2,r2,r2
    7e78:	14c5883a 	add	r2,r2,r19
    7e7c:	90c00044 	addi	r3,r18,1
    7e80:	14000515 	stw	r16,20(r2)
    7e84:	98c00415 	stw	r3,16(r19)
    7e88:	9805883a 	mov	r2,r19
    7e8c:	dfc00517 	ldw	ra,20(sp)
    7e90:	dd000417 	ldw	r20,16(sp)
    7e94:	dcc00317 	ldw	r19,12(sp)
    7e98:	dc800217 	ldw	r18,8(sp)
    7e9c:	dc400117 	ldw	r17,4(sp)
    7ea0:	dc000017 	ldw	r16,0(sp)
    7ea4:	dec00604 	addi	sp,sp,24
    7ea8:	f800283a 	ret
    7eac:	99400117 	ldw	r5,4(r19)
    7eb0:	a009883a 	mov	r4,r20
    7eb4:	29400044 	addi	r5,r5,1
    7eb8:	00076bc0 	call	76bc <_Balloc>
    7ebc:	99800417 	ldw	r6,16(r19)
    7ec0:	99400304 	addi	r5,r19,12
    7ec4:	11000304 	addi	r4,r2,12
    7ec8:	318d883a 	add	r6,r6,r6
    7ecc:	318d883a 	add	r6,r6,r6
    7ed0:	31800204 	addi	r6,r6,8
    7ed4:	1023883a 	mov	r17,r2
    7ed8:	00020a80 	call	20a8 <memcpy>
    7edc:	980b883a 	mov	r5,r19
    7ee0:	a009883a 	mov	r4,r20
    7ee4:	000713c0 	call	713c <_Bfree>
    7ee8:	8827883a 	mov	r19,r17
    7eec:	003fe006 	br	7e70 <__multadd+0x80>

00007ef0 <__pow5mult>:
    7ef0:	defffa04 	addi	sp,sp,-24
    7ef4:	308000cc 	andi	r2,r6,3
    7ef8:	dd000415 	stw	r20,16(sp)
    7efc:	dcc00315 	stw	r19,12(sp)
    7f00:	dc000015 	stw	r16,0(sp)
    7f04:	dfc00515 	stw	ra,20(sp)
    7f08:	dc800215 	stw	r18,8(sp)
    7f0c:	dc400115 	stw	r17,4(sp)
    7f10:	3021883a 	mov	r16,r6
    7f14:	2027883a 	mov	r19,r4
    7f18:	2829883a 	mov	r20,r5
    7f1c:	10002b1e 	bne	r2,zero,7fcc <__pow5mult+0xdc>
    7f20:	8025d0ba 	srai	r18,r16,2
    7f24:	90001b26 	beq	r18,zero,7f94 <__pow5mult+0xa4>
    7f28:	9c001217 	ldw	r16,72(r19)
    7f2c:	8000081e 	bne	r16,zero,7f50 <__pow5mult+0x60>
    7f30:	00003006 	br	7ff4 <__pow5mult+0x104>
    7f34:	800b883a 	mov	r5,r16
    7f38:	800d883a 	mov	r6,r16
    7f3c:	9809883a 	mov	r4,r19
    7f40:	90001426 	beq	r18,zero,7f94 <__pow5mult+0xa4>
    7f44:	80800017 	ldw	r2,0(r16)
    7f48:	10001b26 	beq	r2,zero,7fb8 <__pow5mult+0xc8>
    7f4c:	1021883a 	mov	r16,r2
    7f50:	9080004c 	andi	r2,r18,1
    7f54:	1005003a 	cmpeq	r2,r2,zero
    7f58:	9025d07a 	srai	r18,r18,1
    7f5c:	800d883a 	mov	r6,r16
    7f60:	9809883a 	mov	r4,r19
    7f64:	a00b883a 	mov	r5,r20
    7f68:	103ff21e 	bne	r2,zero,7f34 <__pow5mult+0x44>
    7f6c:	0007bcc0 	call	7bcc <__multiply>
    7f70:	a00b883a 	mov	r5,r20
    7f74:	9809883a 	mov	r4,r19
    7f78:	1023883a 	mov	r17,r2
    7f7c:	000713c0 	call	713c <_Bfree>
    7f80:	8829883a 	mov	r20,r17
    7f84:	800b883a 	mov	r5,r16
    7f88:	800d883a 	mov	r6,r16
    7f8c:	9809883a 	mov	r4,r19
    7f90:	903fec1e 	bne	r18,zero,7f44 <__pow5mult+0x54>
    7f94:	a005883a 	mov	r2,r20
    7f98:	dfc00517 	ldw	ra,20(sp)
    7f9c:	dd000417 	ldw	r20,16(sp)
    7fa0:	dcc00317 	ldw	r19,12(sp)
    7fa4:	dc800217 	ldw	r18,8(sp)
    7fa8:	dc400117 	ldw	r17,4(sp)
    7fac:	dc000017 	ldw	r16,0(sp)
    7fb0:	dec00604 	addi	sp,sp,24
    7fb4:	f800283a 	ret
    7fb8:	0007bcc0 	call	7bcc <__multiply>
    7fbc:	80800015 	stw	r2,0(r16)
    7fc0:	1021883a 	mov	r16,r2
    7fc4:	10000015 	stw	zero,0(r2)
    7fc8:	003fe106 	br	7f50 <__pow5mult+0x60>
    7fcc:	1085883a 	add	r2,r2,r2
    7fd0:	00c00074 	movhi	r3,1
    7fd4:	18f78904 	addi	r3,r3,-8668
    7fd8:	1085883a 	add	r2,r2,r2
    7fdc:	10c5883a 	add	r2,r2,r3
    7fe0:	11bfff17 	ldw	r6,-4(r2)
    7fe4:	000f883a 	mov	r7,zero
    7fe8:	0007df00 	call	7df0 <__multadd>
    7fec:	1029883a 	mov	r20,r2
    7ff0:	003fcb06 	br	7f20 <__pow5mult+0x30>
    7ff4:	9809883a 	mov	r4,r19
    7ff8:	01409c44 	movi	r5,625
    7ffc:	0007db40 	call	7db4 <__i2b>
    8000:	98801215 	stw	r2,72(r19)
    8004:	1021883a 	mov	r16,r2
    8008:	10000015 	stw	zero,0(r2)
    800c:	003fd006 	br	7f50 <__pow5mult+0x60>

00008010 <__s2b>:
    8010:	defff904 	addi	sp,sp,-28
    8014:	dcc00315 	stw	r19,12(sp)
    8018:	dc800215 	stw	r18,8(sp)
    801c:	2827883a 	mov	r19,r5
    8020:	2025883a 	mov	r18,r4
    8024:	01400244 	movi	r5,9
    8028:	39000204 	addi	r4,r7,8
    802c:	dd000415 	stw	r20,16(sp)
    8030:	dc400115 	stw	r17,4(sp)
    8034:	dfc00615 	stw	ra,24(sp)
    8038:	dd400515 	stw	r21,20(sp)
    803c:	dc000015 	stw	r16,0(sp)
    8040:	3829883a 	mov	r20,r7
    8044:	3023883a 	mov	r17,r6
    8048:	00018380 	call	1838 <__divsi3>
    804c:	00c00044 	movi	r3,1
    8050:	1880350e 	bge	r3,r2,8128 <__s2b+0x118>
    8054:	000b883a 	mov	r5,zero
    8058:	18c7883a 	add	r3,r3,r3
    805c:	29400044 	addi	r5,r5,1
    8060:	18bffd16 	blt	r3,r2,8058 <__s2b+0x48>
    8064:	9009883a 	mov	r4,r18
    8068:	00076bc0 	call	76bc <_Balloc>
    806c:	1011883a 	mov	r8,r2
    8070:	d8800717 	ldw	r2,28(sp)
    8074:	00c00044 	movi	r3,1
    8078:	01800244 	movi	r6,9
    807c:	40800515 	stw	r2,20(r8)
    8080:	40c00415 	stw	r3,16(r8)
    8084:	3440260e 	bge	r6,r17,8120 <__s2b+0x110>
    8088:	3021883a 	mov	r16,r6
    808c:	99ab883a 	add	r21,r19,r6
    8090:	9c05883a 	add	r2,r19,r16
    8094:	11c00007 	ldb	r7,0(r2)
    8098:	400b883a 	mov	r5,r8
    809c:	9009883a 	mov	r4,r18
    80a0:	39fff404 	addi	r7,r7,-48
    80a4:	01800284 	movi	r6,10
    80a8:	0007df00 	call	7df0 <__multadd>
    80ac:	84000044 	addi	r16,r16,1
    80b0:	1011883a 	mov	r8,r2
    80b4:	8c3ff61e 	bne	r17,r16,8090 <__s2b+0x80>
    80b8:	ac45883a 	add	r2,r21,r17
    80bc:	117ffe04 	addi	r5,r2,-8
    80c0:	880d883a 	mov	r6,r17
    80c4:	35000c0e 	bge	r6,r20,80f8 <__s2b+0xe8>
    80c8:	a185c83a 	sub	r2,r20,r6
    80cc:	2821883a 	mov	r16,r5
    80d0:	28a3883a 	add	r17,r5,r2
    80d4:	81c00007 	ldb	r7,0(r16)
    80d8:	400b883a 	mov	r5,r8
    80dc:	9009883a 	mov	r4,r18
    80e0:	39fff404 	addi	r7,r7,-48
    80e4:	01800284 	movi	r6,10
    80e8:	0007df00 	call	7df0 <__multadd>
    80ec:	84000044 	addi	r16,r16,1
    80f0:	1011883a 	mov	r8,r2
    80f4:	847ff71e 	bne	r16,r17,80d4 <__s2b+0xc4>
    80f8:	4005883a 	mov	r2,r8
    80fc:	dfc00617 	ldw	ra,24(sp)
    8100:	dd400517 	ldw	r21,20(sp)
    8104:	dd000417 	ldw	r20,16(sp)
    8108:	dcc00317 	ldw	r19,12(sp)
    810c:	dc800217 	ldw	r18,8(sp)
    8110:	dc400117 	ldw	r17,4(sp)
    8114:	dc000017 	ldw	r16,0(sp)
    8118:	dec00704 	addi	sp,sp,28
    811c:	f800283a 	ret
    8120:	99400284 	addi	r5,r19,10
    8124:	003fe706 	br	80c4 <__s2b+0xb4>
    8128:	000b883a 	mov	r5,zero
    812c:	003fcd06 	br	8064 <__s2b+0x54>

00008130 <_realloc_r>:
    8130:	defff404 	addi	sp,sp,-48
    8134:	dd800815 	stw	r22,32(sp)
    8138:	dc800415 	stw	r18,16(sp)
    813c:	dc400315 	stw	r17,12(sp)
    8140:	dfc00b15 	stw	ra,44(sp)
    8144:	df000a15 	stw	fp,40(sp)
    8148:	ddc00915 	stw	r23,36(sp)
    814c:	dd400715 	stw	r21,28(sp)
    8150:	dd000615 	stw	r20,24(sp)
    8154:	dcc00515 	stw	r19,20(sp)
    8158:	dc000215 	stw	r16,8(sp)
    815c:	2825883a 	mov	r18,r5
    8160:	3023883a 	mov	r17,r6
    8164:	202d883a 	mov	r22,r4
    8168:	2800c926 	beq	r5,zero,8490 <_realloc_r+0x360>
    816c:	000b9b80 	call	b9b8 <__malloc_lock>
    8170:	943ffe04 	addi	r16,r18,-8
    8174:	88c002c4 	addi	r3,r17,11
    8178:	00800584 	movi	r2,22
    817c:	82000117 	ldw	r8,4(r16)
    8180:	10c01b2e 	bgeu	r2,r3,81f0 <_realloc_r+0xc0>
    8184:	00bffe04 	movi	r2,-8
    8188:	188e703a 	and	r7,r3,r2
    818c:	3839883a 	mov	fp,r7
    8190:	38001a16 	blt	r7,zero,81fc <_realloc_r+0xcc>
    8194:	e4401936 	bltu	fp,r17,81fc <_realloc_r+0xcc>
    8198:	013fff04 	movi	r4,-4
    819c:	4126703a 	and	r19,r8,r4
    81a0:	99c02616 	blt	r19,r7,823c <_realloc_r+0x10c>
    81a4:	802b883a 	mov	r21,r16
    81a8:	9829883a 	mov	r20,r19
    81ac:	84000204 	addi	r16,r16,8
    81b0:	a80f883a 	mov	r7,r21
    81b4:	a70dc83a 	sub	r6,r20,fp
    81b8:	008003c4 	movi	r2,15
    81bc:	1180c136 	bltu	r2,r6,84c4 <_realloc_r+0x394>
    81c0:	38800117 	ldw	r2,4(r7)
    81c4:	a549883a 	add	r4,r20,r21
    81c8:	1080004c 	andi	r2,r2,1
    81cc:	a084b03a 	or	r2,r20,r2
    81d0:	38800115 	stw	r2,4(r7)
    81d4:	20c00117 	ldw	r3,4(r4)
    81d8:	18c00054 	ori	r3,r3,1
    81dc:	20c00115 	stw	r3,4(r4)
    81e0:	b009883a 	mov	r4,r22
    81e4:	000b9d80 	call	b9d8 <__malloc_unlock>
    81e8:	8023883a 	mov	r17,r16
    81ec:	00000606 	br	8208 <_realloc_r+0xd8>
    81f0:	01c00404 	movi	r7,16
    81f4:	3839883a 	mov	fp,r7
    81f8:	e47fe72e 	bgeu	fp,r17,8198 <_realloc_r+0x68>
    81fc:	00800304 	movi	r2,12
    8200:	0023883a 	mov	r17,zero
    8204:	b0800015 	stw	r2,0(r22)
    8208:	8805883a 	mov	r2,r17
    820c:	dfc00b17 	ldw	ra,44(sp)
    8210:	df000a17 	ldw	fp,40(sp)
    8214:	ddc00917 	ldw	r23,36(sp)
    8218:	dd800817 	ldw	r22,32(sp)
    821c:	dd400717 	ldw	r21,28(sp)
    8220:	dd000617 	ldw	r20,24(sp)
    8224:	dcc00517 	ldw	r19,20(sp)
    8228:	dc800417 	ldw	r18,16(sp)
    822c:	dc400317 	ldw	r17,12(sp)
    8230:	dc000217 	ldw	r16,8(sp)
    8234:	dec00c04 	addi	sp,sp,48
    8238:	f800283a 	ret
    823c:	00800074 	movhi	r2,1
    8240:	10b8de04 	addi	r2,r2,-7304
    8244:	12400217 	ldw	r9,8(r2)
    8248:	84cd883a 	add	r6,r16,r19
    824c:	802b883a 	mov	r21,r16
    8250:	3240b926 	beq	r6,r9,8538 <_realloc_r+0x408>
    8254:	31400117 	ldw	r5,4(r6)
    8258:	00bfff84 	movi	r2,-2
    825c:	2884703a 	and	r2,r5,r2
    8260:	1185883a 	add	r2,r2,r6
    8264:	10c00117 	ldw	r3,4(r2)
    8268:	18c0004c 	andi	r3,r3,1
    826c:	1807003a 	cmpeq	r3,r3,zero
    8270:	1800a326 	beq	r3,zero,8500 <_realloc_r+0x3d0>
    8274:	2908703a 	and	r4,r5,r4
    8278:	9929883a 	add	r20,r19,r4
    827c:	a1c0a30e 	bge	r20,r7,850c <_realloc_r+0x3dc>
    8280:	4080004c 	andi	r2,r8,1
    8284:	1000551e 	bne	r2,zero,83dc <_realloc_r+0x2ac>
    8288:	80800017 	ldw	r2,0(r16)
    828c:	80afc83a 	sub	r23,r16,r2
    8290:	b8c00117 	ldw	r3,4(r23)
    8294:	00bfff04 	movi	r2,-4
    8298:	1884703a 	and	r2,r3,r2
    829c:	30002e26 	beq	r6,zero,8358 <_realloc_r+0x228>
    82a0:	3240b926 	beq	r6,r9,8588 <_realloc_r+0x458>
    82a4:	98a9883a 	add	r20,r19,r2
    82a8:	2509883a 	add	r4,r4,r20
    82ac:	d9000015 	stw	r4,0(sp)
    82b0:	21c02a16 	blt	r4,r7,835c <_realloc_r+0x22c>
    82b4:	30800317 	ldw	r2,12(r6)
    82b8:	30c00217 	ldw	r3,8(r6)
    82bc:	01400904 	movi	r5,36
    82c0:	99bfff04 	addi	r6,r19,-4
    82c4:	18800315 	stw	r2,12(r3)
    82c8:	10c00215 	stw	r3,8(r2)
    82cc:	b9000317 	ldw	r4,12(r23)
    82d0:	b8800217 	ldw	r2,8(r23)
    82d4:	b82b883a 	mov	r21,r23
    82d8:	bc000204 	addi	r16,r23,8
    82dc:	20800215 	stw	r2,8(r4)
    82e0:	11000315 	stw	r4,12(r2)
    82e4:	2980e436 	bltu	r5,r6,8678 <_realloc_r+0x548>
    82e8:	008004c4 	movi	r2,19
    82ec:	9009883a 	mov	r4,r18
    82f0:	8011883a 	mov	r8,r16
    82f4:	11800f2e 	bgeu	r2,r6,8334 <_realloc_r+0x204>
    82f8:	90800017 	ldw	r2,0(r18)
    82fc:	ba000404 	addi	r8,r23,16
    8300:	91000204 	addi	r4,r18,8
    8304:	b8800215 	stw	r2,8(r23)
    8308:	90c00117 	ldw	r3,4(r18)
    830c:	008006c4 	movi	r2,27
    8310:	b8c00315 	stw	r3,12(r23)
    8314:	1180072e 	bgeu	r2,r6,8334 <_realloc_r+0x204>
    8318:	90c00217 	ldw	r3,8(r18)
    831c:	ba000604 	addi	r8,r23,24
    8320:	91000404 	addi	r4,r18,16
    8324:	b8c00415 	stw	r3,16(r23)
    8328:	90800317 	ldw	r2,12(r18)
    832c:	b8800515 	stw	r2,20(r23)
    8330:	3140e726 	beq	r6,r5,86d0 <_realloc_r+0x5a0>
    8334:	20800017 	ldw	r2,0(r4)
    8338:	dd000017 	ldw	r20,0(sp)
    833c:	b80f883a 	mov	r7,r23
    8340:	40800015 	stw	r2,0(r8)
    8344:	20c00117 	ldw	r3,4(r4)
    8348:	40c00115 	stw	r3,4(r8)
    834c:	20800217 	ldw	r2,8(r4)
    8350:	40800215 	stw	r2,8(r8)
    8354:	003f9706 	br	81b4 <_realloc_r+0x84>
    8358:	98a9883a 	add	r20,r19,r2
    835c:	a1c01f16 	blt	r20,r7,83dc <_realloc_r+0x2ac>
    8360:	b8c00317 	ldw	r3,12(r23)
    8364:	b8800217 	ldw	r2,8(r23)
    8368:	99bfff04 	addi	r6,r19,-4
    836c:	01400904 	movi	r5,36
    8370:	b82b883a 	mov	r21,r23
    8374:	18800215 	stw	r2,8(r3)
    8378:	10c00315 	stw	r3,12(r2)
    837c:	bc000204 	addi	r16,r23,8
    8380:	2980c336 	bltu	r5,r6,8690 <_realloc_r+0x560>
    8384:	008004c4 	movi	r2,19
    8388:	9009883a 	mov	r4,r18
    838c:	8011883a 	mov	r8,r16
    8390:	11800f2e 	bgeu	r2,r6,83d0 <_realloc_r+0x2a0>
    8394:	90800017 	ldw	r2,0(r18)
    8398:	ba000404 	addi	r8,r23,16
    839c:	91000204 	addi	r4,r18,8
    83a0:	b8800215 	stw	r2,8(r23)
    83a4:	90c00117 	ldw	r3,4(r18)
    83a8:	008006c4 	movi	r2,27
    83ac:	b8c00315 	stw	r3,12(r23)
    83b0:	1180072e 	bgeu	r2,r6,83d0 <_realloc_r+0x2a0>
    83b4:	90c00217 	ldw	r3,8(r18)
    83b8:	ba000604 	addi	r8,r23,24
    83bc:	91000404 	addi	r4,r18,16
    83c0:	b8c00415 	stw	r3,16(r23)
    83c4:	90800317 	ldw	r2,12(r18)
    83c8:	b8800515 	stw	r2,20(r23)
    83cc:	3140c726 	beq	r6,r5,86ec <_realloc_r+0x5bc>
    83d0:	20800017 	ldw	r2,0(r4)
    83d4:	b80f883a 	mov	r7,r23
    83d8:	003fd906 	br	8340 <_realloc_r+0x210>
    83dc:	880b883a 	mov	r5,r17
    83e0:	b009883a 	mov	r4,r22
    83e4:	00019680 	call	1968 <_malloc_r>
    83e8:	1023883a 	mov	r17,r2
    83ec:	10002526 	beq	r2,zero,8484 <_realloc_r+0x354>
    83f0:	80800117 	ldw	r2,4(r16)
    83f4:	00ffff84 	movi	r3,-2
    83f8:	893ffe04 	addi	r4,r17,-8
    83fc:	10c4703a 	and	r2,r2,r3
    8400:	8085883a 	add	r2,r16,r2
    8404:	20809526 	beq	r4,r2,865c <_realloc_r+0x52c>
    8408:	99bfff04 	addi	r6,r19,-4
    840c:	01c00904 	movi	r7,36
    8410:	39804536 	bltu	r7,r6,8528 <_realloc_r+0x3f8>
    8414:	008004c4 	movi	r2,19
    8418:	9009883a 	mov	r4,r18
    841c:	880b883a 	mov	r5,r17
    8420:	11800f2e 	bgeu	r2,r6,8460 <_realloc_r+0x330>
    8424:	90800017 	ldw	r2,0(r18)
    8428:	89400204 	addi	r5,r17,8
    842c:	91000204 	addi	r4,r18,8
    8430:	88800015 	stw	r2,0(r17)
    8434:	90c00117 	ldw	r3,4(r18)
    8438:	008006c4 	movi	r2,27
    843c:	88c00115 	stw	r3,4(r17)
    8440:	1180072e 	bgeu	r2,r6,8460 <_realloc_r+0x330>
    8444:	90c00217 	ldw	r3,8(r18)
    8448:	89400404 	addi	r5,r17,16
    844c:	91000404 	addi	r4,r18,16
    8450:	88c00215 	stw	r3,8(r17)
    8454:	90800317 	ldw	r2,12(r18)
    8458:	88800315 	stw	r2,12(r17)
    845c:	31c09126 	beq	r6,r7,86a4 <_realloc_r+0x574>
    8460:	20800017 	ldw	r2,0(r4)
    8464:	28800015 	stw	r2,0(r5)
    8468:	20c00117 	ldw	r3,4(r4)
    846c:	28c00115 	stw	r3,4(r5)
    8470:	20800217 	ldw	r2,8(r4)
    8474:	28800215 	stw	r2,8(r5)
    8478:	900b883a 	mov	r5,r18
    847c:	b009883a 	mov	r4,r22
    8480:	00063580 	call	6358 <_free_r>
    8484:	b009883a 	mov	r4,r22
    8488:	000b9d80 	call	b9d8 <__malloc_unlock>
    848c:	003f5e06 	br	8208 <_realloc_r+0xd8>
    8490:	300b883a 	mov	r5,r6
    8494:	dfc00b17 	ldw	ra,44(sp)
    8498:	df000a17 	ldw	fp,40(sp)
    849c:	ddc00917 	ldw	r23,36(sp)
    84a0:	dd800817 	ldw	r22,32(sp)
    84a4:	dd400717 	ldw	r21,28(sp)
    84a8:	dd000617 	ldw	r20,24(sp)
    84ac:	dcc00517 	ldw	r19,20(sp)
    84b0:	dc800417 	ldw	r18,16(sp)
    84b4:	dc400317 	ldw	r17,12(sp)
    84b8:	dc000217 	ldw	r16,8(sp)
    84bc:	dec00c04 	addi	sp,sp,48
    84c0:	00019681 	jmpi	1968 <_malloc_r>
    84c4:	38800117 	ldw	r2,4(r7)
    84c8:	e54b883a 	add	r5,fp,r21
    84cc:	31000054 	ori	r4,r6,1
    84d0:	1080004c 	andi	r2,r2,1
    84d4:	1704b03a 	or	r2,r2,fp
    84d8:	38800115 	stw	r2,4(r7)
    84dc:	29000115 	stw	r4,4(r5)
    84e0:	2987883a 	add	r3,r5,r6
    84e4:	18800117 	ldw	r2,4(r3)
    84e8:	29400204 	addi	r5,r5,8
    84ec:	b009883a 	mov	r4,r22
    84f0:	10800054 	ori	r2,r2,1
    84f4:	18800115 	stw	r2,4(r3)
    84f8:	00063580 	call	6358 <_free_r>
    84fc:	003f3806 	br	81e0 <_realloc_r+0xb0>
    8500:	000d883a 	mov	r6,zero
    8504:	0009883a 	mov	r4,zero
    8508:	003f5d06 	br	8280 <_realloc_r+0x150>
    850c:	30c00217 	ldw	r3,8(r6)
    8510:	30800317 	ldw	r2,12(r6)
    8514:	800f883a 	mov	r7,r16
    8518:	84000204 	addi	r16,r16,8
    851c:	10c00215 	stw	r3,8(r2)
    8520:	18800315 	stw	r2,12(r3)
    8524:	003f2306 	br	81b4 <_realloc_r+0x84>
    8528:	8809883a 	mov	r4,r17
    852c:	900b883a 	mov	r5,r18
    8530:	0006fc40 	call	6fc4 <memmove>
    8534:	003fd006 	br	8478 <_realloc_r+0x348>
    8538:	30800117 	ldw	r2,4(r6)
    853c:	e0c00404 	addi	r3,fp,16
    8540:	1108703a 	and	r4,r2,r4
    8544:	9905883a 	add	r2,r19,r4
    8548:	10ff4d16 	blt	r2,r3,8280 <_realloc_r+0x150>
    854c:	1705c83a 	sub	r2,r2,fp
    8550:	870b883a 	add	r5,r16,fp
    8554:	10800054 	ori	r2,r2,1
    8558:	28800115 	stw	r2,4(r5)
    855c:	80c00117 	ldw	r3,4(r16)
    8560:	00800074 	movhi	r2,1
    8564:	10b8de04 	addi	r2,r2,-7304
    8568:	b009883a 	mov	r4,r22
    856c:	18c0004c 	andi	r3,r3,1
    8570:	e0c6b03a 	or	r3,fp,r3
    8574:	11400215 	stw	r5,8(r2)
    8578:	80c00115 	stw	r3,4(r16)
    857c:	000b9d80 	call	b9d8 <__malloc_unlock>
    8580:	84400204 	addi	r17,r16,8
    8584:	003f2006 	br	8208 <_realloc_r+0xd8>
    8588:	98a9883a 	add	r20,r19,r2
    858c:	2509883a 	add	r4,r4,r20
    8590:	e0800404 	addi	r2,fp,16
    8594:	d9000115 	stw	r4,4(sp)
    8598:	20bf7016 	blt	r4,r2,835c <_realloc_r+0x22c>
    859c:	b8c00317 	ldw	r3,12(r23)
    85a0:	b8800217 	ldw	r2,8(r23)
    85a4:	99bfff04 	addi	r6,r19,-4
    85a8:	01400904 	movi	r5,36
    85ac:	18800215 	stw	r2,8(r3)
    85b0:	10c00315 	stw	r3,12(r2)
    85b4:	bc400204 	addi	r17,r23,8
    85b8:	29804136 	bltu	r5,r6,86c0 <_realloc_r+0x590>
    85bc:	008004c4 	movi	r2,19
    85c0:	9009883a 	mov	r4,r18
    85c4:	880f883a 	mov	r7,r17
    85c8:	11800f2e 	bgeu	r2,r6,8608 <_realloc_r+0x4d8>
    85cc:	90800017 	ldw	r2,0(r18)
    85d0:	b9c00404 	addi	r7,r23,16
    85d4:	91000204 	addi	r4,r18,8
    85d8:	b8800215 	stw	r2,8(r23)
    85dc:	90c00117 	ldw	r3,4(r18)
    85e0:	008006c4 	movi	r2,27
    85e4:	b8c00315 	stw	r3,12(r23)
    85e8:	1180072e 	bgeu	r2,r6,8608 <_realloc_r+0x4d8>
    85ec:	90c00217 	ldw	r3,8(r18)
    85f0:	b9c00604 	addi	r7,r23,24
    85f4:	91000404 	addi	r4,r18,16
    85f8:	b8c00415 	stw	r3,16(r23)
    85fc:	90800317 	ldw	r2,12(r18)
    8600:	b8800515 	stw	r2,20(r23)
    8604:	31404026 	beq	r6,r5,8708 <_realloc_r+0x5d8>
    8608:	20800017 	ldw	r2,0(r4)
    860c:	38800015 	stw	r2,0(r7)
    8610:	20c00117 	ldw	r3,4(r4)
    8614:	38c00115 	stw	r3,4(r7)
    8618:	20800217 	ldw	r2,8(r4)
    861c:	38800215 	stw	r2,8(r7)
    8620:	d8c00117 	ldw	r3,4(sp)
    8624:	bf0b883a 	add	r5,r23,fp
    8628:	b009883a 	mov	r4,r22
    862c:	1f05c83a 	sub	r2,r3,fp
    8630:	10800054 	ori	r2,r2,1
    8634:	28800115 	stw	r2,4(r5)
    8638:	b8c00117 	ldw	r3,4(r23)
    863c:	00800074 	movhi	r2,1
    8640:	10b8de04 	addi	r2,r2,-7304
    8644:	11400215 	stw	r5,8(r2)
    8648:	18c0004c 	andi	r3,r3,1
    864c:	e0c6b03a 	or	r3,fp,r3
    8650:	b8c00115 	stw	r3,4(r23)
    8654:	000b9d80 	call	b9d8 <__malloc_unlock>
    8658:	003eeb06 	br	8208 <_realloc_r+0xd8>
    865c:	20800117 	ldw	r2,4(r4)
    8660:	00ffff04 	movi	r3,-4
    8664:	800f883a 	mov	r7,r16
    8668:	10c4703a 	and	r2,r2,r3
    866c:	98a9883a 	add	r20,r19,r2
    8670:	84000204 	addi	r16,r16,8
    8674:	003ecf06 	br	81b4 <_realloc_r+0x84>
    8678:	900b883a 	mov	r5,r18
    867c:	8009883a 	mov	r4,r16
    8680:	0006fc40 	call	6fc4 <memmove>
    8684:	dd000017 	ldw	r20,0(sp)
    8688:	b80f883a 	mov	r7,r23
    868c:	003ec906 	br	81b4 <_realloc_r+0x84>
    8690:	900b883a 	mov	r5,r18
    8694:	8009883a 	mov	r4,r16
    8698:	0006fc40 	call	6fc4 <memmove>
    869c:	b80f883a 	mov	r7,r23
    86a0:	003ec406 	br	81b4 <_realloc_r+0x84>
    86a4:	90c00417 	ldw	r3,16(r18)
    86a8:	89400604 	addi	r5,r17,24
    86ac:	91000604 	addi	r4,r18,24
    86b0:	88c00415 	stw	r3,16(r17)
    86b4:	90800517 	ldw	r2,20(r18)
    86b8:	88800515 	stw	r2,20(r17)
    86bc:	003f6806 	br	8460 <_realloc_r+0x330>
    86c0:	900b883a 	mov	r5,r18
    86c4:	8809883a 	mov	r4,r17
    86c8:	0006fc40 	call	6fc4 <memmove>
    86cc:	003fd406 	br	8620 <_realloc_r+0x4f0>
    86d0:	90c00417 	ldw	r3,16(r18)
    86d4:	91000604 	addi	r4,r18,24
    86d8:	ba000804 	addi	r8,r23,32
    86dc:	b8c00615 	stw	r3,24(r23)
    86e0:	90800517 	ldw	r2,20(r18)
    86e4:	b8800715 	stw	r2,28(r23)
    86e8:	003f1206 	br	8334 <_realloc_r+0x204>
    86ec:	90c00417 	ldw	r3,16(r18)
    86f0:	91000604 	addi	r4,r18,24
    86f4:	ba000804 	addi	r8,r23,32
    86f8:	b8c00615 	stw	r3,24(r23)
    86fc:	90800517 	ldw	r2,20(r18)
    8700:	b8800715 	stw	r2,28(r23)
    8704:	003f3206 	br	83d0 <_realloc_r+0x2a0>
    8708:	90c00417 	ldw	r3,16(r18)
    870c:	91000604 	addi	r4,r18,24
    8710:	b9c00804 	addi	r7,r23,32
    8714:	b8c00615 	stw	r3,24(r23)
    8718:	90800517 	ldw	r2,20(r18)
    871c:	b8800715 	stw	r2,28(r23)
    8720:	003fb906 	br	8608 <_realloc_r+0x4d8>

00008724 <__isinfd>:
    8724:	200d883a 	mov	r6,r4
    8728:	0109c83a 	sub	r4,zero,r4
    872c:	2188b03a 	or	r4,r4,r6
    8730:	2008d7fa 	srli	r4,r4,31
    8734:	00a00034 	movhi	r2,32768
    8738:	10bfffc4 	addi	r2,r2,-1
    873c:	1144703a 	and	r2,r2,r5
    8740:	2088b03a 	or	r4,r4,r2
    8744:	009ffc34 	movhi	r2,32752
    8748:	1105c83a 	sub	r2,r2,r4
    874c:	0087c83a 	sub	r3,zero,r2
    8750:	10c4b03a 	or	r2,r2,r3
    8754:	1004d7fa 	srli	r2,r2,31
    8758:	00c00044 	movi	r3,1
    875c:	1885c83a 	sub	r2,r3,r2
    8760:	f800283a 	ret

00008764 <__isnand>:
    8764:	200d883a 	mov	r6,r4
    8768:	0109c83a 	sub	r4,zero,r4
    876c:	2188b03a 	or	r4,r4,r6
    8770:	2008d7fa 	srli	r4,r4,31
    8774:	00a00034 	movhi	r2,32768
    8778:	10bfffc4 	addi	r2,r2,-1
    877c:	1144703a 	and	r2,r2,r5
    8780:	2088b03a 	or	r4,r4,r2
    8784:	009ffc34 	movhi	r2,32752
    8788:	1105c83a 	sub	r2,r2,r4
    878c:	1004d7fa 	srli	r2,r2,31
    8790:	f800283a 	ret

00008794 <__sclose>:
    8794:	2940038f 	ldh	r5,14(r5)
    8798:	0008ac81 	jmpi	8ac8 <_close_r>

0000879c <__sseek>:
    879c:	defffe04 	addi	sp,sp,-8
    87a0:	dc000015 	stw	r16,0(sp)
    87a4:	2821883a 	mov	r16,r5
    87a8:	2940038f 	ldh	r5,14(r5)
    87ac:	dfc00115 	stw	ra,4(sp)
    87b0:	0008d400 	call	8d40 <_lseek_r>
    87b4:	1007883a 	mov	r3,r2
    87b8:	00bfffc4 	movi	r2,-1
    87bc:	18800926 	beq	r3,r2,87e4 <__sseek+0x48>
    87c0:	8080030b 	ldhu	r2,12(r16)
    87c4:	80c01415 	stw	r3,80(r16)
    87c8:	10840014 	ori	r2,r2,4096
    87cc:	8080030d 	sth	r2,12(r16)
    87d0:	1805883a 	mov	r2,r3
    87d4:	dfc00117 	ldw	ra,4(sp)
    87d8:	dc000017 	ldw	r16,0(sp)
    87dc:	dec00204 	addi	sp,sp,8
    87e0:	f800283a 	ret
    87e4:	8080030b 	ldhu	r2,12(r16)
    87e8:	10bbffcc 	andi	r2,r2,61439
    87ec:	8080030d 	sth	r2,12(r16)
    87f0:	1805883a 	mov	r2,r3
    87f4:	dfc00117 	ldw	ra,4(sp)
    87f8:	dc000017 	ldw	r16,0(sp)
    87fc:	dec00204 	addi	sp,sp,8
    8800:	f800283a 	ret

00008804 <__swrite>:
    8804:	2880030b 	ldhu	r2,12(r5)
    8808:	defffb04 	addi	sp,sp,-20
    880c:	dcc00315 	stw	r19,12(sp)
    8810:	1080400c 	andi	r2,r2,256
    8814:	dc800215 	stw	r18,8(sp)
    8818:	dc400115 	stw	r17,4(sp)
    881c:	dc000015 	stw	r16,0(sp)
    8820:	3027883a 	mov	r19,r6
    8824:	3825883a 	mov	r18,r7
    8828:	dfc00415 	stw	ra,16(sp)
    882c:	2821883a 	mov	r16,r5
    8830:	000d883a 	mov	r6,zero
    8834:	01c00084 	movi	r7,2
    8838:	2023883a 	mov	r17,r4
    883c:	10000226 	beq	r2,zero,8848 <__swrite+0x44>
    8840:	2940038f 	ldh	r5,14(r5)
    8844:	0008d400 	call	8d40 <_lseek_r>
    8848:	8080030b 	ldhu	r2,12(r16)
    884c:	8140038f 	ldh	r5,14(r16)
    8850:	8809883a 	mov	r4,r17
    8854:	10bbffcc 	andi	r2,r2,61439
    8858:	980d883a 	mov	r6,r19
    885c:	900f883a 	mov	r7,r18
    8860:	8080030d 	sth	r2,12(r16)
    8864:	dfc00417 	ldw	ra,16(sp)
    8868:	dcc00317 	ldw	r19,12(sp)
    886c:	dc800217 	ldw	r18,8(sp)
    8870:	dc400117 	ldw	r17,4(sp)
    8874:	dc000017 	ldw	r16,0(sp)
    8878:	dec00504 	addi	sp,sp,20
    887c:	000899c1 	jmpi	899c <_write_r>

00008880 <__sread>:
    8880:	defffe04 	addi	sp,sp,-8
    8884:	dc000015 	stw	r16,0(sp)
    8888:	2821883a 	mov	r16,r5
    888c:	2940038f 	ldh	r5,14(r5)
    8890:	dfc00115 	stw	ra,4(sp)
    8894:	0008db80 	call	8db8 <_read_r>
    8898:	1007883a 	mov	r3,r2
    889c:	10000816 	blt	r2,zero,88c0 <__sread+0x40>
    88a0:	80801417 	ldw	r2,80(r16)
    88a4:	10c5883a 	add	r2,r2,r3
    88a8:	80801415 	stw	r2,80(r16)
    88ac:	1805883a 	mov	r2,r3
    88b0:	dfc00117 	ldw	ra,4(sp)
    88b4:	dc000017 	ldw	r16,0(sp)
    88b8:	dec00204 	addi	sp,sp,8
    88bc:	f800283a 	ret
    88c0:	8080030b 	ldhu	r2,12(r16)
    88c4:	10bbffcc 	andi	r2,r2,61439
    88c8:	8080030d 	sth	r2,12(r16)
    88cc:	1805883a 	mov	r2,r3
    88d0:	dfc00117 	ldw	ra,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00204 	addi	sp,sp,8
    88dc:	f800283a 	ret

000088e0 <strcmp>:
    88e0:	2144b03a 	or	r2,r4,r5
    88e4:	108000cc 	andi	r2,r2,3
    88e8:	10001d1e 	bne	r2,zero,8960 <strcmp+0x80>
    88ec:	200f883a 	mov	r7,r4
    88f0:	28800017 	ldw	r2,0(r5)
    88f4:	21000017 	ldw	r4,0(r4)
    88f8:	280d883a 	mov	r6,r5
    88fc:	2080161e 	bne	r4,r2,8958 <strcmp+0x78>
    8900:	023fbff4 	movhi	r8,65279
    8904:	423fbfc4 	addi	r8,r8,-257
    8908:	2207883a 	add	r3,r4,r8
    890c:	01602074 	movhi	r5,32897
    8910:	29602004 	addi	r5,r5,-32640
    8914:	1946703a 	and	r3,r3,r5
    8918:	0104303a 	nor	r2,zero,r4
    891c:	10c4703a 	and	r2,r2,r3
    8920:	10001c1e 	bne	r2,zero,8994 <strcmp+0xb4>
    8924:	4013883a 	mov	r9,r8
    8928:	2811883a 	mov	r8,r5
    892c:	00000106 	br	8934 <strcmp+0x54>
    8930:	1800181e 	bne	r3,zero,8994 <strcmp+0xb4>
    8934:	39c00104 	addi	r7,r7,4
    8938:	39000017 	ldw	r4,0(r7)
    893c:	31800104 	addi	r6,r6,4
    8940:	31400017 	ldw	r5,0(r6)
    8944:	2245883a 	add	r2,r4,r9
    8948:	1204703a 	and	r2,r2,r8
    894c:	0106303a 	nor	r3,zero,r4
    8950:	1886703a 	and	r3,r3,r2
    8954:	217ff626 	beq	r4,r5,8930 <strcmp+0x50>
    8958:	3809883a 	mov	r4,r7
    895c:	300b883a 	mov	r5,r6
    8960:	20c00007 	ldb	r3,0(r4)
    8964:	1800051e 	bne	r3,zero,897c <strcmp+0x9c>
    8968:	00000606 	br	8984 <strcmp+0xa4>
    896c:	21000044 	addi	r4,r4,1
    8970:	20c00007 	ldb	r3,0(r4)
    8974:	29400044 	addi	r5,r5,1
    8978:	18000226 	beq	r3,zero,8984 <strcmp+0xa4>
    897c:	28800007 	ldb	r2,0(r5)
    8980:	18bffa26 	beq	r3,r2,896c <strcmp+0x8c>
    8984:	20c00003 	ldbu	r3,0(r4)
    8988:	28800003 	ldbu	r2,0(r5)
    898c:	1885c83a 	sub	r2,r3,r2
    8990:	f800283a 	ret
    8994:	0005883a 	mov	r2,zero
    8998:	f800283a 	ret

0000899c <_write_r>:
    899c:	defffd04 	addi	sp,sp,-12
    89a0:	dc000015 	stw	r16,0(sp)
    89a4:	04000074 	movhi	r16,1
    89a8:	84051904 	addi	r16,r16,5220
    89ac:	dc400115 	stw	r17,4(sp)
    89b0:	80000015 	stw	zero,0(r16)
    89b4:	2023883a 	mov	r17,r4
    89b8:	2809883a 	mov	r4,r5
    89bc:	300b883a 	mov	r5,r6
    89c0:	380d883a 	mov	r6,r7
    89c4:	dfc00215 	stw	ra,8(sp)
    89c8:	000bc940 	call	bc94 <write>
    89cc:	1007883a 	mov	r3,r2
    89d0:	00bfffc4 	movi	r2,-1
    89d4:	18800626 	beq	r3,r2,89f0 <_write_r+0x54>
    89d8:	1805883a 	mov	r2,r3
    89dc:	dfc00217 	ldw	ra,8(sp)
    89e0:	dc400117 	ldw	r17,4(sp)
    89e4:	dc000017 	ldw	r16,0(sp)
    89e8:	dec00304 	addi	sp,sp,12
    89ec:	f800283a 	ret
    89f0:	80800017 	ldw	r2,0(r16)
    89f4:	103ff826 	beq	r2,zero,89d8 <_write_r+0x3c>
    89f8:	88800015 	stw	r2,0(r17)
    89fc:	1805883a 	mov	r2,r3
    8a00:	dfc00217 	ldw	ra,8(sp)
    8a04:	dc400117 	ldw	r17,4(sp)
    8a08:	dc000017 	ldw	r16,0(sp)
    8a0c:	dec00304 	addi	sp,sp,12
    8a10:	f800283a 	ret

00008a14 <_calloc_r>:
    8a14:	298b383a 	mul	r5,r5,r6
    8a18:	defffe04 	addi	sp,sp,-8
    8a1c:	dc000015 	stw	r16,0(sp)
    8a20:	dfc00115 	stw	ra,4(sp)
    8a24:	00019680 	call	1968 <_malloc_r>
    8a28:	1021883a 	mov	r16,r2
    8a2c:	01c00904 	movi	r7,36
    8a30:	10000d26 	beq	r2,zero,8a68 <_calloc_r+0x54>
    8a34:	10ffff17 	ldw	r3,-4(r2)
    8a38:	1009883a 	mov	r4,r2
    8a3c:	00bfff04 	movi	r2,-4
    8a40:	1886703a 	and	r3,r3,r2
    8a44:	1887883a 	add	r3,r3,r2
    8a48:	180d883a 	mov	r6,r3
    8a4c:	000b883a 	mov	r5,zero
    8a50:	38c01736 	bltu	r7,r3,8ab0 <_calloc_r+0x9c>
    8a54:	008004c4 	movi	r2,19
    8a58:	10c00836 	bltu	r2,r3,8a7c <_calloc_r+0x68>
    8a5c:	20000215 	stw	zero,8(r4)
    8a60:	20000015 	stw	zero,0(r4)
    8a64:	20000115 	stw	zero,4(r4)
    8a68:	8005883a 	mov	r2,r16
    8a6c:	dfc00117 	ldw	ra,4(sp)
    8a70:	dc000017 	ldw	r16,0(sp)
    8a74:	dec00204 	addi	sp,sp,8
    8a78:	f800283a 	ret
    8a7c:	008006c4 	movi	r2,27
    8a80:	80000015 	stw	zero,0(r16)
    8a84:	80000115 	stw	zero,4(r16)
    8a88:	81000204 	addi	r4,r16,8
    8a8c:	10fff32e 	bgeu	r2,r3,8a5c <_calloc_r+0x48>
    8a90:	80000215 	stw	zero,8(r16)
    8a94:	80000315 	stw	zero,12(r16)
    8a98:	81000404 	addi	r4,r16,16
    8a9c:	19ffef1e 	bne	r3,r7,8a5c <_calloc_r+0x48>
    8aa0:	81000604 	addi	r4,r16,24
    8aa4:	80000415 	stw	zero,16(r16)
    8aa8:	80000515 	stw	zero,20(r16)
    8aac:	003feb06 	br	8a5c <_calloc_r+0x48>
    8ab0:	00070a40 	call	70a4 <memset>
    8ab4:	8005883a 	mov	r2,r16
    8ab8:	dfc00117 	ldw	ra,4(sp)
    8abc:	dc000017 	ldw	r16,0(sp)
    8ac0:	dec00204 	addi	sp,sp,8
    8ac4:	f800283a 	ret

00008ac8 <_close_r>:
    8ac8:	defffd04 	addi	sp,sp,-12
    8acc:	dc000015 	stw	r16,0(sp)
    8ad0:	04000074 	movhi	r16,1
    8ad4:	84051904 	addi	r16,r16,5220
    8ad8:	dc400115 	stw	r17,4(sp)
    8adc:	80000015 	stw	zero,0(r16)
    8ae0:	2023883a 	mov	r17,r4
    8ae4:	2809883a 	mov	r4,r5
    8ae8:	dfc00215 	stw	ra,8(sp)
    8aec:	000b1140 	call	b114 <close>
    8af0:	1007883a 	mov	r3,r2
    8af4:	00bfffc4 	movi	r2,-1
    8af8:	18800626 	beq	r3,r2,8b14 <_close_r+0x4c>
    8afc:	1805883a 	mov	r2,r3
    8b00:	dfc00217 	ldw	ra,8(sp)
    8b04:	dc400117 	ldw	r17,4(sp)
    8b08:	dc000017 	ldw	r16,0(sp)
    8b0c:	dec00304 	addi	sp,sp,12
    8b10:	f800283a 	ret
    8b14:	80800017 	ldw	r2,0(r16)
    8b18:	103ff826 	beq	r2,zero,8afc <_close_r+0x34>
    8b1c:	88800015 	stw	r2,0(r17)
    8b20:	1805883a 	mov	r2,r3
    8b24:	dfc00217 	ldw	ra,8(sp)
    8b28:	dc400117 	ldw	r17,4(sp)
    8b2c:	dc000017 	ldw	r16,0(sp)
    8b30:	dec00304 	addi	sp,sp,12
    8b34:	f800283a 	ret

00008b38 <_fclose_r>:
    8b38:	defffc04 	addi	sp,sp,-16
    8b3c:	dc400115 	stw	r17,4(sp)
    8b40:	dc000015 	stw	r16,0(sp)
    8b44:	dfc00315 	stw	ra,12(sp)
    8b48:	dc800215 	stw	r18,8(sp)
    8b4c:	2821883a 	mov	r16,r5
    8b50:	2023883a 	mov	r17,r4
    8b54:	28002926 	beq	r5,zero,8bfc <_fclose_r+0xc4>
    8b58:	0005fc40 	call	5fc4 <__sfp_lock_acquire>
    8b5c:	88000226 	beq	r17,zero,8b68 <_fclose_r+0x30>
    8b60:	88800e17 	ldw	r2,56(r17)
    8b64:	10002d26 	beq	r2,zero,8c1c <_fclose_r+0xe4>
    8b68:	8080030f 	ldh	r2,12(r16)
    8b6c:	10002226 	beq	r2,zero,8bf8 <_fclose_r+0xc0>
    8b70:	8809883a 	mov	r4,r17
    8b74:	800b883a 	mov	r5,r16
    8b78:	0005d3c0 	call	5d3c <_fflush_r>
    8b7c:	1025883a 	mov	r18,r2
    8b80:	80800b17 	ldw	r2,44(r16)
    8b84:	10000426 	beq	r2,zero,8b98 <_fclose_r+0x60>
    8b88:	81400717 	ldw	r5,28(r16)
    8b8c:	8809883a 	mov	r4,r17
    8b90:	103ee83a 	callr	r2
    8b94:	10002a16 	blt	r2,zero,8c40 <_fclose_r+0x108>
    8b98:	8080030b 	ldhu	r2,12(r16)
    8b9c:	1080200c 	andi	r2,r2,128
    8ba0:	1000231e 	bne	r2,zero,8c30 <_fclose_r+0xf8>
    8ba4:	81400c17 	ldw	r5,48(r16)
    8ba8:	28000526 	beq	r5,zero,8bc0 <_fclose_r+0x88>
    8bac:	80801004 	addi	r2,r16,64
    8bb0:	28800226 	beq	r5,r2,8bbc <_fclose_r+0x84>
    8bb4:	8809883a 	mov	r4,r17
    8bb8:	00063580 	call	6358 <_free_r>
    8bbc:	80000c15 	stw	zero,48(r16)
    8bc0:	81401117 	ldw	r5,68(r16)
    8bc4:	28000326 	beq	r5,zero,8bd4 <_fclose_r+0x9c>
    8bc8:	8809883a 	mov	r4,r17
    8bcc:	00063580 	call	6358 <_free_r>
    8bd0:	80001115 	stw	zero,68(r16)
    8bd4:	8000030d 	sth	zero,12(r16)
    8bd8:	0005fc80 	call	5fc8 <__sfp_lock_release>
    8bdc:	9005883a 	mov	r2,r18
    8be0:	dfc00317 	ldw	ra,12(sp)
    8be4:	dc800217 	ldw	r18,8(sp)
    8be8:	dc400117 	ldw	r17,4(sp)
    8bec:	dc000017 	ldw	r16,0(sp)
    8bf0:	dec00404 	addi	sp,sp,16
    8bf4:	f800283a 	ret
    8bf8:	0005fc80 	call	5fc8 <__sfp_lock_release>
    8bfc:	0025883a 	mov	r18,zero
    8c00:	9005883a 	mov	r2,r18
    8c04:	dfc00317 	ldw	ra,12(sp)
    8c08:	dc800217 	ldw	r18,8(sp)
    8c0c:	dc400117 	ldw	r17,4(sp)
    8c10:	dc000017 	ldw	r16,0(sp)
    8c14:	dec00404 	addi	sp,sp,16
    8c18:	f800283a 	ret
    8c1c:	8809883a 	mov	r4,r17
    8c20:	0005fd40 	call	5fd4 <__sinit>
    8c24:	8080030f 	ldh	r2,12(r16)
    8c28:	103fd11e 	bne	r2,zero,8b70 <_fclose_r+0x38>
    8c2c:	003ff206 	br	8bf8 <_fclose_r+0xc0>
    8c30:	81400417 	ldw	r5,16(r16)
    8c34:	8809883a 	mov	r4,r17
    8c38:	00063580 	call	6358 <_free_r>
    8c3c:	003fd906 	br	8ba4 <_fclose_r+0x6c>
    8c40:	04bfffc4 	movi	r18,-1
    8c44:	003fd406 	br	8b98 <_fclose_r+0x60>

00008c48 <fclose>:
    8c48:	00800074 	movhi	r2,1
    8c4c:	10be6604 	addi	r2,r2,-1640
    8c50:	200b883a 	mov	r5,r4
    8c54:	11000017 	ldw	r4,0(r2)
    8c58:	0008b381 	jmpi	8b38 <_fclose_r>

00008c5c <_fstat_r>:
    8c5c:	defffd04 	addi	sp,sp,-12
    8c60:	dc000015 	stw	r16,0(sp)
    8c64:	04000074 	movhi	r16,1
    8c68:	84051904 	addi	r16,r16,5220
    8c6c:	dc400115 	stw	r17,4(sp)
    8c70:	80000015 	stw	zero,0(r16)
    8c74:	2023883a 	mov	r17,r4
    8c78:	2809883a 	mov	r4,r5
    8c7c:	300b883a 	mov	r5,r6
    8c80:	dfc00215 	stw	ra,8(sp)
    8c84:	000b2fc0 	call	b2fc <fstat>
    8c88:	1007883a 	mov	r3,r2
    8c8c:	00bfffc4 	movi	r2,-1
    8c90:	18800626 	beq	r3,r2,8cac <_fstat_r+0x50>
    8c94:	1805883a 	mov	r2,r3
    8c98:	dfc00217 	ldw	ra,8(sp)
    8c9c:	dc400117 	ldw	r17,4(sp)
    8ca0:	dc000017 	ldw	r16,0(sp)
    8ca4:	dec00304 	addi	sp,sp,12
    8ca8:	f800283a 	ret
    8cac:	80800017 	ldw	r2,0(r16)
    8cb0:	103ff826 	beq	r2,zero,8c94 <_fstat_r+0x38>
    8cb4:	88800015 	stw	r2,0(r17)
    8cb8:	1805883a 	mov	r2,r3
    8cbc:	dfc00217 	ldw	ra,8(sp)
    8cc0:	dc400117 	ldw	r17,4(sp)
    8cc4:	dc000017 	ldw	r16,0(sp)
    8cc8:	dec00304 	addi	sp,sp,12
    8ccc:	f800283a 	ret

00008cd0 <_isatty_r>:
    8cd0:	defffd04 	addi	sp,sp,-12
    8cd4:	dc000015 	stw	r16,0(sp)
    8cd8:	04000074 	movhi	r16,1
    8cdc:	84051904 	addi	r16,r16,5220
    8ce0:	dc400115 	stw	r17,4(sp)
    8ce4:	80000015 	stw	zero,0(r16)
    8ce8:	2023883a 	mov	r17,r4
    8cec:	2809883a 	mov	r4,r5
    8cf0:	dfc00215 	stw	ra,8(sp)
    8cf4:	000b5f00 	call	b5f0 <isatty>
    8cf8:	1007883a 	mov	r3,r2
    8cfc:	00bfffc4 	movi	r2,-1
    8d00:	18800626 	beq	r3,r2,8d1c <_isatty_r+0x4c>
    8d04:	1805883a 	mov	r2,r3
    8d08:	dfc00217 	ldw	ra,8(sp)
    8d0c:	dc400117 	ldw	r17,4(sp)
    8d10:	dc000017 	ldw	r16,0(sp)
    8d14:	dec00304 	addi	sp,sp,12
    8d18:	f800283a 	ret
    8d1c:	80800017 	ldw	r2,0(r16)
    8d20:	103ff826 	beq	r2,zero,8d04 <_isatty_r+0x34>
    8d24:	88800015 	stw	r2,0(r17)
    8d28:	1805883a 	mov	r2,r3
    8d2c:	dfc00217 	ldw	ra,8(sp)
    8d30:	dc400117 	ldw	r17,4(sp)
    8d34:	dc000017 	ldw	r16,0(sp)
    8d38:	dec00304 	addi	sp,sp,12
    8d3c:	f800283a 	ret

00008d40 <_lseek_r>:
    8d40:	defffd04 	addi	sp,sp,-12
    8d44:	dc000015 	stw	r16,0(sp)
    8d48:	04000074 	movhi	r16,1
    8d4c:	84051904 	addi	r16,r16,5220
    8d50:	dc400115 	stw	r17,4(sp)
    8d54:	80000015 	stw	zero,0(r16)
    8d58:	2023883a 	mov	r17,r4
    8d5c:	2809883a 	mov	r4,r5
    8d60:	300b883a 	mov	r5,r6
    8d64:	380d883a 	mov	r6,r7
    8d68:	dfc00215 	stw	ra,8(sp)
    8d6c:	000b7fc0 	call	b7fc <lseek>
    8d70:	1007883a 	mov	r3,r2
    8d74:	00bfffc4 	movi	r2,-1
    8d78:	18800626 	beq	r3,r2,8d94 <_lseek_r+0x54>
    8d7c:	1805883a 	mov	r2,r3
    8d80:	dfc00217 	ldw	ra,8(sp)
    8d84:	dc400117 	ldw	r17,4(sp)
    8d88:	dc000017 	ldw	r16,0(sp)
    8d8c:	dec00304 	addi	sp,sp,12
    8d90:	f800283a 	ret
    8d94:	80800017 	ldw	r2,0(r16)
    8d98:	103ff826 	beq	r2,zero,8d7c <_lseek_r+0x3c>
    8d9c:	88800015 	stw	r2,0(r17)
    8da0:	1805883a 	mov	r2,r3
    8da4:	dfc00217 	ldw	ra,8(sp)
    8da8:	dc400117 	ldw	r17,4(sp)
    8dac:	dc000017 	ldw	r16,0(sp)
    8db0:	dec00304 	addi	sp,sp,12
    8db4:	f800283a 	ret

00008db8 <_read_r>:
    8db8:	defffd04 	addi	sp,sp,-12
    8dbc:	dc000015 	stw	r16,0(sp)
    8dc0:	04000074 	movhi	r16,1
    8dc4:	84051904 	addi	r16,r16,5220
    8dc8:	dc400115 	stw	r17,4(sp)
    8dcc:	80000015 	stw	zero,0(r16)
    8dd0:	2023883a 	mov	r17,r4
    8dd4:	2809883a 	mov	r4,r5
    8dd8:	300b883a 	mov	r5,r6
    8ddc:	380d883a 	mov	r6,r7
    8de0:	dfc00215 	stw	ra,8(sp)
    8de4:	000b9f80 	call	b9f8 <read>
    8de8:	1007883a 	mov	r3,r2
    8dec:	00bfffc4 	movi	r2,-1
    8df0:	18800626 	beq	r3,r2,8e0c <_read_r+0x54>
    8df4:	1805883a 	mov	r2,r3
    8df8:	dfc00217 	ldw	ra,8(sp)
    8dfc:	dc400117 	ldw	r17,4(sp)
    8e00:	dc000017 	ldw	r16,0(sp)
    8e04:	dec00304 	addi	sp,sp,12
    8e08:	f800283a 	ret
    8e0c:	80800017 	ldw	r2,0(r16)
    8e10:	103ff826 	beq	r2,zero,8df4 <_read_r+0x3c>
    8e14:	88800015 	stw	r2,0(r17)
    8e18:	1805883a 	mov	r2,r3
    8e1c:	dfc00217 	ldw	ra,8(sp)
    8e20:	dc400117 	ldw	r17,4(sp)
    8e24:	dc000017 	ldw	r16,0(sp)
    8e28:	dec00304 	addi	sp,sp,12
    8e2c:	f800283a 	ret

00008e30 <__udivdi3>:
    8e30:	defff004 	addi	sp,sp,-64
    8e34:	2005883a 	mov	r2,r4
    8e38:	3011883a 	mov	r8,r6
    8e3c:	df000e15 	stw	fp,56(sp)
    8e40:	dd000a15 	stw	r20,40(sp)
    8e44:	dc000615 	stw	r16,24(sp)
    8e48:	dfc00f15 	stw	ra,60(sp)
    8e4c:	ddc00d15 	stw	r23,52(sp)
    8e50:	dd800c15 	stw	r22,48(sp)
    8e54:	dd400b15 	stw	r21,44(sp)
    8e58:	dcc00915 	stw	r19,36(sp)
    8e5c:	dc800815 	stw	r18,32(sp)
    8e60:	dc400715 	stw	r17,28(sp)
    8e64:	4021883a 	mov	r16,r8
    8e68:	1039883a 	mov	fp,r2
    8e6c:	2829883a 	mov	r20,r5
    8e70:	38003b1e 	bne	r7,zero,8f60 <__udivdi3+0x130>
    8e74:	2a005c36 	bltu	r5,r8,8fe8 <__udivdi3+0x1b8>
    8e78:	4000a626 	beq	r8,zero,9114 <__udivdi3+0x2e4>
    8e7c:	00bfffd4 	movui	r2,65535
    8e80:	14009e36 	bltu	r2,r16,90fc <__udivdi3+0x2cc>
    8e84:	00803fc4 	movi	r2,255
    8e88:	14013d36 	bltu	r2,r16,9380 <__udivdi3+0x550>
    8e8c:	000b883a 	mov	r5,zero
    8e90:	0005883a 	mov	r2,zero
    8e94:	8084d83a 	srl	r2,r16,r2
    8e98:	01000074 	movhi	r4,1
    8e9c:	21379104 	addi	r4,r4,-8636
    8ea0:	01800804 	movi	r6,32
    8ea4:	1105883a 	add	r2,r2,r4
    8ea8:	10c00003 	ldbu	r3,0(r2)
    8eac:	28c7883a 	add	r3,r5,r3
    8eb0:	30edc83a 	sub	r22,r6,r3
    8eb4:	b000ee1e 	bne	r22,zero,9270 <__udivdi3+0x440>
    8eb8:	802ad43a 	srli	r21,r16,16
    8ebc:	00800044 	movi	r2,1
    8ec0:	a423c83a 	sub	r17,r20,r16
    8ec4:	85ffffcc 	andi	r23,r16,65535
    8ec8:	d8800315 	stw	r2,12(sp)
    8ecc:	8809883a 	mov	r4,r17
    8ed0:	a80b883a 	mov	r5,r21
    8ed4:	00018f80 	call	18f8 <__udivsi3>
    8ed8:	8809883a 	mov	r4,r17
    8edc:	a80b883a 	mov	r5,r21
    8ee0:	102d883a 	mov	r22,r2
    8ee4:	00019000 	call	1900 <__umodsi3>
    8ee8:	1004943a 	slli	r2,r2,16
    8eec:	e006d43a 	srli	r3,fp,16
    8ef0:	bda3383a 	mul	r17,r23,r22
    8ef4:	10c4b03a 	or	r2,r2,r3
    8ef8:	1440042e 	bgeu	r2,r17,8f0c <__udivdi3+0xdc>
    8efc:	1405883a 	add	r2,r2,r16
    8f00:	b5bfffc4 	addi	r22,r22,-1
    8f04:	14000136 	bltu	r2,r16,8f0c <__udivdi3+0xdc>
    8f08:	14413d36 	bltu	r2,r17,9400 <__udivdi3+0x5d0>
    8f0c:	1463c83a 	sub	r17,r2,r17
    8f10:	8809883a 	mov	r4,r17
    8f14:	a80b883a 	mov	r5,r21
    8f18:	00018f80 	call	18f8 <__udivsi3>
    8f1c:	8809883a 	mov	r4,r17
    8f20:	a80b883a 	mov	r5,r21
    8f24:	1029883a 	mov	r20,r2
    8f28:	00019000 	call	1900 <__umodsi3>
    8f2c:	1004943a 	slli	r2,r2,16
    8f30:	bd09383a 	mul	r4,r23,r20
    8f34:	e0ffffcc 	andi	r3,fp,65535
    8f38:	10c4b03a 	or	r2,r2,r3
    8f3c:	1100042e 	bgeu	r2,r4,8f50 <__udivdi3+0x120>
    8f40:	8085883a 	add	r2,r16,r2
    8f44:	a53fffc4 	addi	r20,r20,-1
    8f48:	14000136 	bltu	r2,r16,8f50 <__udivdi3+0x120>
    8f4c:	11012036 	bltu	r2,r4,93d0 <__udivdi3+0x5a0>
    8f50:	b004943a 	slli	r2,r22,16
    8f54:	d9000317 	ldw	r4,12(sp)
    8f58:	a084b03a 	or	r2,r20,r2
    8f5c:	00001506 	br	8fb4 <__udivdi3+0x184>
    8f60:	380d883a 	mov	r6,r7
    8f64:	29c06236 	bltu	r5,r7,90f0 <__udivdi3+0x2c0>
    8f68:	00bfffd4 	movui	r2,65535
    8f6c:	11c05a36 	bltu	r2,r7,90d8 <__udivdi3+0x2a8>
    8f70:	00803fc4 	movi	r2,255
    8f74:	11c0fc36 	bltu	r2,r7,9368 <__udivdi3+0x538>
    8f78:	000b883a 	mov	r5,zero
    8f7c:	0005883a 	mov	r2,zero
    8f80:	3084d83a 	srl	r2,r6,r2
    8f84:	01000074 	movhi	r4,1
    8f88:	21379104 	addi	r4,r4,-8636
    8f8c:	01c00804 	movi	r7,32
    8f90:	1105883a 	add	r2,r2,r4
    8f94:	10c00003 	ldbu	r3,0(r2)
    8f98:	28c7883a 	add	r3,r5,r3
    8f9c:	38efc83a 	sub	r23,r7,r3
    8fa0:	b800691e 	bne	r23,zero,9148 <__udivdi3+0x318>
    8fa4:	35000136 	bltu	r6,r20,8fac <__udivdi3+0x17c>
    8fa8:	e4005136 	bltu	fp,r16,90f0 <__udivdi3+0x2c0>
    8fac:	00800044 	movi	r2,1
    8fb0:	0009883a 	mov	r4,zero
    8fb4:	2007883a 	mov	r3,r4
    8fb8:	dfc00f17 	ldw	ra,60(sp)
    8fbc:	df000e17 	ldw	fp,56(sp)
    8fc0:	ddc00d17 	ldw	r23,52(sp)
    8fc4:	dd800c17 	ldw	r22,48(sp)
    8fc8:	dd400b17 	ldw	r21,44(sp)
    8fcc:	dd000a17 	ldw	r20,40(sp)
    8fd0:	dcc00917 	ldw	r19,36(sp)
    8fd4:	dc800817 	ldw	r18,32(sp)
    8fd8:	dc400717 	ldw	r17,28(sp)
    8fdc:	dc000617 	ldw	r16,24(sp)
    8fe0:	dec01004 	addi	sp,sp,64
    8fe4:	f800283a 	ret
    8fe8:	00bfffd4 	movui	r2,65535
    8fec:	12005036 	bltu	r2,r8,9130 <__udivdi3+0x300>
    8ff0:	00803fc4 	movi	r2,255
    8ff4:	1200e836 	bltu	r2,r8,9398 <__udivdi3+0x568>
    8ff8:	000b883a 	mov	r5,zero
    8ffc:	0005883a 	mov	r2,zero
    9000:	8084d83a 	srl	r2,r16,r2
    9004:	01000074 	movhi	r4,1
    9008:	21379104 	addi	r4,r4,-8636
    900c:	01800804 	movi	r6,32
    9010:	1105883a 	add	r2,r2,r4
    9014:	10c00003 	ldbu	r3,0(r2)
    9018:	28c7883a 	add	r3,r5,r3
    901c:	30cbc83a 	sub	r5,r6,r3
    9020:	28000626 	beq	r5,zero,903c <__udivdi3+0x20c>
    9024:	3145c83a 	sub	r2,r6,r5
    9028:	e084d83a 	srl	r2,fp,r2
    902c:	a146983a 	sll	r3,r20,r5
    9030:	e178983a 	sll	fp,fp,r5
    9034:	8160983a 	sll	r16,r16,r5
    9038:	18a8b03a 	or	r20,r3,r2
    903c:	802ad43a 	srli	r21,r16,16
    9040:	a009883a 	mov	r4,r20
    9044:	85ffffcc 	andi	r23,r16,65535
    9048:	a80b883a 	mov	r5,r21
    904c:	00018f80 	call	18f8 <__udivsi3>
    9050:	a009883a 	mov	r4,r20
    9054:	a80b883a 	mov	r5,r21
    9058:	102d883a 	mov	r22,r2
    905c:	00019000 	call	1900 <__umodsi3>
    9060:	1004943a 	slli	r2,r2,16
    9064:	e006d43a 	srli	r3,fp,16
    9068:	bda3383a 	mul	r17,r23,r22
    906c:	10c4b03a 	or	r2,r2,r3
    9070:	1440042e 	bgeu	r2,r17,9084 <__udivdi3+0x254>
    9074:	1405883a 	add	r2,r2,r16
    9078:	b5bfffc4 	addi	r22,r22,-1
    907c:	14000136 	bltu	r2,r16,9084 <__udivdi3+0x254>
    9080:	1440d536 	bltu	r2,r17,93d8 <__udivdi3+0x5a8>
    9084:	1463c83a 	sub	r17,r2,r17
    9088:	8809883a 	mov	r4,r17
    908c:	a80b883a 	mov	r5,r21
    9090:	00018f80 	call	18f8 <__udivsi3>
    9094:	8809883a 	mov	r4,r17
    9098:	a80b883a 	mov	r5,r21
    909c:	1029883a 	mov	r20,r2
    90a0:	00019000 	call	1900 <__umodsi3>
    90a4:	1004943a 	slli	r2,r2,16
    90a8:	bd09383a 	mul	r4,r23,r20
    90ac:	e0ffffcc 	andi	r3,fp,65535
    90b0:	10c4b03a 	or	r2,r2,r3
    90b4:	1100042e 	bgeu	r2,r4,90c8 <__udivdi3+0x298>
    90b8:	8085883a 	add	r2,r16,r2
    90bc:	a53fffc4 	addi	r20,r20,-1
    90c0:	14000136 	bltu	r2,r16,90c8 <__udivdi3+0x298>
    90c4:	1100c736 	bltu	r2,r4,93e4 <__udivdi3+0x5b4>
    90c8:	b004943a 	slli	r2,r22,16
    90cc:	0009883a 	mov	r4,zero
    90d0:	a084b03a 	or	r2,r20,r2
    90d4:	003fb706 	br	8fb4 <__udivdi3+0x184>
    90d8:	00804034 	movhi	r2,256
    90dc:	10bfffc4 	addi	r2,r2,-1
    90e0:	11c0a436 	bltu	r2,r7,9374 <__udivdi3+0x544>
    90e4:	01400404 	movi	r5,16
    90e8:	2805883a 	mov	r2,r5
    90ec:	003fa406 	br	8f80 <__udivdi3+0x150>
    90f0:	0005883a 	mov	r2,zero
    90f4:	0009883a 	mov	r4,zero
    90f8:	003fae06 	br	8fb4 <__udivdi3+0x184>
    90fc:	00804034 	movhi	r2,256
    9100:	10bfffc4 	addi	r2,r2,-1
    9104:	1400a136 	bltu	r2,r16,938c <__udivdi3+0x55c>
    9108:	01400404 	movi	r5,16
    910c:	2805883a 	mov	r2,r5
    9110:	003f6006 	br	8e94 <__udivdi3+0x64>
    9114:	01000044 	movi	r4,1
    9118:	000b883a 	mov	r5,zero
    911c:	00018f80 	call	18f8 <__udivsi3>
    9120:	1021883a 	mov	r16,r2
    9124:	00bfffd4 	movui	r2,65535
    9128:	143ff436 	bltu	r2,r16,90fc <__udivdi3+0x2cc>
    912c:	003f5506 	br	8e84 <__udivdi3+0x54>
    9130:	00804034 	movhi	r2,256
    9134:	10bfffc4 	addi	r2,r2,-1
    9138:	12009a36 	bltu	r2,r8,93a4 <__udivdi3+0x574>
    913c:	01400404 	movi	r5,16
    9140:	2805883a 	mov	r2,r5
    9144:	003fae06 	br	9000 <__udivdi3+0x1d0>
    9148:	3dc5c83a 	sub	r2,r7,r23
    914c:	35c8983a 	sll	r4,r6,r23
    9150:	8086d83a 	srl	r3,r16,r2
    9154:	a0a2d83a 	srl	r17,r20,r2
    9158:	e084d83a 	srl	r2,fp,r2
    915c:	20eab03a 	or	r21,r4,r3
    9160:	a82cd43a 	srli	r22,r21,16
    9164:	a5c6983a 	sll	r3,r20,r23
    9168:	8809883a 	mov	r4,r17
    916c:	b00b883a 	mov	r5,r22
    9170:	1886b03a 	or	r3,r3,r2
    9174:	d8c00215 	stw	r3,8(sp)
    9178:	00018f80 	call	18f8 <__udivsi3>
    917c:	8809883a 	mov	r4,r17
    9180:	b00b883a 	mov	r5,r22
    9184:	1029883a 	mov	r20,r2
    9188:	00019000 	call	1900 <__umodsi3>
    918c:	a8ffffcc 	andi	r3,r21,65535
    9190:	d8c00515 	stw	r3,20(sp)
    9194:	d9000217 	ldw	r4,8(sp)
    9198:	d9400517 	ldw	r5,20(sp)
    919c:	1004943a 	slli	r2,r2,16
    91a0:	2006d43a 	srli	r3,r4,16
    91a4:	85e0983a 	sll	r16,r16,r23
    91a8:	2d23383a 	mul	r17,r5,r20
    91ac:	10c4b03a 	or	r2,r2,r3
    91b0:	dc000015 	stw	r16,0(sp)
    91b4:	1440032e 	bgeu	r2,r17,91c4 <__udivdi3+0x394>
    91b8:	1545883a 	add	r2,r2,r21
    91bc:	a53fffc4 	addi	r20,r20,-1
    91c0:	15407f2e 	bgeu	r2,r21,93c0 <__udivdi3+0x590>
    91c4:	1463c83a 	sub	r17,r2,r17
    91c8:	8809883a 	mov	r4,r17
    91cc:	b00b883a 	mov	r5,r22
    91d0:	00018f80 	call	18f8 <__udivsi3>
    91d4:	8809883a 	mov	r4,r17
    91d8:	b00b883a 	mov	r5,r22
    91dc:	1021883a 	mov	r16,r2
    91e0:	00019000 	call	1900 <__umodsi3>
    91e4:	d8c00517 	ldw	r3,20(sp)
    91e8:	d9000217 	ldw	r4,8(sp)
    91ec:	1004943a 	slli	r2,r2,16
    91f0:	1c0f383a 	mul	r7,r3,r16
    91f4:	20ffffcc 	andi	r3,r4,65535
    91f8:	10e2b03a 	or	r17,r2,r3
    91fc:	89c0032e 	bgeu	r17,r7,920c <__udivdi3+0x3dc>
    9200:	8d63883a 	add	r17,r17,r21
    9204:	843fffc4 	addi	r16,r16,-1
    9208:	8d40692e 	bgeu	r17,r21,93b0 <__udivdi3+0x580>
    920c:	a008943a 	slli	r4,r20,16
    9210:	d9400017 	ldw	r5,0(sp)
    9214:	89e3c83a 	sub	r17,r17,r7
    9218:	8110b03a 	or	r8,r16,r4
    921c:	280cd43a 	srli	r6,r5,16
    9220:	28ffffcc 	andi	r3,r5,65535
    9224:	40bfffcc 	andi	r2,r8,65535
    9228:	400ad43a 	srli	r5,r8,16
    922c:	10d3383a 	mul	r9,r2,r3
    9230:	1185383a 	mul	r2,r2,r6
    9234:	28c7383a 	mul	r3,r5,r3
    9238:	4808d43a 	srli	r4,r9,16
    923c:	298b383a 	mul	r5,r5,r6
    9240:	10c5883a 	add	r2,r2,r3
    9244:	2089883a 	add	r4,r4,r2
    9248:	20c0022e 	bgeu	r4,r3,9254 <__udivdi3+0x424>
    924c:	00800074 	movhi	r2,1
    9250:	288b883a 	add	r5,r5,r2
    9254:	2004d43a 	srli	r2,r4,16
    9258:	288b883a 	add	r5,r5,r2
    925c:	89403f36 	bltu	r17,r5,935c <__udivdi3+0x52c>
    9260:	89403926 	beq	r17,r5,9348 <__udivdi3+0x518>
    9264:	4005883a 	mov	r2,r8
    9268:	0009883a 	mov	r4,zero
    926c:	003f5106 	br	8fb4 <__udivdi3+0x184>
    9270:	85a0983a 	sll	r16,r16,r22
    9274:	3585c83a 	sub	r2,r6,r22
    9278:	a0a2d83a 	srl	r17,r20,r2
    927c:	802ad43a 	srli	r21,r16,16
    9280:	e084d83a 	srl	r2,fp,r2
    9284:	a586983a 	sll	r3,r20,r22
    9288:	8809883a 	mov	r4,r17
    928c:	a80b883a 	mov	r5,r21
    9290:	1886b03a 	or	r3,r3,r2
    9294:	d8c00115 	stw	r3,4(sp)
    9298:	00018f80 	call	18f8 <__udivsi3>
    929c:	8809883a 	mov	r4,r17
    92a0:	a80b883a 	mov	r5,r21
    92a4:	d8800415 	stw	r2,16(sp)
    92a8:	00019000 	call	1900 <__umodsi3>
    92ac:	d9000117 	ldw	r4,4(sp)
    92b0:	d9400417 	ldw	r5,16(sp)
    92b4:	1004943a 	slli	r2,r2,16
    92b8:	85ffffcc 	andi	r23,r16,65535
    92bc:	2006d43a 	srli	r3,r4,16
    92c0:	b963383a 	mul	r17,r23,r5
    92c4:	10c4b03a 	or	r2,r2,r3
    92c8:	1440042e 	bgeu	r2,r17,92dc <__udivdi3+0x4ac>
    92cc:	297fffc4 	addi	r5,r5,-1
    92d0:	1405883a 	add	r2,r2,r16
    92d4:	d9400415 	stw	r5,16(sp)
    92d8:	1400442e 	bgeu	r2,r16,93ec <__udivdi3+0x5bc>
    92dc:	1463c83a 	sub	r17,r2,r17
    92e0:	8809883a 	mov	r4,r17
    92e4:	a80b883a 	mov	r5,r21
    92e8:	00018f80 	call	18f8 <__udivsi3>
    92ec:	8809883a 	mov	r4,r17
    92f0:	a80b883a 	mov	r5,r21
    92f4:	1029883a 	mov	r20,r2
    92f8:	00019000 	call	1900 <__umodsi3>
    92fc:	d9400117 	ldw	r5,4(sp)
    9300:	1004943a 	slli	r2,r2,16
    9304:	bd09383a 	mul	r4,r23,r20
    9308:	28ffffcc 	andi	r3,r5,65535
    930c:	10c6b03a 	or	r3,r2,r3
    9310:	1900062e 	bgeu	r3,r4,932c <__udivdi3+0x4fc>
    9314:	1c07883a 	add	r3,r3,r16
    9318:	a53fffc4 	addi	r20,r20,-1
    931c:	1c000336 	bltu	r3,r16,932c <__udivdi3+0x4fc>
    9320:	1900022e 	bgeu	r3,r4,932c <__udivdi3+0x4fc>
    9324:	a53fffc4 	addi	r20,r20,-1
    9328:	1c07883a 	add	r3,r3,r16
    932c:	d9400417 	ldw	r5,16(sp)
    9330:	e5b8983a 	sll	fp,fp,r22
    9334:	1923c83a 	sub	r17,r3,r4
    9338:	2804943a 	slli	r2,r5,16
    933c:	a0a8b03a 	or	r20,r20,r2
    9340:	dd000315 	stw	r20,12(sp)
    9344:	003ee106 	br	8ecc <__udivdi3+0x9c>
    9348:	2004943a 	slli	r2,r4,16
    934c:	e5c8983a 	sll	r4,fp,r23
    9350:	48ffffcc 	andi	r3,r9,65535
    9354:	10c5883a 	add	r2,r2,r3
    9358:	20bfc22e 	bgeu	r4,r2,9264 <__udivdi3+0x434>
    935c:	40bfffc4 	addi	r2,r8,-1
    9360:	0009883a 	mov	r4,zero
    9364:	003f1306 	br	8fb4 <__udivdi3+0x184>
    9368:	01400204 	movi	r5,8
    936c:	2805883a 	mov	r2,r5
    9370:	003f0306 	br	8f80 <__udivdi3+0x150>
    9374:	01400604 	movi	r5,24
    9378:	2805883a 	mov	r2,r5
    937c:	003f0006 	br	8f80 <__udivdi3+0x150>
    9380:	01400204 	movi	r5,8
    9384:	2805883a 	mov	r2,r5
    9388:	003ec206 	br	8e94 <__udivdi3+0x64>
    938c:	01400604 	movi	r5,24
    9390:	2805883a 	mov	r2,r5
    9394:	003ebf06 	br	8e94 <__udivdi3+0x64>
    9398:	01400204 	movi	r5,8
    939c:	2805883a 	mov	r2,r5
    93a0:	003f1706 	br	9000 <__udivdi3+0x1d0>
    93a4:	01400604 	movi	r5,24
    93a8:	2805883a 	mov	r2,r5
    93ac:	003f1406 	br	9000 <__udivdi3+0x1d0>
    93b0:	89ff962e 	bgeu	r17,r7,920c <__udivdi3+0x3dc>
    93b4:	8d63883a 	add	r17,r17,r21
    93b8:	843fffc4 	addi	r16,r16,-1
    93bc:	003f9306 	br	920c <__udivdi3+0x3dc>
    93c0:	147f802e 	bgeu	r2,r17,91c4 <__udivdi3+0x394>
    93c4:	a53fffc4 	addi	r20,r20,-1
    93c8:	1545883a 	add	r2,r2,r21
    93cc:	003f7d06 	br	91c4 <__udivdi3+0x394>
    93d0:	a53fffc4 	addi	r20,r20,-1
    93d4:	003ede06 	br	8f50 <__udivdi3+0x120>
    93d8:	b5bfffc4 	addi	r22,r22,-1
    93dc:	1405883a 	add	r2,r2,r16
    93e0:	003f2806 	br	9084 <__udivdi3+0x254>
    93e4:	a53fffc4 	addi	r20,r20,-1
    93e8:	003f3706 	br	90c8 <__udivdi3+0x298>
    93ec:	147fbb2e 	bgeu	r2,r17,92dc <__udivdi3+0x4ac>
    93f0:	297fffc4 	addi	r5,r5,-1
    93f4:	1405883a 	add	r2,r2,r16
    93f8:	d9400415 	stw	r5,16(sp)
    93fc:	003fb706 	br	92dc <__udivdi3+0x4ac>
    9400:	b5bfffc4 	addi	r22,r22,-1
    9404:	1405883a 	add	r2,r2,r16
    9408:	003ec006 	br	8f0c <__udivdi3+0xdc>

0000940c <__umoddi3>:
    940c:	defff104 	addi	sp,sp,-60
    9410:	dd800b15 	stw	r22,44(sp)
    9414:	dd000915 	stw	r20,36(sp)
    9418:	dc000515 	stw	r16,20(sp)
    941c:	dfc00e15 	stw	ra,56(sp)
    9420:	df000d15 	stw	fp,52(sp)
    9424:	ddc00c15 	stw	r23,48(sp)
    9428:	dd400a15 	stw	r21,40(sp)
    942c:	dcc00815 	stw	r19,32(sp)
    9430:	dc800715 	stw	r18,28(sp)
    9434:	dc400615 	stw	r17,24(sp)
    9438:	3021883a 	mov	r16,r6
    943c:	202d883a 	mov	r22,r4
    9440:	2829883a 	mov	r20,r5
    9444:	38002b1e 	bne	r7,zero,94f4 <__umoddi3+0xe8>
    9448:	29805036 	bltu	r5,r6,958c <__umoddi3+0x180>
    944c:	30008a26 	beq	r6,zero,9678 <__umoddi3+0x26c>
    9450:	00bfffd4 	movui	r2,65535
    9454:	14008236 	bltu	r2,r16,9660 <__umoddi3+0x254>
    9458:	00803fc4 	movi	r2,255
    945c:	14013636 	bltu	r2,r16,9938 <__umoddi3+0x52c>
    9460:	000b883a 	mov	r5,zero
    9464:	0005883a 	mov	r2,zero
    9468:	8084d83a 	srl	r2,r16,r2
    946c:	01000074 	movhi	r4,1
    9470:	21379104 	addi	r4,r4,-8636
    9474:	01800804 	movi	r6,32
    9478:	1105883a 	add	r2,r2,r4
    947c:	10c00003 	ldbu	r3,0(r2)
    9480:	28c7883a 	add	r3,r5,r3
    9484:	30efc83a 	sub	r23,r6,r3
    9488:	b800941e 	bne	r23,zero,96dc <__umoddi3+0x2d0>
    948c:	802ad43a 	srli	r21,r16,16
    9490:	a423c83a 	sub	r17,r20,r16
    9494:	0039883a 	mov	fp,zero
    9498:	853fffcc 	andi	r20,r16,65535
    949c:	8809883a 	mov	r4,r17
    94a0:	a80b883a 	mov	r5,r21
    94a4:	00018f80 	call	18f8 <__udivsi3>
    94a8:	8809883a 	mov	r4,r17
    94ac:	a80b883a 	mov	r5,r21
    94b0:	a0a3383a 	mul	r17,r20,r2
    94b4:	00019000 	call	1900 <__umodsi3>
    94b8:	1004943a 	slli	r2,r2,16
    94bc:	b006d43a 	srli	r3,r22,16
    94c0:	10c4b03a 	or	r2,r2,r3
    94c4:	1440032e 	bgeu	r2,r17,94d4 <__umoddi3+0xc8>
    94c8:	1405883a 	add	r2,r2,r16
    94cc:	14000136 	bltu	r2,r16,94d4 <__umoddi3+0xc8>
    94d0:	14413536 	bltu	r2,r17,99a8 <__umoddi3+0x59c>
    94d4:	1463c83a 	sub	r17,r2,r17
    94d8:	8809883a 	mov	r4,r17
    94dc:	a80b883a 	mov	r5,r21
    94e0:	00018f80 	call	18f8 <__udivsi3>
    94e4:	8809883a 	mov	r4,r17
    94e8:	a0a3383a 	mul	r17,r20,r2
    94ec:	a80b883a 	mov	r5,r21
    94f0:	00004d06 	br	9628 <__umoddi3+0x21c>
    94f4:	380d883a 	mov	r6,r7
    94f8:	29c0102e 	bgeu	r5,r7,953c <__umoddi3+0x130>
    94fc:	2011883a 	mov	r8,r4
    9500:	2813883a 	mov	r9,r5
    9504:	4005883a 	mov	r2,r8
    9508:	4807883a 	mov	r3,r9
    950c:	dfc00e17 	ldw	ra,56(sp)
    9510:	df000d17 	ldw	fp,52(sp)
    9514:	ddc00c17 	ldw	r23,48(sp)
    9518:	dd800b17 	ldw	r22,44(sp)
    951c:	dd400a17 	ldw	r21,40(sp)
    9520:	dd000917 	ldw	r20,36(sp)
    9524:	dcc00817 	ldw	r19,32(sp)
    9528:	dc800717 	ldw	r18,28(sp)
    952c:	dc400617 	ldw	r17,24(sp)
    9530:	dc000517 	ldw	r16,20(sp)
    9534:	dec00f04 	addi	sp,sp,60
    9538:	f800283a 	ret
    953c:	00bfffd4 	movui	r2,65535
    9540:	11c05a36 	bltu	r2,r7,96ac <__umoddi3+0x2a0>
    9544:	00803fc4 	movi	r2,255
    9548:	11c0fe36 	bltu	r2,r7,9944 <__umoddi3+0x538>
    954c:	000b883a 	mov	r5,zero
    9550:	0005883a 	mov	r2,zero
    9554:	3084d83a 	srl	r2,r6,r2
    9558:	01000074 	movhi	r4,1
    955c:	21379104 	addi	r4,r4,-8636
    9560:	01c00804 	movi	r7,32
    9564:	1105883a 	add	r2,r2,r4
    9568:	10c00003 	ldbu	r3,0(r2)
    956c:	28c7883a 	add	r3,r5,r3
    9570:	38ebc83a 	sub	r21,r7,r3
    9574:	a800851e 	bne	r21,zero,978c <__umoddi3+0x380>
    9578:	35005236 	bltu	r6,r20,96c4 <__umoddi3+0x2b8>
    957c:	b400512e 	bgeu	r22,r16,96c4 <__umoddi3+0x2b8>
    9580:	b011883a 	mov	r8,r22
    9584:	a013883a 	mov	r9,r20
    9588:	003fde06 	br	9504 <__umoddi3+0xf8>
    958c:	00bfffd4 	movui	r2,65535
    9590:	11804036 	bltu	r2,r6,9694 <__umoddi3+0x288>
    9594:	00803fc4 	movi	r2,255
    9598:	1180ed36 	bltu	r2,r6,9950 <__umoddi3+0x544>
    959c:	000b883a 	mov	r5,zero
    95a0:	0005883a 	mov	r2,zero
    95a4:	8084d83a 	srl	r2,r16,r2
    95a8:	01000074 	movhi	r4,1
    95ac:	21379104 	addi	r4,r4,-8636
    95b0:	01800804 	movi	r6,32
    95b4:	1105883a 	add	r2,r2,r4
    95b8:	10c00003 	ldbu	r3,0(r2)
    95bc:	28c7883a 	add	r3,r5,r3
    95c0:	30c7c83a 	sub	r3,r6,r3
    95c4:	1800bf1e 	bne	r3,zero,98c4 <__umoddi3+0x4b8>
    95c8:	0039883a 	mov	fp,zero
    95cc:	802ad43a 	srli	r21,r16,16
    95d0:	a009883a 	mov	r4,r20
    95d4:	85ffffcc 	andi	r23,r16,65535
    95d8:	a80b883a 	mov	r5,r21
    95dc:	00018f80 	call	18f8 <__udivsi3>
    95e0:	a009883a 	mov	r4,r20
    95e4:	a80b883a 	mov	r5,r21
    95e8:	b8a3383a 	mul	r17,r23,r2
    95ec:	00019000 	call	1900 <__umodsi3>
    95f0:	1004943a 	slli	r2,r2,16
    95f4:	b006d43a 	srli	r3,r22,16
    95f8:	10c4b03a 	or	r2,r2,r3
    95fc:	1440032e 	bgeu	r2,r17,960c <__umoddi3+0x200>
    9600:	1405883a 	add	r2,r2,r16
    9604:	14000136 	bltu	r2,r16,960c <__umoddi3+0x200>
    9608:	1440e536 	bltu	r2,r17,99a0 <__umoddi3+0x594>
    960c:	1463c83a 	sub	r17,r2,r17
    9610:	8809883a 	mov	r4,r17
    9614:	a80b883a 	mov	r5,r21
    9618:	00018f80 	call	18f8 <__udivsi3>
    961c:	8809883a 	mov	r4,r17
    9620:	b8a3383a 	mul	r17,r23,r2
    9624:	a80b883a 	mov	r5,r21
    9628:	00019000 	call	1900 <__umodsi3>
    962c:	1004943a 	slli	r2,r2,16
    9630:	b0ffffcc 	andi	r3,r22,65535
    9634:	10c4b03a 	or	r2,r2,r3
    9638:	1440042e 	bgeu	r2,r17,964c <__umoddi3+0x240>
    963c:	1405883a 	add	r2,r2,r16
    9640:	14000236 	bltu	r2,r16,964c <__umoddi3+0x240>
    9644:	1440012e 	bgeu	r2,r17,964c <__umoddi3+0x240>
    9648:	1405883a 	add	r2,r2,r16
    964c:	1445c83a 	sub	r2,r2,r17
    9650:	1724d83a 	srl	r18,r2,fp
    9654:	0013883a 	mov	r9,zero
    9658:	9011883a 	mov	r8,r18
    965c:	003fa906 	br	9504 <__umoddi3+0xf8>
    9660:	00804034 	movhi	r2,256
    9664:	10bfffc4 	addi	r2,r2,-1
    9668:	1400b036 	bltu	r2,r16,992c <__umoddi3+0x520>
    966c:	01400404 	movi	r5,16
    9670:	2805883a 	mov	r2,r5
    9674:	003f7c06 	br	9468 <__umoddi3+0x5c>
    9678:	01000044 	movi	r4,1
    967c:	000b883a 	mov	r5,zero
    9680:	00018f80 	call	18f8 <__udivsi3>
    9684:	1021883a 	mov	r16,r2
    9688:	00bfffd4 	movui	r2,65535
    968c:	143ff436 	bltu	r2,r16,9660 <__umoddi3+0x254>
    9690:	003f7106 	br	9458 <__umoddi3+0x4c>
    9694:	00804034 	movhi	r2,256
    9698:	10bfffc4 	addi	r2,r2,-1
    969c:	1180af36 	bltu	r2,r6,995c <__umoddi3+0x550>
    96a0:	01400404 	movi	r5,16
    96a4:	2805883a 	mov	r2,r5
    96a8:	003fbe06 	br	95a4 <__umoddi3+0x198>
    96ac:	00804034 	movhi	r2,256
    96b0:	10bfffc4 	addi	r2,r2,-1
    96b4:	11c0ac36 	bltu	r2,r7,9968 <__umoddi3+0x55c>
    96b8:	01400404 	movi	r5,16
    96bc:	2805883a 	mov	r2,r5
    96c0:	003fa406 	br	9554 <__umoddi3+0x148>
    96c4:	b409c83a 	sub	r4,r22,r16
    96c8:	b105803a 	cmpltu	r2,r22,r4
    96cc:	a187c83a 	sub	r3,r20,r6
    96d0:	18a9c83a 	sub	r20,r3,r2
    96d4:	202d883a 	mov	r22,r4
    96d8:	003fa906 	br	9580 <__umoddi3+0x174>
    96dc:	85e0983a 	sll	r16,r16,r23
    96e0:	35c5c83a 	sub	r2,r6,r23
    96e4:	a0a2d83a 	srl	r17,r20,r2
    96e8:	802ad43a 	srli	r21,r16,16
    96ec:	b084d83a 	srl	r2,r22,r2
    96f0:	a5c6983a 	sll	r3,r20,r23
    96f4:	8809883a 	mov	r4,r17
    96f8:	a80b883a 	mov	r5,r21
    96fc:	1886b03a 	or	r3,r3,r2
    9700:	d8c00115 	stw	r3,4(sp)
    9704:	853fffcc 	andi	r20,r16,65535
    9708:	00018f80 	call	18f8 <__udivsi3>
    970c:	8809883a 	mov	r4,r17
    9710:	a80b883a 	mov	r5,r21
    9714:	a0a3383a 	mul	r17,r20,r2
    9718:	00019000 	call	1900 <__umodsi3>
    971c:	d9000117 	ldw	r4,4(sp)
    9720:	1004943a 	slli	r2,r2,16
    9724:	b839883a 	mov	fp,r23
    9728:	2006d43a 	srli	r3,r4,16
    972c:	10c4b03a 	or	r2,r2,r3
    9730:	1440022e 	bgeu	r2,r17,973c <__umoddi3+0x330>
    9734:	1405883a 	add	r2,r2,r16
    9738:	1400962e 	bgeu	r2,r16,9994 <__umoddi3+0x588>
    973c:	1463c83a 	sub	r17,r2,r17
    9740:	8809883a 	mov	r4,r17
    9744:	a80b883a 	mov	r5,r21
    9748:	00018f80 	call	18f8 <__udivsi3>
    974c:	8809883a 	mov	r4,r17
    9750:	a80b883a 	mov	r5,r21
    9754:	a0a3383a 	mul	r17,r20,r2
    9758:	00019000 	call	1900 <__umodsi3>
    975c:	d9400117 	ldw	r5,4(sp)
    9760:	1004943a 	slli	r2,r2,16
    9764:	28ffffcc 	andi	r3,r5,65535
    9768:	10c4b03a 	or	r2,r2,r3
    976c:	1440042e 	bgeu	r2,r17,9780 <__umoddi3+0x374>
    9770:	1405883a 	add	r2,r2,r16
    9774:	14000236 	bltu	r2,r16,9780 <__umoddi3+0x374>
    9778:	1440012e 	bgeu	r2,r17,9780 <__umoddi3+0x374>
    977c:	1405883a 	add	r2,r2,r16
    9780:	b5ec983a 	sll	r22,r22,r23
    9784:	1463c83a 	sub	r17,r2,r17
    9788:	003f4406 	br	949c <__umoddi3+0x90>
    978c:	3d4fc83a 	sub	r7,r7,r21
    9790:	3546983a 	sll	r3,r6,r21
    9794:	81c4d83a 	srl	r2,r16,r7
    9798:	a1e2d83a 	srl	r17,r20,r7
    979c:	a54c983a 	sll	r6,r20,r21
    97a0:	18aeb03a 	or	r23,r3,r2
    97a4:	b828d43a 	srli	r20,r23,16
    97a8:	b1c4d83a 	srl	r2,r22,r7
    97ac:	8809883a 	mov	r4,r17
    97b0:	a00b883a 	mov	r5,r20
    97b4:	308cb03a 	or	r6,r6,r2
    97b8:	d9c00315 	stw	r7,12(sp)
    97bc:	d9800215 	stw	r6,8(sp)
    97c0:	00018f80 	call	18f8 <__udivsi3>
    97c4:	8809883a 	mov	r4,r17
    97c8:	a00b883a 	mov	r5,r20
    97cc:	1039883a 	mov	fp,r2
    97d0:	00019000 	call	1900 <__umodsi3>
    97d4:	b8ffffcc 	andi	r3,r23,65535
    97d8:	d8c00415 	stw	r3,16(sp)
    97dc:	d9000217 	ldw	r4,8(sp)
    97e0:	d9400417 	ldw	r5,16(sp)
    97e4:	1004943a 	slli	r2,r2,16
    97e8:	2006d43a 	srli	r3,r4,16
    97ec:	8560983a 	sll	r16,r16,r21
    97f0:	2f23383a 	mul	r17,r5,fp
    97f4:	10c4b03a 	or	r2,r2,r3
    97f8:	dc000015 	stw	r16,0(sp)
    97fc:	b56c983a 	sll	r22,r22,r21
    9800:	1440032e 	bgeu	r2,r17,9810 <__umoddi3+0x404>
    9804:	15c5883a 	add	r2,r2,r23
    9808:	e73fffc4 	addi	fp,fp,-1
    980c:	15c05d2e 	bgeu	r2,r23,9984 <__umoddi3+0x578>
    9810:	1463c83a 	sub	r17,r2,r17
    9814:	8809883a 	mov	r4,r17
    9818:	a00b883a 	mov	r5,r20
    981c:	00018f80 	call	18f8 <__udivsi3>
    9820:	8809883a 	mov	r4,r17
    9824:	a00b883a 	mov	r5,r20
    9828:	1021883a 	mov	r16,r2
    982c:	00019000 	call	1900 <__umodsi3>
    9830:	d8c00417 	ldw	r3,16(sp)
    9834:	d9000217 	ldw	r4,8(sp)
    9838:	1004943a 	slli	r2,r2,16
    983c:	1c23383a 	mul	r17,r3,r16
    9840:	20ffffcc 	andi	r3,r4,65535
    9844:	10ceb03a 	or	r7,r2,r3
    9848:	3c40032e 	bgeu	r7,r17,9858 <__umoddi3+0x44c>
    984c:	3dcf883a 	add	r7,r7,r23
    9850:	843fffc4 	addi	r16,r16,-1
    9854:	3dc0472e 	bgeu	r7,r23,9974 <__umoddi3+0x568>
    9858:	e004943a 	slli	r2,fp,16
    985c:	d9400017 	ldw	r5,0(sp)
    9860:	3c4fc83a 	sub	r7,r7,r17
    9864:	8084b03a 	or	r2,r16,r2
    9868:	28ffffcc 	andi	r3,r5,65535
    986c:	280cd43a 	srli	r6,r5,16
    9870:	100ad43a 	srli	r5,r2,16
    9874:	10bfffcc 	andi	r2,r2,65535
    9878:	10d1383a 	mul	r8,r2,r3
    987c:	28c7383a 	mul	r3,r5,r3
    9880:	1185383a 	mul	r2,r2,r6
    9884:	4008d43a 	srli	r4,r8,16
    9888:	298b383a 	mul	r5,r5,r6
    988c:	10c5883a 	add	r2,r2,r3
    9890:	2089883a 	add	r4,r4,r2
    9894:	20c0022e 	bgeu	r4,r3,98a0 <__umoddi3+0x494>
    9898:	00800074 	movhi	r2,1
    989c:	288b883a 	add	r5,r5,r2
    98a0:	2004d43a 	srli	r2,r4,16
    98a4:	2008943a 	slli	r4,r4,16
    98a8:	40ffffcc 	andi	r3,r8,65535
    98ac:	288b883a 	add	r5,r5,r2
    98b0:	20c9883a 	add	r4,r4,r3
    98b4:	39400b36 	bltu	r7,r5,98e4 <__umoddi3+0x4d8>
    98b8:	39403d26 	beq	r7,r5,99b0 <__umoddi3+0x5a4>
    98bc:	394bc83a 	sub	r5,r7,r5
    98c0:	00000f06 	br	9900 <__umoddi3+0x4f4>
    98c4:	30c5c83a 	sub	r2,r6,r3
    98c8:	1839883a 	mov	fp,r3
    98cc:	b084d83a 	srl	r2,r22,r2
    98d0:	a0c6983a 	sll	r3,r20,r3
    98d4:	8720983a 	sll	r16,r16,fp
    98d8:	b72c983a 	sll	r22,r22,fp
    98dc:	18a8b03a 	or	r20,r3,r2
    98e0:	003f3a06 	br	95cc <__umoddi3+0x1c0>
    98e4:	d8c00017 	ldw	r3,0(sp)
    98e8:	20c5c83a 	sub	r2,r4,r3
    98ec:	2089803a 	cmpltu	r4,r4,r2
    98f0:	2dc7c83a 	sub	r3,r5,r23
    98f4:	1907c83a 	sub	r3,r3,r4
    98f8:	38cbc83a 	sub	r5,r7,r3
    98fc:	1009883a 	mov	r4,r2
    9900:	b105c83a 	sub	r2,r22,r4
    9904:	b087803a 	cmpltu	r3,r22,r2
    9908:	28c7c83a 	sub	r3,r5,r3
    990c:	d9400317 	ldw	r5,12(sp)
    9910:	1544d83a 	srl	r2,r2,r21
    9914:	1948983a 	sll	r4,r3,r5
    9918:	1d46d83a 	srl	r3,r3,r21
    991c:	20a4b03a 	or	r18,r4,r2
    9920:	9011883a 	mov	r8,r18
    9924:	1813883a 	mov	r9,r3
    9928:	003ef606 	br	9504 <__umoddi3+0xf8>
    992c:	01400604 	movi	r5,24
    9930:	2805883a 	mov	r2,r5
    9934:	003ecc06 	br	9468 <__umoddi3+0x5c>
    9938:	01400204 	movi	r5,8
    993c:	2805883a 	mov	r2,r5
    9940:	003ec906 	br	9468 <__umoddi3+0x5c>
    9944:	01400204 	movi	r5,8
    9948:	2805883a 	mov	r2,r5
    994c:	003f0106 	br	9554 <__umoddi3+0x148>
    9950:	01400204 	movi	r5,8
    9954:	2805883a 	mov	r2,r5
    9958:	003f1206 	br	95a4 <__umoddi3+0x198>
    995c:	01400604 	movi	r5,24
    9960:	2805883a 	mov	r2,r5
    9964:	003f0f06 	br	95a4 <__umoddi3+0x198>
    9968:	01400604 	movi	r5,24
    996c:	2805883a 	mov	r2,r5
    9970:	003ef806 	br	9554 <__umoddi3+0x148>
    9974:	3c7fb82e 	bgeu	r7,r17,9858 <__umoddi3+0x44c>
    9978:	843fffc4 	addi	r16,r16,-1
    997c:	3dcf883a 	add	r7,r7,r23
    9980:	003fb506 	br	9858 <__umoddi3+0x44c>
    9984:	147fa22e 	bgeu	r2,r17,9810 <__umoddi3+0x404>
    9988:	e73fffc4 	addi	fp,fp,-1
    998c:	15c5883a 	add	r2,r2,r23
    9990:	003f9f06 	br	9810 <__umoddi3+0x404>
    9994:	147f692e 	bgeu	r2,r17,973c <__umoddi3+0x330>
    9998:	1405883a 	add	r2,r2,r16
    999c:	003f6706 	br	973c <__umoddi3+0x330>
    99a0:	1405883a 	add	r2,r2,r16
    99a4:	003f1906 	br	960c <__umoddi3+0x200>
    99a8:	1405883a 	add	r2,r2,r16
    99ac:	003ec906 	br	94d4 <__umoddi3+0xc8>
    99b0:	b13fcc36 	bltu	r22,r4,98e4 <__umoddi3+0x4d8>
    99b4:	000b883a 	mov	r5,zero
    99b8:	003fd106 	br	9900 <__umoddi3+0x4f4>

000099bc <_fpadd_parts>:
    99bc:	defff804 	addi	sp,sp,-32
    99c0:	dcc00315 	stw	r19,12(sp)
    99c4:	2027883a 	mov	r19,r4
    99c8:	21000017 	ldw	r4,0(r4)
    99cc:	00c00044 	movi	r3,1
    99d0:	dd400515 	stw	r21,20(sp)
    99d4:	dd000415 	stw	r20,16(sp)
    99d8:	ddc00715 	stw	r23,28(sp)
    99dc:	dd800615 	stw	r22,24(sp)
    99e0:	dc800215 	stw	r18,8(sp)
    99e4:	dc400115 	stw	r17,4(sp)
    99e8:	dc000015 	stw	r16,0(sp)
    99ec:	282b883a 	mov	r21,r5
    99f0:	3029883a 	mov	r20,r6
    99f4:	1900632e 	bgeu	r3,r4,9b84 <_fpadd_parts+0x1c8>
    99f8:	28800017 	ldw	r2,0(r5)
    99fc:	1880812e 	bgeu	r3,r2,9c04 <_fpadd_parts+0x248>
    9a00:	00c00104 	movi	r3,4
    9a04:	20c0dc26 	beq	r4,r3,9d78 <_fpadd_parts+0x3bc>
    9a08:	10c07e26 	beq	r2,r3,9c04 <_fpadd_parts+0x248>
    9a0c:	00c00084 	movi	r3,2
    9a10:	10c06726 	beq	r2,r3,9bb0 <_fpadd_parts+0x1f4>
    9a14:	20c07b26 	beq	r4,r3,9c04 <_fpadd_parts+0x248>
    9a18:	9dc00217 	ldw	r23,8(r19)
    9a1c:	28c00217 	ldw	r3,8(r5)
    9a20:	9c400317 	ldw	r17,12(r19)
    9a24:	2bc00317 	ldw	r15,12(r5)
    9a28:	b8cdc83a 	sub	r6,r23,r3
    9a2c:	9c800417 	ldw	r18,16(r19)
    9a30:	2c000417 	ldw	r16,16(r5)
    9a34:	3009883a 	mov	r4,r6
    9a38:	30009716 	blt	r6,zero,9c98 <_fpadd_parts+0x2dc>
    9a3c:	00800fc4 	movi	r2,63
    9a40:	11806b16 	blt	r2,r6,9bf0 <_fpadd_parts+0x234>
    9a44:	0100a40e 	bge	zero,r4,9cd8 <_fpadd_parts+0x31c>
    9a48:	35bff804 	addi	r22,r6,-32
    9a4c:	b000bc16 	blt	r22,zero,9d40 <_fpadd_parts+0x384>
    9a50:	8596d83a 	srl	r11,r16,r22
    9a54:	0019883a 	mov	r12,zero
    9a58:	0013883a 	mov	r9,zero
    9a5c:	01000044 	movi	r4,1
    9a60:	0015883a 	mov	r10,zero
    9a64:	b000be16 	blt	r22,zero,9d60 <_fpadd_parts+0x3a4>
    9a68:	2590983a 	sll	r8,r4,r22
    9a6c:	000f883a 	mov	r7,zero
    9a70:	00bfffc4 	movi	r2,-1
    9a74:	3889883a 	add	r4,r7,r2
    9a78:	408b883a 	add	r5,r8,r2
    9a7c:	21cd803a 	cmpltu	r6,r4,r7
    9a80:	314b883a 	add	r5,r6,r5
    9a84:	7904703a 	and	r2,r15,r4
    9a88:	8146703a 	and	r3,r16,r5
    9a8c:	10c4b03a 	or	r2,r2,r3
    9a90:	10000226 	beq	r2,zero,9a9c <_fpadd_parts+0xe0>
    9a94:	02400044 	movi	r9,1
    9a98:	0015883a 	mov	r10,zero
    9a9c:	5a5eb03a 	or	r15,r11,r9
    9aa0:	62a0b03a 	or	r16,r12,r10
    9aa4:	99400117 	ldw	r5,4(r19)
    9aa8:	a8800117 	ldw	r2,4(r21)
    9aac:	28806e26 	beq	r5,r2,9c68 <_fpadd_parts+0x2ac>
    9ab0:	28006626 	beq	r5,zero,9c4c <_fpadd_parts+0x290>
    9ab4:	7c45c83a 	sub	r2,r15,r17
    9ab8:	7889803a 	cmpltu	r4,r15,r2
    9abc:	8487c83a 	sub	r3,r16,r18
    9ac0:	1909c83a 	sub	r4,r3,r4
    9ac4:	100d883a 	mov	r6,r2
    9ac8:	200f883a 	mov	r7,r4
    9acc:	38007716 	blt	r7,zero,9cac <_fpadd_parts+0x2f0>
    9ad0:	a5c00215 	stw	r23,8(r20)
    9ad4:	a1c00415 	stw	r7,16(r20)
    9ad8:	a0000115 	stw	zero,4(r20)
    9adc:	a1800315 	stw	r6,12(r20)
    9ae0:	a2000317 	ldw	r8,12(r20)
    9ae4:	a2400417 	ldw	r9,16(r20)
    9ae8:	00bfffc4 	movi	r2,-1
    9aec:	408b883a 	add	r5,r8,r2
    9af0:	2a09803a 	cmpltu	r4,r5,r8
    9af4:	488d883a 	add	r6,r9,r2
    9af8:	01c40034 	movhi	r7,4096
    9afc:	39ffffc4 	addi	r7,r7,-1
    9b00:	218d883a 	add	r6,r4,r6
    9b04:	39801736 	bltu	r7,r6,9b64 <_fpadd_parts+0x1a8>
    9b08:	31c06526 	beq	r6,r7,9ca0 <_fpadd_parts+0x2e4>
    9b0c:	a3000217 	ldw	r12,8(r20)
    9b10:	4209883a 	add	r4,r8,r8
    9b14:	00bfffc4 	movi	r2,-1
    9b18:	220f803a 	cmpltu	r7,r4,r8
    9b1c:	4a4b883a 	add	r5,r9,r9
    9b20:	394f883a 	add	r7,r7,r5
    9b24:	2095883a 	add	r10,r4,r2
    9b28:	3897883a 	add	r11,r7,r2
    9b2c:	510d803a 	cmpltu	r6,r10,r4
    9b30:	6099883a 	add	r12,r12,r2
    9b34:	32d7883a 	add	r11,r6,r11
    9b38:	00840034 	movhi	r2,4096
    9b3c:	10bfffc4 	addi	r2,r2,-1
    9b40:	2011883a 	mov	r8,r4
    9b44:	3813883a 	mov	r9,r7
    9b48:	a1000315 	stw	r4,12(r20)
    9b4c:	a1c00415 	stw	r7,16(r20)
    9b50:	a3000215 	stw	r12,8(r20)
    9b54:	12c00336 	bltu	r2,r11,9b64 <_fpadd_parts+0x1a8>
    9b58:	58bfed1e 	bne	r11,r2,9b10 <_fpadd_parts+0x154>
    9b5c:	00bfff84 	movi	r2,-2
    9b60:	12bfeb2e 	bgeu	r2,r10,9b10 <_fpadd_parts+0x154>
    9b64:	a2800417 	ldw	r10,16(r20)
    9b68:	008000c4 	movi	r2,3
    9b6c:	00c80034 	movhi	r3,8192
    9b70:	18ffffc4 	addi	r3,r3,-1
    9b74:	a2400317 	ldw	r9,12(r20)
    9b78:	a0800015 	stw	r2,0(r20)
    9b7c:	1a802336 	bltu	r3,r10,9c0c <_fpadd_parts+0x250>
    9b80:	a027883a 	mov	r19,r20
    9b84:	9805883a 	mov	r2,r19
    9b88:	ddc00717 	ldw	r23,28(sp)
    9b8c:	dd800617 	ldw	r22,24(sp)
    9b90:	dd400517 	ldw	r21,20(sp)
    9b94:	dd000417 	ldw	r20,16(sp)
    9b98:	dcc00317 	ldw	r19,12(sp)
    9b9c:	dc800217 	ldw	r18,8(sp)
    9ba0:	dc400117 	ldw	r17,4(sp)
    9ba4:	dc000017 	ldw	r16,0(sp)
    9ba8:	dec00804 	addi	sp,sp,32
    9bac:	f800283a 	ret
    9bb0:	20fff41e 	bne	r4,r3,9b84 <_fpadd_parts+0x1c8>
    9bb4:	31000015 	stw	r4,0(r6)
    9bb8:	98800117 	ldw	r2,4(r19)
    9bbc:	30800115 	stw	r2,4(r6)
    9bc0:	98c00217 	ldw	r3,8(r19)
    9bc4:	30c00215 	stw	r3,8(r6)
    9bc8:	98800317 	ldw	r2,12(r19)
    9bcc:	30800315 	stw	r2,12(r6)
    9bd0:	98c00417 	ldw	r3,16(r19)
    9bd4:	30c00415 	stw	r3,16(r6)
    9bd8:	98800117 	ldw	r2,4(r19)
    9bdc:	28c00117 	ldw	r3,4(r5)
    9be0:	3027883a 	mov	r19,r6
    9be4:	10c4703a 	and	r2,r2,r3
    9be8:	30800115 	stw	r2,4(r6)
    9bec:	003fe506 	br	9b84 <_fpadd_parts+0x1c8>
    9bf0:	1dc02616 	blt	r3,r23,9c8c <_fpadd_parts+0x2d0>
    9bf4:	0023883a 	mov	r17,zero
    9bf8:	182f883a 	mov	r23,r3
    9bfc:	0025883a 	mov	r18,zero
    9c00:	003fa806 	br	9aa4 <_fpadd_parts+0xe8>
    9c04:	a827883a 	mov	r19,r21
    9c08:	003fde06 	br	9b84 <_fpadd_parts+0x1c8>
    9c0c:	01800044 	movi	r6,1
    9c10:	500497fa 	slli	r2,r10,31
    9c14:	4808d07a 	srli	r4,r9,1
    9c18:	518ad83a 	srl	r5,r10,r6
    9c1c:	a2000217 	ldw	r8,8(r20)
    9c20:	1108b03a 	or	r4,r2,r4
    9c24:	0007883a 	mov	r3,zero
    9c28:	4984703a 	and	r2,r9,r6
    9c2c:	208cb03a 	or	r6,r4,r2
    9c30:	28ceb03a 	or	r7,r5,r3
    9c34:	42000044 	addi	r8,r8,1
    9c38:	a027883a 	mov	r19,r20
    9c3c:	a1c00415 	stw	r7,16(r20)
    9c40:	a2000215 	stw	r8,8(r20)
    9c44:	a1800315 	stw	r6,12(r20)
    9c48:	003fce06 	br	9b84 <_fpadd_parts+0x1c8>
    9c4c:	8bc5c83a 	sub	r2,r17,r15
    9c50:	8889803a 	cmpltu	r4,r17,r2
    9c54:	9407c83a 	sub	r3,r18,r16
    9c58:	1909c83a 	sub	r4,r3,r4
    9c5c:	100d883a 	mov	r6,r2
    9c60:	200f883a 	mov	r7,r4
    9c64:	003f9906 	br	9acc <_fpadd_parts+0x110>
    9c68:	7c45883a 	add	r2,r15,r17
    9c6c:	13c9803a 	cmpltu	r4,r2,r15
    9c70:	8487883a 	add	r3,r16,r18
    9c74:	20c9883a 	add	r4,r4,r3
    9c78:	a1400115 	stw	r5,4(r20)
    9c7c:	a5c00215 	stw	r23,8(r20)
    9c80:	a0800315 	stw	r2,12(r20)
    9c84:	a1000415 	stw	r4,16(r20)
    9c88:	003fb606 	br	9b64 <_fpadd_parts+0x1a8>
    9c8c:	001f883a 	mov	r15,zero
    9c90:	0021883a 	mov	r16,zero
    9c94:	003f8306 	br	9aa4 <_fpadd_parts+0xe8>
    9c98:	018dc83a 	sub	r6,zero,r6
    9c9c:	003f6706 	br	9a3c <_fpadd_parts+0x80>
    9ca0:	00bfff84 	movi	r2,-2
    9ca4:	117faf36 	bltu	r2,r5,9b64 <_fpadd_parts+0x1a8>
    9ca8:	003f9806 	br	9b0c <_fpadd_parts+0x150>
    9cac:	0005883a 	mov	r2,zero
    9cb0:	1189c83a 	sub	r4,r2,r6
    9cb4:	1105803a 	cmpltu	r2,r2,r4
    9cb8:	01cbc83a 	sub	r5,zero,r7
    9cbc:	2885c83a 	sub	r2,r5,r2
    9cc0:	01800044 	movi	r6,1
    9cc4:	a1800115 	stw	r6,4(r20)
    9cc8:	a5c00215 	stw	r23,8(r20)
    9ccc:	a1000315 	stw	r4,12(r20)
    9cd0:	a0800415 	stw	r2,16(r20)
    9cd4:	003f8206 	br	9ae0 <_fpadd_parts+0x124>
    9cd8:	203f7226 	beq	r4,zero,9aa4 <_fpadd_parts+0xe8>
    9cdc:	35bff804 	addi	r22,r6,-32
    9ce0:	b9af883a 	add	r23,r23,r6
    9ce4:	b0003116 	blt	r22,zero,9dac <_fpadd_parts+0x3f0>
    9ce8:	959ad83a 	srl	r13,r18,r22
    9cec:	001d883a 	mov	r14,zero
    9cf0:	000f883a 	mov	r7,zero
    9cf4:	01000044 	movi	r4,1
    9cf8:	0011883a 	mov	r8,zero
    9cfc:	b0002516 	blt	r22,zero,9d94 <_fpadd_parts+0x3d8>
    9d00:	2594983a 	sll	r10,r4,r22
    9d04:	0013883a 	mov	r9,zero
    9d08:	00bfffc4 	movi	r2,-1
    9d0c:	4889883a 	add	r4,r9,r2
    9d10:	508b883a 	add	r5,r10,r2
    9d14:	224d803a 	cmpltu	r6,r4,r9
    9d18:	314b883a 	add	r5,r6,r5
    9d1c:	8904703a 	and	r2,r17,r4
    9d20:	9146703a 	and	r3,r18,r5
    9d24:	10c4b03a 	or	r2,r2,r3
    9d28:	10000226 	beq	r2,zero,9d34 <_fpadd_parts+0x378>
    9d2c:	01c00044 	movi	r7,1
    9d30:	0011883a 	mov	r8,zero
    9d34:	69e2b03a 	or	r17,r13,r7
    9d38:	7224b03a 	or	r18,r14,r8
    9d3c:	003f5906 	br	9aa4 <_fpadd_parts+0xe8>
    9d40:	8407883a 	add	r3,r16,r16
    9d44:	008007c4 	movi	r2,31
    9d48:	1185c83a 	sub	r2,r2,r6
    9d4c:	1886983a 	sll	r3,r3,r2
    9d50:	7996d83a 	srl	r11,r15,r6
    9d54:	8198d83a 	srl	r12,r16,r6
    9d58:	1ad6b03a 	or	r11,r3,r11
    9d5c:	003f3e06 	br	9a58 <_fpadd_parts+0x9c>
    9d60:	2006d07a 	srli	r3,r4,1
    9d64:	008007c4 	movi	r2,31
    9d68:	1185c83a 	sub	r2,r2,r6
    9d6c:	1890d83a 	srl	r8,r3,r2
    9d70:	218e983a 	sll	r7,r4,r6
    9d74:	003f3e06 	br	9a70 <_fpadd_parts+0xb4>
    9d78:	113f821e 	bne	r2,r4,9b84 <_fpadd_parts+0x1c8>
    9d7c:	28c00117 	ldw	r3,4(r5)
    9d80:	98800117 	ldw	r2,4(r19)
    9d84:	10ff7f26 	beq	r2,r3,9b84 <_fpadd_parts+0x1c8>
    9d88:	04c00074 	movhi	r19,1
    9d8c:	9cf78c04 	addi	r19,r19,-8656
    9d90:	003f7c06 	br	9b84 <_fpadd_parts+0x1c8>
    9d94:	2006d07a 	srli	r3,r4,1
    9d98:	008007c4 	movi	r2,31
    9d9c:	1185c83a 	sub	r2,r2,r6
    9da0:	1894d83a 	srl	r10,r3,r2
    9da4:	2192983a 	sll	r9,r4,r6
    9da8:	003fd706 	br	9d08 <_fpadd_parts+0x34c>
    9dac:	9487883a 	add	r3,r18,r18
    9db0:	008007c4 	movi	r2,31
    9db4:	1185c83a 	sub	r2,r2,r6
    9db8:	1886983a 	sll	r3,r3,r2
    9dbc:	899ad83a 	srl	r13,r17,r6
    9dc0:	919cd83a 	srl	r14,r18,r6
    9dc4:	1b5ab03a 	or	r13,r3,r13
    9dc8:	003fc906 	br	9cf0 <_fpadd_parts+0x334>

00009dcc <__subdf3>:
    9dcc:	deffea04 	addi	sp,sp,-88
    9dd0:	dcc01415 	stw	r19,80(sp)
    9dd4:	dcc00404 	addi	r19,sp,16
    9dd8:	2011883a 	mov	r8,r4
    9ddc:	2813883a 	mov	r9,r5
    9de0:	dc401315 	stw	r17,76(sp)
    9de4:	d809883a 	mov	r4,sp
    9de8:	980b883a 	mov	r5,r19
    9dec:	dc400904 	addi	r17,sp,36
    9df0:	dfc01515 	stw	ra,84(sp)
    9df4:	da400115 	stw	r9,4(sp)
    9df8:	d9c00315 	stw	r7,12(sp)
    9dfc:	da000015 	stw	r8,0(sp)
    9e00:	d9800215 	stw	r6,8(sp)
    9e04:	000af140 	call	af14 <__unpack_d>
    9e08:	d9000204 	addi	r4,sp,8
    9e0c:	880b883a 	mov	r5,r17
    9e10:	000af140 	call	af14 <__unpack_d>
    9e14:	d8800a17 	ldw	r2,40(sp)
    9e18:	880b883a 	mov	r5,r17
    9e1c:	9809883a 	mov	r4,r19
    9e20:	d9800e04 	addi	r6,sp,56
    9e24:	1080005c 	xori	r2,r2,1
    9e28:	d8800a15 	stw	r2,40(sp)
    9e2c:	00099bc0 	call	99bc <_fpadd_parts>
    9e30:	1009883a 	mov	r4,r2
    9e34:	000ac000 	call	ac00 <__pack_d>
    9e38:	dfc01517 	ldw	ra,84(sp)
    9e3c:	dcc01417 	ldw	r19,80(sp)
    9e40:	dc401317 	ldw	r17,76(sp)
    9e44:	dec01604 	addi	sp,sp,88
    9e48:	f800283a 	ret

00009e4c <__adddf3>:
    9e4c:	deffea04 	addi	sp,sp,-88
    9e50:	dcc01415 	stw	r19,80(sp)
    9e54:	dcc00404 	addi	r19,sp,16
    9e58:	2011883a 	mov	r8,r4
    9e5c:	2813883a 	mov	r9,r5
    9e60:	dc401315 	stw	r17,76(sp)
    9e64:	d809883a 	mov	r4,sp
    9e68:	980b883a 	mov	r5,r19
    9e6c:	dc400904 	addi	r17,sp,36
    9e70:	dfc01515 	stw	ra,84(sp)
    9e74:	da400115 	stw	r9,4(sp)
    9e78:	d9c00315 	stw	r7,12(sp)
    9e7c:	da000015 	stw	r8,0(sp)
    9e80:	d9800215 	stw	r6,8(sp)
    9e84:	000af140 	call	af14 <__unpack_d>
    9e88:	d9000204 	addi	r4,sp,8
    9e8c:	880b883a 	mov	r5,r17
    9e90:	000af140 	call	af14 <__unpack_d>
    9e94:	d9800e04 	addi	r6,sp,56
    9e98:	9809883a 	mov	r4,r19
    9e9c:	880b883a 	mov	r5,r17
    9ea0:	00099bc0 	call	99bc <_fpadd_parts>
    9ea4:	1009883a 	mov	r4,r2
    9ea8:	000ac000 	call	ac00 <__pack_d>
    9eac:	dfc01517 	ldw	ra,84(sp)
    9eb0:	dcc01417 	ldw	r19,80(sp)
    9eb4:	dc401317 	ldw	r17,76(sp)
    9eb8:	dec01604 	addi	sp,sp,88
    9ebc:	f800283a 	ret

00009ec0 <__muldf3>:
    9ec0:	deffe004 	addi	sp,sp,-128
    9ec4:	dc401815 	stw	r17,96(sp)
    9ec8:	dc400404 	addi	r17,sp,16
    9ecc:	2011883a 	mov	r8,r4
    9ed0:	2813883a 	mov	r9,r5
    9ed4:	dc001715 	stw	r16,92(sp)
    9ed8:	d809883a 	mov	r4,sp
    9edc:	880b883a 	mov	r5,r17
    9ee0:	dc000904 	addi	r16,sp,36
    9ee4:	dfc01f15 	stw	ra,124(sp)
    9ee8:	da400115 	stw	r9,4(sp)
    9eec:	d9c00315 	stw	r7,12(sp)
    9ef0:	da000015 	stw	r8,0(sp)
    9ef4:	d9800215 	stw	r6,8(sp)
    9ef8:	ddc01e15 	stw	r23,120(sp)
    9efc:	dd801d15 	stw	r22,116(sp)
    9f00:	dd401c15 	stw	r21,112(sp)
    9f04:	dd001b15 	stw	r20,108(sp)
    9f08:	dcc01a15 	stw	r19,104(sp)
    9f0c:	dc801915 	stw	r18,100(sp)
    9f10:	000af140 	call	af14 <__unpack_d>
    9f14:	d9000204 	addi	r4,sp,8
    9f18:	800b883a 	mov	r5,r16
    9f1c:	000af140 	call	af14 <__unpack_d>
    9f20:	d9000417 	ldw	r4,16(sp)
    9f24:	00800044 	movi	r2,1
    9f28:	1100102e 	bgeu	r2,r4,9f6c <__muldf3+0xac>
    9f2c:	d8c00917 	ldw	r3,36(sp)
    9f30:	10c0062e 	bgeu	r2,r3,9f4c <__muldf3+0x8c>
    9f34:	00800104 	movi	r2,4
    9f38:	20800a26 	beq	r4,r2,9f64 <__muldf3+0xa4>
    9f3c:	1880cc26 	beq	r3,r2,a270 <__muldf3+0x3b0>
    9f40:	00800084 	movi	r2,2
    9f44:	20800926 	beq	r4,r2,9f6c <__muldf3+0xac>
    9f48:	1880191e 	bne	r3,r2,9fb0 <__muldf3+0xf0>
    9f4c:	d8c00a17 	ldw	r3,40(sp)
    9f50:	d8800517 	ldw	r2,20(sp)
    9f54:	8009883a 	mov	r4,r16
    9f58:	10c4c03a 	cmpne	r2,r2,r3
    9f5c:	d8800a15 	stw	r2,40(sp)
    9f60:	00000706 	br	9f80 <__muldf3+0xc0>
    9f64:	00800084 	movi	r2,2
    9f68:	1880c326 	beq	r3,r2,a278 <__muldf3+0x3b8>
    9f6c:	d8800517 	ldw	r2,20(sp)
    9f70:	d8c00a17 	ldw	r3,40(sp)
    9f74:	8809883a 	mov	r4,r17
    9f78:	10c4c03a 	cmpne	r2,r2,r3
    9f7c:	d8800515 	stw	r2,20(sp)
    9f80:	000ac000 	call	ac00 <__pack_d>
    9f84:	dfc01f17 	ldw	ra,124(sp)
    9f88:	ddc01e17 	ldw	r23,120(sp)
    9f8c:	dd801d17 	ldw	r22,116(sp)
    9f90:	dd401c17 	ldw	r21,112(sp)
    9f94:	dd001b17 	ldw	r20,108(sp)
    9f98:	dcc01a17 	ldw	r19,104(sp)
    9f9c:	dc801917 	ldw	r18,100(sp)
    9fa0:	dc401817 	ldw	r17,96(sp)
    9fa4:	dc001717 	ldw	r16,92(sp)
    9fa8:	dec02004 	addi	sp,sp,128
    9fac:	f800283a 	ret
    9fb0:	dd800717 	ldw	r22,28(sp)
    9fb4:	dc800c17 	ldw	r18,48(sp)
    9fb8:	002b883a 	mov	r21,zero
    9fbc:	0023883a 	mov	r17,zero
    9fc0:	a80b883a 	mov	r5,r21
    9fc4:	b00d883a 	mov	r6,r22
    9fc8:	880f883a 	mov	r7,r17
    9fcc:	ddc00817 	ldw	r23,32(sp)
    9fd0:	dcc00d17 	ldw	r19,52(sp)
    9fd4:	9009883a 	mov	r4,r18
    9fd8:	000aae80 	call	aae8 <__muldi3>
    9fdc:	001b883a 	mov	r13,zero
    9fe0:	680f883a 	mov	r7,r13
    9fe4:	b009883a 	mov	r4,r22
    9fe8:	000b883a 	mov	r5,zero
    9fec:	980d883a 	mov	r6,r19
    9ff0:	b82d883a 	mov	r22,r23
    9ff4:	002f883a 	mov	r23,zero
    9ff8:	db401615 	stw	r13,88(sp)
    9ffc:	d8801315 	stw	r2,76(sp)
    a000:	d8c01415 	stw	r3,80(sp)
    a004:	dcc01515 	stw	r19,84(sp)
    a008:	000aae80 	call	aae8 <__muldi3>
    a00c:	b00d883a 	mov	r6,r22
    a010:	000b883a 	mov	r5,zero
    a014:	9009883a 	mov	r4,r18
    a018:	b80f883a 	mov	r7,r23
    a01c:	1021883a 	mov	r16,r2
    a020:	1823883a 	mov	r17,r3
    a024:	000aae80 	call	aae8 <__muldi3>
    a028:	8085883a 	add	r2,r16,r2
    a02c:	140d803a 	cmpltu	r6,r2,r16
    a030:	88c7883a 	add	r3,r17,r3
    a034:	30cd883a 	add	r6,r6,r3
    a038:	1029883a 	mov	r20,r2
    a03c:	302b883a 	mov	r21,r6
    a040:	da801317 	ldw	r10,76(sp)
    a044:	dac01417 	ldw	r11,80(sp)
    a048:	db001517 	ldw	r12,84(sp)
    a04c:	db401617 	ldw	r13,88(sp)
    a050:	3440612e 	bgeu	r6,r17,a1d8 <__muldf3+0x318>
    a054:	0009883a 	mov	r4,zero
    a058:	5105883a 	add	r2,r10,r4
    a05c:	128d803a 	cmpltu	r6,r2,r10
    a060:	5d07883a 	add	r3,r11,r20
    a064:	30cd883a 	add	r6,r6,r3
    a068:	0021883a 	mov	r16,zero
    a06c:	04400044 	movi	r17,1
    a070:	1025883a 	mov	r18,r2
    a074:	3027883a 	mov	r19,r6
    a078:	32c06236 	bltu	r6,r11,a204 <__muldf3+0x344>
    a07c:	59807a26 	beq	r11,r6,a268 <__muldf3+0x3a8>
    a080:	680b883a 	mov	r5,r13
    a084:	b80f883a 	mov	r7,r23
    a088:	6009883a 	mov	r4,r12
    a08c:	b00d883a 	mov	r6,r22
    a090:	000aae80 	call	aae8 <__muldi3>
    a094:	1009883a 	mov	r4,r2
    a098:	000f883a 	mov	r7,zero
    a09c:	1545883a 	add	r2,r2,r21
    a0a0:	1111803a 	cmpltu	r8,r2,r4
    a0a4:	19c7883a 	add	r3,r3,r7
    a0a8:	40c7883a 	add	r3,r8,r3
    a0ac:	88cb883a 	add	r5,r17,r3
    a0b0:	d8c00617 	ldw	r3,24(sp)
    a0b4:	8089883a 	add	r4,r16,r2
    a0b8:	d8800b17 	ldw	r2,44(sp)
    a0bc:	18c00104 	addi	r3,r3,4
    a0c0:	240d803a 	cmpltu	r6,r4,r16
    a0c4:	10c7883a 	add	r3,r2,r3
    a0c8:	2013883a 	mov	r9,r4
    a0cc:	d8800a17 	ldw	r2,40(sp)
    a0d0:	d9000517 	ldw	r4,20(sp)
    a0d4:	314d883a 	add	r6,r6,r5
    a0d8:	3015883a 	mov	r10,r6
    a0dc:	2088c03a 	cmpne	r4,r4,r2
    a0e0:	00880034 	movhi	r2,8192
    a0e4:	10bfffc4 	addi	r2,r2,-1
    a0e8:	d9000f15 	stw	r4,60(sp)
    a0ec:	d8c01015 	stw	r3,64(sp)
    a0f0:	1180162e 	bgeu	r2,r6,a14c <__muldf3+0x28c>
    a0f4:	1811883a 	mov	r8,r3
    a0f8:	101f883a 	mov	r15,r2
    a0fc:	980497fa 	slli	r2,r19,31
    a100:	9016d07a 	srli	r11,r18,1
    a104:	500697fa 	slli	r3,r10,31
    a108:	480cd07a 	srli	r6,r9,1
    a10c:	500ed07a 	srli	r7,r10,1
    a110:	12d6b03a 	or	r11,r2,r11
    a114:	00800044 	movi	r2,1
    a118:	198cb03a 	or	r6,r3,r6
    a11c:	4888703a 	and	r4,r9,r2
    a120:	9818d07a 	srli	r12,r19,1
    a124:	001b883a 	mov	r13,zero
    a128:	03a00034 	movhi	r14,32768
    a12c:	3013883a 	mov	r9,r6
    a130:	3815883a 	mov	r10,r7
    a134:	4091883a 	add	r8,r8,r2
    a138:	20000226 	beq	r4,zero,a144 <__muldf3+0x284>
    a13c:	5b64b03a 	or	r18,r11,r13
    a140:	63a6b03a 	or	r19,r12,r14
    a144:	7abfed36 	bltu	r15,r10,a0fc <__muldf3+0x23c>
    a148:	da001015 	stw	r8,64(sp)
    a14c:	00840034 	movhi	r2,4096
    a150:	10bfffc4 	addi	r2,r2,-1
    a154:	12801436 	bltu	r2,r10,a1a8 <__muldf3+0x2e8>
    a158:	da001017 	ldw	r8,64(sp)
    a15c:	101f883a 	mov	r15,r2
    a160:	4a45883a 	add	r2,r9,r9
    a164:	124d803a 	cmpltu	r6,r2,r9
    a168:	5287883a 	add	r3,r10,r10
    a16c:	9497883a 	add	r11,r18,r18
    a170:	5c8f803a 	cmpltu	r7,r11,r18
    a174:	9cd9883a 	add	r12,r19,r19
    a178:	01000044 	movi	r4,1
    a17c:	30cd883a 	add	r6,r6,r3
    a180:	3b0f883a 	add	r7,r7,r12
    a184:	423fffc4 	addi	r8,r8,-1
    a188:	1013883a 	mov	r9,r2
    a18c:	3015883a 	mov	r10,r6
    a190:	111ab03a 	or	r13,r2,r4
    a194:	98003016 	blt	r19,zero,a258 <__muldf3+0x398>
    a198:	5825883a 	mov	r18,r11
    a19c:	3827883a 	mov	r19,r7
    a1a0:	7abfef2e 	bgeu	r15,r10,a160 <__muldf3+0x2a0>
    a1a4:	da001015 	stw	r8,64(sp)
    a1a8:	00803fc4 	movi	r2,255
    a1ac:	488e703a 	and	r7,r9,r2
    a1b0:	00802004 	movi	r2,128
    a1b4:	0007883a 	mov	r3,zero
    a1b8:	0011883a 	mov	r8,zero
    a1bc:	38801826 	beq	r7,r2,a220 <__muldf3+0x360>
    a1c0:	008000c4 	movi	r2,3
    a1c4:	d9000e04 	addi	r4,sp,56
    a1c8:	da801215 	stw	r10,72(sp)
    a1cc:	d8800e15 	stw	r2,56(sp)
    a1d0:	da401115 	stw	r9,68(sp)
    a1d4:	003f6a06 	br	9f80 <__muldf3+0xc0>
    a1d8:	89802126 	beq	r17,r6,a260 <__muldf3+0x3a0>
    a1dc:	0009883a 	mov	r4,zero
    a1e0:	5105883a 	add	r2,r10,r4
    a1e4:	128d803a 	cmpltu	r6,r2,r10
    a1e8:	5d07883a 	add	r3,r11,r20
    a1ec:	30cd883a 	add	r6,r6,r3
    a1f0:	0021883a 	mov	r16,zero
    a1f4:	0023883a 	mov	r17,zero
    a1f8:	1025883a 	mov	r18,r2
    a1fc:	3027883a 	mov	r19,r6
    a200:	32ff9e2e 	bgeu	r6,r11,a07c <__muldf3+0x1bc>
    a204:	00800044 	movi	r2,1
    a208:	8089883a 	add	r4,r16,r2
    a20c:	240d803a 	cmpltu	r6,r4,r16
    a210:	344d883a 	add	r6,r6,r17
    a214:	2021883a 	mov	r16,r4
    a218:	3023883a 	mov	r17,r6
    a21c:	003f9806 	br	a080 <__muldf3+0x1c0>
    a220:	403fe71e 	bne	r8,zero,a1c0 <__muldf3+0x300>
    a224:	01004004 	movi	r4,256
    a228:	4904703a 	and	r2,r9,r4
    a22c:	10c4b03a 	or	r2,r2,r3
    a230:	103fe31e 	bne	r2,zero,a1c0 <__muldf3+0x300>
    a234:	94c4b03a 	or	r2,r18,r19
    a238:	103fe126 	beq	r2,zero,a1c0 <__muldf3+0x300>
    a23c:	49c5883a 	add	r2,r9,r7
    a240:	1251803a 	cmpltu	r8,r2,r9
    a244:	4291883a 	add	r8,r8,r10
    a248:	013fc004 	movi	r4,-256
    a24c:	1112703a 	and	r9,r2,r4
    a250:	4015883a 	mov	r10,r8
    a254:	003fda06 	br	a1c0 <__muldf3+0x300>
    a258:	6813883a 	mov	r9,r13
    a25c:	003fce06 	br	a198 <__muldf3+0x2d8>
    a260:	143f7c36 	bltu	r2,r16,a054 <__muldf3+0x194>
    a264:	003fdd06 	br	a1dc <__muldf3+0x31c>
    a268:	12bf852e 	bgeu	r2,r10,a080 <__muldf3+0x1c0>
    a26c:	003fe506 	br	a204 <__muldf3+0x344>
    a270:	00800084 	movi	r2,2
    a274:	20bf351e 	bne	r4,r2,9f4c <__muldf3+0x8c>
    a278:	01000074 	movhi	r4,1
    a27c:	21378c04 	addi	r4,r4,-8656
    a280:	003f3f06 	br	9f80 <__muldf3+0xc0>

0000a284 <__divdf3>:
    a284:	deffed04 	addi	sp,sp,-76
    a288:	dcc01115 	stw	r19,68(sp)
    a28c:	dcc00404 	addi	r19,sp,16
    a290:	2011883a 	mov	r8,r4
    a294:	2813883a 	mov	r9,r5
    a298:	dc000e15 	stw	r16,56(sp)
    a29c:	d809883a 	mov	r4,sp
    a2a0:	980b883a 	mov	r5,r19
    a2a4:	dc000904 	addi	r16,sp,36
    a2a8:	dfc01215 	stw	ra,72(sp)
    a2ac:	da400115 	stw	r9,4(sp)
    a2b0:	d9c00315 	stw	r7,12(sp)
    a2b4:	da000015 	stw	r8,0(sp)
    a2b8:	d9800215 	stw	r6,8(sp)
    a2bc:	dc801015 	stw	r18,64(sp)
    a2c0:	dc400f15 	stw	r17,60(sp)
    a2c4:	000af140 	call	af14 <__unpack_d>
    a2c8:	d9000204 	addi	r4,sp,8
    a2cc:	800b883a 	mov	r5,r16
    a2d0:	000af140 	call	af14 <__unpack_d>
    a2d4:	d9000417 	ldw	r4,16(sp)
    a2d8:	00800044 	movi	r2,1
    a2dc:	11000b2e 	bgeu	r2,r4,a30c <__divdf3+0x88>
    a2e0:	d9400917 	ldw	r5,36(sp)
    a2e4:	1140762e 	bgeu	r2,r5,a4c0 <__divdf3+0x23c>
    a2e8:	d8800517 	ldw	r2,20(sp)
    a2ec:	d8c00a17 	ldw	r3,40(sp)
    a2f0:	01800104 	movi	r6,4
    a2f4:	10c4f03a 	xor	r2,r2,r3
    a2f8:	d8800515 	stw	r2,20(sp)
    a2fc:	21800226 	beq	r4,r6,a308 <__divdf3+0x84>
    a300:	00800084 	movi	r2,2
    a304:	2080141e 	bne	r4,r2,a358 <__divdf3+0xd4>
    a308:	29000926 	beq	r5,r4,a330 <__divdf3+0xac>
    a30c:	9809883a 	mov	r4,r19
    a310:	000ac000 	call	ac00 <__pack_d>
    a314:	dfc01217 	ldw	ra,72(sp)
    a318:	dcc01117 	ldw	r19,68(sp)
    a31c:	dc801017 	ldw	r18,64(sp)
    a320:	dc400f17 	ldw	r17,60(sp)
    a324:	dc000e17 	ldw	r16,56(sp)
    a328:	dec01304 	addi	sp,sp,76
    a32c:	f800283a 	ret
    a330:	01000074 	movhi	r4,1
    a334:	21378c04 	addi	r4,r4,-8656
    a338:	000ac000 	call	ac00 <__pack_d>
    a33c:	dfc01217 	ldw	ra,72(sp)
    a340:	dcc01117 	ldw	r19,68(sp)
    a344:	dc801017 	ldw	r18,64(sp)
    a348:	dc400f17 	ldw	r17,60(sp)
    a34c:	dc000e17 	ldw	r16,56(sp)
    a350:	dec01304 	addi	sp,sp,76
    a354:	f800283a 	ret
    a358:	29805b26 	beq	r5,r6,a4c8 <__divdf3+0x244>
    a35c:	28802d26 	beq	r5,r2,a414 <__divdf3+0x190>
    a360:	d8c00617 	ldw	r3,24(sp)
    a364:	d8800b17 	ldw	r2,44(sp)
    a368:	d9c00817 	ldw	r7,32(sp)
    a36c:	dc400d17 	ldw	r17,52(sp)
    a370:	188bc83a 	sub	r5,r3,r2
    a374:	d9800717 	ldw	r6,28(sp)
    a378:	dc000c17 	ldw	r16,48(sp)
    a37c:	d9400615 	stw	r5,24(sp)
    a380:	3c403836 	bltu	r7,r17,a464 <__divdf3+0x1e0>
    a384:	89c03626 	beq	r17,r7,a460 <__divdf3+0x1dc>
    a388:	0015883a 	mov	r10,zero
    a38c:	001d883a 	mov	r14,zero
    a390:	02c40034 	movhi	r11,4096
    a394:	001f883a 	mov	r15,zero
    a398:	003f883a 	mov	ra,zero
    a39c:	04800f44 	movi	r18,61
    a3a0:	00000f06 	br	a3e0 <__divdf3+0x15c>
    a3a4:	601d883a 	mov	r14,r12
    a3a8:	681f883a 	mov	r15,r13
    a3ac:	400d883a 	mov	r6,r8
    a3b0:	100f883a 	mov	r7,r2
    a3b4:	3191883a 	add	r8,r6,r6
    a3b8:	5808d07a 	srli	r4,r11,1
    a3bc:	4185803a 	cmpltu	r2,r8,r6
    a3c0:	39d3883a 	add	r9,r7,r7
    a3c4:	28c6b03a 	or	r3,r5,r3
    a3c8:	1245883a 	add	r2,r2,r9
    a3cc:	1815883a 	mov	r10,r3
    a3d0:	2017883a 	mov	r11,r4
    a3d4:	400d883a 	mov	r6,r8
    a3d8:	100f883a 	mov	r7,r2
    a3dc:	fc801726 	beq	ra,r18,a43c <__divdf3+0x1b8>
    a3e0:	580a97fa 	slli	r5,r11,31
    a3e4:	5006d07a 	srli	r3,r10,1
    a3e8:	ffc00044 	addi	ra,ra,1
    a3ec:	3c7ff136 	bltu	r7,r17,a3b4 <__divdf3+0x130>
    a3f0:	3411c83a 	sub	r8,r6,r16
    a3f4:	3205803a 	cmpltu	r2,r6,r8
    a3f8:	3c53c83a 	sub	r9,r7,r17
    a3fc:	7298b03a 	or	r12,r14,r10
    a400:	7adab03a 	or	r13,r15,r11
    a404:	4885c83a 	sub	r2,r9,r2
    a408:	89ffe61e 	bne	r17,r7,a3a4 <__divdf3+0x120>
    a40c:	343fe936 	bltu	r6,r16,a3b4 <__divdf3+0x130>
    a410:	003fe406 	br	a3a4 <__divdf3+0x120>
    a414:	9809883a 	mov	r4,r19
    a418:	d9800415 	stw	r6,16(sp)
    a41c:	000ac000 	call	ac00 <__pack_d>
    a420:	dfc01217 	ldw	ra,72(sp)
    a424:	dcc01117 	ldw	r19,68(sp)
    a428:	dc801017 	ldw	r18,64(sp)
    a42c:	dc400f17 	ldw	r17,60(sp)
    a430:	dc000e17 	ldw	r16,56(sp)
    a434:	dec01304 	addi	sp,sp,76
    a438:	f800283a 	ret
    a43c:	00803fc4 	movi	r2,255
    a440:	7090703a 	and	r8,r14,r2
    a444:	00802004 	movi	r2,128
    a448:	0007883a 	mov	r3,zero
    a44c:	0013883a 	mov	r9,zero
    a450:	40800d26 	beq	r8,r2,a488 <__divdf3+0x204>
    a454:	dbc00815 	stw	r15,32(sp)
    a458:	db800715 	stw	r14,28(sp)
    a45c:	003fab06 	br	a30c <__divdf3+0x88>
    a460:	343fc92e 	bgeu	r6,r16,a388 <__divdf3+0x104>
    a464:	3185883a 	add	r2,r6,r6
    a468:	1189803a 	cmpltu	r4,r2,r6
    a46c:	39c7883a 	add	r3,r7,r7
    a470:	20c9883a 	add	r4,r4,r3
    a474:	297fffc4 	addi	r5,r5,-1
    a478:	100d883a 	mov	r6,r2
    a47c:	200f883a 	mov	r7,r4
    a480:	d9400615 	stw	r5,24(sp)
    a484:	003fc006 	br	a388 <__divdf3+0x104>
    a488:	483ff21e 	bne	r9,zero,a454 <__divdf3+0x1d0>
    a48c:	01004004 	movi	r4,256
    a490:	7104703a 	and	r2,r14,r4
    a494:	10c4b03a 	or	r2,r2,r3
    a498:	103fee1e 	bne	r2,zero,a454 <__divdf3+0x1d0>
    a49c:	31c4b03a 	or	r2,r6,r7
    a4a0:	103fec26 	beq	r2,zero,a454 <__divdf3+0x1d0>
    a4a4:	7205883a 	add	r2,r14,r8
    a4a8:	1391803a 	cmpltu	r8,r2,r14
    a4ac:	43d1883a 	add	r8,r8,r15
    a4b0:	013fc004 	movi	r4,-256
    a4b4:	111c703a 	and	r14,r2,r4
    a4b8:	401f883a 	mov	r15,r8
    a4bc:	003fe506 	br	a454 <__divdf3+0x1d0>
    a4c0:	8009883a 	mov	r4,r16
    a4c4:	003f9206 	br	a310 <__divdf3+0x8c>
    a4c8:	9809883a 	mov	r4,r19
    a4cc:	d8000715 	stw	zero,28(sp)
    a4d0:	d8000815 	stw	zero,32(sp)
    a4d4:	d8000615 	stw	zero,24(sp)
    a4d8:	003f8d06 	br	a310 <__divdf3+0x8c>

0000a4dc <__eqdf2>:
    a4dc:	deffef04 	addi	sp,sp,-68
    a4e0:	dc400f15 	stw	r17,60(sp)
    a4e4:	dc400404 	addi	r17,sp,16
    a4e8:	2005883a 	mov	r2,r4
    a4ec:	2807883a 	mov	r3,r5
    a4f0:	dc000e15 	stw	r16,56(sp)
    a4f4:	d809883a 	mov	r4,sp
    a4f8:	880b883a 	mov	r5,r17
    a4fc:	dc000904 	addi	r16,sp,36
    a500:	d8c00115 	stw	r3,4(sp)
    a504:	d8800015 	stw	r2,0(sp)
    a508:	d9800215 	stw	r6,8(sp)
    a50c:	dfc01015 	stw	ra,64(sp)
    a510:	d9c00315 	stw	r7,12(sp)
    a514:	000af140 	call	af14 <__unpack_d>
    a518:	d9000204 	addi	r4,sp,8
    a51c:	800b883a 	mov	r5,r16
    a520:	000af140 	call	af14 <__unpack_d>
    a524:	d8800417 	ldw	r2,16(sp)
    a528:	00c00044 	movi	r3,1
    a52c:	180d883a 	mov	r6,r3
    a530:	1880062e 	bgeu	r3,r2,a54c <__eqdf2+0x70>
    a534:	d8800917 	ldw	r2,36(sp)
    a538:	8809883a 	mov	r4,r17
    a53c:	800b883a 	mov	r5,r16
    a540:	1880022e 	bgeu	r3,r2,a54c <__eqdf2+0x70>
    a544:	000b04c0 	call	b04c <__fpcmp_parts_d>
    a548:	100d883a 	mov	r6,r2
    a54c:	3005883a 	mov	r2,r6
    a550:	dfc01017 	ldw	ra,64(sp)
    a554:	dc400f17 	ldw	r17,60(sp)
    a558:	dc000e17 	ldw	r16,56(sp)
    a55c:	dec01104 	addi	sp,sp,68
    a560:	f800283a 	ret

0000a564 <__nedf2>:
    a564:	deffef04 	addi	sp,sp,-68
    a568:	dc400f15 	stw	r17,60(sp)
    a56c:	dc400404 	addi	r17,sp,16
    a570:	2005883a 	mov	r2,r4
    a574:	2807883a 	mov	r3,r5
    a578:	dc000e15 	stw	r16,56(sp)
    a57c:	d809883a 	mov	r4,sp
    a580:	880b883a 	mov	r5,r17
    a584:	dc000904 	addi	r16,sp,36
    a588:	d8c00115 	stw	r3,4(sp)
    a58c:	d8800015 	stw	r2,0(sp)
    a590:	d9800215 	stw	r6,8(sp)
    a594:	dfc01015 	stw	ra,64(sp)
    a598:	d9c00315 	stw	r7,12(sp)
    a59c:	000af140 	call	af14 <__unpack_d>
    a5a0:	d9000204 	addi	r4,sp,8
    a5a4:	800b883a 	mov	r5,r16
    a5a8:	000af140 	call	af14 <__unpack_d>
    a5ac:	d8800417 	ldw	r2,16(sp)
    a5b0:	00c00044 	movi	r3,1
    a5b4:	180d883a 	mov	r6,r3
    a5b8:	1880062e 	bgeu	r3,r2,a5d4 <__nedf2+0x70>
    a5bc:	d8800917 	ldw	r2,36(sp)
    a5c0:	8809883a 	mov	r4,r17
    a5c4:	800b883a 	mov	r5,r16
    a5c8:	1880022e 	bgeu	r3,r2,a5d4 <__nedf2+0x70>
    a5cc:	000b04c0 	call	b04c <__fpcmp_parts_d>
    a5d0:	100d883a 	mov	r6,r2
    a5d4:	3005883a 	mov	r2,r6
    a5d8:	dfc01017 	ldw	ra,64(sp)
    a5dc:	dc400f17 	ldw	r17,60(sp)
    a5e0:	dc000e17 	ldw	r16,56(sp)
    a5e4:	dec01104 	addi	sp,sp,68
    a5e8:	f800283a 	ret

0000a5ec <__gtdf2>:
    a5ec:	deffef04 	addi	sp,sp,-68
    a5f0:	dc400f15 	stw	r17,60(sp)
    a5f4:	dc400404 	addi	r17,sp,16
    a5f8:	2005883a 	mov	r2,r4
    a5fc:	2807883a 	mov	r3,r5
    a600:	dc000e15 	stw	r16,56(sp)
    a604:	d809883a 	mov	r4,sp
    a608:	880b883a 	mov	r5,r17
    a60c:	dc000904 	addi	r16,sp,36
    a610:	d8c00115 	stw	r3,4(sp)
    a614:	d8800015 	stw	r2,0(sp)
    a618:	d9800215 	stw	r6,8(sp)
    a61c:	dfc01015 	stw	ra,64(sp)
    a620:	d9c00315 	stw	r7,12(sp)
    a624:	000af140 	call	af14 <__unpack_d>
    a628:	d9000204 	addi	r4,sp,8
    a62c:	800b883a 	mov	r5,r16
    a630:	000af140 	call	af14 <__unpack_d>
    a634:	d8800417 	ldw	r2,16(sp)
    a638:	00c00044 	movi	r3,1
    a63c:	01bfffc4 	movi	r6,-1
    a640:	1880062e 	bgeu	r3,r2,a65c <__gtdf2+0x70>
    a644:	d8800917 	ldw	r2,36(sp)
    a648:	8809883a 	mov	r4,r17
    a64c:	800b883a 	mov	r5,r16
    a650:	1880022e 	bgeu	r3,r2,a65c <__gtdf2+0x70>
    a654:	000b04c0 	call	b04c <__fpcmp_parts_d>
    a658:	100d883a 	mov	r6,r2
    a65c:	3005883a 	mov	r2,r6
    a660:	dfc01017 	ldw	ra,64(sp)
    a664:	dc400f17 	ldw	r17,60(sp)
    a668:	dc000e17 	ldw	r16,56(sp)
    a66c:	dec01104 	addi	sp,sp,68
    a670:	f800283a 	ret

0000a674 <__gedf2>:
    a674:	deffef04 	addi	sp,sp,-68
    a678:	dc400f15 	stw	r17,60(sp)
    a67c:	dc400404 	addi	r17,sp,16
    a680:	2005883a 	mov	r2,r4
    a684:	2807883a 	mov	r3,r5
    a688:	dc000e15 	stw	r16,56(sp)
    a68c:	d809883a 	mov	r4,sp
    a690:	880b883a 	mov	r5,r17
    a694:	dc000904 	addi	r16,sp,36
    a698:	d8c00115 	stw	r3,4(sp)
    a69c:	d8800015 	stw	r2,0(sp)
    a6a0:	d9800215 	stw	r6,8(sp)
    a6a4:	dfc01015 	stw	ra,64(sp)
    a6a8:	d9c00315 	stw	r7,12(sp)
    a6ac:	000af140 	call	af14 <__unpack_d>
    a6b0:	d9000204 	addi	r4,sp,8
    a6b4:	800b883a 	mov	r5,r16
    a6b8:	000af140 	call	af14 <__unpack_d>
    a6bc:	d8800417 	ldw	r2,16(sp)
    a6c0:	00c00044 	movi	r3,1
    a6c4:	01bfffc4 	movi	r6,-1
    a6c8:	1880062e 	bgeu	r3,r2,a6e4 <__gedf2+0x70>
    a6cc:	d8800917 	ldw	r2,36(sp)
    a6d0:	8809883a 	mov	r4,r17
    a6d4:	800b883a 	mov	r5,r16
    a6d8:	1880022e 	bgeu	r3,r2,a6e4 <__gedf2+0x70>
    a6dc:	000b04c0 	call	b04c <__fpcmp_parts_d>
    a6e0:	100d883a 	mov	r6,r2
    a6e4:	3005883a 	mov	r2,r6
    a6e8:	dfc01017 	ldw	ra,64(sp)
    a6ec:	dc400f17 	ldw	r17,60(sp)
    a6f0:	dc000e17 	ldw	r16,56(sp)
    a6f4:	dec01104 	addi	sp,sp,68
    a6f8:	f800283a 	ret

0000a6fc <__ltdf2>:
    a6fc:	deffef04 	addi	sp,sp,-68
    a700:	dc400f15 	stw	r17,60(sp)
    a704:	dc400404 	addi	r17,sp,16
    a708:	2005883a 	mov	r2,r4
    a70c:	2807883a 	mov	r3,r5
    a710:	dc000e15 	stw	r16,56(sp)
    a714:	d809883a 	mov	r4,sp
    a718:	880b883a 	mov	r5,r17
    a71c:	dc000904 	addi	r16,sp,36
    a720:	d8c00115 	stw	r3,4(sp)
    a724:	d8800015 	stw	r2,0(sp)
    a728:	d9800215 	stw	r6,8(sp)
    a72c:	dfc01015 	stw	ra,64(sp)
    a730:	d9c00315 	stw	r7,12(sp)
    a734:	000af140 	call	af14 <__unpack_d>
    a738:	d9000204 	addi	r4,sp,8
    a73c:	800b883a 	mov	r5,r16
    a740:	000af140 	call	af14 <__unpack_d>
    a744:	d8800417 	ldw	r2,16(sp)
    a748:	00c00044 	movi	r3,1
    a74c:	180d883a 	mov	r6,r3
    a750:	1880062e 	bgeu	r3,r2,a76c <__ltdf2+0x70>
    a754:	d8800917 	ldw	r2,36(sp)
    a758:	8809883a 	mov	r4,r17
    a75c:	800b883a 	mov	r5,r16
    a760:	1880022e 	bgeu	r3,r2,a76c <__ltdf2+0x70>
    a764:	000b04c0 	call	b04c <__fpcmp_parts_d>
    a768:	100d883a 	mov	r6,r2
    a76c:	3005883a 	mov	r2,r6
    a770:	dfc01017 	ldw	ra,64(sp)
    a774:	dc400f17 	ldw	r17,60(sp)
    a778:	dc000e17 	ldw	r16,56(sp)
    a77c:	dec01104 	addi	sp,sp,68
    a780:	f800283a 	ret

0000a784 <__floatsidf>:
    a784:	2006d7fa 	srli	r3,r4,31
    a788:	defff604 	addi	sp,sp,-40
    a78c:	008000c4 	movi	r2,3
    a790:	dfc00915 	stw	ra,36(sp)
    a794:	dcc00815 	stw	r19,32(sp)
    a798:	dc800715 	stw	r18,28(sp)
    a79c:	dc400615 	stw	r17,24(sp)
    a7a0:	dc000515 	stw	r16,20(sp)
    a7a4:	d8800015 	stw	r2,0(sp)
    a7a8:	d8c00115 	stw	r3,4(sp)
    a7ac:	20000f1e 	bne	r4,zero,a7ec <__floatsidf+0x68>
    a7b0:	00800084 	movi	r2,2
    a7b4:	d8800015 	stw	r2,0(sp)
    a7b8:	d809883a 	mov	r4,sp
    a7bc:	000ac000 	call	ac00 <__pack_d>
    a7c0:	1009883a 	mov	r4,r2
    a7c4:	180b883a 	mov	r5,r3
    a7c8:	2005883a 	mov	r2,r4
    a7cc:	2807883a 	mov	r3,r5
    a7d0:	dfc00917 	ldw	ra,36(sp)
    a7d4:	dcc00817 	ldw	r19,32(sp)
    a7d8:	dc800717 	ldw	r18,28(sp)
    a7dc:	dc400617 	ldw	r17,24(sp)
    a7e0:	dc000517 	ldw	r16,20(sp)
    a7e4:	dec00a04 	addi	sp,sp,40
    a7e8:	f800283a 	ret
    a7ec:	00800f04 	movi	r2,60
    a7f0:	1807003a 	cmpeq	r3,r3,zero
    a7f4:	d8800215 	stw	r2,8(sp)
    a7f8:	18001126 	beq	r3,zero,a840 <__floatsidf+0xbc>
    a7fc:	0027883a 	mov	r19,zero
    a800:	2025883a 	mov	r18,r4
    a804:	d9000315 	stw	r4,12(sp)
    a808:	dcc00415 	stw	r19,16(sp)
    a80c:	000ab800 	call	ab80 <__clzsi2>
    a810:	11000744 	addi	r4,r2,29
    a814:	013fe80e 	bge	zero,r4,a7b8 <__floatsidf+0x34>
    a818:	10bfff44 	addi	r2,r2,-3
    a81c:	10000c16 	blt	r2,zero,a850 <__floatsidf+0xcc>
    a820:	90a2983a 	sll	r17,r18,r2
    a824:	0021883a 	mov	r16,zero
    a828:	d8800217 	ldw	r2,8(sp)
    a82c:	dc400415 	stw	r17,16(sp)
    a830:	dc000315 	stw	r16,12(sp)
    a834:	1105c83a 	sub	r2,r2,r4
    a838:	d8800215 	stw	r2,8(sp)
    a83c:	003fde06 	br	a7b8 <__floatsidf+0x34>
    a840:	00a00034 	movhi	r2,32768
    a844:	20800a26 	beq	r4,r2,a870 <__floatsidf+0xec>
    a848:	0109c83a 	sub	r4,zero,r4
    a84c:	003feb06 	br	a7fc <__floatsidf+0x78>
    a850:	9006d07a 	srli	r3,r18,1
    a854:	008007c4 	movi	r2,31
    a858:	1105c83a 	sub	r2,r2,r4
    a85c:	1886d83a 	srl	r3,r3,r2
    a860:	9922983a 	sll	r17,r19,r4
    a864:	9120983a 	sll	r16,r18,r4
    a868:	1c62b03a 	or	r17,r3,r17
    a86c:	003fee06 	br	a828 <__floatsidf+0xa4>
    a870:	0009883a 	mov	r4,zero
    a874:	01707834 	movhi	r5,49632
    a878:	003fd306 	br	a7c8 <__floatsidf+0x44>

0000a87c <__fixdfsi>:
    a87c:	defff804 	addi	sp,sp,-32
    a880:	2005883a 	mov	r2,r4
    a884:	2807883a 	mov	r3,r5
    a888:	d809883a 	mov	r4,sp
    a88c:	d9400204 	addi	r5,sp,8
    a890:	d8c00115 	stw	r3,4(sp)
    a894:	d8800015 	stw	r2,0(sp)
    a898:	dfc00715 	stw	ra,28(sp)
    a89c:	000af140 	call	af14 <__unpack_d>
    a8a0:	d8c00217 	ldw	r3,8(sp)
    a8a4:	00800084 	movi	r2,2
    a8a8:	1880051e 	bne	r3,r2,a8c0 <__fixdfsi+0x44>
    a8ac:	0007883a 	mov	r3,zero
    a8b0:	1805883a 	mov	r2,r3
    a8b4:	dfc00717 	ldw	ra,28(sp)
    a8b8:	dec00804 	addi	sp,sp,32
    a8bc:	f800283a 	ret
    a8c0:	00800044 	movi	r2,1
    a8c4:	10fff92e 	bgeu	r2,r3,a8ac <__fixdfsi+0x30>
    a8c8:	00800104 	movi	r2,4
    a8cc:	18800426 	beq	r3,r2,a8e0 <__fixdfsi+0x64>
    a8d0:	d8c00417 	ldw	r3,16(sp)
    a8d4:	183ff516 	blt	r3,zero,a8ac <__fixdfsi+0x30>
    a8d8:	00800784 	movi	r2,30
    a8dc:	10c0080e 	bge	r2,r3,a900 <__fixdfsi+0x84>
    a8e0:	d8800317 	ldw	r2,12(sp)
    a8e4:	1000121e 	bne	r2,zero,a930 <__fixdfsi+0xb4>
    a8e8:	00e00034 	movhi	r3,32768
    a8ec:	18ffffc4 	addi	r3,r3,-1
    a8f0:	1805883a 	mov	r2,r3
    a8f4:	dfc00717 	ldw	ra,28(sp)
    a8f8:	dec00804 	addi	sp,sp,32
    a8fc:	f800283a 	ret
    a900:	00800f04 	movi	r2,60
    a904:	10d1c83a 	sub	r8,r2,r3
    a908:	40bff804 	addi	r2,r8,-32
    a90c:	d9800517 	ldw	r6,20(sp)
    a910:	d9c00617 	ldw	r7,24(sp)
    a914:	10000816 	blt	r2,zero,a938 <__fixdfsi+0xbc>
    a918:	3888d83a 	srl	r4,r7,r2
    a91c:	d8800317 	ldw	r2,12(sp)
    a920:	2007883a 	mov	r3,r4
    a924:	103fe226 	beq	r2,zero,a8b0 <__fixdfsi+0x34>
    a928:	0107c83a 	sub	r3,zero,r4
    a92c:	003fe006 	br	a8b0 <__fixdfsi+0x34>
    a930:	00e00034 	movhi	r3,32768
    a934:	003fde06 	br	a8b0 <__fixdfsi+0x34>
    a938:	39c7883a 	add	r3,r7,r7
    a93c:	008007c4 	movi	r2,31
    a940:	1205c83a 	sub	r2,r2,r8
    a944:	1886983a 	sll	r3,r3,r2
    a948:	3208d83a 	srl	r4,r6,r8
    a94c:	1908b03a 	or	r4,r3,r4
    a950:	003ff206 	br	a91c <__fixdfsi+0xa0>

0000a954 <__floatunsidf>:
    a954:	defff204 	addi	sp,sp,-56
    a958:	dfc00d15 	stw	ra,52(sp)
    a95c:	ddc00c15 	stw	r23,48(sp)
    a960:	dd800b15 	stw	r22,44(sp)
    a964:	dd400a15 	stw	r21,40(sp)
    a968:	dd000915 	stw	r20,36(sp)
    a96c:	dcc00815 	stw	r19,32(sp)
    a970:	dc800715 	stw	r18,28(sp)
    a974:	dc400615 	stw	r17,24(sp)
    a978:	dc000515 	stw	r16,20(sp)
    a97c:	d8000115 	stw	zero,4(sp)
    a980:	20000f1e 	bne	r4,zero,a9c0 <__floatunsidf+0x6c>
    a984:	00800084 	movi	r2,2
    a988:	d8800015 	stw	r2,0(sp)
    a98c:	d809883a 	mov	r4,sp
    a990:	000ac000 	call	ac00 <__pack_d>
    a994:	dfc00d17 	ldw	ra,52(sp)
    a998:	ddc00c17 	ldw	r23,48(sp)
    a99c:	dd800b17 	ldw	r22,44(sp)
    a9a0:	dd400a17 	ldw	r21,40(sp)
    a9a4:	dd000917 	ldw	r20,36(sp)
    a9a8:	dcc00817 	ldw	r19,32(sp)
    a9ac:	dc800717 	ldw	r18,28(sp)
    a9b0:	dc400617 	ldw	r17,24(sp)
    a9b4:	dc000517 	ldw	r16,20(sp)
    a9b8:	dec00e04 	addi	sp,sp,56
    a9bc:	f800283a 	ret
    a9c0:	008000c4 	movi	r2,3
    a9c4:	00c00f04 	movi	r3,60
    a9c8:	002f883a 	mov	r23,zero
    a9cc:	202d883a 	mov	r22,r4
    a9d0:	d8800015 	stw	r2,0(sp)
    a9d4:	d8c00215 	stw	r3,8(sp)
    a9d8:	d9000315 	stw	r4,12(sp)
    a9dc:	ddc00415 	stw	r23,16(sp)
    a9e0:	000ab800 	call	ab80 <__clzsi2>
    a9e4:	12400744 	addi	r9,r2,29
    a9e8:	48000b16 	blt	r9,zero,aa18 <__floatunsidf+0xc4>
    a9ec:	483fe726 	beq	r9,zero,a98c <__floatunsidf+0x38>
    a9f0:	10bfff44 	addi	r2,r2,-3
    a9f4:	10002e16 	blt	r2,zero,aab0 <__floatunsidf+0x15c>
    a9f8:	b0a2983a 	sll	r17,r22,r2
    a9fc:	0021883a 	mov	r16,zero
    aa00:	d8800217 	ldw	r2,8(sp)
    aa04:	dc400415 	stw	r17,16(sp)
    aa08:	dc000315 	stw	r16,12(sp)
    aa0c:	1245c83a 	sub	r2,r2,r9
    aa10:	d8800215 	stw	r2,8(sp)
    aa14:	003fdd06 	br	a98c <__floatunsidf+0x38>
    aa18:	0255c83a 	sub	r10,zero,r9
    aa1c:	51bff804 	addi	r6,r10,-32
    aa20:	30001b16 	blt	r6,zero,aa90 <__floatunsidf+0x13c>
    aa24:	b9a8d83a 	srl	r20,r23,r6
    aa28:	002b883a 	mov	r21,zero
    aa2c:	000f883a 	mov	r7,zero
    aa30:	01000044 	movi	r4,1
    aa34:	0011883a 	mov	r8,zero
    aa38:	30002516 	blt	r6,zero,aad0 <__floatunsidf+0x17c>
    aa3c:	21a6983a 	sll	r19,r4,r6
    aa40:	0025883a 	mov	r18,zero
    aa44:	00bfffc4 	movi	r2,-1
    aa48:	9089883a 	add	r4,r18,r2
    aa4c:	988b883a 	add	r5,r19,r2
    aa50:	248d803a 	cmpltu	r6,r4,r18
    aa54:	314b883a 	add	r5,r6,r5
    aa58:	b104703a 	and	r2,r22,r4
    aa5c:	b946703a 	and	r3,r23,r5
    aa60:	10c4b03a 	or	r2,r2,r3
    aa64:	10000226 	beq	r2,zero,aa70 <__floatunsidf+0x11c>
    aa68:	01c00044 	movi	r7,1
    aa6c:	0011883a 	mov	r8,zero
    aa70:	d9000217 	ldw	r4,8(sp)
    aa74:	a1c4b03a 	or	r2,r20,r7
    aa78:	aa06b03a 	or	r3,r21,r8
    aa7c:	2249c83a 	sub	r4,r4,r9
    aa80:	d8c00415 	stw	r3,16(sp)
    aa84:	d9000215 	stw	r4,8(sp)
    aa88:	d8800315 	stw	r2,12(sp)
    aa8c:	003fbf06 	br	a98c <__floatunsidf+0x38>
    aa90:	bdc7883a 	add	r3,r23,r23
    aa94:	008007c4 	movi	r2,31
    aa98:	1285c83a 	sub	r2,r2,r10
    aa9c:	1886983a 	sll	r3,r3,r2
    aaa0:	b2a8d83a 	srl	r20,r22,r10
    aaa4:	baaad83a 	srl	r21,r23,r10
    aaa8:	1d28b03a 	or	r20,r3,r20
    aaac:	003fdf06 	br	aa2c <__floatunsidf+0xd8>
    aab0:	b006d07a 	srli	r3,r22,1
    aab4:	008007c4 	movi	r2,31
    aab8:	1245c83a 	sub	r2,r2,r9
    aabc:	1886d83a 	srl	r3,r3,r2
    aac0:	ba62983a 	sll	r17,r23,r9
    aac4:	b260983a 	sll	r16,r22,r9
    aac8:	1c62b03a 	or	r17,r3,r17
    aacc:	003fcc06 	br	aa00 <__floatunsidf+0xac>
    aad0:	2006d07a 	srli	r3,r4,1
    aad4:	008007c4 	movi	r2,31
    aad8:	1285c83a 	sub	r2,r2,r10
    aadc:	18a6d83a 	srl	r19,r3,r2
    aae0:	22a4983a 	sll	r18,r4,r10
    aae4:	003fd706 	br	aa44 <__floatunsidf+0xf0>

0000aae8 <__muldi3>:
    aae8:	2011883a 	mov	r8,r4
    aaec:	427fffcc 	andi	r9,r8,65535
    aaf0:	4018d43a 	srli	r12,r8,16
    aaf4:	32bfffcc 	andi	r10,r6,65535
    aaf8:	3016d43a 	srli	r11,r6,16
    aafc:	4a85383a 	mul	r2,r9,r10
    ab00:	6295383a 	mul	r10,r12,r10
    ab04:	4ad3383a 	mul	r9,r9,r11
    ab08:	113fffcc 	andi	r4,r2,65535
    ab0c:	1004d43a 	srli	r2,r2,16
    ab10:	4a93883a 	add	r9,r9,r10
    ab14:	3807883a 	mov	r3,r7
    ab18:	1245883a 	add	r2,r2,r9
    ab1c:	280f883a 	mov	r7,r5
    ab20:	180b883a 	mov	r5,r3
    ab24:	1006943a 	slli	r3,r2,16
    ab28:	defffd04 	addi	sp,sp,-12
    ab2c:	dc800215 	stw	r18,8(sp)
    ab30:	1907883a 	add	r3,r3,r4
    ab34:	dc400115 	stw	r17,4(sp)
    ab38:	dc000015 	stw	r16,0(sp)
    ab3c:	4165383a 	mul	r18,r8,r5
    ab40:	31e3383a 	mul	r17,r6,r7
    ab44:	1012d43a 	srli	r9,r2,16
    ab48:	62d9383a 	mul	r12,r12,r11
    ab4c:	181f883a 	mov	r15,r3
    ab50:	1280022e 	bgeu	r2,r10,ab5c <__muldi3+0x74>
    ab54:	00800074 	movhi	r2,1
    ab58:	6099883a 	add	r12,r12,r2
    ab5c:	624d883a 	add	r6,r12,r9
    ab60:	9187883a 	add	r3,r18,r6
    ab64:	88c7883a 	add	r3,r17,r3
    ab68:	7805883a 	mov	r2,r15
    ab6c:	dc800217 	ldw	r18,8(sp)
    ab70:	dc400117 	ldw	r17,4(sp)
    ab74:	dc000017 	ldw	r16,0(sp)
    ab78:	dec00304 	addi	sp,sp,12
    ab7c:	f800283a 	ret

0000ab80 <__clzsi2>:
    ab80:	00bfffd4 	movui	r2,65535
    ab84:	11000e36 	bltu	r2,r4,abc0 <__clzsi2+0x40>
    ab88:	00803fc4 	movi	r2,255
    ab8c:	01400204 	movi	r5,8
    ab90:	0007883a 	mov	r3,zero
    ab94:	11001036 	bltu	r2,r4,abd8 <__clzsi2+0x58>
    ab98:	000b883a 	mov	r5,zero
    ab9c:	20c6d83a 	srl	r3,r4,r3
    aba0:	00800074 	movhi	r2,1
    aba4:	10b79104 	addi	r2,r2,-8636
    aba8:	1887883a 	add	r3,r3,r2
    abac:	18800003 	ldbu	r2,0(r3)
    abb0:	00c00804 	movi	r3,32
    abb4:	2885883a 	add	r2,r5,r2
    abb8:	1885c83a 	sub	r2,r3,r2
    abbc:	f800283a 	ret
    abc0:	01400404 	movi	r5,16
    abc4:	00804034 	movhi	r2,256
    abc8:	10bfffc4 	addi	r2,r2,-1
    abcc:	2807883a 	mov	r3,r5
    abd0:	113ff22e 	bgeu	r2,r4,ab9c <__clzsi2+0x1c>
    abd4:	01400604 	movi	r5,24
    abd8:	2807883a 	mov	r3,r5
    abdc:	20c6d83a 	srl	r3,r4,r3
    abe0:	00800074 	movhi	r2,1
    abe4:	10b79104 	addi	r2,r2,-8636
    abe8:	1887883a 	add	r3,r3,r2
    abec:	18800003 	ldbu	r2,0(r3)
    abf0:	00c00804 	movi	r3,32
    abf4:	2885883a 	add	r2,r5,r2
    abf8:	1885c83a 	sub	r2,r3,r2
    abfc:	f800283a 	ret

0000ac00 <__pack_d>:
    ac00:	20c00017 	ldw	r3,0(r4)
    ac04:	defffd04 	addi	sp,sp,-12
    ac08:	dc000015 	stw	r16,0(sp)
    ac0c:	dc800215 	stw	r18,8(sp)
    ac10:	dc400115 	stw	r17,4(sp)
    ac14:	00800044 	movi	r2,1
    ac18:	22000317 	ldw	r8,12(r4)
    ac1c:	001f883a 	mov	r15,zero
    ac20:	22400417 	ldw	r9,16(r4)
    ac24:	24000117 	ldw	r16,4(r4)
    ac28:	10c0552e 	bgeu	r2,r3,ad80 <__pack_d+0x180>
    ac2c:	00800104 	movi	r2,4
    ac30:	18804f26 	beq	r3,r2,ad70 <__pack_d+0x170>
    ac34:	00800084 	movi	r2,2
    ac38:	18800226 	beq	r3,r2,ac44 <__pack_d+0x44>
    ac3c:	4244b03a 	or	r2,r8,r9
    ac40:	10001a1e 	bne	r2,zero,acac <__pack_d+0xac>
    ac44:	000d883a 	mov	r6,zero
    ac48:	000f883a 	mov	r7,zero
    ac4c:	0011883a 	mov	r8,zero
    ac50:	00800434 	movhi	r2,16
    ac54:	10bfffc4 	addi	r2,r2,-1
    ac58:	301d883a 	mov	r14,r6
    ac5c:	3884703a 	and	r2,r7,r2
    ac60:	400a953a 	slli	r5,r8,20
    ac64:	79bffc2c 	andhi	r6,r15,65520
    ac68:	308cb03a 	or	r6,r6,r2
    ac6c:	00e00434 	movhi	r3,32784
    ac70:	18ffffc4 	addi	r3,r3,-1
    ac74:	800497fa 	slli	r2,r16,31
    ac78:	30c6703a 	and	r3,r6,r3
    ac7c:	1946b03a 	or	r3,r3,r5
    ac80:	01600034 	movhi	r5,32768
    ac84:	297fffc4 	addi	r5,r5,-1
    ac88:	194a703a 	and	r5,r3,r5
    ac8c:	288ab03a 	or	r5,r5,r2
    ac90:	2807883a 	mov	r3,r5
    ac94:	7005883a 	mov	r2,r14
    ac98:	dc800217 	ldw	r18,8(sp)
    ac9c:	dc400117 	ldw	r17,4(sp)
    aca0:	dc000017 	ldw	r16,0(sp)
    aca4:	dec00304 	addi	sp,sp,12
    aca8:	f800283a 	ret
    acac:	21000217 	ldw	r4,8(r4)
    acb0:	00bf0084 	movi	r2,-1022
    acb4:	20803f16 	blt	r4,r2,adb4 <__pack_d+0x1b4>
    acb8:	0080ffc4 	movi	r2,1023
    acbc:	11002c16 	blt	r2,r4,ad70 <__pack_d+0x170>
    acc0:	00803fc4 	movi	r2,255
    acc4:	408c703a 	and	r6,r8,r2
    acc8:	00802004 	movi	r2,128
    accc:	0007883a 	mov	r3,zero
    acd0:	000f883a 	mov	r7,zero
    acd4:	2280ffc4 	addi	r10,r4,1023
    acd8:	30801e26 	beq	r6,r2,ad54 <__pack_d+0x154>
    acdc:	00801fc4 	movi	r2,127
    ace0:	4089883a 	add	r4,r8,r2
    ace4:	220d803a 	cmpltu	r6,r4,r8
    ace8:	324d883a 	add	r6,r6,r9
    acec:	2011883a 	mov	r8,r4
    acf0:	3013883a 	mov	r9,r6
    acf4:	00880034 	movhi	r2,8192
    acf8:	10bfffc4 	addi	r2,r2,-1
    acfc:	12400d36 	bltu	r2,r9,ad34 <__pack_d+0x134>
    ad00:	4804963a 	slli	r2,r9,24
    ad04:	400cd23a 	srli	r6,r8,8
    ad08:	480ed23a 	srli	r7,r9,8
    ad0c:	013fffc4 	movi	r4,-1
    ad10:	118cb03a 	or	r6,r2,r6
    ad14:	01400434 	movhi	r5,16
    ad18:	297fffc4 	addi	r5,r5,-1
    ad1c:	3104703a 	and	r2,r6,r4
    ad20:	3946703a 	and	r3,r7,r5
    ad24:	5201ffcc 	andi	r8,r10,2047
    ad28:	100d883a 	mov	r6,r2
    ad2c:	180f883a 	mov	r7,r3
    ad30:	003fc706 	br	ac50 <__pack_d+0x50>
    ad34:	480897fa 	slli	r4,r9,31
    ad38:	4004d07a 	srli	r2,r8,1
    ad3c:	4806d07a 	srli	r3,r9,1
    ad40:	52800044 	addi	r10,r10,1
    ad44:	2084b03a 	or	r2,r4,r2
    ad48:	1011883a 	mov	r8,r2
    ad4c:	1813883a 	mov	r9,r3
    ad50:	003feb06 	br	ad00 <__pack_d+0x100>
    ad54:	383fe11e 	bne	r7,zero,acdc <__pack_d+0xdc>
    ad58:	01004004 	movi	r4,256
    ad5c:	4104703a 	and	r2,r8,r4
    ad60:	10c4b03a 	or	r2,r2,r3
    ad64:	103fe326 	beq	r2,zero,acf4 <__pack_d+0xf4>
    ad68:	3005883a 	mov	r2,r6
    ad6c:	003fdc06 	br	ace0 <__pack_d+0xe0>
    ad70:	000d883a 	mov	r6,zero
    ad74:	000f883a 	mov	r7,zero
    ad78:	0201ffc4 	movi	r8,2047
    ad7c:	003fb406 	br	ac50 <__pack_d+0x50>
    ad80:	0005883a 	mov	r2,zero
    ad84:	00c00234 	movhi	r3,8
    ad88:	408cb03a 	or	r6,r8,r2
    ad8c:	48ceb03a 	or	r7,r9,r3
    ad90:	013fffc4 	movi	r4,-1
    ad94:	01400434 	movhi	r5,16
    ad98:	297fffc4 	addi	r5,r5,-1
    ad9c:	3104703a 	and	r2,r6,r4
    ada0:	3946703a 	and	r3,r7,r5
    ada4:	100d883a 	mov	r6,r2
    ada8:	180f883a 	mov	r7,r3
    adac:	0201ffc4 	movi	r8,2047
    adb0:	003fa706 	br	ac50 <__pack_d+0x50>
    adb4:	1109c83a 	sub	r4,r2,r4
    adb8:	00800e04 	movi	r2,56
    adbc:	11004316 	blt	r2,r4,aecc <__pack_d+0x2cc>
    adc0:	21fff804 	addi	r7,r4,-32
    adc4:	38004516 	blt	r7,zero,aedc <__pack_d+0x2dc>
    adc8:	49d8d83a 	srl	r12,r9,r7
    adcc:	001b883a 	mov	r13,zero
    add0:	0023883a 	mov	r17,zero
    add4:	01400044 	movi	r5,1
    add8:	0025883a 	mov	r18,zero
    addc:	38004716 	blt	r7,zero,aefc <__pack_d+0x2fc>
    ade0:	29d6983a 	sll	r11,r5,r7
    ade4:	0015883a 	mov	r10,zero
    ade8:	00bfffc4 	movi	r2,-1
    adec:	5089883a 	add	r4,r10,r2
    adf0:	588b883a 	add	r5,r11,r2
    adf4:	228d803a 	cmpltu	r6,r4,r10
    adf8:	314b883a 	add	r5,r6,r5
    adfc:	4104703a 	and	r2,r8,r4
    ae00:	4946703a 	and	r3,r9,r5
    ae04:	10c4b03a 	or	r2,r2,r3
    ae08:	10000226 	beq	r2,zero,ae14 <__pack_d+0x214>
    ae0c:	04400044 	movi	r17,1
    ae10:	0025883a 	mov	r18,zero
    ae14:	00803fc4 	movi	r2,255
    ae18:	644eb03a 	or	r7,r12,r17
    ae1c:	3892703a 	and	r9,r7,r2
    ae20:	00802004 	movi	r2,128
    ae24:	6c90b03a 	or	r8,r13,r18
    ae28:	0015883a 	mov	r10,zero
    ae2c:	48801626 	beq	r9,r2,ae88 <__pack_d+0x288>
    ae30:	01001fc4 	movi	r4,127
    ae34:	3905883a 	add	r2,r7,r4
    ae38:	11cd803a 	cmpltu	r6,r2,r7
    ae3c:	320d883a 	add	r6,r6,r8
    ae40:	100f883a 	mov	r7,r2
    ae44:	00840034 	movhi	r2,4096
    ae48:	10bfffc4 	addi	r2,r2,-1
    ae4c:	3011883a 	mov	r8,r6
    ae50:	0007883a 	mov	r3,zero
    ae54:	11801b36 	bltu	r2,r6,aec4 <__pack_d+0x2c4>
    ae58:	4004963a 	slli	r2,r8,24
    ae5c:	3808d23a 	srli	r4,r7,8
    ae60:	400ad23a 	srli	r5,r8,8
    ae64:	1813883a 	mov	r9,r3
    ae68:	1108b03a 	or	r4,r2,r4
    ae6c:	00bfffc4 	movi	r2,-1
    ae70:	00c00434 	movhi	r3,16
    ae74:	18ffffc4 	addi	r3,r3,-1
    ae78:	208c703a 	and	r6,r4,r2
    ae7c:	28ce703a 	and	r7,r5,r3
    ae80:	4a01ffcc 	andi	r8,r9,2047
    ae84:	003f7206 	br	ac50 <__pack_d+0x50>
    ae88:	503fe91e 	bne	r10,zero,ae30 <__pack_d+0x230>
    ae8c:	01004004 	movi	r4,256
    ae90:	3904703a 	and	r2,r7,r4
    ae94:	0007883a 	mov	r3,zero
    ae98:	10c4b03a 	or	r2,r2,r3
    ae9c:	10000626 	beq	r2,zero,aeb8 <__pack_d+0x2b8>
    aea0:	3a45883a 	add	r2,r7,r9
    aea4:	11cd803a 	cmpltu	r6,r2,r7
    aea8:	320d883a 	add	r6,r6,r8
    aeac:	100f883a 	mov	r7,r2
    aeb0:	3011883a 	mov	r8,r6
    aeb4:	0007883a 	mov	r3,zero
    aeb8:	00840034 	movhi	r2,4096
    aebc:	10bfffc4 	addi	r2,r2,-1
    aec0:	123fe52e 	bgeu	r2,r8,ae58 <__pack_d+0x258>
    aec4:	00c00044 	movi	r3,1
    aec8:	003fe306 	br	ae58 <__pack_d+0x258>
    aecc:	0009883a 	mov	r4,zero
    aed0:	0013883a 	mov	r9,zero
    aed4:	000b883a 	mov	r5,zero
    aed8:	003fe406 	br	ae6c <__pack_d+0x26c>
    aedc:	4a47883a 	add	r3,r9,r9
    aee0:	008007c4 	movi	r2,31
    aee4:	1105c83a 	sub	r2,r2,r4
    aee8:	1886983a 	sll	r3,r3,r2
    aeec:	4118d83a 	srl	r12,r8,r4
    aef0:	491ad83a 	srl	r13,r9,r4
    aef4:	1b18b03a 	or	r12,r3,r12
    aef8:	003fb506 	br	add0 <__pack_d+0x1d0>
    aefc:	2806d07a 	srli	r3,r5,1
    af00:	008007c4 	movi	r2,31
    af04:	1105c83a 	sub	r2,r2,r4
    af08:	1896d83a 	srl	r11,r3,r2
    af0c:	2914983a 	sll	r10,r5,r4
    af10:	003fb506 	br	ade8 <__pack_d+0x1e8>

0000af14 <__unpack_d>:
    af14:	20c00117 	ldw	r3,4(r4)
    af18:	22400017 	ldw	r9,0(r4)
    af1c:	00800434 	movhi	r2,16
    af20:	10bfffc4 	addi	r2,r2,-1
    af24:	1808d53a 	srli	r4,r3,20
    af28:	180cd7fa 	srli	r6,r3,31
    af2c:	1894703a 	and	r10,r3,r2
    af30:	2201ffcc 	andi	r8,r4,2047
    af34:	281b883a 	mov	r13,r5
    af38:	4817883a 	mov	r11,r9
    af3c:	29800115 	stw	r6,4(r5)
    af40:	5019883a 	mov	r12,r10
    af44:	40001e1e 	bne	r8,zero,afc0 <__unpack_d+0xac>
    af48:	4a84b03a 	or	r2,r9,r10
    af4c:	10001926 	beq	r2,zero,afb4 <__unpack_d+0xa0>
    af50:	4804d63a 	srli	r2,r9,24
    af54:	500c923a 	slli	r6,r10,8
    af58:	013f0084 	movi	r4,-1022
    af5c:	00c40034 	movhi	r3,4096
    af60:	18ffffc4 	addi	r3,r3,-1
    af64:	118cb03a 	or	r6,r2,r6
    af68:	008000c4 	movi	r2,3
    af6c:	480a923a 	slli	r5,r9,8
    af70:	68800015 	stw	r2,0(r13)
    af74:	69000215 	stw	r4,8(r13)
    af78:	19800b36 	bltu	r3,r6,afa8 <__unpack_d+0x94>
    af7c:	200f883a 	mov	r7,r4
    af80:	1811883a 	mov	r8,r3
    af84:	2945883a 	add	r2,r5,r5
    af88:	1149803a 	cmpltu	r4,r2,r5
    af8c:	3187883a 	add	r3,r6,r6
    af90:	20c9883a 	add	r4,r4,r3
    af94:	100b883a 	mov	r5,r2
    af98:	200d883a 	mov	r6,r4
    af9c:	39ffffc4 	addi	r7,r7,-1
    afa0:	413ff82e 	bgeu	r8,r4,af84 <__unpack_d+0x70>
    afa4:	69c00215 	stw	r7,8(r13)
    afa8:	69800415 	stw	r6,16(r13)
    afac:	69400315 	stw	r5,12(r13)
    afb0:	f800283a 	ret
    afb4:	00800084 	movi	r2,2
    afb8:	28800015 	stw	r2,0(r5)
    afbc:	f800283a 	ret
    afc0:	0081ffc4 	movi	r2,2047
    afc4:	40800f26 	beq	r8,r2,b004 <__unpack_d+0xf0>
    afc8:	480cd63a 	srli	r6,r9,24
    afcc:	5006923a 	slli	r3,r10,8
    afd0:	4804923a 	slli	r2,r9,8
    afd4:	0009883a 	mov	r4,zero
    afd8:	30c6b03a 	or	r3,r6,r3
    afdc:	01440034 	movhi	r5,4096
    afe0:	110cb03a 	or	r6,r2,r4
    afe4:	423f0044 	addi	r8,r8,-1023
    afe8:	194eb03a 	or	r7,r3,r5
    afec:	008000c4 	movi	r2,3
    aff0:	69c00415 	stw	r7,16(r13)
    aff4:	6a000215 	stw	r8,8(r13)
    aff8:	68800015 	stw	r2,0(r13)
    affc:	69800315 	stw	r6,12(r13)
    b000:	f800283a 	ret
    b004:	4a84b03a 	or	r2,r9,r10
    b008:	1000031e 	bne	r2,zero,b018 <__unpack_d+0x104>
    b00c:	00800104 	movi	r2,4
    b010:	28800015 	stw	r2,0(r5)
    b014:	f800283a 	ret
    b018:	0009883a 	mov	r4,zero
    b01c:	01400234 	movhi	r5,8
    b020:	4904703a 	and	r2,r9,r4
    b024:	5146703a 	and	r3,r10,r5
    b028:	10c4b03a 	or	r2,r2,r3
    b02c:	10000526 	beq	r2,zero,b044 <__unpack_d+0x130>
    b030:	00800044 	movi	r2,1
    b034:	68800015 	stw	r2,0(r13)
    b038:	6b000415 	stw	r12,16(r13)
    b03c:	6ac00315 	stw	r11,12(r13)
    b040:	f800283a 	ret
    b044:	68000015 	stw	zero,0(r13)
    b048:	003ffb06 	br	b038 <__unpack_d+0x124>

0000b04c <__fpcmp_parts_d>:
    b04c:	21800017 	ldw	r6,0(r4)
    b050:	00c00044 	movi	r3,1
    b054:	19800a2e 	bgeu	r3,r6,b080 <__fpcmp_parts_d+0x34>
    b058:	28800017 	ldw	r2,0(r5)
    b05c:	1880082e 	bgeu	r3,r2,b080 <__fpcmp_parts_d+0x34>
    b060:	00c00104 	movi	r3,4
    b064:	30c02626 	beq	r6,r3,b100 <__fpcmp_parts_d+0xb4>
    b068:	10c02226 	beq	r2,r3,b0f4 <__fpcmp_parts_d+0xa8>
    b06c:	00c00084 	movi	r3,2
    b070:	30c00526 	beq	r6,r3,b088 <__fpcmp_parts_d+0x3c>
    b074:	10c0071e 	bne	r2,r3,b094 <__fpcmp_parts_d+0x48>
    b078:	20800117 	ldw	r2,4(r4)
    b07c:	1000091e 	bne	r2,zero,b0a4 <__fpcmp_parts_d+0x58>
    b080:	00800044 	movi	r2,1
    b084:	f800283a 	ret
    b088:	10c01a1e 	bne	r2,r3,b0f4 <__fpcmp_parts_d+0xa8>
    b08c:	0005883a 	mov	r2,zero
    b090:	f800283a 	ret
    b094:	22000117 	ldw	r8,4(r4)
    b098:	28800117 	ldw	r2,4(r5)
    b09c:	40800326 	beq	r8,r2,b0ac <__fpcmp_parts_d+0x60>
    b0a0:	403ff726 	beq	r8,zero,b080 <__fpcmp_parts_d+0x34>
    b0a4:	00bfffc4 	movi	r2,-1
    b0a8:	f800283a 	ret
    b0ac:	20c00217 	ldw	r3,8(r4)
    b0b0:	28800217 	ldw	r2,8(r5)
    b0b4:	10fffa16 	blt	r2,r3,b0a0 <__fpcmp_parts_d+0x54>
    b0b8:	18800916 	blt	r3,r2,b0e0 <__fpcmp_parts_d+0x94>
    b0bc:	21c00417 	ldw	r7,16(r4)
    b0c0:	28c00417 	ldw	r3,16(r5)
    b0c4:	21800317 	ldw	r6,12(r4)
    b0c8:	28800317 	ldw	r2,12(r5)
    b0cc:	19fff436 	bltu	r3,r7,b0a0 <__fpcmp_parts_d+0x54>
    b0d0:	38c00526 	beq	r7,r3,b0e8 <__fpcmp_parts_d+0x9c>
    b0d4:	38c00236 	bltu	r7,r3,b0e0 <__fpcmp_parts_d+0x94>
    b0d8:	19ffec1e 	bne	r3,r7,b08c <__fpcmp_parts_d+0x40>
    b0dc:	30bfeb2e 	bgeu	r6,r2,b08c <__fpcmp_parts_d+0x40>
    b0e0:	403fe71e 	bne	r8,zero,b080 <__fpcmp_parts_d+0x34>
    b0e4:	003fef06 	br	b0a4 <__fpcmp_parts_d+0x58>
    b0e8:	11bffa2e 	bgeu	r2,r6,b0d4 <__fpcmp_parts_d+0x88>
    b0ec:	403fe426 	beq	r8,zero,b080 <__fpcmp_parts_d+0x34>
    b0f0:	003fec06 	br	b0a4 <__fpcmp_parts_d+0x58>
    b0f4:	28800117 	ldw	r2,4(r5)
    b0f8:	103fe11e 	bne	r2,zero,b080 <__fpcmp_parts_d+0x34>
    b0fc:	003fe906 	br	b0a4 <__fpcmp_parts_d+0x58>
    b100:	11bfdd1e 	bne	r2,r6,b078 <__fpcmp_parts_d+0x2c>
    b104:	28c00117 	ldw	r3,4(r5)
    b108:	20800117 	ldw	r2,4(r4)
    b10c:	1885c83a 	sub	r2,r3,r2
    b110:	f800283a 	ret

0000b114 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b114:	defff804 	addi	sp,sp,-32
    b118:	dfc00715 	stw	ra,28(sp)
    b11c:	df000615 	stw	fp,24(sp)
    b120:	df000604 	addi	fp,sp,24
    b124:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b128:	e0bffc17 	ldw	r2,-16(fp)
    b12c:	1004803a 	cmplt	r2,r2,zero
    b130:	1000081e 	bne	r2,zero,b154 <close+0x40>
    b134:	e0bffc17 	ldw	r2,-16(fp)
    b138:	10800324 	muli	r2,r2,12
    b13c:	1007883a 	mov	r3,r2
    b140:	00800074 	movhi	r2,1
    b144:	10b9ed04 	addi	r2,r2,-6220
    b148:	1887883a 	add	r3,r3,r2
    b14c:	e0ffff15 	stw	r3,-4(fp)
    b150:	00000106 	br	b158 <close+0x44>
    b154:	e03fff15 	stw	zero,-4(fp)
    b158:	e0bfff17 	ldw	r2,-4(fp)
    b15c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b160:	e0bffb17 	ldw	r2,-20(fp)
    b164:	1005003a 	cmpeq	r2,r2,zero
    b168:	10001d1e 	bne	r2,zero,b1e0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b16c:	e0bffb17 	ldw	r2,-20(fp)
    b170:	10800017 	ldw	r2,0(r2)
    b174:	10800417 	ldw	r2,16(r2)
    b178:	1005003a 	cmpeq	r2,r2,zero
    b17c:	1000071e 	bne	r2,zero,b19c <close+0x88>
    b180:	e0bffb17 	ldw	r2,-20(fp)
    b184:	10800017 	ldw	r2,0(r2)
    b188:	10800417 	ldw	r2,16(r2)
    b18c:	e13ffb17 	ldw	r4,-20(fp)
    b190:	103ee83a 	callr	r2
    b194:	e0bffe15 	stw	r2,-8(fp)
    b198:	00000106 	br	b1a0 <close+0x8c>
    b19c:	e03ffe15 	stw	zero,-8(fp)
    b1a0:	e0bffe17 	ldw	r2,-8(fp)
    b1a4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b1a8:	e13ffc17 	ldw	r4,-16(fp)
    b1ac:	000bb780 	call	bb78 <alt_release_fd>
    if (rval < 0)
    b1b0:	e0bffa17 	ldw	r2,-24(fp)
    b1b4:	1004403a 	cmpge	r2,r2,zero
    b1b8:	1000071e 	bne	r2,zero,b1d8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b1bc:	000b2100 	call	b210 <alt_get_errno>
    b1c0:	e0fffa17 	ldw	r3,-24(fp)
    b1c4:	00c7c83a 	sub	r3,zero,r3
    b1c8:	10c00015 	stw	r3,0(r2)
      return -1;
    b1cc:	00bfffc4 	movi	r2,-1
    b1d0:	e0bffd15 	stw	r2,-12(fp)
    b1d4:	00000806 	br	b1f8 <close+0xe4>
    }
    return 0;
    b1d8:	e03ffd15 	stw	zero,-12(fp)
    b1dc:	00000606 	br	b1f8 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1e0:	000b2100 	call	b210 <alt_get_errno>
    b1e4:	1007883a 	mov	r3,r2
    b1e8:	00801444 	movi	r2,81
    b1ec:	18800015 	stw	r2,0(r3)
    return -1;
    b1f0:	00bfffc4 	movi	r2,-1
    b1f4:	e0bffd15 	stw	r2,-12(fp)
    b1f8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b1fc:	e037883a 	mov	sp,fp
    b200:	dfc00117 	ldw	ra,4(sp)
    b204:	df000017 	ldw	fp,0(sp)
    b208:	dec00204 	addi	sp,sp,8
    b20c:	f800283a 	ret

0000b210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b210:	defffd04 	addi	sp,sp,-12
    b214:	dfc00215 	stw	ra,8(sp)
    b218:	df000115 	stw	fp,4(sp)
    b21c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b220:	00800074 	movhi	r2,1
    b224:	10be7104 	addi	r2,r2,-1596
    b228:	10800017 	ldw	r2,0(r2)
    b22c:	1005003a 	cmpeq	r2,r2,zero
    b230:	1000061e 	bne	r2,zero,b24c <alt_get_errno+0x3c>
    b234:	00800074 	movhi	r2,1
    b238:	10be7104 	addi	r2,r2,-1596
    b23c:	10800017 	ldw	r2,0(r2)
    b240:	103ee83a 	callr	r2
    b244:	e0bfff15 	stw	r2,-4(fp)
    b248:	00000306 	br	b258 <alt_get_errno+0x48>
    b24c:	00800074 	movhi	r2,1
    b250:	10851904 	addi	r2,r2,5220
    b254:	e0bfff15 	stw	r2,-4(fp)
    b258:	e0bfff17 	ldw	r2,-4(fp)
}
    b25c:	e037883a 	mov	sp,fp
    b260:	dfc00117 	ldw	ra,4(sp)
    b264:	df000017 	ldw	fp,0(sp)
    b268:	dec00204 	addi	sp,sp,8
    b26c:	f800283a 	ret

0000b270 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b270:	defffc04 	addi	sp,sp,-16
    b274:	df000315 	stw	fp,12(sp)
    b278:	df000304 	addi	fp,sp,12
    b27c:	e13ffd15 	stw	r4,-12(fp)
    b280:	e17ffe15 	stw	r5,-8(fp)
    b284:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b288:	e0bfff17 	ldw	r2,-4(fp)
}
    b28c:	e037883a 	mov	sp,fp
    b290:	df000017 	ldw	fp,0(sp)
    b294:	dec00104 	addi	sp,sp,4
    b298:	f800283a 	ret

0000b29c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    b29c:	defffd04 	addi	sp,sp,-12
    b2a0:	df000215 	stw	fp,8(sp)
    b2a4:	df000204 	addi	fp,sp,8
    b2a8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    b2ac:	e0bfff17 	ldw	r2,-4(fp)
    b2b0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    b2b4:	e0bffe17 	ldw	r2,-8(fp)
    b2b8:	1005003a 	cmpeq	r2,r2,zero
    b2bc:	1000021e 	bne	r2,zero,b2c8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    b2c0:	002af070 	cmpltui	zero,zero,43969
    b2c4:	00000106 	br	b2cc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    b2c8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    b2cc:	e037883a 	mov	sp,fp
    b2d0:	df000017 	ldw	fp,0(sp)
    b2d4:	dec00104 	addi	sp,sp,4
    b2d8:	f800283a 	ret

0000b2dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    b2dc:	defffd04 	addi	sp,sp,-12
    b2e0:	dfc00215 	stw	ra,8(sp)
    b2e4:	df000115 	stw	fp,4(sp)
    b2e8:	df000104 	addi	fp,sp,4
    b2ec:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    b2f0:	e13fff17 	ldw	r4,-4(fp)
    b2f4:	000b29c0 	call	b29c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    b2f8:	003fff06 	br	b2f8 <_exit+0x1c>

0000b2fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b2fc:	defff904 	addi	sp,sp,-28
    b300:	dfc00615 	stw	ra,24(sp)
    b304:	df000515 	stw	fp,20(sp)
    b308:	df000504 	addi	fp,sp,20
    b30c:	e13ffc15 	stw	r4,-16(fp)
    b310:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b314:	e0bffc17 	ldw	r2,-16(fp)
    b318:	1004803a 	cmplt	r2,r2,zero
    b31c:	1000081e 	bne	r2,zero,b340 <fstat+0x44>
    b320:	e0bffc17 	ldw	r2,-16(fp)
    b324:	10800324 	muli	r2,r2,12
    b328:	1007883a 	mov	r3,r2
    b32c:	00800074 	movhi	r2,1
    b330:	10b9ed04 	addi	r2,r2,-6220
    b334:	1887883a 	add	r3,r3,r2
    b338:	e0ffff15 	stw	r3,-4(fp)
    b33c:	00000106 	br	b344 <fstat+0x48>
    b340:	e03fff15 	stw	zero,-4(fp)
    b344:	e0bfff17 	ldw	r2,-4(fp)
    b348:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b34c:	e0bffb17 	ldw	r2,-20(fp)
    b350:	1005003a 	cmpeq	r2,r2,zero
    b354:	1000121e 	bne	r2,zero,b3a0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b358:	e0bffb17 	ldw	r2,-20(fp)
    b35c:	10800017 	ldw	r2,0(r2)
    b360:	10800817 	ldw	r2,32(r2)
    b364:	1005003a 	cmpeq	r2,r2,zero
    b368:	1000081e 	bne	r2,zero,b38c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b36c:	e0bffb17 	ldw	r2,-20(fp)
    b370:	10800017 	ldw	r2,0(r2)
    b374:	10800817 	ldw	r2,32(r2)
    b378:	e13ffb17 	ldw	r4,-20(fp)
    b37c:	e17ffd17 	ldw	r5,-12(fp)
    b380:	103ee83a 	callr	r2
    b384:	e0bffe15 	stw	r2,-8(fp)
    b388:	00000b06 	br	b3b8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b38c:	e0fffd17 	ldw	r3,-12(fp)
    b390:	00880004 	movi	r2,8192
    b394:	18800115 	stw	r2,4(r3)
      return 0;
    b398:	e03ffe15 	stw	zero,-8(fp)
    b39c:	00000606 	br	b3b8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b3a0:	000b3d00 	call	b3d0 <alt_get_errno>
    b3a4:	1007883a 	mov	r3,r2
    b3a8:	00801444 	movi	r2,81
    b3ac:	18800015 	stw	r2,0(r3)
    return -1;
    b3b0:	00bfffc4 	movi	r2,-1
    b3b4:	e0bffe15 	stw	r2,-8(fp)
    b3b8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b3bc:	e037883a 	mov	sp,fp
    b3c0:	dfc00117 	ldw	ra,4(sp)
    b3c4:	df000017 	ldw	fp,0(sp)
    b3c8:	dec00204 	addi	sp,sp,8
    b3cc:	f800283a 	ret

0000b3d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b3d0:	defffd04 	addi	sp,sp,-12
    b3d4:	dfc00215 	stw	ra,8(sp)
    b3d8:	df000115 	stw	fp,4(sp)
    b3dc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3e0:	00800074 	movhi	r2,1
    b3e4:	10be7104 	addi	r2,r2,-1596
    b3e8:	10800017 	ldw	r2,0(r2)
    b3ec:	1005003a 	cmpeq	r2,r2,zero
    b3f0:	1000061e 	bne	r2,zero,b40c <alt_get_errno+0x3c>
    b3f4:	00800074 	movhi	r2,1
    b3f8:	10be7104 	addi	r2,r2,-1596
    b3fc:	10800017 	ldw	r2,0(r2)
    b400:	103ee83a 	callr	r2
    b404:	e0bfff15 	stw	r2,-4(fp)
    b408:	00000306 	br	b418 <alt_get_errno+0x48>
    b40c:	00800074 	movhi	r2,1
    b410:	10851904 	addi	r2,r2,5220
    b414:	e0bfff15 	stw	r2,-4(fp)
    b418:	e0bfff17 	ldw	r2,-4(fp)
}
    b41c:	e037883a 	mov	sp,fp
    b420:	dfc00117 	ldw	ra,4(sp)
    b424:	df000017 	ldw	fp,0(sp)
    b428:	dec00204 	addi	sp,sp,8
    b42c:	f800283a 	ret

0000b430 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    b430:	deffef04 	addi	sp,sp,-68
    b434:	df001015 	stw	fp,64(sp)
    b438:	df001004 	addi	fp,sp,64
    b43c:	e13ffc15 	stw	r4,-16(fp)
    b440:	e17ffd15 	stw	r5,-12(fp)
    b444:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    b448:	00bffa84 	movi	r2,-22
    b44c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    b450:	e0bffc17 	ldw	r2,-16(fp)
    b454:	10800828 	cmpgeui	r2,r2,32
    b458:	1000601e 	bne	r2,zero,b5dc <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b45c:	0005303a 	rdctl	r2,status
    b460:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b464:	e0fff917 	ldw	r3,-28(fp)
    b468:	00bfff84 	movi	r2,-2
    b46c:	1884703a 	and	r2,r3,r2
    b470:	1001703a 	wrctl	status,r2
  
  return context;
    b474:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    b478:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    b47c:	e0bffc17 	ldw	r2,-16(fp)
    b480:	00c00074 	movhi	r3,1
    b484:	18c65004 	addi	r3,r3,6464
    b488:	100490fa 	slli	r2,r2,3
    b48c:	10c7883a 	add	r3,r2,r3
    b490:	e0bffe17 	ldw	r2,-8(fp)
    b494:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    b498:	e0bffc17 	ldw	r2,-16(fp)
    b49c:	00c00074 	movhi	r3,1
    b4a0:	18c65004 	addi	r3,r3,6464
    b4a4:	100490fa 	slli	r2,r2,3
    b4a8:	10c5883a 	add	r2,r2,r3
    b4ac:	10c00104 	addi	r3,r2,4
    b4b0:	e0bffd17 	ldw	r2,-12(fp)
    b4b4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    b4b8:	e0bffe17 	ldw	r2,-8(fp)
    b4bc:	1005003a 	cmpeq	r2,r2,zero
    b4c0:	1000201e 	bne	r2,zero,b544 <alt_irq_register+0x114>
    b4c4:	e0bffc17 	ldw	r2,-16(fp)
    b4c8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4cc:	0005303a 	rdctl	r2,status
    b4d0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4d4:	e0fff617 	ldw	r3,-40(fp)
    b4d8:	00bfff84 	movi	r2,-2
    b4dc:	1884703a 	and	r2,r3,r2
    b4e0:	1001703a 	wrctl	status,r2
  
  return context;
    b4e4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b4e8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    b4ec:	e0fff717 	ldw	r3,-36(fp)
    b4f0:	00800044 	movi	r2,1
    b4f4:	10c4983a 	sll	r2,r2,r3
    b4f8:	1007883a 	mov	r3,r2
    b4fc:	00800074 	movhi	r2,1
    b500:	10851d04 	addi	r2,r2,5236
    b504:	10800017 	ldw	r2,0(r2)
    b508:	1886b03a 	or	r3,r3,r2
    b50c:	00800074 	movhi	r2,1
    b510:	10851d04 	addi	r2,r2,5236
    b514:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b518:	00800074 	movhi	r2,1
    b51c:	10851d04 	addi	r2,r2,5236
    b520:	10800017 	ldw	r2,0(r2)
    b524:	100170fa 	wrctl	ienable,r2
    b528:	e0bff817 	ldw	r2,-32(fp)
    b52c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b530:	e0bff517 	ldw	r2,-44(fp)
    b534:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b538:	0005883a 	mov	r2,zero
    b53c:	e0bfff15 	stw	r2,-4(fp)
    b540:	00002006 	br	b5c4 <alt_irq_register+0x194>
    b544:	e0bffc17 	ldw	r2,-16(fp)
    b548:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b54c:	0005303a 	rdctl	r2,status
    b550:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b554:	e0fff217 	ldw	r3,-56(fp)
    b558:	00bfff84 	movi	r2,-2
    b55c:	1884703a 	and	r2,r3,r2
    b560:	1001703a 	wrctl	status,r2
  
  return context;
    b564:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b568:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    b56c:	e0fff317 	ldw	r3,-52(fp)
    b570:	00800044 	movi	r2,1
    b574:	10c4983a 	sll	r2,r2,r3
    b578:	0084303a 	nor	r2,zero,r2
    b57c:	1007883a 	mov	r3,r2
    b580:	00800074 	movhi	r2,1
    b584:	10851d04 	addi	r2,r2,5236
    b588:	10800017 	ldw	r2,0(r2)
    b58c:	1886703a 	and	r3,r3,r2
    b590:	00800074 	movhi	r2,1
    b594:	10851d04 	addi	r2,r2,5236
    b598:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b59c:	00800074 	movhi	r2,1
    b5a0:	10851d04 	addi	r2,r2,5236
    b5a4:	10800017 	ldw	r2,0(r2)
    b5a8:	100170fa 	wrctl	ienable,r2
    b5ac:	e0bff417 	ldw	r2,-48(fp)
    b5b0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5b4:	e0bff117 	ldw	r2,-60(fp)
    b5b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b5bc:	0005883a 	mov	r2,zero
    b5c0:	e0bfff15 	stw	r2,-4(fp)
    b5c4:	e0bfff17 	ldw	r2,-4(fp)
    b5c8:	e0bffb15 	stw	r2,-20(fp)
    b5cc:	e0bffa17 	ldw	r2,-24(fp)
    b5d0:	e0bff015 	stw	r2,-64(fp)
    b5d4:	e0bff017 	ldw	r2,-64(fp)
    b5d8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    b5dc:	e0bffb17 	ldw	r2,-20(fp)
}
    b5e0:	e037883a 	mov	sp,fp
    b5e4:	df000017 	ldw	fp,0(sp)
    b5e8:	dec00104 	addi	sp,sp,4
    b5ec:	f800283a 	ret

0000b5f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b5f0:	deffeb04 	addi	sp,sp,-84
    b5f4:	dfc01415 	stw	ra,80(sp)
    b5f8:	df001315 	stw	fp,76(sp)
    b5fc:	df001304 	addi	fp,sp,76
    b600:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b604:	e0bffd17 	ldw	r2,-12(fp)
    b608:	1004803a 	cmplt	r2,r2,zero
    b60c:	1000081e 	bne	r2,zero,b630 <isatty+0x40>
    b610:	e0bffd17 	ldw	r2,-12(fp)
    b614:	10800324 	muli	r2,r2,12
    b618:	1007883a 	mov	r3,r2
    b61c:	00800074 	movhi	r2,1
    b620:	10b9ed04 	addi	r2,r2,-6220
    b624:	1887883a 	add	r3,r3,r2
    b628:	e0ffff15 	stw	r3,-4(fp)
    b62c:	00000106 	br	b634 <isatty+0x44>
    b630:	e03fff15 	stw	zero,-4(fp)
    b634:	e0bfff17 	ldw	r2,-4(fp)
    b638:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b63c:	e0bfed17 	ldw	r2,-76(fp)
    b640:	1005003a 	cmpeq	r2,r2,zero
    b644:	10000f1e 	bne	r2,zero,b684 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b648:	e0bfed17 	ldw	r2,-76(fp)
    b64c:	10800017 	ldw	r2,0(r2)
    b650:	10800817 	ldw	r2,32(r2)
    b654:	1004c03a 	cmpne	r2,r2,zero
    b658:	1000031e 	bne	r2,zero,b668 <isatty+0x78>
    {
      return 1;
    b65c:	00800044 	movi	r2,1
    b660:	e0bffe15 	stw	r2,-8(fp)
    b664:	00000c06 	br	b698 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b668:	e17fee04 	addi	r5,fp,-72
    b66c:	e13ffd17 	ldw	r4,-12(fp)
    b670:	000b2fc0 	call	b2fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b674:	e0bfef17 	ldw	r2,-68(fp)
    b678:	10880020 	cmpeqi	r2,r2,8192
    b67c:	e0bffe15 	stw	r2,-8(fp)
    b680:	00000506 	br	b698 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b684:	000b6b00 	call	b6b0 <alt_get_errno>
    b688:	1007883a 	mov	r3,r2
    b68c:	00801444 	movi	r2,81
    b690:	18800015 	stw	r2,0(r3)
    return 0;
    b694:	e03ffe15 	stw	zero,-8(fp)
    b698:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b69c:	e037883a 	mov	sp,fp
    b6a0:	dfc00117 	ldw	ra,4(sp)
    b6a4:	df000017 	ldw	fp,0(sp)
    b6a8:	dec00204 	addi	sp,sp,8
    b6ac:	f800283a 	ret

0000b6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6b0:	defffd04 	addi	sp,sp,-12
    b6b4:	dfc00215 	stw	ra,8(sp)
    b6b8:	df000115 	stw	fp,4(sp)
    b6bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6c0:	00800074 	movhi	r2,1
    b6c4:	10be7104 	addi	r2,r2,-1596
    b6c8:	10800017 	ldw	r2,0(r2)
    b6cc:	1005003a 	cmpeq	r2,r2,zero
    b6d0:	1000061e 	bne	r2,zero,b6ec <alt_get_errno+0x3c>
    b6d4:	00800074 	movhi	r2,1
    b6d8:	10be7104 	addi	r2,r2,-1596
    b6dc:	10800017 	ldw	r2,0(r2)
    b6e0:	103ee83a 	callr	r2
    b6e4:	e0bfff15 	stw	r2,-4(fp)
    b6e8:	00000306 	br	b6f8 <alt_get_errno+0x48>
    b6ec:	00800074 	movhi	r2,1
    b6f0:	10851904 	addi	r2,r2,5220
    b6f4:	e0bfff15 	stw	r2,-4(fp)
    b6f8:	e0bfff17 	ldw	r2,-4(fp)
}
    b6fc:	e037883a 	mov	sp,fp
    b700:	dfc00117 	ldw	ra,4(sp)
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00204 	addi	sp,sp,8
    b70c:	f800283a 	ret

0000b710 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b710:	defffe04 	addi	sp,sp,-8
    b714:	dfc00115 	stw	ra,4(sp)
    b718:	df000015 	stw	fp,0(sp)
    b71c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b720:	01000074 	movhi	r4,1
    b724:	213e7604 	addi	r4,r4,-1576
    b728:	01400074 	movhi	r5,1
    b72c:	2977de04 	addi	r5,r5,-8328
    b730:	01800074 	movhi	r6,1
    b734:	31be7604 	addi	r6,r6,-1576
    b738:	000b7900 	call	b790 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b73c:	01000034 	movhi	r4,0
    b740:	21000004 	addi	r4,r4,0
    b744:	01408034 	movhi	r5,512
    b748:	29400804 	addi	r5,r5,32
    b74c:	01808034 	movhi	r6,512
    b750:	31806d04 	addi	r6,r6,436
    b754:	000b7900 	call	b790 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b758:	01000074 	movhi	r4,1
    b75c:	2136d404 	addi	r4,r4,-9392
    b760:	01400074 	movhi	r5,1
    b764:	2976d404 	addi	r5,r5,-9392
    b768:	01800074 	movhi	r6,1
    b76c:	31b7de04 	addi	r6,r6,-8328
    b770:	000b7900 	call	b790 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b774:	000cbdc0 	call	cbdc <alt_dcache_flush_all>
  alt_icache_flush_all();
    b778:	000cdd40 	call	cdd4 <alt_icache_flush_all>
}
    b77c:	e037883a 	mov	sp,fp
    b780:	dfc00117 	ldw	ra,4(sp)
    b784:	df000017 	ldw	fp,0(sp)
    b788:	dec00204 	addi	sp,sp,8
    b78c:	f800283a 	ret

0000b790 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b790:	defffc04 	addi	sp,sp,-16
    b794:	df000315 	stw	fp,12(sp)
    b798:	df000304 	addi	fp,sp,12
    b79c:	e13ffd15 	stw	r4,-12(fp)
    b7a0:	e17ffe15 	stw	r5,-8(fp)
    b7a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b7a8:	e0fffe17 	ldw	r3,-8(fp)
    b7ac:	e0bffd17 	ldw	r2,-12(fp)
    b7b0:	18800e26 	beq	r3,r2,b7ec <alt_load_section+0x5c>
  {
    while( to != end )
    b7b4:	00000a06 	br	b7e0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b7b8:	e0bffd17 	ldw	r2,-12(fp)
    b7bc:	10c00017 	ldw	r3,0(r2)
    b7c0:	e0bffe17 	ldw	r2,-8(fp)
    b7c4:	10c00015 	stw	r3,0(r2)
    b7c8:	e0bffe17 	ldw	r2,-8(fp)
    b7cc:	10800104 	addi	r2,r2,4
    b7d0:	e0bffe15 	stw	r2,-8(fp)
    b7d4:	e0bffd17 	ldw	r2,-12(fp)
    b7d8:	10800104 	addi	r2,r2,4
    b7dc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b7e0:	e0fffe17 	ldw	r3,-8(fp)
    b7e4:	e0bfff17 	ldw	r2,-4(fp)
    b7e8:	18bff31e 	bne	r3,r2,b7b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b7ec:	e037883a 	mov	sp,fp
    b7f0:	df000017 	ldw	fp,0(sp)
    b7f4:	dec00104 	addi	sp,sp,4
    b7f8:	f800283a 	ret

0000b7fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b7fc:	defff804 	addi	sp,sp,-32
    b800:	dfc00715 	stw	ra,28(sp)
    b804:	df000615 	stw	fp,24(sp)
    b808:	df000604 	addi	fp,sp,24
    b80c:	e13ffc15 	stw	r4,-16(fp)
    b810:	e17ffd15 	stw	r5,-12(fp)
    b814:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b818:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b81c:	e0bffc17 	ldw	r2,-16(fp)
    b820:	1004803a 	cmplt	r2,r2,zero
    b824:	1000081e 	bne	r2,zero,b848 <lseek+0x4c>
    b828:	e0bffc17 	ldw	r2,-16(fp)
    b82c:	10800324 	muli	r2,r2,12
    b830:	1007883a 	mov	r3,r2
    b834:	00800074 	movhi	r2,1
    b838:	10b9ed04 	addi	r2,r2,-6220
    b83c:	1887883a 	add	r3,r3,r2
    b840:	e0ffff15 	stw	r3,-4(fp)
    b844:	00000106 	br	b84c <lseek+0x50>
    b848:	e03fff15 	stw	zero,-4(fp)
    b84c:	e0bfff17 	ldw	r2,-4(fp)
    b850:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b854:	e0bffb17 	ldw	r2,-20(fp)
    b858:	1005003a 	cmpeq	r2,r2,zero
    b85c:	1000111e 	bne	r2,zero,b8a4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b860:	e0bffb17 	ldw	r2,-20(fp)
    b864:	10800017 	ldw	r2,0(r2)
    b868:	10800717 	ldw	r2,28(r2)
    b86c:	1005003a 	cmpeq	r2,r2,zero
    b870:	1000091e 	bne	r2,zero,b898 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b874:	e0bffb17 	ldw	r2,-20(fp)
    b878:	10800017 	ldw	r2,0(r2)
    b87c:	10800717 	ldw	r2,28(r2)
    b880:	e13ffb17 	ldw	r4,-20(fp)
    b884:	e17ffd17 	ldw	r5,-12(fp)
    b888:	e1bffe17 	ldw	r6,-8(fp)
    b88c:	103ee83a 	callr	r2
    b890:	e0bffa15 	stw	r2,-24(fp)
    b894:	00000506 	br	b8ac <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b898:	00bfde84 	movi	r2,-134
    b89c:	e0bffa15 	stw	r2,-24(fp)
    b8a0:	00000206 	br	b8ac <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b8a4:	00bfebc4 	movi	r2,-81
    b8a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b8ac:	e0bffa17 	ldw	r2,-24(fp)
    b8b0:	1004403a 	cmpge	r2,r2,zero
    b8b4:	1000071e 	bne	r2,zero,b8d4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b8b8:	000b8ec0 	call	b8ec <alt_get_errno>
    b8bc:	1007883a 	mov	r3,r2
    b8c0:	e0bffa17 	ldw	r2,-24(fp)
    b8c4:	0085c83a 	sub	r2,zero,r2
    b8c8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b8cc:	00bfffc4 	movi	r2,-1
    b8d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b8d4:	e0bffa17 	ldw	r2,-24(fp)
}
    b8d8:	e037883a 	mov	sp,fp
    b8dc:	dfc00117 	ldw	ra,4(sp)
    b8e0:	df000017 	ldw	fp,0(sp)
    b8e4:	dec00204 	addi	sp,sp,8
    b8e8:	f800283a 	ret

0000b8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8ec:	defffd04 	addi	sp,sp,-12
    b8f0:	dfc00215 	stw	ra,8(sp)
    b8f4:	df000115 	stw	fp,4(sp)
    b8f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8fc:	00800074 	movhi	r2,1
    b900:	10be7104 	addi	r2,r2,-1596
    b904:	10800017 	ldw	r2,0(r2)
    b908:	1005003a 	cmpeq	r2,r2,zero
    b90c:	1000061e 	bne	r2,zero,b928 <alt_get_errno+0x3c>
    b910:	00800074 	movhi	r2,1
    b914:	10be7104 	addi	r2,r2,-1596
    b918:	10800017 	ldw	r2,0(r2)
    b91c:	103ee83a 	callr	r2
    b920:	e0bfff15 	stw	r2,-4(fp)
    b924:	00000306 	br	b934 <alt_get_errno+0x48>
    b928:	00800074 	movhi	r2,1
    b92c:	10851904 	addi	r2,r2,5220
    b930:	e0bfff15 	stw	r2,-4(fp)
    b934:	e0bfff17 	ldw	r2,-4(fp)
}
    b938:	e037883a 	mov	sp,fp
    b93c:	dfc00117 	ldw	ra,4(sp)
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00204 	addi	sp,sp,8
    b948:	f800283a 	ret

0000b94c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b94c:	defffd04 	addi	sp,sp,-12
    b950:	dfc00215 	stw	ra,8(sp)
    b954:	df000115 	stw	fp,4(sp)
    b958:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b95c:	0009883a 	mov	r4,zero
    b960:	000be140 	call	be14 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b964:	000be480 	call	be48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b968:	01000074 	movhi	r4,1
    b96c:	2137d404 	addi	r4,r4,-8368
    b970:	01400074 	movhi	r5,1
    b974:	2977d404 	addi	r5,r5,-8368
    b978:	01800074 	movhi	r6,1
    b97c:	31b7d404 	addi	r6,r6,-8368
    b980:	000d1940 	call	d194 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b984:	000cd0c0 	call	cd0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b988:	01000074 	movhi	r4,1
    b98c:	21335c04 	addi	r4,r4,-12944
    b990:	000d9900 	call	d990 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b994:	d126b917 	ldw	r4,-25884(gp)
    b998:	d166ba17 	ldw	r5,-25880(gp)
    b99c:	d1a6bb17 	ldw	r6,-25876(gp)
    b9a0:	00007800 	call	780 <main>
    b9a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b9a8:	01000044 	movi	r4,1
    b9ac:	000b1140 	call	b114 <close>
  exit (result);
    b9b0:	e13fff17 	ldw	r4,-4(fp)
    b9b4:	00019080 	call	1908 <exit>

0000b9b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b9b8:	defffe04 	addi	sp,sp,-8
    b9bc:	df000115 	stw	fp,4(sp)
    b9c0:	df000104 	addi	fp,sp,4
    b9c4:	e13fff15 	stw	r4,-4(fp)
}
    b9c8:	e037883a 	mov	sp,fp
    b9cc:	df000017 	ldw	fp,0(sp)
    b9d0:	dec00104 	addi	sp,sp,4
    b9d4:	f800283a 	ret

0000b9d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b9d8:	defffe04 	addi	sp,sp,-8
    b9dc:	df000115 	stw	fp,4(sp)
    b9e0:	df000104 	addi	fp,sp,4
    b9e4:	e13fff15 	stw	r4,-4(fp)
}
    b9e8:	e037883a 	mov	sp,fp
    b9ec:	df000017 	ldw	fp,0(sp)
    b9f0:	dec00104 	addi	sp,sp,4
    b9f4:	f800283a 	ret

0000b9f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b9f8:	defff704 	addi	sp,sp,-36
    b9fc:	dfc00815 	stw	ra,32(sp)
    ba00:	df000715 	stw	fp,28(sp)
    ba04:	df000704 	addi	fp,sp,28
    ba08:	e13ffb15 	stw	r4,-20(fp)
    ba0c:	e17ffc15 	stw	r5,-16(fp)
    ba10:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ba14:	e0bffb17 	ldw	r2,-20(fp)
    ba18:	1004803a 	cmplt	r2,r2,zero
    ba1c:	1000081e 	bne	r2,zero,ba40 <read+0x48>
    ba20:	e0bffb17 	ldw	r2,-20(fp)
    ba24:	10800324 	muli	r2,r2,12
    ba28:	1007883a 	mov	r3,r2
    ba2c:	00800074 	movhi	r2,1
    ba30:	10b9ed04 	addi	r2,r2,-6220
    ba34:	1887883a 	add	r3,r3,r2
    ba38:	e0ffff15 	stw	r3,-4(fp)
    ba3c:	00000106 	br	ba44 <read+0x4c>
    ba40:	e03fff15 	stw	zero,-4(fp)
    ba44:	e0bfff17 	ldw	r2,-4(fp)
    ba48:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    ba4c:	e0bffa17 	ldw	r2,-24(fp)
    ba50:	1005003a 	cmpeq	r2,r2,zero
    ba54:	1000241e 	bne	r2,zero,bae8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ba58:	e0bffa17 	ldw	r2,-24(fp)
    ba5c:	10800217 	ldw	r2,8(r2)
    ba60:	108000cc 	andi	r2,r2,3
    ba64:	10800060 	cmpeqi	r2,r2,1
    ba68:	10001a1e 	bne	r2,zero,bad4 <read+0xdc>
    ba6c:	e0bffa17 	ldw	r2,-24(fp)
    ba70:	10800017 	ldw	r2,0(r2)
    ba74:	10800517 	ldw	r2,20(r2)
    ba78:	1005003a 	cmpeq	r2,r2,zero
    ba7c:	1000151e 	bne	r2,zero,bad4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ba80:	e0bffa17 	ldw	r2,-24(fp)
    ba84:	10800017 	ldw	r2,0(r2)
    ba88:	10800517 	ldw	r2,20(r2)
    ba8c:	e17ffc17 	ldw	r5,-16(fp)
    ba90:	e1bffd17 	ldw	r6,-12(fp)
    ba94:	e13ffa17 	ldw	r4,-24(fp)
    ba98:	103ee83a 	callr	r2
    ba9c:	e0bff915 	stw	r2,-28(fp)
    baa0:	e0bff917 	ldw	r2,-28(fp)
    baa4:	1004403a 	cmpge	r2,r2,zero
    baa8:	1000071e 	bne	r2,zero,bac8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    baac:	000bb180 	call	bb18 <alt_get_errno>
    bab0:	e0fff917 	ldw	r3,-28(fp)
    bab4:	00c7c83a 	sub	r3,zero,r3
    bab8:	10c00015 	stw	r3,0(r2)
          return -1;
    babc:	00bfffc4 	movi	r2,-1
    bac0:	e0bffe15 	stw	r2,-8(fp)
    bac4:	00000e06 	br	bb00 <read+0x108>
        }
        return rval;
    bac8:	e0bff917 	ldw	r2,-28(fp)
    bacc:	e0bffe15 	stw	r2,-8(fp)
    bad0:	00000b06 	br	bb00 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    bad4:	000bb180 	call	bb18 <alt_get_errno>
    bad8:	1007883a 	mov	r3,r2
    badc:	00800344 	movi	r2,13
    bae0:	18800015 	stw	r2,0(r3)
    bae4:	00000406 	br	baf8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    bae8:	000bb180 	call	bb18 <alt_get_errno>
    baec:	1007883a 	mov	r3,r2
    baf0:	00801444 	movi	r2,81
    baf4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    baf8:	00bfffc4 	movi	r2,-1
    bafc:	e0bffe15 	stw	r2,-8(fp)
    bb00:	e0bffe17 	ldw	r2,-8(fp)
}
    bb04:	e037883a 	mov	sp,fp
    bb08:	dfc00117 	ldw	ra,4(sp)
    bb0c:	df000017 	ldw	fp,0(sp)
    bb10:	dec00204 	addi	sp,sp,8
    bb14:	f800283a 	ret

0000bb18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bb18:	defffd04 	addi	sp,sp,-12
    bb1c:	dfc00215 	stw	ra,8(sp)
    bb20:	df000115 	stw	fp,4(sp)
    bb24:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bb28:	00800074 	movhi	r2,1
    bb2c:	10be7104 	addi	r2,r2,-1596
    bb30:	10800017 	ldw	r2,0(r2)
    bb34:	1005003a 	cmpeq	r2,r2,zero
    bb38:	1000061e 	bne	r2,zero,bb54 <alt_get_errno+0x3c>
    bb3c:	00800074 	movhi	r2,1
    bb40:	10be7104 	addi	r2,r2,-1596
    bb44:	10800017 	ldw	r2,0(r2)
    bb48:	103ee83a 	callr	r2
    bb4c:	e0bfff15 	stw	r2,-4(fp)
    bb50:	00000306 	br	bb60 <alt_get_errno+0x48>
    bb54:	00800074 	movhi	r2,1
    bb58:	10851904 	addi	r2,r2,5220
    bb5c:	e0bfff15 	stw	r2,-4(fp)
    bb60:	e0bfff17 	ldw	r2,-4(fp)
}
    bb64:	e037883a 	mov	sp,fp
    bb68:	dfc00117 	ldw	ra,4(sp)
    bb6c:	df000017 	ldw	fp,0(sp)
    bb70:	dec00204 	addi	sp,sp,8
    bb74:	f800283a 	ret

0000bb78 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    bb78:	defffe04 	addi	sp,sp,-8
    bb7c:	df000115 	stw	fp,4(sp)
    bb80:	df000104 	addi	fp,sp,4
    bb84:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    bb88:	e0bfff17 	ldw	r2,-4(fp)
    bb8c:	108000d0 	cmplti	r2,r2,3
    bb90:	10000d1e 	bne	r2,zero,bbc8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    bb94:	e0bfff17 	ldw	r2,-4(fp)
    bb98:	00c00074 	movhi	r3,1
    bb9c:	18f9ed04 	addi	r3,r3,-6220
    bba0:	10800324 	muli	r2,r2,12
    bba4:	10c5883a 	add	r2,r2,r3
    bba8:	10800204 	addi	r2,r2,8
    bbac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bbb0:	e0bfff17 	ldw	r2,-4(fp)
    bbb4:	00c00074 	movhi	r3,1
    bbb8:	18f9ed04 	addi	r3,r3,-6220
    bbbc:	10800324 	muli	r2,r2,12
    bbc0:	10c5883a 	add	r2,r2,r3
    bbc4:	10000015 	stw	zero,0(r2)
  }
}
    bbc8:	e037883a 	mov	sp,fp
    bbcc:	df000017 	ldw	fp,0(sp)
    bbd0:	dec00104 	addi	sp,sp,4
    bbd4:	f800283a 	ret

0000bbd8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    bbd8:	defff804 	addi	sp,sp,-32
    bbdc:	df000715 	stw	fp,28(sp)
    bbe0:	df000704 	addi	fp,sp,28
    bbe4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bbe8:	0005303a 	rdctl	r2,status
    bbec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bbf0:	e0fffb17 	ldw	r3,-20(fp)
    bbf4:	00bfff84 	movi	r2,-2
    bbf8:	1884703a 	and	r2,r3,r2
    bbfc:	1001703a 	wrctl	status,r2
  
  return context;
    bc00:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    bc04:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    bc08:	d0a00e17 	ldw	r2,-32712(gp)
    bc0c:	10c000c4 	addi	r3,r2,3
    bc10:	00bfff04 	movi	r2,-4
    bc14:	1884703a 	and	r2,r3,r2
    bc18:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    bc1c:	d0e00e17 	ldw	r3,-32712(gp)
    bc20:	e0bffe17 	ldw	r2,-8(fp)
    bc24:	1887883a 	add	r3,r3,r2
    bc28:	00808034 	movhi	r2,512
    bc2c:	10800004 	addi	r2,r2,0
    bc30:	10c0072e 	bgeu	r2,r3,bc50 <sbrk+0x78>
    bc34:	e0bffd17 	ldw	r2,-12(fp)
    bc38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc3c:	e0bffa17 	ldw	r2,-24(fp)
    bc40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    bc44:	00bfffc4 	movi	r2,-1
    bc48:	e0bfff15 	stw	r2,-4(fp)
    bc4c:	00000c06 	br	bc80 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    bc50:	d0a00e17 	ldw	r2,-32712(gp)
    bc54:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    bc58:	d0e00e17 	ldw	r3,-32712(gp)
    bc5c:	e0bffe17 	ldw	r2,-8(fp)
    bc60:	1885883a 	add	r2,r3,r2
    bc64:	d0a00e15 	stw	r2,-32712(gp)
    bc68:	e0bffd17 	ldw	r2,-12(fp)
    bc6c:	e0bff915 	stw	r2,-28(fp)
    bc70:	e0bff917 	ldw	r2,-28(fp)
    bc74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    bc78:	e0bffc17 	ldw	r2,-16(fp)
    bc7c:	e0bfff15 	stw	r2,-4(fp)
    bc80:	e0bfff17 	ldw	r2,-4(fp)
} 
    bc84:	e037883a 	mov	sp,fp
    bc88:	df000017 	ldw	fp,0(sp)
    bc8c:	dec00104 	addi	sp,sp,4
    bc90:	f800283a 	ret

0000bc94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bc94:	defff704 	addi	sp,sp,-36
    bc98:	dfc00815 	stw	ra,32(sp)
    bc9c:	df000715 	stw	fp,28(sp)
    bca0:	df000704 	addi	fp,sp,28
    bca4:	e13ffb15 	stw	r4,-20(fp)
    bca8:	e17ffc15 	stw	r5,-16(fp)
    bcac:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bcb0:	e0bffb17 	ldw	r2,-20(fp)
    bcb4:	1004803a 	cmplt	r2,r2,zero
    bcb8:	1000081e 	bne	r2,zero,bcdc <write+0x48>
    bcbc:	e0bffb17 	ldw	r2,-20(fp)
    bcc0:	10800324 	muli	r2,r2,12
    bcc4:	1007883a 	mov	r3,r2
    bcc8:	00800074 	movhi	r2,1
    bccc:	10b9ed04 	addi	r2,r2,-6220
    bcd0:	1887883a 	add	r3,r3,r2
    bcd4:	e0ffff15 	stw	r3,-4(fp)
    bcd8:	00000106 	br	bce0 <write+0x4c>
    bcdc:	e03fff15 	stw	zero,-4(fp)
    bce0:	e0bfff17 	ldw	r2,-4(fp)
    bce4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bce8:	e0bffa17 	ldw	r2,-24(fp)
    bcec:	1005003a 	cmpeq	r2,r2,zero
    bcf0:	1000241e 	bne	r2,zero,bd84 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bcf4:	e0bffa17 	ldw	r2,-24(fp)
    bcf8:	10800217 	ldw	r2,8(r2)
    bcfc:	108000cc 	andi	r2,r2,3
    bd00:	1005003a 	cmpeq	r2,r2,zero
    bd04:	10001a1e 	bne	r2,zero,bd70 <write+0xdc>
    bd08:	e0bffa17 	ldw	r2,-24(fp)
    bd0c:	10800017 	ldw	r2,0(r2)
    bd10:	10800617 	ldw	r2,24(r2)
    bd14:	1005003a 	cmpeq	r2,r2,zero
    bd18:	1000151e 	bne	r2,zero,bd70 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bd1c:	e0bffa17 	ldw	r2,-24(fp)
    bd20:	10800017 	ldw	r2,0(r2)
    bd24:	10800617 	ldw	r2,24(r2)
    bd28:	e17ffc17 	ldw	r5,-16(fp)
    bd2c:	e1bffd17 	ldw	r6,-12(fp)
    bd30:	e13ffa17 	ldw	r4,-24(fp)
    bd34:	103ee83a 	callr	r2
    bd38:	e0bff915 	stw	r2,-28(fp)
    bd3c:	e0bff917 	ldw	r2,-28(fp)
    bd40:	1004403a 	cmpge	r2,r2,zero
    bd44:	1000071e 	bne	r2,zero,bd64 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    bd48:	000bdb40 	call	bdb4 <alt_get_errno>
    bd4c:	e0fff917 	ldw	r3,-28(fp)
    bd50:	00c7c83a 	sub	r3,zero,r3
    bd54:	10c00015 	stw	r3,0(r2)
        return -1;
    bd58:	00bfffc4 	movi	r2,-1
    bd5c:	e0bffe15 	stw	r2,-8(fp)
    bd60:	00000e06 	br	bd9c <write+0x108>
      }
      return rval;
    bd64:	e0bff917 	ldw	r2,-28(fp)
    bd68:	e0bffe15 	stw	r2,-8(fp)
    bd6c:	00000b06 	br	bd9c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bd70:	000bdb40 	call	bdb4 <alt_get_errno>
    bd74:	1007883a 	mov	r3,r2
    bd78:	00800344 	movi	r2,13
    bd7c:	18800015 	stw	r2,0(r3)
    bd80:	00000406 	br	bd94 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bd84:	000bdb40 	call	bdb4 <alt_get_errno>
    bd88:	1007883a 	mov	r3,r2
    bd8c:	00801444 	movi	r2,81
    bd90:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bd94:	00bfffc4 	movi	r2,-1
    bd98:	e0bffe15 	stw	r2,-8(fp)
    bd9c:	e0bffe17 	ldw	r2,-8(fp)
}
    bda0:	e037883a 	mov	sp,fp
    bda4:	dfc00117 	ldw	ra,4(sp)
    bda8:	df000017 	ldw	fp,0(sp)
    bdac:	dec00204 	addi	sp,sp,8
    bdb0:	f800283a 	ret

0000bdb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bdb4:	defffd04 	addi	sp,sp,-12
    bdb8:	dfc00215 	stw	ra,8(sp)
    bdbc:	df000115 	stw	fp,4(sp)
    bdc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bdc4:	00800074 	movhi	r2,1
    bdc8:	10be7104 	addi	r2,r2,-1596
    bdcc:	10800017 	ldw	r2,0(r2)
    bdd0:	1005003a 	cmpeq	r2,r2,zero
    bdd4:	1000061e 	bne	r2,zero,bdf0 <alt_get_errno+0x3c>
    bdd8:	00800074 	movhi	r2,1
    bddc:	10be7104 	addi	r2,r2,-1596
    bde0:	10800017 	ldw	r2,0(r2)
    bde4:	103ee83a 	callr	r2
    bde8:	e0bfff15 	stw	r2,-4(fp)
    bdec:	00000306 	br	bdfc <alt_get_errno+0x48>
    bdf0:	00800074 	movhi	r2,1
    bdf4:	10851904 	addi	r2,r2,5220
    bdf8:	e0bfff15 	stw	r2,-4(fp)
    bdfc:	e0bfff17 	ldw	r2,-4(fp)
}
    be00:	e037883a 	mov	sp,fp
    be04:	dfc00117 	ldw	ra,4(sp)
    be08:	df000017 	ldw	fp,0(sp)
    be0c:	dec00204 	addi	sp,sp,8
    be10:	f800283a 	ret

0000be14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    be14:	defffd04 	addi	sp,sp,-12
    be18:	dfc00215 	stw	ra,8(sp)
    be1c:	df000115 	stw	fp,4(sp)
    be20:	df000104 	addi	fp,sp,4
    be24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    be28:	000d6740 	call	d674 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    be2c:	00800044 	movi	r2,1
    be30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    be34:	e037883a 	mov	sp,fp
    be38:	dfc00117 	ldw	ra,4(sp)
    be3c:	df000017 	ldw	fp,0(sp)
    be40:	dec00204 	addi	sp,sp,8
    be44:	f800283a 	ret

0000be48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    be48:	defffe04 	addi	sp,sp,-8
    be4c:	dfc00115 	stw	ra,4(sp)
    be50:	df000015 	stw	fp,0(sp)
    be54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    be58:	01008034 	movhi	r4,512
    be5c:	21142804 	addi	r4,r4,20640
    be60:	000b883a 	mov	r5,zero
    be64:	000d883a 	mov	r6,zero
    be68:	01c0fa04 	movi	r7,1000
    be6c:	000c9f80 	call	c9f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    be70:	01000074 	movhi	r4,1
    be74:	213a5704 	addi	r4,r4,-5796
    be78:	000b883a 	mov	r5,zero
    be7c:	018000c4 	movi	r6,3
    be80:	000c0240 	call	c024 <altera_avalon_jtag_uart_init>
    be84:	01000074 	movhi	r4,1
    be88:	213a4d04 	addi	r4,r4,-5836
    be8c:	000bea40 	call	bea4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
    be90:	e037883a 	mov	sp,fp
    be94:	dfc00117 	ldw	ra,4(sp)
    be98:	df000017 	ldw	fp,0(sp)
    be9c:	dec00204 	addi	sp,sp,8
    bea0:	f800283a 	ret

0000bea4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    bea4:	defffd04 	addi	sp,sp,-12
    bea8:	dfc00215 	stw	ra,8(sp)
    beac:	df000115 	stw	fp,4(sp)
    beb0:	df000104 	addi	fp,sp,4
    beb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    beb8:	e13fff17 	ldw	r4,-4(fp)
    bebc:	01400074 	movhi	r5,1
    bec0:	297e6e04 	addi	r5,r5,-1608
    bec4:	000cbf80 	call	cbf8 <alt_dev_llist_insert>
}
    bec8:	e037883a 	mov	sp,fp
    becc:	dfc00117 	ldw	ra,4(sp)
    bed0:	df000017 	ldw	fp,0(sp)
    bed4:	dec00204 	addi	sp,sp,8
    bed8:	f800283a 	ret

0000bedc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bedc:	defffa04 	addi	sp,sp,-24
    bee0:	dfc00515 	stw	ra,20(sp)
    bee4:	df000415 	stw	fp,16(sp)
    bee8:	df000404 	addi	fp,sp,16
    beec:	e13ffd15 	stw	r4,-12(fp)
    bef0:	e17ffe15 	stw	r5,-8(fp)
    bef4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bef8:	e0bffd17 	ldw	r2,-12(fp)
    befc:	10800017 	ldw	r2,0(r2)
    bf00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    bf04:	e0bffc17 	ldw	r2,-16(fp)
    bf08:	11000a04 	addi	r4,r2,40
    bf0c:	e0bffd17 	ldw	r2,-12(fp)
    bf10:	11c00217 	ldw	r7,8(r2)
    bf14:	e17ffe17 	ldw	r5,-8(fp)
    bf18:	e1bfff17 	ldw	r6,-4(fp)
    bf1c:	000c5240 	call	c524 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bf20:	e037883a 	mov	sp,fp
    bf24:	dfc00117 	ldw	ra,4(sp)
    bf28:	df000017 	ldw	fp,0(sp)
    bf2c:	dec00204 	addi	sp,sp,8
    bf30:	f800283a 	ret

0000bf34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bf34:	defffa04 	addi	sp,sp,-24
    bf38:	dfc00515 	stw	ra,20(sp)
    bf3c:	df000415 	stw	fp,16(sp)
    bf40:	df000404 	addi	fp,sp,16
    bf44:	e13ffd15 	stw	r4,-12(fp)
    bf48:	e17ffe15 	stw	r5,-8(fp)
    bf4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf50:	e0bffd17 	ldw	r2,-12(fp)
    bf54:	10800017 	ldw	r2,0(r2)
    bf58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bf5c:	e0bffc17 	ldw	r2,-16(fp)
    bf60:	11000a04 	addi	r4,r2,40
    bf64:	e0bffd17 	ldw	r2,-12(fp)
    bf68:	11c00217 	ldw	r7,8(r2)
    bf6c:	e17ffe17 	ldw	r5,-8(fp)
    bf70:	e1bfff17 	ldw	r6,-4(fp)
    bf74:	000c7480 	call	c748 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bf78:	e037883a 	mov	sp,fp
    bf7c:	dfc00117 	ldw	ra,4(sp)
    bf80:	df000017 	ldw	fp,0(sp)
    bf84:	dec00204 	addi	sp,sp,8
    bf88:	f800283a 	ret

0000bf8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bf8c:	defffc04 	addi	sp,sp,-16
    bf90:	dfc00315 	stw	ra,12(sp)
    bf94:	df000215 	stw	fp,8(sp)
    bf98:	df000204 	addi	fp,sp,8
    bf9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bfa0:	e0bfff17 	ldw	r2,-4(fp)
    bfa4:	10800017 	ldw	r2,0(r2)
    bfa8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bfac:	e0bffe17 	ldw	r2,-8(fp)
    bfb0:	11000a04 	addi	r4,r2,40
    bfb4:	e0bfff17 	ldw	r2,-4(fp)
    bfb8:	11400217 	ldw	r5,8(r2)
    bfbc:	000c3bc0 	call	c3bc <altera_avalon_jtag_uart_close>
}
    bfc0:	e037883a 	mov	sp,fp
    bfc4:	dfc00117 	ldw	ra,4(sp)
    bfc8:	df000017 	ldw	fp,0(sp)
    bfcc:	dec00204 	addi	sp,sp,8
    bfd0:	f800283a 	ret

0000bfd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bfd4:	defffa04 	addi	sp,sp,-24
    bfd8:	dfc00515 	stw	ra,20(sp)
    bfdc:	df000415 	stw	fp,16(sp)
    bfe0:	df000404 	addi	fp,sp,16
    bfe4:	e13ffd15 	stw	r4,-12(fp)
    bfe8:	e17ffe15 	stw	r5,-8(fp)
    bfec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bff0:	e0bffd17 	ldw	r2,-12(fp)
    bff4:	10800017 	ldw	r2,0(r2)
    bff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bffc:	e0bffc17 	ldw	r2,-16(fp)
    c000:	11000a04 	addi	r4,r2,40
    c004:	e17ffe17 	ldw	r5,-8(fp)
    c008:	e1bfff17 	ldw	r6,-4(fp)
    c00c:	000c4300 	call	c430 <altera_avalon_jtag_uart_ioctl>
}
    c010:	e037883a 	mov	sp,fp
    c014:	dfc00117 	ldw	ra,4(sp)
    c018:	df000017 	ldw	fp,0(sp)
    c01c:	dec00204 	addi	sp,sp,8
    c020:	f800283a 	ret

0000c024 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c024:	defffa04 	addi	sp,sp,-24
    c028:	dfc00515 	stw	ra,20(sp)
    c02c:	df000415 	stw	fp,16(sp)
    c030:	df000404 	addi	fp,sp,16
    c034:	e13ffd15 	stw	r4,-12(fp)
    c038:	e17ffe15 	stw	r5,-8(fp)
    c03c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c040:	e0fffd17 	ldw	r3,-12(fp)
    c044:	00800044 	movi	r2,1
    c048:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c04c:	e0bffd17 	ldw	r2,-12(fp)
    c050:	10800017 	ldw	r2,0(r2)
    c054:	11000104 	addi	r4,r2,4
    c058:	e0bffd17 	ldw	r2,-12(fp)
    c05c:	10800817 	ldw	r2,32(r2)
    c060:	1007883a 	mov	r3,r2
    c064:	2005883a 	mov	r2,r4
    c068:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c06c:	e13ffe17 	ldw	r4,-8(fp)
    c070:	e17fff17 	ldw	r5,-4(fp)
    c074:	d8000015 	stw	zero,0(sp)
    c078:	01800074 	movhi	r6,1
    c07c:	31b03904 	addi	r6,r6,-16156
    c080:	e1fffd17 	ldw	r7,-12(fp)
    c084:	000ce040 	call	ce04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c088:	e0bffd17 	ldw	r2,-12(fp)
    c08c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c090:	e0bffd17 	ldw	r2,-12(fp)
    c094:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c098:	00800074 	movhi	r2,1
    c09c:	10852104 	addi	r2,r2,5252
    c0a0:	10800017 	ldw	r2,0(r2)
    c0a4:	100b883a 	mov	r5,r2
    c0a8:	01800074 	movhi	r6,1
    c0ac:	31b0c304 	addi	r6,r6,-15604
    c0b0:	e1fffd17 	ldw	r7,-12(fp)
    c0b4:	000ca880 	call	ca88 <alt_alarm_start>
    c0b8:	1004403a 	cmpge	r2,r2,zero
    c0bc:	1000041e 	bne	r2,zero,c0d0 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c0c0:	e0fffd17 	ldw	r3,-12(fp)
    c0c4:	00a00034 	movhi	r2,32768
    c0c8:	10bfffc4 	addi	r2,r2,-1
    c0cc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c0d0:	e037883a 	mov	sp,fp
    c0d4:	dfc00117 	ldw	ra,4(sp)
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00204 	addi	sp,sp,8
    c0e0:	f800283a 	ret

0000c0e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c0e4:	defff804 	addi	sp,sp,-32
    c0e8:	df000715 	stw	fp,28(sp)
    c0ec:	df000704 	addi	fp,sp,28
    c0f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c0f4:	e0bfff17 	ldw	r2,-4(fp)
    c0f8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c0fc:	e0bffe17 	ldw	r2,-8(fp)
    c100:	10800017 	ldw	r2,0(r2)
    c104:	e0bffd15 	stw	r2,-12(fp)
    c108:	00000006 	br	c10c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c10c:	e0bffd17 	ldw	r2,-12(fp)
    c110:	10800104 	addi	r2,r2,4
    c114:	10800037 	ldwio	r2,0(r2)
    c118:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c11c:	e0bffc17 	ldw	r2,-16(fp)
    c120:	1080c00c 	andi	r2,r2,768
    c124:	1005003a 	cmpeq	r2,r2,zero
    c128:	1000741e 	bne	r2,zero,c2fc <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c12c:	e0bffc17 	ldw	r2,-16(fp)
    c130:	1080400c 	andi	r2,r2,256
    c134:	1005003a 	cmpeq	r2,r2,zero
    c138:	1000351e 	bne	r2,zero,c210 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c13c:	00800074 	movhi	r2,1
    c140:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c144:	e0bffe17 	ldw	r2,-8(fp)
    c148:	10800a17 	ldw	r2,40(r2)
    c14c:	10800044 	addi	r2,r2,1
    c150:	1081ffcc 	andi	r2,r2,2047
    c154:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c158:	e0bffe17 	ldw	r2,-8(fp)
    c15c:	10c00b17 	ldw	r3,44(r2)
    c160:	e0bffa17 	ldw	r2,-24(fp)
    c164:	18801626 	beq	r3,r2,c1c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c168:	e0bffd17 	ldw	r2,-12(fp)
    c16c:	10800037 	ldwio	r2,0(r2)
    c170:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c174:	e0bffb17 	ldw	r2,-20(fp)
    c178:	10a0000c 	andi	r2,r2,32768
    c17c:	1005003a 	cmpeq	r2,r2,zero
    c180:	10000f1e 	bne	r2,zero,c1c0 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c184:	e0bffe17 	ldw	r2,-8(fp)
    c188:	10c00a17 	ldw	r3,40(r2)
    c18c:	e0bffb17 	ldw	r2,-20(fp)
    c190:	1009883a 	mov	r4,r2
    c194:	e0bffe17 	ldw	r2,-8(fp)
    c198:	1885883a 	add	r2,r3,r2
    c19c:	10800e04 	addi	r2,r2,56
    c1a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c1a4:	e0bffe17 	ldw	r2,-8(fp)
    c1a8:	10800a17 	ldw	r2,40(r2)
    c1ac:	10800044 	addi	r2,r2,1
    c1b0:	10c1ffcc 	andi	r3,r2,2047
    c1b4:	e0bffe17 	ldw	r2,-8(fp)
    c1b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c1bc:	003fe106 	br	c144 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c1c0:	e0bffb17 	ldw	r2,-20(fp)
    c1c4:	10bfffec 	andhi	r2,r2,65535
    c1c8:	1005003a 	cmpeq	r2,r2,zero
    c1cc:	1000101e 	bne	r2,zero,c210 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c1d0:	e0bffe17 	ldw	r2,-8(fp)
    c1d4:	10c00817 	ldw	r3,32(r2)
    c1d8:	00bfff84 	movi	r2,-2
    c1dc:	1886703a 	and	r3,r3,r2
    c1e0:	e0bffe17 	ldw	r2,-8(fp)
    c1e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c1e8:	e0bffd17 	ldw	r2,-12(fp)
    c1ec:	11000104 	addi	r4,r2,4
    c1f0:	e0bffe17 	ldw	r2,-8(fp)
    c1f4:	10800817 	ldw	r2,32(r2)
    c1f8:	1007883a 	mov	r3,r2
    c1fc:	2005883a 	mov	r2,r4
    c200:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c204:	e0bffd17 	ldw	r2,-12(fp)
    c208:	10800104 	addi	r2,r2,4
    c20c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c210:	e0bffc17 	ldw	r2,-16(fp)
    c214:	1080800c 	andi	r2,r2,512
    c218:	1005003a 	cmpeq	r2,r2,zero
    c21c:	103fbb1e 	bne	r2,zero,c10c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c220:	e0bffc17 	ldw	r2,-16(fp)
    c224:	10bfffec 	andhi	r2,r2,65535
    c228:	1004d43a 	srli	r2,r2,16
    c22c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c230:	00001506 	br	c288 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c234:	e13ffd17 	ldw	r4,-12(fp)
    c238:	e0bffe17 	ldw	r2,-8(fp)
    c23c:	10c00d17 	ldw	r3,52(r2)
    c240:	e0bffe17 	ldw	r2,-8(fp)
    c244:	1885883a 	add	r2,r3,r2
    c248:	10820e04 	addi	r2,r2,2104
    c24c:	10800003 	ldbu	r2,0(r2)
    c250:	10c03fcc 	andi	r3,r2,255
    c254:	18c0201c 	xori	r3,r3,128
    c258:	18ffe004 	addi	r3,r3,-128
    c25c:	2005883a 	mov	r2,r4
    c260:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c264:	e0bffe17 	ldw	r2,-8(fp)
    c268:	10800d17 	ldw	r2,52(r2)
    c26c:	10800044 	addi	r2,r2,1
    c270:	10c1ffcc 	andi	r3,r2,2047
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c27c:	e0bff917 	ldw	r2,-28(fp)
    c280:	10bfffc4 	addi	r2,r2,-1
    c284:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c288:	e0bff917 	ldw	r2,-28(fp)
    c28c:	1005003a 	cmpeq	r2,r2,zero
    c290:	1000051e 	bne	r2,zero,c2a8 <altera_avalon_jtag_uart_irq+0x1c4>
    c294:	e0bffe17 	ldw	r2,-8(fp)
    c298:	10c00d17 	ldw	r3,52(r2)
    c29c:	e0bffe17 	ldw	r2,-8(fp)
    c2a0:	10800c17 	ldw	r2,48(r2)
    c2a4:	18bfe31e 	bne	r3,r2,c234 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c2a8:	e0bff917 	ldw	r2,-28(fp)
    c2ac:	1005003a 	cmpeq	r2,r2,zero
    c2b0:	103f961e 	bne	r2,zero,c10c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c2b4:	e0bffe17 	ldw	r2,-8(fp)
    c2b8:	10c00817 	ldw	r3,32(r2)
    c2bc:	00bfff44 	movi	r2,-3
    c2c0:	1886703a 	and	r3,r3,r2
    c2c4:	e0bffe17 	ldw	r2,-8(fp)
    c2c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c2cc:	e0bffe17 	ldw	r2,-8(fp)
    c2d0:	10800017 	ldw	r2,0(r2)
    c2d4:	11000104 	addi	r4,r2,4
    c2d8:	e0bffe17 	ldw	r2,-8(fp)
    c2dc:	10800817 	ldw	r2,32(r2)
    c2e0:	1007883a 	mov	r3,r2
    c2e4:	2005883a 	mov	r2,r4
    c2e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c2ec:	e0bffd17 	ldw	r2,-12(fp)
    c2f0:	10800104 	addi	r2,r2,4
    c2f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c2f8:	003f8406 	br	c10c <altera_avalon_jtag_uart_irq+0x28>
}
    c2fc:	e037883a 	mov	sp,fp
    c300:	df000017 	ldw	fp,0(sp)
    c304:	dec00104 	addi	sp,sp,4
    c308:	f800283a 	ret

0000c30c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c30c:	defffc04 	addi	sp,sp,-16
    c310:	df000315 	stw	fp,12(sp)
    c314:	df000304 	addi	fp,sp,12
    c318:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c31c:	e0bfff17 	ldw	r2,-4(fp)
    c320:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c324:	e0bffe17 	ldw	r2,-8(fp)
    c328:	10800017 	ldw	r2,0(r2)
    c32c:	10800104 	addi	r2,r2,4
    c330:	10800037 	ldwio	r2,0(r2)
    c334:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c338:	e0bffd17 	ldw	r2,-12(fp)
    c33c:	1081000c 	andi	r2,r2,1024
    c340:	1005003a 	cmpeq	r2,r2,zero
    c344:	10000c1e 	bne	r2,zero,c378 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c348:	e0bffe17 	ldw	r2,-8(fp)
    c34c:	10800017 	ldw	r2,0(r2)
    c350:	11000104 	addi	r4,r2,4
    c354:	e0bffe17 	ldw	r2,-8(fp)
    c358:	10800817 	ldw	r2,32(r2)
    c35c:	10810014 	ori	r2,r2,1024
    c360:	1007883a 	mov	r3,r2
    c364:	2005883a 	mov	r2,r4
    c368:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c36c:	e0bffe17 	ldw	r2,-8(fp)
    c370:	10000915 	stw	zero,36(r2)
    c374:	00000a06 	br	c3a0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c378:	e0bffe17 	ldw	r2,-8(fp)
    c37c:	10c00917 	ldw	r3,36(r2)
    c380:	00a00034 	movhi	r2,32768
    c384:	10bfff04 	addi	r2,r2,-4
    c388:	10c00536 	bltu	r2,r3,c3a0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c38c:	e0bffe17 	ldw	r2,-8(fp)
    c390:	10800917 	ldw	r2,36(r2)
    c394:	10c00044 	addi	r3,r2,1
    c398:	e0bffe17 	ldw	r2,-8(fp)
    c39c:	10c00915 	stw	r3,36(r2)
    c3a0:	00800074 	movhi	r2,1
    c3a4:	10852104 	addi	r2,r2,5252
    c3a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c3ac:	e037883a 	mov	sp,fp
    c3b0:	df000017 	ldw	fp,0(sp)
    c3b4:	dec00104 	addi	sp,sp,4
    c3b8:	f800283a 	ret

0000c3bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c3bc:	defffc04 	addi	sp,sp,-16
    c3c0:	df000315 	stw	fp,12(sp)
    c3c4:	df000304 	addi	fp,sp,12
    c3c8:	e13ffd15 	stw	r4,-12(fp)
    c3cc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3d0:	00000706 	br	c3f0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c3d4:	e0bffe17 	ldw	r2,-8(fp)
    c3d8:	1090000c 	andi	r2,r2,16384
    c3dc:	1005003a 	cmpeq	r2,r2,zero
    c3e0:	1000031e 	bne	r2,zero,c3f0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c3e4:	00bffd44 	movi	r2,-11
    c3e8:	e0bfff15 	stw	r2,-4(fp)
    c3ec:	00000b06 	br	c41c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3f0:	e0bffd17 	ldw	r2,-12(fp)
    c3f4:	10c00d17 	ldw	r3,52(r2)
    c3f8:	e0bffd17 	ldw	r2,-12(fp)
    c3fc:	10800c17 	ldw	r2,48(r2)
    c400:	18800526 	beq	r3,r2,c418 <altera_avalon_jtag_uart_close+0x5c>
    c404:	e0bffd17 	ldw	r2,-12(fp)
    c408:	10c00917 	ldw	r3,36(r2)
    c40c:	e0bffd17 	ldw	r2,-12(fp)
    c410:	10800117 	ldw	r2,4(r2)
    c414:	18bfef36 	bltu	r3,r2,c3d4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c418:	e03fff15 	stw	zero,-4(fp)
    c41c:	e0bfff17 	ldw	r2,-4(fp)
}
    c420:	e037883a 	mov	sp,fp
    c424:	df000017 	ldw	fp,0(sp)
    c428:	dec00104 	addi	sp,sp,4
    c42c:	f800283a 	ret

0000c430 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c430:	defff804 	addi	sp,sp,-32
    c434:	df000715 	stw	fp,28(sp)
    c438:	df000704 	addi	fp,sp,28
    c43c:	e13ffb15 	stw	r4,-20(fp)
    c440:	e17ffc15 	stw	r5,-16(fp)
    c444:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c448:	00bff9c4 	movi	r2,-25
    c44c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c450:	e0bffc17 	ldw	r2,-16(fp)
    c454:	e0bfff15 	stw	r2,-4(fp)
    c458:	e0ffff17 	ldw	r3,-4(fp)
    c45c:	189a8060 	cmpeqi	r2,r3,27137
    c460:	1000041e 	bne	r2,zero,c474 <altera_avalon_jtag_uart_ioctl+0x44>
    c464:	e0ffff17 	ldw	r3,-4(fp)
    c468:	189a80a0 	cmpeqi	r2,r3,27138
    c46c:	10001b1e 	bne	r2,zero,c4dc <altera_avalon_jtag_uart_ioctl+0xac>
    c470:	00002706 	br	c510 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c474:	e0bffb17 	ldw	r2,-20(fp)
    c478:	10c00117 	ldw	r3,4(r2)
    c47c:	00a00034 	movhi	r2,32768
    c480:	10bfffc4 	addi	r2,r2,-1
    c484:	18802226 	beq	r3,r2,c510 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c488:	e0bffd17 	ldw	r2,-12(fp)
    c48c:	10800017 	ldw	r2,0(r2)
    c490:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c494:	e0bff917 	ldw	r2,-28(fp)
    c498:	10800090 	cmplti	r2,r2,2
    c49c:	1000071e 	bne	r2,zero,c4bc <altera_avalon_jtag_uart_ioctl+0x8c>
    c4a0:	e0fff917 	ldw	r3,-28(fp)
    c4a4:	00a00034 	movhi	r2,32768
    c4a8:	10bfffc4 	addi	r2,r2,-1
    c4ac:	18800326 	beq	r3,r2,c4bc <altera_avalon_jtag_uart_ioctl+0x8c>
    c4b0:	e0bff917 	ldw	r2,-28(fp)
    c4b4:	e0bffe15 	stw	r2,-8(fp)
    c4b8:	00000306 	br	c4c8 <altera_avalon_jtag_uart_ioctl+0x98>
    c4bc:	00e00034 	movhi	r3,32768
    c4c0:	18ffff84 	addi	r3,r3,-2
    c4c4:	e0fffe15 	stw	r3,-8(fp)
    c4c8:	e0bffb17 	ldw	r2,-20(fp)
    c4cc:	e0fffe17 	ldw	r3,-8(fp)
    c4d0:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c4d4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c4d8:	00000d06 	br	c510 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c4dc:	e0bffb17 	ldw	r2,-20(fp)
    c4e0:	10c00117 	ldw	r3,4(r2)
    c4e4:	00a00034 	movhi	r2,32768
    c4e8:	10bfffc4 	addi	r2,r2,-1
    c4ec:	18800826 	beq	r3,r2,c510 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c4f0:	e13ffd17 	ldw	r4,-12(fp)
    c4f4:	e0bffb17 	ldw	r2,-20(fp)
    c4f8:	10c00917 	ldw	r3,36(r2)
    c4fc:	e0bffb17 	ldw	r2,-20(fp)
    c500:	10800117 	ldw	r2,4(r2)
    c504:	1885803a 	cmpltu	r2,r3,r2
    c508:	20800015 	stw	r2,0(r4)
      rc = 0;
    c50c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c510:	e0bffa17 	ldw	r2,-24(fp)
}
    c514:	e037883a 	mov	sp,fp
    c518:	df000017 	ldw	fp,0(sp)
    c51c:	dec00104 	addi	sp,sp,4
    c520:	f800283a 	ret

0000c524 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c524:	defff204 	addi	sp,sp,-56
    c528:	dfc00d15 	stw	ra,52(sp)
    c52c:	df000c15 	stw	fp,48(sp)
    c530:	df000c04 	addi	fp,sp,48
    c534:	e13ffb15 	stw	r4,-20(fp)
    c538:	e17ffc15 	stw	r5,-16(fp)
    c53c:	e1bffd15 	stw	r6,-12(fp)
    c540:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c544:	e0bffc17 	ldw	r2,-16(fp)
    c548:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c54c:	00004806 	br	c670 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c550:	e0bffb17 	ldw	r2,-20(fp)
    c554:	10800a17 	ldw	r2,40(r2)
    c558:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c55c:	e0bffb17 	ldw	r2,-20(fp)
    c560:	10800b17 	ldw	r2,44(r2)
    c564:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c568:	e0fff717 	ldw	r3,-36(fp)
    c56c:	e0bff617 	ldw	r2,-40(fp)
    c570:	18800536 	bltu	r3,r2,c588 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c574:	e0bff717 	ldw	r2,-36(fp)
    c578:	e0fff617 	ldw	r3,-40(fp)
    c57c:	10c5c83a 	sub	r2,r2,r3
    c580:	e0bff815 	stw	r2,-32(fp)
    c584:	00000406 	br	c598 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c588:	00820004 	movi	r2,2048
    c58c:	e0fff617 	ldw	r3,-40(fp)
    c590:	10c5c83a 	sub	r2,r2,r3
    c594:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c598:	e0bff817 	ldw	r2,-32(fp)
    c59c:	1005003a 	cmpeq	r2,r2,zero
    c5a0:	10001f1e 	bne	r2,zero,c620 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c5a4:	e0fffd17 	ldw	r3,-12(fp)
    c5a8:	e0bff817 	ldw	r2,-32(fp)
    c5ac:	1880022e 	bgeu	r3,r2,c5b8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c5b0:	e0bffd17 	ldw	r2,-12(fp)
    c5b4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c5b8:	e0bffb17 	ldw	r2,-20(fp)
    c5bc:	10c00e04 	addi	r3,r2,56
    c5c0:	e0bff617 	ldw	r2,-40(fp)
    c5c4:	1887883a 	add	r3,r3,r2
    c5c8:	e0bffa17 	ldw	r2,-24(fp)
    c5cc:	1009883a 	mov	r4,r2
    c5d0:	180b883a 	mov	r5,r3
    c5d4:	e1bff817 	ldw	r6,-32(fp)
    c5d8:	00020a80 	call	20a8 <memcpy>
      ptr   += n;
    c5dc:	e0fff817 	ldw	r3,-32(fp)
    c5e0:	e0bffa17 	ldw	r2,-24(fp)
    c5e4:	10c5883a 	add	r2,r2,r3
    c5e8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c5ec:	e0fffd17 	ldw	r3,-12(fp)
    c5f0:	e0bff817 	ldw	r2,-32(fp)
    c5f4:	1885c83a 	sub	r2,r3,r2
    c5f8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c5fc:	e0fff617 	ldw	r3,-40(fp)
    c600:	e0bff817 	ldw	r2,-32(fp)
    c604:	1885883a 	add	r2,r3,r2
    c608:	10c1ffcc 	andi	r3,r2,2047
    c60c:	e0bffb17 	ldw	r2,-20(fp)
    c610:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c614:	e0bffd17 	ldw	r2,-12(fp)
    c618:	10800048 	cmpgei	r2,r2,1
    c61c:	103fcc1e 	bne	r2,zero,c550 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c620:	e0fffa17 	ldw	r3,-24(fp)
    c624:	e0bffc17 	ldw	r2,-16(fp)
    c628:	1880141e 	bne	r3,r2,c67c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c62c:	e0bffe17 	ldw	r2,-8(fp)
    c630:	1090000c 	andi	r2,r2,16384
    c634:	1004c03a 	cmpne	r2,r2,zero
    c638:	1000101e 	bne	r2,zero,c67c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c63c:	e0bffb17 	ldw	r2,-20(fp)
    c640:	10c00a17 	ldw	r3,40(r2)
    c644:	e0bff717 	ldw	r2,-36(fp)
    c648:	1880051e 	bne	r3,r2,c660 <altera_avalon_jtag_uart_read+0x13c>
    c64c:	e0bffb17 	ldw	r2,-20(fp)
    c650:	10c00917 	ldw	r3,36(r2)
    c654:	e0bffb17 	ldw	r2,-20(fp)
    c658:	10800117 	ldw	r2,4(r2)
    c65c:	18bff736 	bltu	r3,r2,c63c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c660:	e0bffb17 	ldw	r2,-20(fp)
    c664:	10c00a17 	ldw	r3,40(r2)
    c668:	e0bff717 	ldw	r2,-36(fp)
    c66c:	18800326 	beq	r3,r2,c67c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c670:	e0bffd17 	ldw	r2,-12(fp)
    c674:	10800048 	cmpgei	r2,r2,1
    c678:	103fb51e 	bne	r2,zero,c550 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c67c:	e0fffa17 	ldw	r3,-24(fp)
    c680:	e0bffc17 	ldw	r2,-16(fp)
    c684:	18801926 	beq	r3,r2,c6ec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c688:	0005303a 	rdctl	r2,status
    c68c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c690:	e0fff517 	ldw	r3,-44(fp)
    c694:	00bfff84 	movi	r2,-2
    c698:	1884703a 	and	r2,r3,r2
    c69c:	1001703a 	wrctl	status,r2
  
  return context;
    c6a0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c6a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c6a8:	e0bffb17 	ldw	r2,-20(fp)
    c6ac:	10800817 	ldw	r2,32(r2)
    c6b0:	10c00054 	ori	r3,r2,1
    c6b4:	e0bffb17 	ldw	r2,-20(fp)
    c6b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c6bc:	e0bffb17 	ldw	r2,-20(fp)
    c6c0:	10800017 	ldw	r2,0(r2)
    c6c4:	11000104 	addi	r4,r2,4
    c6c8:	e0bffb17 	ldw	r2,-20(fp)
    c6cc:	10800817 	ldw	r2,32(r2)
    c6d0:	1007883a 	mov	r3,r2
    c6d4:	2005883a 	mov	r2,r4
    c6d8:	10c00035 	stwio	r3,0(r2)
    c6dc:	e0bff917 	ldw	r2,-28(fp)
    c6e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6e4:	e0bff417 	ldw	r2,-48(fp)
    c6e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c6ec:	e0fffa17 	ldw	r3,-24(fp)
    c6f0:	e0bffc17 	ldw	r2,-16(fp)
    c6f4:	18800526 	beq	r3,r2,c70c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c6f8:	e0fffa17 	ldw	r3,-24(fp)
    c6fc:	e0bffc17 	ldw	r2,-16(fp)
    c700:	1887c83a 	sub	r3,r3,r2
    c704:	e0ffff15 	stw	r3,-4(fp)
    c708:	00000906 	br	c730 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c70c:	e0bffe17 	ldw	r2,-8(fp)
    c710:	1090000c 	andi	r2,r2,16384
    c714:	1005003a 	cmpeq	r2,r2,zero
    c718:	1000031e 	bne	r2,zero,c728 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c71c:	00bffd44 	movi	r2,-11
    c720:	e0bfff15 	stw	r2,-4(fp)
    c724:	00000206 	br	c730 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c728:	00bffec4 	movi	r2,-5
    c72c:	e0bfff15 	stw	r2,-4(fp)
    c730:	e0bfff17 	ldw	r2,-4(fp)
}
    c734:	e037883a 	mov	sp,fp
    c738:	dfc00117 	ldw	ra,4(sp)
    c73c:	df000017 	ldw	fp,0(sp)
    c740:	dec00204 	addi	sp,sp,8
    c744:	f800283a 	ret

0000c748 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c748:	defff204 	addi	sp,sp,-56
    c74c:	dfc00d15 	stw	ra,52(sp)
    c750:	df000c15 	stw	fp,48(sp)
    c754:	df000c04 	addi	fp,sp,48
    c758:	e13ffb15 	stw	r4,-20(fp)
    c75c:	e17ffc15 	stw	r5,-16(fp)
    c760:	e1bffd15 	stw	r6,-12(fp)
    c764:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c768:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c76c:	e0bffc17 	ldw	r2,-16(fp)
    c770:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c774:	00003a06 	br	c860 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c778:	e0bffb17 	ldw	r2,-20(fp)
    c77c:	10800c17 	ldw	r2,48(r2)
    c780:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c784:	e0bffb17 	ldw	r2,-20(fp)
    c788:	10800d17 	ldw	r2,52(r2)
    c78c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c790:	e0fffa17 	ldw	r3,-24(fp)
    c794:	e0bff917 	ldw	r2,-28(fp)
    c798:	1880062e 	bgeu	r3,r2,c7b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c79c:	e0fff917 	ldw	r3,-28(fp)
    c7a0:	e0bffa17 	ldw	r2,-24(fp)
    c7a4:	1885c83a 	sub	r2,r3,r2
    c7a8:	10bfffc4 	addi	r2,r2,-1
    c7ac:	e0bff815 	stw	r2,-32(fp)
    c7b0:	00000c06 	br	c7e4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c7b4:	e0bff917 	ldw	r2,-28(fp)
    c7b8:	1005003a 	cmpeq	r2,r2,zero
    c7bc:	1000051e 	bne	r2,zero,c7d4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c7c0:	00820004 	movi	r2,2048
    c7c4:	e0fffa17 	ldw	r3,-24(fp)
    c7c8:	10c5c83a 	sub	r2,r2,r3
    c7cc:	e0bff815 	stw	r2,-32(fp)
    c7d0:	00000406 	br	c7e4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c7d4:	0081ffc4 	movi	r2,2047
    c7d8:	e0fffa17 	ldw	r3,-24(fp)
    c7dc:	10c5c83a 	sub	r2,r2,r3
    c7e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c7e4:	e0bff817 	ldw	r2,-32(fp)
    c7e8:	1005003a 	cmpeq	r2,r2,zero
    c7ec:	10001f1e 	bne	r2,zero,c86c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c7f0:	e0fffd17 	ldw	r3,-12(fp)
    c7f4:	e0bff817 	ldw	r2,-32(fp)
    c7f8:	1880022e 	bgeu	r3,r2,c804 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c7fc:	e0bffd17 	ldw	r2,-12(fp)
    c800:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c804:	e0bffb17 	ldw	r2,-20(fp)
    c808:	10c20e04 	addi	r3,r2,2104
    c80c:	e0bffa17 	ldw	r2,-24(fp)
    c810:	1885883a 	add	r2,r3,r2
    c814:	e0fffc17 	ldw	r3,-16(fp)
    c818:	1009883a 	mov	r4,r2
    c81c:	180b883a 	mov	r5,r3
    c820:	e1bff817 	ldw	r6,-32(fp)
    c824:	00020a80 	call	20a8 <memcpy>
      ptr   += n;
    c828:	e0fff817 	ldw	r3,-32(fp)
    c82c:	e0bffc17 	ldw	r2,-16(fp)
    c830:	10c5883a 	add	r2,r2,r3
    c834:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c838:	e0fffd17 	ldw	r3,-12(fp)
    c83c:	e0bff817 	ldw	r2,-32(fp)
    c840:	1885c83a 	sub	r2,r3,r2
    c844:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c848:	e0fffa17 	ldw	r3,-24(fp)
    c84c:	e0bff817 	ldw	r2,-32(fp)
    c850:	1885883a 	add	r2,r3,r2
    c854:	10c1ffcc 	andi	r3,r2,2047
    c858:	e0bffb17 	ldw	r2,-20(fp)
    c85c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c860:	e0bffd17 	ldw	r2,-12(fp)
    c864:	10800048 	cmpgei	r2,r2,1
    c868:	103fc31e 	bne	r2,zero,c778 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c86c:	0005303a 	rdctl	r2,status
    c870:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c874:	e0fff517 	ldw	r3,-44(fp)
    c878:	00bfff84 	movi	r2,-2
    c87c:	1884703a 	and	r2,r3,r2
    c880:	1001703a 	wrctl	status,r2
  
  return context;
    c884:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c888:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c88c:	e0bffb17 	ldw	r2,-20(fp)
    c890:	10800817 	ldw	r2,32(r2)
    c894:	10c00094 	ori	r3,r2,2
    c898:	e0bffb17 	ldw	r2,-20(fp)
    c89c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c8a0:	e0bffb17 	ldw	r2,-20(fp)
    c8a4:	10800017 	ldw	r2,0(r2)
    c8a8:	11000104 	addi	r4,r2,4
    c8ac:	e0bffb17 	ldw	r2,-20(fp)
    c8b0:	10800817 	ldw	r2,32(r2)
    c8b4:	1007883a 	mov	r3,r2
    c8b8:	2005883a 	mov	r2,r4
    c8bc:	10c00035 	stwio	r3,0(r2)
    c8c0:	e0bff717 	ldw	r2,-36(fp)
    c8c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8c8:	e0bff417 	ldw	r2,-48(fp)
    c8cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	10800050 	cmplti	r2,r2,1
    c8d8:	1000111e 	bne	r2,zero,c920 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c8dc:	e0bffe17 	ldw	r2,-8(fp)
    c8e0:	1090000c 	andi	r2,r2,16384
    c8e4:	1004c03a 	cmpne	r2,r2,zero
    c8e8:	1000101e 	bne	r2,zero,c92c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c8ec:	e0bffb17 	ldw	r2,-20(fp)
    c8f0:	10c00d17 	ldw	r3,52(r2)
    c8f4:	e0bff917 	ldw	r2,-28(fp)
    c8f8:	1880051e 	bne	r3,r2,c910 <altera_avalon_jtag_uart_write+0x1c8>
    c8fc:	e0bffb17 	ldw	r2,-20(fp)
    c900:	10c00917 	ldw	r3,36(r2)
    c904:	e0bffb17 	ldw	r2,-20(fp)
    c908:	10800117 	ldw	r2,4(r2)
    c90c:	18bff736 	bltu	r3,r2,c8ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c910:	e0bffb17 	ldw	r2,-20(fp)
    c914:	10c00d17 	ldw	r3,52(r2)
    c918:	e0bff917 	ldw	r2,-28(fp)
    c91c:	18800326 	beq	r3,r2,c92c <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c920:	e0bffd17 	ldw	r2,-12(fp)
    c924:	10800048 	cmpgei	r2,r2,1
    c928:	103fcd1e 	bne	r2,zero,c860 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c92c:	e0fffc17 	ldw	r3,-16(fp)
    c930:	e0bff617 	ldw	r2,-40(fp)
    c934:	18800526 	beq	r3,r2,c94c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c938:	e0fffc17 	ldw	r3,-16(fp)
    c93c:	e0bff617 	ldw	r2,-40(fp)
    c940:	1887c83a 	sub	r3,r3,r2
    c944:	e0ffff15 	stw	r3,-4(fp)
    c948:	00000906 	br	c970 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c94c:	e0bffe17 	ldw	r2,-8(fp)
    c950:	1090000c 	andi	r2,r2,16384
    c954:	1005003a 	cmpeq	r2,r2,zero
    c958:	1000031e 	bne	r2,zero,c968 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c95c:	00bffd44 	movi	r2,-11
    c960:	e0bfff15 	stw	r2,-4(fp)
    c964:	00000206 	br	c970 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c968:	00bffec4 	movi	r2,-5
    c96c:	e0bfff15 	stw	r2,-4(fp)
    c970:	e0bfff17 	ldw	r2,-4(fp)
}
    c974:	e037883a 	mov	sp,fp
    c978:	dfc00117 	ldw	ra,4(sp)
    c97c:	df000017 	ldw	fp,0(sp)
    c980:	dec00204 	addi	sp,sp,8
    c984:	f800283a 	ret

0000c988 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    c988:	defffa04 	addi	sp,sp,-24
    c98c:	dfc00515 	stw	ra,20(sp)
    c990:	df000415 	stw	fp,16(sp)
    c994:	df000404 	addi	fp,sp,16
    c998:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    c99c:	e0bfff17 	ldw	r2,-4(fp)
    c9a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    c9a4:	e0bfff17 	ldw	r2,-4(fp)
    c9a8:	10800104 	addi	r2,r2,4
    c9ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c9b0:	0005303a 	rdctl	r2,status
    c9b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c9b8:	e0fffd17 	ldw	r3,-12(fp)
    c9bc:	00bfff84 	movi	r2,-2
    c9c0:	1884703a 	and	r2,r3,r2
    c9c4:	1001703a 	wrctl	status,r2
  
  return context;
    c9c8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    c9cc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    c9d0:	000d5680 	call	d568 <alt_tick>
    c9d4:	e0bffe17 	ldw	r2,-8(fp)
    c9d8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c9dc:	e0bffc17 	ldw	r2,-16(fp)
    c9e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    c9e4:	e037883a 	mov	sp,fp
    c9e8:	dfc00117 	ldw	ra,4(sp)
    c9ec:	df000017 	ldw	fp,0(sp)
    c9f0:	dec00204 	addi	sp,sp,8
    c9f4:	f800283a 	ret

0000c9f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    c9f8:	defff804 	addi	sp,sp,-32
    c9fc:	dfc00715 	stw	ra,28(sp)
    ca00:	df000615 	stw	fp,24(sp)
    ca04:	df000604 	addi	fp,sp,24
    ca08:	e13ffc15 	stw	r4,-16(fp)
    ca0c:	e17ffd15 	stw	r5,-12(fp)
    ca10:	e1bffe15 	stw	r6,-8(fp)
    ca14:	e1ffff15 	stw	r7,-4(fp)
    ca18:	e0bfff17 	ldw	r2,-4(fp)
    ca1c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ca20:	00800074 	movhi	r2,1
    ca24:	10852104 	addi	r2,r2,5252
    ca28:	10800017 	ldw	r2,0(r2)
    ca2c:	1004c03a 	cmpne	r2,r2,zero
    ca30:	1000041e 	bne	r2,zero,ca44 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    ca34:	00c00074 	movhi	r3,1
    ca38:	18c52104 	addi	r3,r3,5252
    ca3c:	e0bffb17 	ldw	r2,-20(fp)
    ca40:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ca44:	e0bffc17 	ldw	r2,-16(fp)
    ca48:	10800104 	addi	r2,r2,4
    ca4c:	1007883a 	mov	r3,r2
    ca50:	008001c4 	movi	r2,7
    ca54:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    ca58:	d8000015 	stw	zero,0(sp)
    ca5c:	e13ffd17 	ldw	r4,-12(fp)
    ca60:	e17ffe17 	ldw	r5,-8(fp)
    ca64:	01800074 	movhi	r6,1
    ca68:	31b26204 	addi	r6,r6,-13944
    ca6c:	e1fffc17 	ldw	r7,-16(fp)
    ca70:	000ce040 	call	ce04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    ca74:	e037883a 	mov	sp,fp
    ca78:	dfc00117 	ldw	ra,4(sp)
    ca7c:	df000017 	ldw	fp,0(sp)
    ca80:	dec00204 	addi	sp,sp,8
    ca84:	f800283a 	ret

0000ca88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    ca88:	defff404 	addi	sp,sp,-48
    ca8c:	df000b15 	stw	fp,44(sp)
    ca90:	df000b04 	addi	fp,sp,44
    ca94:	e13ffb15 	stw	r4,-20(fp)
    ca98:	e17ffc15 	stw	r5,-16(fp)
    ca9c:	e1bffd15 	stw	r6,-12(fp)
    caa0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    caa4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    caa8:	00800074 	movhi	r2,1
    caac:	10852104 	addi	r2,r2,5252
    cab0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    cab4:	1005003a 	cmpeq	r2,r2,zero
    cab8:	1000411e 	bne	r2,zero,cbc0 <alt_alarm_start+0x138>
  {
    if (alarm)
    cabc:	e0bffb17 	ldw	r2,-20(fp)
    cac0:	1005003a 	cmpeq	r2,r2,zero
    cac4:	10003b1e 	bne	r2,zero,cbb4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    cac8:	e0fffb17 	ldw	r3,-20(fp)
    cacc:	e0bffd17 	ldw	r2,-12(fp)
    cad0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    cad4:	e0fffb17 	ldw	r3,-20(fp)
    cad8:	e0bffe17 	ldw	r2,-8(fp)
    cadc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cae0:	0005303a 	rdctl	r2,status
    cae4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cae8:	e0fff817 	ldw	r3,-32(fp)
    caec:	00bfff84 	movi	r2,-2
    caf0:	1884703a 	and	r2,r3,r2
    caf4:	1001703a 	wrctl	status,r2
  
  return context;
    caf8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    cafc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cb00:	00800074 	movhi	r2,1
    cb04:	10852204 	addi	r2,r2,5256
    cb08:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    cb0c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    cb10:	e0fffc17 	ldw	r3,-16(fp)
    cb14:	e0bff917 	ldw	r2,-28(fp)
    cb18:	1885883a 	add	r2,r3,r2
    cb1c:	10c00044 	addi	r3,r2,1
    cb20:	e0bffb17 	ldw	r2,-20(fp)
    cb24:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    cb28:	e0bffb17 	ldw	r2,-20(fp)
    cb2c:	10c00217 	ldw	r3,8(r2)
    cb30:	e0bff917 	ldw	r2,-28(fp)
    cb34:	1880042e 	bgeu	r3,r2,cb48 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    cb38:	e0fffb17 	ldw	r3,-20(fp)
    cb3c:	00800044 	movi	r2,1
    cb40:	18800405 	stb	r2,16(r3)
    cb44:	00000206 	br	cb50 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    cb48:	e0bffb17 	ldw	r2,-20(fp)
    cb4c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cb50:	e0fffb17 	ldw	r3,-20(fp)
    cb54:	00800074 	movhi	r2,1
    cb58:	10be7404 	addi	r2,r2,-1584
    cb5c:	e0bff615 	stw	r2,-40(fp)
    cb60:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cb64:	e0fff717 	ldw	r3,-36(fp)
    cb68:	e0bff617 	ldw	r2,-40(fp)
    cb6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cb70:	e0bff617 	ldw	r2,-40(fp)
    cb74:	10c00017 	ldw	r3,0(r2)
    cb78:	e0bff717 	ldw	r2,-36(fp)
    cb7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cb80:	e0bff617 	ldw	r2,-40(fp)
    cb84:	10c00017 	ldw	r3,0(r2)
    cb88:	e0bff717 	ldw	r2,-36(fp)
    cb8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    cb90:	e0fff617 	ldw	r3,-40(fp)
    cb94:	e0bff717 	ldw	r2,-36(fp)
    cb98:	18800015 	stw	r2,0(r3)
    cb9c:	e0bffa17 	ldw	r2,-24(fp)
    cba0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cba4:	e0bff517 	ldw	r2,-44(fp)
    cba8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    cbac:	e03fff15 	stw	zero,-4(fp)
    cbb0:	00000506 	br	cbc8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    cbb4:	00bffa84 	movi	r2,-22
    cbb8:	e0bfff15 	stw	r2,-4(fp)
    cbbc:	00000206 	br	cbc8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    cbc0:	00bfde84 	movi	r2,-134
    cbc4:	e0bfff15 	stw	r2,-4(fp)
    cbc8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    cbcc:	e037883a 	mov	sp,fp
    cbd0:	df000017 	ldw	fp,0(sp)
    cbd4:	dec00104 	addi	sp,sp,4
    cbd8:	f800283a 	ret

0000cbdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    cbdc:	deffff04 	addi	sp,sp,-4
    cbe0:	df000015 	stw	fp,0(sp)
    cbe4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    cbe8:	e037883a 	mov	sp,fp
    cbec:	df000017 	ldw	fp,0(sp)
    cbf0:	dec00104 	addi	sp,sp,4
    cbf4:	f800283a 	ret

0000cbf8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    cbf8:	defff904 	addi	sp,sp,-28
    cbfc:	dfc00615 	stw	ra,24(sp)
    cc00:	df000515 	stw	fp,20(sp)
    cc04:	df000504 	addi	fp,sp,20
    cc08:	e13ffd15 	stw	r4,-12(fp)
    cc0c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    cc10:	e0bffd17 	ldw	r2,-12(fp)
    cc14:	1005003a 	cmpeq	r2,r2,zero
    cc18:	1000041e 	bne	r2,zero,cc2c <alt_dev_llist_insert+0x34>
    cc1c:	e0bffd17 	ldw	r2,-12(fp)
    cc20:	10800217 	ldw	r2,8(r2)
    cc24:	1004c03a 	cmpne	r2,r2,zero
    cc28:	1000071e 	bne	r2,zero,cc48 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    cc2c:	000ccac0 	call	ccac <alt_get_errno>
    cc30:	1007883a 	mov	r3,r2
    cc34:	00800584 	movi	r2,22
    cc38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    cc3c:	00bffa84 	movi	r2,-22
    cc40:	e0bfff15 	stw	r2,-4(fp)
    cc44:	00001306 	br	cc94 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    cc48:	e0fffd17 	ldw	r3,-12(fp)
    cc4c:	e0bffe17 	ldw	r2,-8(fp)
    cc50:	e0bffb15 	stw	r2,-20(fp)
    cc54:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    cc58:	e0fffc17 	ldw	r3,-16(fp)
    cc5c:	e0bffb17 	ldw	r2,-20(fp)
    cc60:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    cc64:	e0bffb17 	ldw	r2,-20(fp)
    cc68:	10c00017 	ldw	r3,0(r2)
    cc6c:	e0bffc17 	ldw	r2,-16(fp)
    cc70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    cc74:	e0bffb17 	ldw	r2,-20(fp)
    cc78:	10c00017 	ldw	r3,0(r2)
    cc7c:	e0bffc17 	ldw	r2,-16(fp)
    cc80:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    cc84:	e0fffb17 	ldw	r3,-20(fp)
    cc88:	e0bffc17 	ldw	r2,-16(fp)
    cc8c:	18800015 	stw	r2,0(r3)

  return 0;  
    cc90:	e03fff15 	stw	zero,-4(fp)
    cc94:	e0bfff17 	ldw	r2,-4(fp)
}
    cc98:	e037883a 	mov	sp,fp
    cc9c:	dfc00117 	ldw	ra,4(sp)
    cca0:	df000017 	ldw	fp,0(sp)
    cca4:	dec00204 	addi	sp,sp,8
    cca8:	f800283a 	ret

0000ccac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccac:	defffd04 	addi	sp,sp,-12
    ccb0:	dfc00215 	stw	ra,8(sp)
    ccb4:	df000115 	stw	fp,4(sp)
    ccb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ccbc:	00800074 	movhi	r2,1
    ccc0:	10be7104 	addi	r2,r2,-1596
    ccc4:	10800017 	ldw	r2,0(r2)
    ccc8:	1005003a 	cmpeq	r2,r2,zero
    cccc:	1000061e 	bne	r2,zero,cce8 <alt_get_errno+0x3c>
    ccd0:	00800074 	movhi	r2,1
    ccd4:	10be7104 	addi	r2,r2,-1596
    ccd8:	10800017 	ldw	r2,0(r2)
    ccdc:	103ee83a 	callr	r2
    cce0:	e0bfff15 	stw	r2,-4(fp)
    cce4:	00000306 	br	ccf4 <alt_get_errno+0x48>
    cce8:	00800074 	movhi	r2,1
    ccec:	10851904 	addi	r2,r2,5220
    ccf0:	e0bfff15 	stw	r2,-4(fp)
    ccf4:	e0bfff17 	ldw	r2,-4(fp)
}
    ccf8:	e037883a 	mov	sp,fp
    ccfc:	dfc00117 	ldw	ra,4(sp)
    cd00:	df000017 	ldw	fp,0(sp)
    cd04:	dec00204 	addi	sp,sp,8
    cd08:	f800283a 	ret

0000cd0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    cd0c:	defffd04 	addi	sp,sp,-12
    cd10:	dfc00215 	stw	ra,8(sp)
    cd14:	df000115 	stw	fp,4(sp)
    cd18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cd1c:	00bfff04 	movi	r2,-4
    cd20:	00c00074 	movhi	r3,1
    cd24:	18f6d404 	addi	r3,r3,-9392
    cd28:	1885883a 	add	r2,r3,r2
    cd2c:	e0bfff15 	stw	r2,-4(fp)
    cd30:	00000606 	br	cd4c <_do_ctors+0x40>
        (*ctor) (); 
    cd34:	e0bfff17 	ldw	r2,-4(fp)
    cd38:	10800017 	ldw	r2,0(r2)
    cd3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    cd40:	e0bfff17 	ldw	r2,-4(fp)
    cd44:	10bfff04 	addi	r2,r2,-4
    cd48:	e0bfff15 	stw	r2,-4(fp)
    cd4c:	e0ffff17 	ldw	r3,-4(fp)
    cd50:	00800074 	movhi	r2,1
    cd54:	10b6d304 	addi	r2,r2,-9396
    cd58:	18bff62e 	bgeu	r3,r2,cd34 <_do_ctors+0x28>
        (*ctor) (); 
}
    cd5c:	e037883a 	mov	sp,fp
    cd60:	dfc00117 	ldw	ra,4(sp)
    cd64:	df000017 	ldw	fp,0(sp)
    cd68:	dec00204 	addi	sp,sp,8
    cd6c:	f800283a 	ret

0000cd70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    cd70:	defffd04 	addi	sp,sp,-12
    cd74:	dfc00215 	stw	ra,8(sp)
    cd78:	df000115 	stw	fp,4(sp)
    cd7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cd80:	00bfff04 	movi	r2,-4
    cd84:	00c00074 	movhi	r3,1
    cd88:	18f6d404 	addi	r3,r3,-9392
    cd8c:	1885883a 	add	r2,r3,r2
    cd90:	e0bfff15 	stw	r2,-4(fp)
    cd94:	00000606 	br	cdb0 <_do_dtors+0x40>
        (*dtor) (); 
    cd98:	e0bfff17 	ldw	r2,-4(fp)
    cd9c:	10800017 	ldw	r2,0(r2)
    cda0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    cda4:	e0bfff17 	ldw	r2,-4(fp)
    cda8:	10bfff04 	addi	r2,r2,-4
    cdac:	e0bfff15 	stw	r2,-4(fp)
    cdb0:	e0ffff17 	ldw	r3,-4(fp)
    cdb4:	00800074 	movhi	r2,1
    cdb8:	10b6d404 	addi	r2,r2,-9392
    cdbc:	18bff62e 	bgeu	r3,r2,cd98 <_do_dtors+0x28>
        (*dtor) (); 
}
    cdc0:	e037883a 	mov	sp,fp
    cdc4:	dfc00117 	ldw	ra,4(sp)
    cdc8:	df000017 	ldw	fp,0(sp)
    cdcc:	dec00204 	addi	sp,sp,8
    cdd0:	f800283a 	ret

0000cdd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    cdd4:	defffe04 	addi	sp,sp,-8
    cdd8:	dfc00115 	stw	ra,4(sp)
    cddc:	df000015 	stw	fp,0(sp)
    cde0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    cde4:	0009883a 	mov	r4,zero
    cde8:	01440004 	movi	r5,4096
    cdec:	000d9000 	call	d900 <alt_icache_flush>
#endif
}
    cdf0:	e037883a 	mov	sp,fp
    cdf4:	dfc00117 	ldw	ra,4(sp)
    cdf8:	df000017 	ldw	fp,0(sp)
    cdfc:	dec00204 	addi	sp,sp,8
    ce00:	f800283a 	ret

0000ce04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ce04:	defff904 	addi	sp,sp,-28
    ce08:	dfc00615 	stw	ra,24(sp)
    ce0c:	df000515 	stw	fp,20(sp)
    ce10:	df000504 	addi	fp,sp,20
    ce14:	e13ffc15 	stw	r4,-16(fp)
    ce18:	e17ffd15 	stw	r5,-12(fp)
    ce1c:	e1bffe15 	stw	r6,-8(fp)
    ce20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ce24:	e0800217 	ldw	r2,8(fp)
    ce28:	d8800015 	stw	r2,0(sp)
    ce2c:	e13ffc17 	ldw	r4,-16(fp)
    ce30:	e17ffd17 	ldw	r5,-12(fp)
    ce34:	e1bffe17 	ldw	r6,-8(fp)
    ce38:	e1ffff17 	ldw	r7,-4(fp)
    ce3c:	000cfd80 	call	cfd8 <alt_iic_isr_register>
}  
    ce40:	e037883a 	mov	sp,fp
    ce44:	dfc00117 	ldw	ra,4(sp)
    ce48:	df000017 	ldw	fp,0(sp)
    ce4c:	dec00204 	addi	sp,sp,8
    ce50:	f800283a 	ret

0000ce54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    ce54:	defff904 	addi	sp,sp,-28
    ce58:	df000615 	stw	fp,24(sp)
    ce5c:	df000604 	addi	fp,sp,24
    ce60:	e13ffe15 	stw	r4,-8(fp)
    ce64:	e17fff15 	stw	r5,-4(fp)
    ce68:	e0bfff17 	ldw	r2,-4(fp)
    ce6c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce70:	0005303a 	rdctl	r2,status
    ce74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce78:	e0fffb17 	ldw	r3,-20(fp)
    ce7c:	00bfff84 	movi	r2,-2
    ce80:	1884703a 	and	r2,r3,r2
    ce84:	1001703a 	wrctl	status,r2
  
  return context;
    ce88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ce8c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    ce90:	e0fffc17 	ldw	r3,-16(fp)
    ce94:	00800044 	movi	r2,1
    ce98:	10c4983a 	sll	r2,r2,r3
    ce9c:	1007883a 	mov	r3,r2
    cea0:	00800074 	movhi	r2,1
    cea4:	10851d04 	addi	r2,r2,5236
    cea8:	10800017 	ldw	r2,0(r2)
    ceac:	1886b03a 	or	r3,r3,r2
    ceb0:	00800074 	movhi	r2,1
    ceb4:	10851d04 	addi	r2,r2,5236
    ceb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cebc:	00800074 	movhi	r2,1
    cec0:	10851d04 	addi	r2,r2,5236
    cec4:	10800017 	ldw	r2,0(r2)
    cec8:	100170fa 	wrctl	ienable,r2
    cecc:	e0bffd17 	ldw	r2,-12(fp)
    ced0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ced4:	e0bffa17 	ldw	r2,-24(fp)
    ced8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cedc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    cee0:	e037883a 	mov	sp,fp
    cee4:	df000017 	ldw	fp,0(sp)
    cee8:	dec00104 	addi	sp,sp,4
    ceec:	f800283a 	ret

0000cef0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    cef0:	defff904 	addi	sp,sp,-28
    cef4:	df000615 	stw	fp,24(sp)
    cef8:	df000604 	addi	fp,sp,24
    cefc:	e13ffe15 	stw	r4,-8(fp)
    cf00:	e17fff15 	stw	r5,-4(fp)
    cf04:	e0bfff17 	ldw	r2,-4(fp)
    cf08:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf0c:	0005303a 	rdctl	r2,status
    cf10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf14:	e0fffb17 	ldw	r3,-20(fp)
    cf18:	00bfff84 	movi	r2,-2
    cf1c:	1884703a 	and	r2,r3,r2
    cf20:	1001703a 	wrctl	status,r2
  
  return context;
    cf24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    cf28:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    cf2c:	e0fffc17 	ldw	r3,-16(fp)
    cf30:	00800044 	movi	r2,1
    cf34:	10c4983a 	sll	r2,r2,r3
    cf38:	0084303a 	nor	r2,zero,r2
    cf3c:	1007883a 	mov	r3,r2
    cf40:	00800074 	movhi	r2,1
    cf44:	10851d04 	addi	r2,r2,5236
    cf48:	10800017 	ldw	r2,0(r2)
    cf4c:	1886703a 	and	r3,r3,r2
    cf50:	00800074 	movhi	r2,1
    cf54:	10851d04 	addi	r2,r2,5236
    cf58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    cf5c:	00800074 	movhi	r2,1
    cf60:	10851d04 	addi	r2,r2,5236
    cf64:	10800017 	ldw	r2,0(r2)
    cf68:	100170fa 	wrctl	ienable,r2
    cf6c:	e0bffd17 	ldw	r2,-12(fp)
    cf70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cf74:	e0bffa17 	ldw	r2,-24(fp)
    cf78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    cf7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    cf80:	e037883a 	mov	sp,fp
    cf84:	df000017 	ldw	fp,0(sp)
    cf88:	dec00104 	addi	sp,sp,4
    cf8c:	f800283a 	ret

0000cf90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    cf90:	defffc04 	addi	sp,sp,-16
    cf94:	df000315 	stw	fp,12(sp)
    cf98:	df000304 	addi	fp,sp,12
    cf9c:	e13ffe15 	stw	r4,-8(fp)
    cfa0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    cfa4:	000530fa 	rdctl	r2,ienable
    cfa8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    cfac:	e0ffff17 	ldw	r3,-4(fp)
    cfb0:	00800044 	movi	r2,1
    cfb4:	10c4983a 	sll	r2,r2,r3
    cfb8:	1007883a 	mov	r3,r2
    cfbc:	e0bffd17 	ldw	r2,-12(fp)
    cfc0:	1884703a 	and	r2,r3,r2
    cfc4:	1004c03a 	cmpne	r2,r2,zero
}
    cfc8:	e037883a 	mov	sp,fp
    cfcc:	df000017 	ldw	fp,0(sp)
    cfd0:	dec00104 	addi	sp,sp,4
    cfd4:	f800283a 	ret

0000cfd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cfd8:	defff404 	addi	sp,sp,-48
    cfdc:	dfc00b15 	stw	ra,44(sp)
    cfe0:	df000a15 	stw	fp,40(sp)
    cfe4:	df000a04 	addi	fp,sp,40
    cfe8:	e13ffb15 	stw	r4,-20(fp)
    cfec:	e17ffc15 	stw	r5,-16(fp)
    cff0:	e1bffd15 	stw	r6,-12(fp)
    cff4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    cff8:	00bffa84 	movi	r2,-22
    cffc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d000:	e0bffc17 	ldw	r2,-16(fp)
    d004:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d008:	e0bff917 	ldw	r2,-28(fp)
    d00c:	10800808 	cmpgei	r2,r2,32
    d010:	1000291e 	bne	r2,zero,d0b8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d014:	0005303a 	rdctl	r2,status
    d018:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d01c:	e0fff717 	ldw	r3,-36(fp)
    d020:	00bfff84 	movi	r2,-2
    d024:	1884703a 	and	r2,r3,r2
    d028:	1001703a 	wrctl	status,r2
  
  return context;
    d02c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d030:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    d034:	e0bff917 	ldw	r2,-28(fp)
    d038:	00c00074 	movhi	r3,1
    d03c:	18c65004 	addi	r3,r3,6464
    d040:	100490fa 	slli	r2,r2,3
    d044:	10c7883a 	add	r3,r2,r3
    d048:	e0bffd17 	ldw	r2,-12(fp)
    d04c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    d050:	e0bff917 	ldw	r2,-28(fp)
    d054:	00c00074 	movhi	r3,1
    d058:	18c65004 	addi	r3,r3,6464
    d05c:	100490fa 	slli	r2,r2,3
    d060:	10c5883a 	add	r2,r2,r3
    d064:	10c00104 	addi	r3,r2,4
    d068:	e0bffe17 	ldw	r2,-8(fp)
    d06c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d070:	e0bffd17 	ldw	r2,-12(fp)
    d074:	1005003a 	cmpeq	r2,r2,zero
    d078:	1000051e 	bne	r2,zero,d090 <alt_iic_isr_register+0xb8>
    d07c:	e17ff917 	ldw	r5,-28(fp)
    d080:	e13ffb17 	ldw	r4,-20(fp)
    d084:	000ce540 	call	ce54 <alt_ic_irq_enable>
    d088:	e0bfff15 	stw	r2,-4(fp)
    d08c:	00000406 	br	d0a0 <alt_iic_isr_register+0xc8>
    d090:	e17ff917 	ldw	r5,-28(fp)
    d094:	e13ffb17 	ldw	r4,-20(fp)
    d098:	000cef00 	call	cef0 <alt_ic_irq_disable>
    d09c:	e0bfff15 	stw	r2,-4(fp)
    d0a0:	e0bfff17 	ldw	r2,-4(fp)
    d0a4:	e0bffa15 	stw	r2,-24(fp)
    d0a8:	e0bff817 	ldw	r2,-32(fp)
    d0ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d0b0:	e0bff617 	ldw	r2,-40(fp)
    d0b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d0b8:	e0bffa17 	ldw	r2,-24(fp)
}
    d0bc:	e037883a 	mov	sp,fp
    d0c0:	dfc00117 	ldw	ra,4(sp)
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00204 	addi	sp,sp,8
    d0cc:	f800283a 	ret

0000d0d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d0d0:	defff904 	addi	sp,sp,-28
    d0d4:	dfc00615 	stw	ra,24(sp)
    d0d8:	df000515 	stw	fp,20(sp)
    d0dc:	df000504 	addi	fp,sp,20
    d0e0:	e13ffc15 	stw	r4,-16(fp)
    d0e4:	e17ffd15 	stw	r5,-12(fp)
    d0e8:	e1bffe15 	stw	r6,-8(fp)
    d0ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d0f0:	e13ffd17 	ldw	r4,-12(fp)
    d0f4:	e17ffe17 	ldw	r5,-8(fp)
    d0f8:	e1bfff17 	ldw	r6,-4(fp)
    d0fc:	000d2e80 	call	d2e8 <open>
    d100:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d104:	e0bffb17 	ldw	r2,-20(fp)
    d108:	1004803a 	cmplt	r2,r2,zero
    d10c:	10001c1e 	bne	r2,zero,d180 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d110:	e0bffb17 	ldw	r2,-20(fp)
    d114:	00c00074 	movhi	r3,1
    d118:	18f9ed04 	addi	r3,r3,-6220
    d11c:	10800324 	muli	r2,r2,12
    d120:	10c5883a 	add	r2,r2,r3
    d124:	10c00017 	ldw	r3,0(r2)
    d128:	e0bffc17 	ldw	r2,-16(fp)
    d12c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d130:	e0bffb17 	ldw	r2,-20(fp)
    d134:	00c00074 	movhi	r3,1
    d138:	18f9ed04 	addi	r3,r3,-6220
    d13c:	10800324 	muli	r2,r2,12
    d140:	10c5883a 	add	r2,r2,r3
    d144:	10800104 	addi	r2,r2,4
    d148:	10c00017 	ldw	r3,0(r2)
    d14c:	e0bffc17 	ldw	r2,-16(fp)
    d150:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d154:	e0bffb17 	ldw	r2,-20(fp)
    d158:	00c00074 	movhi	r3,1
    d15c:	18f9ed04 	addi	r3,r3,-6220
    d160:	10800324 	muli	r2,r2,12
    d164:	10c5883a 	add	r2,r2,r3
    d168:	10800204 	addi	r2,r2,8
    d16c:	10c00017 	ldw	r3,0(r2)
    d170:	e0bffc17 	ldw	r2,-16(fp)
    d174:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d178:	e13ffb17 	ldw	r4,-20(fp)
    d17c:	000bb780 	call	bb78 <alt_release_fd>
  }
} 
    d180:	e037883a 	mov	sp,fp
    d184:	dfc00117 	ldw	ra,4(sp)
    d188:	df000017 	ldw	fp,0(sp)
    d18c:	dec00204 	addi	sp,sp,8
    d190:	f800283a 	ret

0000d194 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d194:	defffb04 	addi	sp,sp,-20
    d198:	dfc00415 	stw	ra,16(sp)
    d19c:	df000315 	stw	fp,12(sp)
    d1a0:	df000304 	addi	fp,sp,12
    d1a4:	e13ffd15 	stw	r4,-12(fp)
    d1a8:	e17ffe15 	stw	r5,-8(fp)
    d1ac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d1b0:	01000074 	movhi	r4,1
    d1b4:	2139f004 	addi	r4,r4,-6208
    d1b8:	e17ffd17 	ldw	r5,-12(fp)
    d1bc:	01800044 	movi	r6,1
    d1c0:	01c07fc4 	movi	r7,511
    d1c4:	000d0d00 	call	d0d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d1c8:	01000074 	movhi	r4,1
    d1cc:	2139ed04 	addi	r4,r4,-6220
    d1d0:	e17ffe17 	ldw	r5,-8(fp)
    d1d4:	000d883a 	mov	r6,zero
    d1d8:	01c07fc4 	movi	r7,511
    d1dc:	000d0d00 	call	d0d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d1e0:	01000074 	movhi	r4,1
    d1e4:	2139f304 	addi	r4,r4,-6196
    d1e8:	e17fff17 	ldw	r5,-4(fp)
    d1ec:	01800044 	movi	r6,1
    d1f0:	01c07fc4 	movi	r7,511
    d1f4:	000d0d00 	call	d0d0 <alt_open_fd>
}  
    d1f8:	e037883a 	mov	sp,fp
    d1fc:	dfc00117 	ldw	ra,4(sp)
    d200:	df000017 	ldw	fp,0(sp)
    d204:	dec00204 	addi	sp,sp,8
    d208:	f800283a 	ret

0000d20c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d20c:	defffc04 	addi	sp,sp,-16
    d210:	df000315 	stw	fp,12(sp)
    d214:	df000304 	addi	fp,sp,12
    d218:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d21c:	e0bffe17 	ldw	r2,-8(fp)
    d220:	10800217 	ldw	r2,8(r2)
    d224:	10d00034 	orhi	r3,r2,16384
    d228:	e0bffe17 	ldw	r2,-8(fp)
    d22c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d230:	e03ffd15 	stw	zero,-12(fp)
    d234:	00002006 	br	d2b8 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d238:	e0bffd17 	ldw	r2,-12(fp)
    d23c:	00c00074 	movhi	r3,1
    d240:	18f9ed04 	addi	r3,r3,-6220
    d244:	10800324 	muli	r2,r2,12
    d248:	10c5883a 	add	r2,r2,r3
    d24c:	10c00017 	ldw	r3,0(r2)
    d250:	e0bffe17 	ldw	r2,-8(fp)
    d254:	10800017 	ldw	r2,0(r2)
    d258:	1880141e 	bne	r3,r2,d2ac <alt_file_locked+0xa0>
    d25c:	e0bffd17 	ldw	r2,-12(fp)
    d260:	00c00074 	movhi	r3,1
    d264:	18f9ed04 	addi	r3,r3,-6220
    d268:	10800324 	muli	r2,r2,12
    d26c:	10c5883a 	add	r2,r2,r3
    d270:	10800204 	addi	r2,r2,8
    d274:	10800017 	ldw	r2,0(r2)
    d278:	1004403a 	cmpge	r2,r2,zero
    d27c:	10000b1e 	bne	r2,zero,d2ac <alt_file_locked+0xa0>
    d280:	e0bffd17 	ldw	r2,-12(fp)
    d284:	10800324 	muli	r2,r2,12
    d288:	1007883a 	mov	r3,r2
    d28c:	00800074 	movhi	r2,1
    d290:	10b9ed04 	addi	r2,r2,-6220
    d294:	1887883a 	add	r3,r3,r2
    d298:	e0bffe17 	ldw	r2,-8(fp)
    d29c:	18800326 	beq	r3,r2,d2ac <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d2a0:	00bffcc4 	movi	r2,-13
    d2a4:	e0bfff15 	stw	r2,-4(fp)
    d2a8:	00000a06 	br	d2d4 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d2ac:	e0bffd17 	ldw	r2,-12(fp)
    d2b0:	10800044 	addi	r2,r2,1
    d2b4:	e0bffd15 	stw	r2,-12(fp)
    d2b8:	00800074 	movhi	r2,1
    d2bc:	10be7004 	addi	r2,r2,-1600
    d2c0:	10800017 	ldw	r2,0(r2)
    d2c4:	1007883a 	mov	r3,r2
    d2c8:	e0bffd17 	ldw	r2,-12(fp)
    d2cc:	18bfda2e 	bgeu	r3,r2,d238 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d2d0:	e03fff15 	stw	zero,-4(fp)
    d2d4:	e0bfff17 	ldw	r2,-4(fp)
}
    d2d8:	e037883a 	mov	sp,fp
    d2dc:	df000017 	ldw	fp,0(sp)
    d2e0:	dec00104 	addi	sp,sp,4
    d2e4:	f800283a 	ret

0000d2e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d2e8:	defff404 	addi	sp,sp,-48
    d2ec:	dfc00b15 	stw	ra,44(sp)
    d2f0:	df000a15 	stw	fp,40(sp)
    d2f4:	df000a04 	addi	fp,sp,40
    d2f8:	e13ffb15 	stw	r4,-20(fp)
    d2fc:	e17ffc15 	stw	r5,-16(fp)
    d300:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d304:	00bfffc4 	movi	r2,-1
    d308:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d30c:	00bffb44 	movi	r2,-19
    d310:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d314:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d318:	e13ffb17 	ldw	r4,-20(fp)
    d31c:	01400074 	movhi	r5,1
    d320:	297e6e04 	addi	r5,r5,-1608
    d324:	000d6940 	call	d694 <alt_find_dev>
    d328:	e0bffa15 	stw	r2,-24(fp)
    d32c:	e0bffa17 	ldw	r2,-24(fp)
    d330:	1004c03a 	cmpne	r2,r2,zero
    d334:	1000051e 	bne	r2,zero,d34c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d338:	e13ffb17 	ldw	r4,-20(fp)
    d33c:	000d7280 	call	d728 <alt_find_file>
    d340:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d344:	00800044 	movi	r2,1
    d348:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d34c:	e0bffa17 	ldw	r2,-24(fp)
    d350:	1005003a 	cmpeq	r2,r2,zero
    d354:	1000301e 	bne	r2,zero,d418 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d358:	e13ffa17 	ldw	r4,-24(fp)
    d35c:	000d8480 	call	d848 <alt_get_fd>
    d360:	e0bff815 	stw	r2,-32(fp)
    d364:	e0bff817 	ldw	r2,-32(fp)
    d368:	1004403a 	cmpge	r2,r2,zero
    d36c:	1000031e 	bne	r2,zero,d37c <open+0x94>
    {
      status = index;
    d370:	e0bff817 	ldw	r2,-32(fp)
    d374:	e0bff715 	stw	r2,-36(fp)
    d378:	00002906 	br	d420 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    d37c:	e0bff817 	ldw	r2,-32(fp)
    d380:	10800324 	muli	r2,r2,12
    d384:	1007883a 	mov	r3,r2
    d388:	00800074 	movhi	r2,1
    d38c:	10b9ed04 	addi	r2,r2,-6220
    d390:	1885883a 	add	r2,r3,r2
    d394:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d398:	e0fffc17 	ldw	r3,-16(fp)
    d39c:	00900034 	movhi	r2,16384
    d3a0:	10bfffc4 	addi	r2,r2,-1
    d3a4:	1886703a 	and	r3,r3,r2
    d3a8:	e0bff917 	ldw	r2,-28(fp)
    d3ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d3b0:	e0bff617 	ldw	r2,-40(fp)
    d3b4:	1004c03a 	cmpne	r2,r2,zero
    d3b8:	1000061e 	bne	r2,zero,d3d4 <open+0xec>
    d3bc:	e13ff917 	ldw	r4,-28(fp)
    d3c0:	000d20c0 	call	d20c <alt_file_locked>
    d3c4:	e0bff715 	stw	r2,-36(fp)
    d3c8:	e0bff717 	ldw	r2,-36(fp)
    d3cc:	1004803a 	cmplt	r2,r2,zero
    d3d0:	1000131e 	bne	r2,zero,d420 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d3d4:	e0bffa17 	ldw	r2,-24(fp)
    d3d8:	10800317 	ldw	r2,12(r2)
    d3dc:	1005003a 	cmpeq	r2,r2,zero
    d3e0:	1000091e 	bne	r2,zero,d408 <open+0x120>
    d3e4:	e0bffa17 	ldw	r2,-24(fp)
    d3e8:	10800317 	ldw	r2,12(r2)
    d3ec:	e13ff917 	ldw	r4,-28(fp)
    d3f0:	e17ffb17 	ldw	r5,-20(fp)
    d3f4:	e1bffc17 	ldw	r6,-16(fp)
    d3f8:	e1fffd17 	ldw	r7,-12(fp)
    d3fc:	103ee83a 	callr	r2
    d400:	e0bfff15 	stw	r2,-4(fp)
    d404:	00000106 	br	d40c <open+0x124>
    d408:	e03fff15 	stw	zero,-4(fp)
    d40c:	e0bfff17 	ldw	r2,-4(fp)
    d410:	e0bff715 	stw	r2,-36(fp)
    d414:	00000206 	br	d420 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d418:	00bffb44 	movi	r2,-19
    d41c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d420:	e0bff717 	ldw	r2,-36(fp)
    d424:	1004403a 	cmpge	r2,r2,zero
    d428:	1000091e 	bne	r2,zero,d450 <open+0x168>
  {
    alt_release_fd (index);  
    d42c:	e13ff817 	ldw	r4,-32(fp)
    d430:	000bb780 	call	bb78 <alt_release_fd>
    ALT_ERRNO = -status;
    d434:	000d4700 	call	d470 <alt_get_errno>
    d438:	e0fff717 	ldw	r3,-36(fp)
    d43c:	00c7c83a 	sub	r3,zero,r3
    d440:	10c00015 	stw	r3,0(r2)
    return -1;
    d444:	00bfffc4 	movi	r2,-1
    d448:	e0bffe15 	stw	r2,-8(fp)
    d44c:	00000206 	br	d458 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    d450:	e0bff817 	ldw	r2,-32(fp)
    d454:	e0bffe15 	stw	r2,-8(fp)
    d458:	e0bffe17 	ldw	r2,-8(fp)
}
    d45c:	e037883a 	mov	sp,fp
    d460:	dfc00117 	ldw	ra,4(sp)
    d464:	df000017 	ldw	fp,0(sp)
    d468:	dec00204 	addi	sp,sp,8
    d46c:	f800283a 	ret

0000d470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d470:	defffd04 	addi	sp,sp,-12
    d474:	dfc00215 	stw	ra,8(sp)
    d478:	df000115 	stw	fp,4(sp)
    d47c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d480:	00800074 	movhi	r2,1
    d484:	10be7104 	addi	r2,r2,-1596
    d488:	10800017 	ldw	r2,0(r2)
    d48c:	1005003a 	cmpeq	r2,r2,zero
    d490:	1000061e 	bne	r2,zero,d4ac <alt_get_errno+0x3c>
    d494:	00800074 	movhi	r2,1
    d498:	10be7104 	addi	r2,r2,-1596
    d49c:	10800017 	ldw	r2,0(r2)
    d4a0:	103ee83a 	callr	r2
    d4a4:	e0bfff15 	stw	r2,-4(fp)
    d4a8:	00000306 	br	d4b8 <alt_get_errno+0x48>
    d4ac:	00800074 	movhi	r2,1
    d4b0:	10851904 	addi	r2,r2,5220
    d4b4:	e0bfff15 	stw	r2,-4(fp)
    d4b8:	e0bfff17 	ldw	r2,-4(fp)
}
    d4bc:	e037883a 	mov	sp,fp
    d4c0:	dfc00117 	ldw	ra,4(sp)
    d4c4:	df000017 	ldw	fp,0(sp)
    d4c8:	dec00204 	addi	sp,sp,8
    d4cc:	f800283a 	ret

0000d4d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d4d0:	defffa04 	addi	sp,sp,-24
    d4d4:	df000515 	stw	fp,20(sp)
    d4d8:	df000504 	addi	fp,sp,20
    d4dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d4e0:	0005303a 	rdctl	r2,status
    d4e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d4e8:	e0fffd17 	ldw	r3,-12(fp)
    d4ec:	00bfff84 	movi	r2,-2
    d4f0:	1884703a 	and	r2,r3,r2
    d4f4:	1001703a 	wrctl	status,r2
  
  return context;
    d4f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d4fc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    d500:	e0bfff17 	ldw	r2,-4(fp)
    d504:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d508:	e0bffc17 	ldw	r2,-16(fp)
    d50c:	10c00017 	ldw	r3,0(r2)
    d510:	e0bffc17 	ldw	r2,-16(fp)
    d514:	10800117 	ldw	r2,4(r2)
    d518:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    d51c:	e0bffc17 	ldw	r2,-16(fp)
    d520:	10c00117 	ldw	r3,4(r2)
    d524:	e0bffc17 	ldw	r2,-16(fp)
    d528:	10800017 	ldw	r2,0(r2)
    d52c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d530:	e0fffc17 	ldw	r3,-16(fp)
    d534:	e0bffc17 	ldw	r2,-16(fp)
    d538:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    d53c:	e0fffc17 	ldw	r3,-16(fp)
    d540:	e0bffc17 	ldw	r2,-16(fp)
    d544:	18800015 	stw	r2,0(r3)
    d548:	e0bffe17 	ldw	r2,-8(fp)
    d54c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d550:	e0bffb17 	ldw	r2,-20(fp)
    d554:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d558:	e037883a 	mov	sp,fp
    d55c:	df000017 	ldw	fp,0(sp)
    d560:	dec00104 	addi	sp,sp,4
    d564:	f800283a 	ret

0000d568 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d568:	defffb04 	addi	sp,sp,-20
    d56c:	dfc00415 	stw	ra,16(sp)
    d570:	df000315 	stw	fp,12(sp)
    d574:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d578:	d0a00f17 	ldw	r2,-32708(gp)
    d57c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d580:	d0a6bd17 	ldw	r2,-25868(gp)
    d584:	10800044 	addi	r2,r2,1
    d588:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d58c:	00003106 	br	d654 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    d590:	e0bffe17 	ldw	r2,-8(fp)
    d594:	10800017 	ldw	r2,0(r2)
    d598:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d59c:	e0bffe17 	ldw	r2,-8(fp)
    d5a0:	10800403 	ldbu	r2,16(r2)
    d5a4:	10803fcc 	andi	r2,r2,255
    d5a8:	1005003a 	cmpeq	r2,r2,zero
    d5ac:	1000051e 	bne	r2,zero,d5c4 <alt_tick+0x5c>
    d5b0:	d0a6bd17 	ldw	r2,-25868(gp)
    d5b4:	1004c03a 	cmpne	r2,r2,zero
    d5b8:	1000021e 	bne	r2,zero,d5c4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    d5bc:	e0bffe17 	ldw	r2,-8(fp)
    d5c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d5c4:	e0bffe17 	ldw	r2,-8(fp)
    d5c8:	10c00217 	ldw	r3,8(r2)
    d5cc:	d0a6bd17 	ldw	r2,-25868(gp)
    d5d0:	10c01e36 	bltu	r2,r3,d64c <alt_tick+0xe4>
    d5d4:	e0bffe17 	ldw	r2,-8(fp)
    d5d8:	10800403 	ldbu	r2,16(r2)
    d5dc:	10803fcc 	andi	r2,r2,255
    d5e0:	1004c03a 	cmpne	r2,r2,zero
    d5e4:	1000191e 	bne	r2,zero,d64c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    d5e8:	e0bffe17 	ldw	r2,-8(fp)
    d5ec:	10c00317 	ldw	r3,12(r2)
    d5f0:	e0bffe17 	ldw	r2,-8(fp)
    d5f4:	11000517 	ldw	r4,20(r2)
    d5f8:	183ee83a 	callr	r3
    d5fc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d600:	e0bffd17 	ldw	r2,-12(fp)
    d604:	1004c03a 	cmpne	r2,r2,zero
    d608:	1000031e 	bne	r2,zero,d618 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    d60c:	e13ffe17 	ldw	r4,-8(fp)
    d610:	000d4d00 	call	d4d0 <alt_alarm_stop>
    d614:	00000d06 	br	d64c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    d618:	e0bffe17 	ldw	r2,-8(fp)
    d61c:	10c00217 	ldw	r3,8(r2)
    d620:	e0bffd17 	ldw	r2,-12(fp)
    d624:	1887883a 	add	r3,r3,r2
    d628:	e0bffe17 	ldw	r2,-8(fp)
    d62c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d630:	e0bffe17 	ldw	r2,-8(fp)
    d634:	10c00217 	ldw	r3,8(r2)
    d638:	d0a6bd17 	ldw	r2,-25868(gp)
    d63c:	1880032e 	bgeu	r3,r2,d64c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    d640:	e0fffe17 	ldw	r3,-8(fp)
    d644:	00800044 	movi	r2,1
    d648:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    d64c:	e0bfff17 	ldw	r2,-4(fp)
    d650:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d654:	d0e00f04 	addi	r3,gp,-32708
    d658:	e0bffe17 	ldw	r2,-8(fp)
    d65c:	10ffcc1e 	bne	r2,r3,d590 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    d660:	e037883a 	mov	sp,fp
    d664:	dfc00117 	ldw	ra,4(sp)
    d668:	df000017 	ldw	fp,0(sp)
    d66c:	dec00204 	addi	sp,sp,8
    d670:	f800283a 	ret

0000d674 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d674:	deffff04 	addi	sp,sp,-4
    d678:	df000015 	stw	fp,0(sp)
    d67c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d680:	000170fa 	wrctl	ienable,zero
}
    d684:	e037883a 	mov	sp,fp
    d688:	df000017 	ldw	fp,0(sp)
    d68c:	dec00104 	addi	sp,sp,4
    d690:	f800283a 	ret

0000d694 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d694:	defff904 	addi	sp,sp,-28
    d698:	dfc00615 	stw	ra,24(sp)
    d69c:	df000515 	stw	fp,20(sp)
    d6a0:	df000504 	addi	fp,sp,20
    d6a4:	e13ffd15 	stw	r4,-12(fp)
    d6a8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d6ac:	e0bffe17 	ldw	r2,-8(fp)
    d6b0:	10800017 	ldw	r2,0(r2)
    d6b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    d6b8:	e13ffd17 	ldw	r4,-12(fp)
    d6bc:	00022e40 	call	22e4 <strlen>
    d6c0:	10800044 	addi	r2,r2,1
    d6c4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d6c8:	00000d06 	br	d700 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    d6cc:	e0bffc17 	ldw	r2,-16(fp)
    d6d0:	11000217 	ldw	r4,8(r2)
    d6d4:	e1bffb17 	ldw	r6,-20(fp)
    d6d8:	e17ffd17 	ldw	r5,-12(fp)
    d6dc:	000d9a40 	call	d9a4 <memcmp>
    d6e0:	1004c03a 	cmpne	r2,r2,zero
    d6e4:	1000031e 	bne	r2,zero,d6f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    d6e8:	e0bffc17 	ldw	r2,-16(fp)
    d6ec:	e0bfff15 	stw	r2,-4(fp)
    d6f0:	00000706 	br	d710 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    d6f4:	e0bffc17 	ldw	r2,-16(fp)
    d6f8:	10800017 	ldw	r2,0(r2)
    d6fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    d700:	e0fffe17 	ldw	r3,-8(fp)
    d704:	e0bffc17 	ldw	r2,-16(fp)
    d708:	10fff01e 	bne	r2,r3,d6cc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    d70c:	e03fff15 	stw	zero,-4(fp)
    d710:	e0bfff17 	ldw	r2,-4(fp)
}
    d714:	e037883a 	mov	sp,fp
    d718:	dfc00117 	ldw	ra,4(sp)
    d71c:	df000017 	ldw	fp,0(sp)
    d720:	dec00204 	addi	sp,sp,8
    d724:	f800283a 	ret

0000d728 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    d728:	defffa04 	addi	sp,sp,-24
    d72c:	dfc00515 	stw	ra,20(sp)
    d730:	df000415 	stw	fp,16(sp)
    d734:	df000404 	addi	fp,sp,16
    d738:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    d73c:	00800074 	movhi	r2,1
    d740:	10be6c04 	addi	r2,r2,-1616
    d744:	10800017 	ldw	r2,0(r2)
    d748:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d74c:	00003306 	br	d81c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    d750:	e0bffd17 	ldw	r2,-12(fp)
    d754:	11000217 	ldw	r4,8(r2)
    d758:	00022e40 	call	22e4 <strlen>
    d75c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    d760:	e0bffd17 	ldw	r2,-12(fp)
    d764:	10c00217 	ldw	r3,8(r2)
    d768:	e0bffc17 	ldw	r2,-16(fp)
    d76c:	1885883a 	add	r2,r3,r2
    d770:	10bfffc4 	addi	r2,r2,-1
    d774:	10800003 	ldbu	r2,0(r2)
    d778:	10803fcc 	andi	r2,r2,255
    d77c:	1080201c 	xori	r2,r2,128
    d780:	10bfe004 	addi	r2,r2,-128
    d784:	10800bd8 	cmpnei	r2,r2,47
    d788:	1000031e 	bne	r2,zero,d798 <alt_find_file+0x70>
    {
      len -= 1;
    d78c:	e0bffc17 	ldw	r2,-16(fp)
    d790:	10bfffc4 	addi	r2,r2,-1
    d794:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    d798:	e0bffc17 	ldw	r2,-16(fp)
    d79c:	1007883a 	mov	r3,r2
    d7a0:	e0bffe17 	ldw	r2,-8(fp)
    d7a4:	1885883a 	add	r2,r3,r2
    d7a8:	10800003 	ldbu	r2,0(r2)
    d7ac:	10803fcc 	andi	r2,r2,255
    d7b0:	1080201c 	xori	r2,r2,128
    d7b4:	10bfe004 	addi	r2,r2,-128
    d7b8:	10800be0 	cmpeqi	r2,r2,47
    d7bc:	10000a1e 	bne	r2,zero,d7e8 <alt_find_file+0xc0>
    d7c0:	e0bffc17 	ldw	r2,-16(fp)
    d7c4:	1007883a 	mov	r3,r2
    d7c8:	e0bffe17 	ldw	r2,-8(fp)
    d7cc:	1885883a 	add	r2,r3,r2
    d7d0:	10800003 	ldbu	r2,0(r2)
    d7d4:	10803fcc 	andi	r2,r2,255
    d7d8:	1080201c 	xori	r2,r2,128
    d7dc:	10bfe004 	addi	r2,r2,-128
    d7e0:	1004c03a 	cmpne	r2,r2,zero
    d7e4:	10000a1e 	bne	r2,zero,d810 <alt_find_file+0xe8>
    d7e8:	e0bffd17 	ldw	r2,-12(fp)
    d7ec:	11000217 	ldw	r4,8(r2)
    d7f0:	e1bffc17 	ldw	r6,-16(fp)
    d7f4:	e17ffe17 	ldw	r5,-8(fp)
    d7f8:	000d9a40 	call	d9a4 <memcmp>
    d7fc:	1004c03a 	cmpne	r2,r2,zero
    d800:	1000031e 	bne	r2,zero,d810 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    d804:	e0bffd17 	ldw	r2,-12(fp)
    d808:	e0bfff15 	stw	r2,-4(fp)
    d80c:	00000806 	br	d830 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    d810:	e0bffd17 	ldw	r2,-12(fp)
    d814:	10800017 	ldw	r2,0(r2)
    d818:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    d81c:	00c00074 	movhi	r3,1
    d820:	18fe6c04 	addi	r3,r3,-1616
    d824:	e0bffd17 	ldw	r2,-12(fp)
    d828:	10ffc91e 	bne	r2,r3,d750 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    d82c:	e03fff15 	stw	zero,-4(fp)
    d830:	e0bfff17 	ldw	r2,-4(fp)
}
    d834:	e037883a 	mov	sp,fp
    d838:	dfc00117 	ldw	ra,4(sp)
    d83c:	df000017 	ldw	fp,0(sp)
    d840:	dec00204 	addi	sp,sp,8
    d844:	f800283a 	ret

0000d848 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    d848:	defffc04 	addi	sp,sp,-16
    d84c:	df000315 	stw	fp,12(sp)
    d850:	df000304 	addi	fp,sp,12
    d854:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    d858:	00bffa04 	movi	r2,-24
    d85c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d860:	e03ffe15 	stw	zero,-8(fp)
    d864:	00001e06 	br	d8e0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    d868:	e0bffe17 	ldw	r2,-8(fp)
    d86c:	00c00074 	movhi	r3,1
    d870:	18f9ed04 	addi	r3,r3,-6220
    d874:	10800324 	muli	r2,r2,12
    d878:	10c5883a 	add	r2,r2,r3
    d87c:	10800017 	ldw	r2,0(r2)
    d880:	1004c03a 	cmpne	r2,r2,zero
    d884:	1000131e 	bne	r2,zero,d8d4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    d888:	e0bffe17 	ldw	r2,-8(fp)
    d88c:	00c00074 	movhi	r3,1
    d890:	18f9ed04 	addi	r3,r3,-6220
    d894:	10800324 	muli	r2,r2,12
    d898:	10c7883a 	add	r3,r2,r3
    d89c:	e0bfff17 	ldw	r2,-4(fp)
    d8a0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    d8a4:	00800074 	movhi	r2,1
    d8a8:	10be7004 	addi	r2,r2,-1600
    d8ac:	10c00017 	ldw	r3,0(r2)
    d8b0:	e0bffe17 	ldw	r2,-8(fp)
    d8b4:	1880040e 	bge	r3,r2,d8c8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    d8b8:	00c00074 	movhi	r3,1
    d8bc:	18fe7004 	addi	r3,r3,-1600
    d8c0:	e0bffe17 	ldw	r2,-8(fp)
    d8c4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    d8c8:	e0bffe17 	ldw	r2,-8(fp)
    d8cc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    d8d0:	00000606 	br	d8ec <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    d8d4:	e0bffe17 	ldw	r2,-8(fp)
    d8d8:	10800044 	addi	r2,r2,1
    d8dc:	e0bffe15 	stw	r2,-8(fp)
    d8e0:	e0bffe17 	ldw	r2,-8(fp)
    d8e4:	10800810 	cmplti	r2,r2,32
    d8e8:	103fdf1e 	bne	r2,zero,d868 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
}
    d8f0:	e037883a 	mov	sp,fp
    d8f4:	df000017 	ldw	fp,0(sp)
    d8f8:	dec00104 	addi	sp,sp,4
    d8fc:	f800283a 	ret

0000d900 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    d900:	defffb04 	addi	sp,sp,-20
    d904:	df000415 	stw	fp,16(sp)
    d908:	df000404 	addi	fp,sp,16
    d90c:	e13ffe15 	stw	r4,-8(fp)
    d910:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    d914:	e0bfff17 	ldw	r2,-4(fp)
    d918:	10840070 	cmpltui	r2,r2,4097
    d91c:	1000021e 	bne	r2,zero,d928 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    d920:	00840004 	movi	r2,4096
    d924:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    d928:	e0fffe17 	ldw	r3,-8(fp)
    d92c:	e0bfff17 	ldw	r2,-4(fp)
    d930:	1885883a 	add	r2,r3,r2
    d934:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d938:	e0bffe17 	ldw	r2,-8(fp)
    d93c:	e0bffd15 	stw	r2,-12(fp)
    d940:	00000506 	br	d958 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    d944:	e0bffd17 	ldw	r2,-12(fp)
    d948:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    d94c:	e0bffd17 	ldw	r2,-12(fp)
    d950:	10800804 	addi	r2,r2,32
    d954:	e0bffd15 	stw	r2,-12(fp)
    d958:	e0fffd17 	ldw	r3,-12(fp)
    d95c:	e0bffc17 	ldw	r2,-16(fp)
    d960:	18bff836 	bltu	r3,r2,d944 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    d964:	e0bffe17 	ldw	r2,-8(fp)
    d968:	108007cc 	andi	r2,r2,31
    d96c:	1005003a 	cmpeq	r2,r2,zero
    d970:	1000021e 	bne	r2,zero,d97c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    d974:	e0bffd17 	ldw	r2,-12(fp)
    d978:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    d97c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    d980:	e037883a 	mov	sp,fp
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00104 	addi	sp,sp,4
    d98c:	f800283a 	ret

0000d990 <atexit>:
    d990:	200b883a 	mov	r5,r4
    d994:	000d883a 	mov	r6,zero
    d998:	0009883a 	mov	r4,zero
    d99c:	000f883a 	mov	r7,zero
    d9a0:	000da181 	jmpi	da18 <__register_exitproc>

0000d9a4 <memcmp>:
    d9a4:	00c000c4 	movi	r3,3
    d9a8:	1980032e 	bgeu	r3,r6,d9b8 <memcmp+0x14>
    d9ac:	2144b03a 	or	r2,r4,r5
    d9b0:	10c4703a 	and	r2,r2,r3
    d9b4:	10000f26 	beq	r2,zero,d9f4 <memcmp+0x50>
    d9b8:	31ffffc4 	addi	r7,r6,-1
    d9bc:	3000061e 	bne	r6,zero,d9d8 <memcmp+0x34>
    d9c0:	00000a06 	br	d9ec <memcmp+0x48>
    d9c4:	39ffffc4 	addi	r7,r7,-1
    d9c8:	00bfffc4 	movi	r2,-1
    d9cc:	21000044 	addi	r4,r4,1
    d9d0:	29400044 	addi	r5,r5,1
    d9d4:	38800526 	beq	r7,r2,d9ec <memcmp+0x48>
    d9d8:	20c00003 	ldbu	r3,0(r4)
    d9dc:	28800003 	ldbu	r2,0(r5)
    d9e0:	18bff826 	beq	r3,r2,d9c4 <memcmp+0x20>
    d9e4:	1885c83a 	sub	r2,r3,r2
    d9e8:	f800283a 	ret
    d9ec:	0005883a 	mov	r2,zero
    d9f0:	f800283a 	ret
    d9f4:	180f883a 	mov	r7,r3
    d9f8:	20c00017 	ldw	r3,0(r4)
    d9fc:	28800017 	ldw	r2,0(r5)
    da00:	18bfed1e 	bne	r3,r2,d9b8 <memcmp+0x14>
    da04:	31bfff04 	addi	r6,r6,-4
    da08:	21000104 	addi	r4,r4,4
    da0c:	29400104 	addi	r5,r5,4
    da10:	39bff936 	bltu	r7,r6,d9f8 <memcmp+0x54>
    da14:	003fe806 	br	d9b8 <memcmp+0x14>

0000da18 <__register_exitproc>:
    da18:	defffa04 	addi	sp,sp,-24
    da1c:	00800074 	movhi	r2,1
    da20:	10be6704 	addi	r2,r2,-1636
    da24:	dc000015 	stw	r16,0(sp)
    da28:	14000017 	ldw	r16,0(r2)
    da2c:	dd000415 	stw	r20,16(sp)
    da30:	2829883a 	mov	r20,r5
    da34:	81405217 	ldw	r5,328(r16)
    da38:	dcc00315 	stw	r19,12(sp)
    da3c:	dc800215 	stw	r18,8(sp)
    da40:	dc400115 	stw	r17,4(sp)
    da44:	dfc00515 	stw	ra,20(sp)
    da48:	2023883a 	mov	r17,r4
    da4c:	3027883a 	mov	r19,r6
    da50:	3825883a 	mov	r18,r7
    da54:	28002526 	beq	r5,zero,daec <__register_exitproc+0xd4>
    da58:	29000117 	ldw	r4,4(r5)
    da5c:	008007c4 	movi	r2,31
    da60:	11002716 	blt	r2,r4,db00 <__register_exitproc+0xe8>
    da64:	8800101e 	bne	r17,zero,daa8 <__register_exitproc+0x90>
    da68:	2105883a 	add	r2,r4,r4
    da6c:	1085883a 	add	r2,r2,r2
    da70:	20c00044 	addi	r3,r4,1
    da74:	1145883a 	add	r2,r2,r5
    da78:	0009883a 	mov	r4,zero
    da7c:	15000215 	stw	r20,8(r2)
    da80:	28c00115 	stw	r3,4(r5)
    da84:	2005883a 	mov	r2,r4
    da88:	dfc00517 	ldw	ra,20(sp)
    da8c:	dd000417 	ldw	r20,16(sp)
    da90:	dcc00317 	ldw	r19,12(sp)
    da94:	dc800217 	ldw	r18,8(sp)
    da98:	dc400117 	ldw	r17,4(sp)
    da9c:	dc000017 	ldw	r16,0(sp)
    daa0:	dec00604 	addi	sp,sp,24
    daa4:	f800283a 	ret
    daa8:	29802204 	addi	r6,r5,136
    daac:	00800044 	movi	r2,1
    dab0:	110e983a 	sll	r7,r2,r4
    dab4:	30c04017 	ldw	r3,256(r6)
    dab8:	2105883a 	add	r2,r4,r4
    dabc:	1085883a 	add	r2,r2,r2
    dac0:	1185883a 	add	r2,r2,r6
    dac4:	19c6b03a 	or	r3,r3,r7
    dac8:	14802015 	stw	r18,128(r2)
    dacc:	14c00015 	stw	r19,0(r2)
    dad0:	00800084 	movi	r2,2
    dad4:	30c04015 	stw	r3,256(r6)
    dad8:	88bfe31e 	bne	r17,r2,da68 <__register_exitproc+0x50>
    dadc:	30804117 	ldw	r2,260(r6)
    dae0:	11c4b03a 	or	r2,r2,r7
    dae4:	30804115 	stw	r2,260(r6)
    dae8:	003fdf06 	br	da68 <__register_exitproc+0x50>
    daec:	00800074 	movhi	r2,1
    daf0:	10869004 	addi	r2,r2,6720
    daf4:	100b883a 	mov	r5,r2
    daf8:	80805215 	stw	r2,328(r16)
    dafc:	003fd606 	br	da58 <__register_exitproc+0x40>
    db00:	00800034 	movhi	r2,0
    db04:	10865504 	addi	r2,r2,6484
    db08:	1000021e 	bne	r2,zero,db14 <__register_exitproc+0xfc>
    db0c:	013fffc4 	movi	r4,-1
    db10:	003fdc06 	br	da84 <__register_exitproc+0x6c>
    db14:	01006404 	movi	r4,400
    db18:	103ee83a 	callr	r2
    db1c:	1007883a 	mov	r3,r2
    db20:	103ffa26 	beq	r2,zero,db0c <__register_exitproc+0xf4>
    db24:	80805217 	ldw	r2,328(r16)
    db28:	180b883a 	mov	r5,r3
    db2c:	18000115 	stw	zero,4(r3)
    db30:	18800015 	stw	r2,0(r3)
    db34:	80c05215 	stw	r3,328(r16)
    db38:	18006215 	stw	zero,392(r3)
    db3c:	18006315 	stw	zero,396(r3)
    db40:	0009883a 	mov	r4,zero
    db44:	883fc826 	beq	r17,zero,da68 <__register_exitproc+0x50>
    db48:	003fd706 	br	daa8 <__register_exitproc+0x90>
    db4c:	000043bc 	xorhi	zero,zero,270
