
ex1.elf:     file format elf32-littlenios2
ex1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000194

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x00000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x00000194 paddr 0x00000194 align 2**12
         filesz 0x000024c8 memsz 0x000024c8 flags r-x
    LOAD off    0x0000465c vaddr 0x0000265c paddr 0x00003c90 align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x000062c4 vaddr 0x000052c4 paddr 0x000052c4 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-
    LOAD off    0x00006000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02000020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002490  00000194  00000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00002624  00002624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  0000265c  00003c90  0000465c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  000052c4  000052c4  000062c4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000558  00000000  00000000  00006048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000007f0  00000000  00000000  000065a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a064  00000000  00000000  00006d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000254e  00000000  00000000  00010df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000062d6  00000000  00000000  00013342  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000008ac  00000000  00000000  00019618  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000aaa  00000000  00000000  00019ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000df1  00000000  00000000  0001a96e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0001b760  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001b780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001d2eb  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001d2ee  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001d2fa  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001d2fb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001d2fc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001d300  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001d304  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001d308  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001d313  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001d31e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001d329  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  0001d331  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f6a9  00000000  00000000  0001d35c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
00000194 l    d  .text	00000000 .text
00002624 l    d  .rodata	00000000 .rodata
0000265c l    d  .rwdata	00000000 .rwdata
000052c4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ex1.c
00000000 l    df *ABS*	00000000 alt_load.c
000002c8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000265c l     O .rwdata	00001060 jtag_uart_0
00000430 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000670 l     F .text	00000228 altera_avalon_jtag_uart_irq
00000898 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00000f14 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00001264 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000012e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000013c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000017e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001920 l     F .text	000000dc alt_file_locked
00001b84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00003864 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000240c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000025c0 l     F .text	00000040 alt_sim_halt
00000334 g     F .text	0000006c alt_main
000052e0 g     O .bss	00000100 alt_irq
00003c90 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
000052dc g     O .bss	00000004 errno
000052c8 g     O .bss	00000004 alt_argv
0000bc64 g       *ABS*	00000000 _gp
000036e4 g     O .rwdata	00000180 alt_fd_list
00001e08 g     F .text	00000094 alt_find_dev
000021c4 g     F .text	000000a0 memcpy
000018a8 g     F .text	00000078 alt_io_redirect
00002624 g       *ABS*	00000000 __DTOR_END__
00000ab0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002074 g     F .text	00000090 alt_icache_flush
00003c74 g     O .rwdata	00000004 alt_max_fd
00003c8c g     O .rwdata	00000004 _global_impure_ptr
00005570 g       *ABS*	00000000 __bss_end
000016ec g     F .text	000000f8 alt_iic_isr_register
00001cdc g     F .text	0000010c alt_tick
000016a4 g     F .text	00000048 alt_ic_irq_enabled
00001c44 g     F .text	00000098 alt_alarm_stop
000052d0 g     O .bss	00000004 alt_irq_active
02000000 g       *ABS*	00000000 __alt_mem_onchip_mem
020000ec g     F .exceptions	000000c8 alt_irq_handler
000036bc g     O .rwdata	00000028 alt_dev_null
000012c4 g     F .text	0000001c alt_dcache_flush_all
00003c90 g       *ABS*	00000000 __ram_rwdata_end
00003c6c g     O .rwdata	00000008 alt_dev_list
0000265c g       *ABS*	00000000 __ram_rodata_end
00005570 g       *ABS*	00000000 end
000005b0 g     F .text	000000c0 altera_avalon_jtag_uart_init
00002620 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
00000f84 g     F .text	00000090 alt_avalon_timer_sc_init
00000cd4 g     F .text	00000240 altera_avalon_jtag_uart_write
00002410 g     F .text	000001b0 __call_exitprocs
00000194 g     F .text	0000003c _start
000052d4 g     O .bss	00000004 _alt_tick_rate
000052d8 g     O .bss	00000004 _alt_nticks
000003d4 g     F .text	0000005c alt_sys_init
000022d8 g     F .text	00000134 __register_exitproc
00000948 g     F .text	00000074 altera_avalon_jtag_uart_close
0000265c g       *ABS*	00000000 __ram_rwdata_start
00002624 g       *ABS*	00000000 __ram_rodata_start
00000468 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00001fbc g     F .text	000000b8 alt_get_fd
00002150 g     F .text	00000074 memcmp
00000518 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00005570 g       *ABS*	00000000 __alt_stack_base
00000560 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001e9c g     F .text	00000120 alt_find_file
0000130c g     F .text	000000b4 alt_dev_llist_insert
000052c4 g       *ABS*	00000000 __bss_start
000001d0 g     F .text	00000078 main
000052cc g     O .bss	00000004 alt_envp
000004c0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000053e0 g     O .bss	00000190 _atexit0
00003c78 g     O .rwdata	00000004 alt_errno
00002624 g       *ABS*	00000000 __CTOR_END__
00002624 g       *ABS*	00000000 __flash_rodata_start
00002624 g       *ABS*	00000000 __DTOR_LIST__
000003a0 g     F .text	00000034 alt_irq_init
00001be4 g     F .text	00000060 alt_release_fd
00002104 g     F .text	00000014 atexit
00003c88 g     O .rwdata	00000004 _impure_ptr
000052c4 g     O .bss	00000004 alt_argc
00001484 g     F .text	00000064 _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
00003c64 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
00001518 g     F .text	00000050 alt_ic_isr_register
00003c90 g       *ABS*	00000000 _edata
00005570 g       *ABS*	00000000 _end
020001b4 g       *ABS*	00000000 __ram_exceptions_end
000009bc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00001604 g     F .text	000000a0 alt_ic_irq_disable
00001de8 g     F .text	00000020 altera_nios2_qsys_irq_init
00002118 g     F .text	00000038 exit
02000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
00002600 g     F .text	00000020 _exit
00001014 g     F .text	00000154 alt_alarm_start
00002264 g     F .text	00000074 strlen
000019fc g     F .text	00000188 open
000014e8 g     F .text	00000030 alt_icache_flush_all
00003c7c g     O .rwdata	00000004 alt_priority_mask
00001568 g     F .text	0000009c alt_ic_irq_enable
00003c80 g     O .rwdata	00000008 alt_alarm_list
00001420 g     F .text	00000064 _do_ctors
00001168 g     F .text	000000fc close
00000248 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 2000014:	08406514 	ori	at,at,404
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000161e 	bne	r2,zero,2000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c00034 	movhi	r3,0
 2000134:	18d4b804 	addi	r3,r3,21216
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11400017 	ldw	r5,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c00034 	movhi	r3,0
 200014c:	18d4b804 	addi	r3,r3,21216
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000164:	0005313a 	rdctl	r2,ipending
 2000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 200016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000174:	e0bfff17 	ldw	r2,-4(fp)
 2000178:	1004c03a 	cmpne	r2,r2,zero
 200017c:	103fe31e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000180:	00000706 	br	20001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000184:	e0bffe17 	ldw	r2,-8(fp)
 2000188:	1085883a 	add	r2,r2,r2
 200018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000190:	e0bffd17 	ldw	r2,-12(fp)
 2000194:	10800044 	addi	r2,r2,1
 2000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 200019c:	003fde06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a0:	e037883a 	mov	sp,fp
 20001a4:	dfc00117 	ldw	ra,4(sp)
 20001a8:	df000017 	ldw	fp,0(sp)
 20001ac:	dec00204 	addi	sp,sp,8
 20001b0:	f800283a 	ret

Disassembly of section .text:

00000194 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     194:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     198:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     19c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1a0:	d6af1914 	ori	gp,gp,48228
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1a4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1a8:	1094b114 	ori	r2,r2,21188

    movhi r3, %hi(__bss_end)
     1ac:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1b0:	18d55c14 	ori	r3,r3,21872

    beq r2, r3, 1f
     1b4:	10c00326 	beq	r2,r3,1c4 <_start+0x30>

0:
    stw zero, (r2)
     1b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c0:	10fffd36 	bltu	r2,r3,1b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1c4:	00002480 	call	248 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c8:	00003340 	call	334 <alt_main>

000001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1cc:	003fff06 	br	1cc <alt_after_alt_main>

000001d0 <main>:
 *  Created on: 23 May 2013
 *      Author: Valentin Rutz
 */
#include "system.h"
#include "altera_avalon_pio_regs.h"
int main() {
     1d0:	defffd04 	addi	sp,sp,-12
     1d4:	df000215 	stw	fp,8(sp)
     1d8:	df000204 	addi	fp,sp,8
	int delay = 100000;
     1dc:	008000b4 	movhi	r2,2
     1e0:	10a1a804 	addi	r2,r2,-31072
     1e4:	e0bfff15 	stw	r2,-4(fp)
	int i;
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1); //allume led 0
     1e8:	00c08034 	movhi	r3,512
     1ec:	18d40804 	addi	r3,r3,20512
     1f0:	00800044 	movi	r2,1
     1f4:	18800035 	stwio	r2,0(r3)
		i = 0;
     1f8:	e03ffe15 	stw	zero,-8(fp)
		while (i < delay) {
     1fc:	00000306 	br	20c <main+0x3c>
			i++;
     200:	e0bffe17 	ldw	r2,-8(fp)
     204:	10800044 	addi	r2,r2,1
     208:	e0bffe15 	stw	r2,-8(fp)
	int delay = 100000;
	int i;
	while (1) {
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 1); //allume led 0
		i = 0;
		while (i < delay) {
     20c:	e0fffe17 	ldw	r3,-8(fp)
     210:	e0bfff17 	ldw	r2,-4(fp)
     214:	18bffa16 	blt	r3,r2,200 <main+0x30>
			i++;
		} //delai IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE,0);
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0); //eteint led 0
     218:	00808034 	movhi	r2,512
     21c:	10940804 	addi	r2,r2,20512
     220:	10000035 	stwio	zero,0(r2)
		i = 0;
     224:	e03ffe15 	stw	zero,-8(fp)
		while (i < delay) {
     228:	00000306 	br	238 <main+0x68>
			i++;
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	10800044 	addi	r2,r2,1
     234:	e0bffe15 	stw	r2,-8(fp)
		while (i < delay) {
			i++;
		} //delai IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE,0);
		IOWR_ALTERA_AVALON_PIO_DATA(LED_0_BASE, 0); //eteint led 0
		i = 0;
		while (i < delay) {
     238:	e0fffe17 	ldw	r3,-8(fp)
     23c:	e0bfff17 	ldw	r2,-4(fp)
     240:	18bffa16 	blt	r3,r2,22c <main+0x5c>
			i++;
		} //delai
	}
     244:	003fe806 	br	1e8 <main+0x18>

00000248 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     248:	defffe04 	addi	sp,sp,-8
     24c:	dfc00115 	stw	ra,4(sp)
     250:	df000015 	stw	fp,0(sp)
     254:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     258:	01000034 	movhi	r4,0
     25c:	210f2404 	addi	r4,r4,15504
     260:	01400034 	movhi	r5,0
     264:	29499704 	addi	r5,r5,9820
     268:	01800034 	movhi	r6,0
     26c:	318f2404 	addi	r6,r6,15504
     270:	00002c80 	call	2c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     274:	01000034 	movhi	r4,0
     278:	21000004 	addi	r4,r4,0
     27c:	01408034 	movhi	r5,512
     280:	29400804 	addi	r5,r5,32
     284:	01808034 	movhi	r6,512
     288:	31806d04 	addi	r6,r6,436
     28c:	00002c80 	call	2c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     290:	01000034 	movhi	r4,0
     294:	21098904 	addi	r4,r4,9764
     298:	01400034 	movhi	r5,0
     29c:	29498904 	addi	r5,r5,9764
     2a0:	01800034 	movhi	r6,0
     2a4:	31899704 	addi	r6,r6,9820
     2a8:	00002c80 	call	2c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     2ac:	00012c40 	call	12c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
     2b0:	00014e80 	call	14e8 <alt_icache_flush_all>
}
     2b4:	e037883a 	mov	sp,fp
     2b8:	dfc00117 	ldw	ra,4(sp)
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00204 	addi	sp,sp,8
     2c4:	f800283a 	ret

000002c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     2c8:	defffc04 	addi	sp,sp,-16
     2cc:	df000315 	stw	fp,12(sp)
     2d0:	df000304 	addi	fp,sp,12
     2d4:	e13ffd15 	stw	r4,-12(fp)
     2d8:	e17ffe15 	stw	r5,-8(fp)
     2dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     2e0:	e0fffe17 	ldw	r3,-8(fp)
     2e4:	e0bffd17 	ldw	r2,-12(fp)
     2e8:	18800e26 	beq	r3,r2,324 <alt_load_section+0x5c>
  {
    while( to != end )
     2ec:	00000a06 	br	318 <alt_load_section+0x50>
    {
      *to++ = *from++;
     2f0:	e0bffd17 	ldw	r2,-12(fp)
     2f4:	10c00017 	ldw	r3,0(r2)
     2f8:	e0bffe17 	ldw	r2,-8(fp)
     2fc:	10c00015 	stw	r3,0(r2)
     300:	e0bffe17 	ldw	r2,-8(fp)
     304:	10800104 	addi	r2,r2,4
     308:	e0bffe15 	stw	r2,-8(fp)
     30c:	e0bffd17 	ldw	r2,-12(fp)
     310:	10800104 	addi	r2,r2,4
     314:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     318:	e0fffe17 	ldw	r3,-8(fp)
     31c:	e0bfff17 	ldw	r2,-4(fp)
     320:	18bff31e 	bne	r3,r2,2f0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     324:	e037883a 	mov	sp,fp
     328:	df000017 	ldw	fp,0(sp)
     32c:	dec00104 	addi	sp,sp,4
     330:	f800283a 	ret

00000334 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     334:	defffd04 	addi	sp,sp,-12
     338:	dfc00215 	stw	ra,8(sp)
     33c:	df000115 	stw	fp,4(sp)
     340:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     344:	0009883a 	mov	r4,zero
     348:	00003a00 	call	3a0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     34c:	00003d40 	call	3d4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     350:	01000034 	movhi	r4,0
     354:	21098904 	addi	r4,r4,9764
     358:	01400034 	movhi	r5,0
     35c:	29498904 	addi	r5,r5,9764
     360:	01800034 	movhi	r6,0
     364:	31898904 	addi	r6,r6,9764
     368:	00018a80 	call	18a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     36c:	00014200 	call	1420 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     370:	01000034 	movhi	r4,0
     374:	21052104 	addi	r4,r4,5252
     378:	00021040 	call	2104 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     37c:	d1259817 	ldw	r4,-27040(gp)
     380:	d1659917 	ldw	r5,-27036(gp)
     384:	d1a59a17 	ldw	r6,-27032(gp)
     388:	00001d00 	call	1d0 <main>
     38c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     390:	01000044 	movi	r4,1
     394:	00011680 	call	1168 <close>
  exit (result);
     398:	e13fff17 	ldw	r4,-4(fp)
     39c:	00021180 	call	2118 <exit>

000003a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     3a0:	defffd04 	addi	sp,sp,-12
     3a4:	dfc00215 	stw	ra,8(sp)
     3a8:	df000115 	stw	fp,4(sp)
     3ac:	df000104 	addi	fp,sp,4
     3b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
     3b4:	0001de80 	call	1de8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     3b8:	00800044 	movi	r2,1
     3bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     3c0:	e037883a 	mov	sp,fp
     3c4:	dfc00117 	ldw	ra,4(sp)
     3c8:	df000017 	ldw	fp,0(sp)
     3cc:	dec00204 	addi	sp,sp,8
     3d0:	f800283a 	ret

000003d4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     3d4:	defffe04 	addi	sp,sp,-8
     3d8:	dfc00115 	stw	ra,4(sp)
     3dc:	df000015 	stw	fp,0(sp)
     3e0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
     3e4:	01008034 	movhi	r4,512
     3e8:	21142804 	addi	r4,r4,20640
     3ec:	000b883a 	mov	r5,zero
     3f0:	000d883a 	mov	r6,zero
     3f4:	01c0fa04 	movi	r7,1000
     3f8:	0000f840 	call	f84 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     3fc:	01000034 	movhi	r4,0
     400:	2109a104 	addi	r4,r4,9860
     404:	000b883a 	mov	r5,zero
     408:	018000c4 	movi	r6,3
     40c:	00005b00 	call	5b0 <altera_avalon_jtag_uart_init>
     410:	01000034 	movhi	r4,0
     414:	21099704 	addi	r4,r4,9820
     418:	00004300 	call	430 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
     41c:	e037883a 	mov	sp,fp
     420:	dfc00117 	ldw	ra,4(sp)
     424:	df000017 	ldw	fp,0(sp)
     428:	dec00204 	addi	sp,sp,8
     42c:	f800283a 	ret

00000430 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     430:	defffd04 	addi	sp,sp,-12
     434:	dfc00215 	stw	ra,8(sp)
     438:	df000115 	stw	fp,4(sp)
     43c:	df000104 	addi	fp,sp,4
     440:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     444:	e13fff17 	ldw	r4,-4(fp)
     448:	01400034 	movhi	r5,0
     44c:	294f1b04 	addi	r5,r5,15468
     450:	000130c0 	call	130c <alt_dev_llist_insert>
}
     454:	e037883a 	mov	sp,fp
     458:	dfc00117 	ldw	ra,4(sp)
     45c:	df000017 	ldw	fp,0(sp)
     460:	dec00204 	addi	sp,sp,8
     464:	f800283a 	ret

00000468 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     468:	defffa04 	addi	sp,sp,-24
     46c:	dfc00515 	stw	ra,20(sp)
     470:	df000415 	stw	fp,16(sp)
     474:	df000404 	addi	fp,sp,16
     478:	e13ffd15 	stw	r4,-12(fp)
     47c:	e17ffe15 	stw	r5,-8(fp)
     480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     484:	e0bffd17 	ldw	r2,-12(fp)
     488:	10800017 	ldw	r2,0(r2)
     48c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     490:	e0bffc17 	ldw	r2,-16(fp)
     494:	11000a04 	addi	r4,r2,40
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	11c00217 	ldw	r7,8(r2)
     4a0:	e17ffe17 	ldw	r5,-8(fp)
     4a4:	e1bfff17 	ldw	r6,-4(fp)
     4a8:	0000ab00 	call	ab0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     4ac:	e037883a 	mov	sp,fp
     4b0:	dfc00117 	ldw	ra,4(sp)
     4b4:	df000017 	ldw	fp,0(sp)
     4b8:	dec00204 	addi	sp,sp,8
     4bc:	f800283a 	ret

000004c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     4c0:	defffa04 	addi	sp,sp,-24
     4c4:	dfc00515 	stw	ra,20(sp)
     4c8:	df000415 	stw	fp,16(sp)
     4cc:	df000404 	addi	fp,sp,16
     4d0:	e13ffd15 	stw	r4,-12(fp)
     4d4:	e17ffe15 	stw	r5,-8(fp)
     4d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     4dc:	e0bffd17 	ldw	r2,-12(fp)
     4e0:	10800017 	ldw	r2,0(r2)
     4e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     4e8:	e0bffc17 	ldw	r2,-16(fp)
     4ec:	11000a04 	addi	r4,r2,40
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	11c00217 	ldw	r7,8(r2)
     4f8:	e17ffe17 	ldw	r5,-8(fp)
     4fc:	e1bfff17 	ldw	r6,-4(fp)
     500:	0000cd40 	call	cd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     504:	e037883a 	mov	sp,fp
     508:	dfc00117 	ldw	ra,4(sp)
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00204 	addi	sp,sp,8
     514:	f800283a 	ret

00000518 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     518:	defffc04 	addi	sp,sp,-16
     51c:	dfc00315 	stw	ra,12(sp)
     520:	df000215 	stw	fp,8(sp)
     524:	df000204 	addi	fp,sp,8
     528:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     52c:	e0bfff17 	ldw	r2,-4(fp)
     530:	10800017 	ldw	r2,0(r2)
     534:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     538:	e0bffe17 	ldw	r2,-8(fp)
     53c:	11000a04 	addi	r4,r2,40
     540:	e0bfff17 	ldw	r2,-4(fp)
     544:	11400217 	ldw	r5,8(r2)
     548:	00009480 	call	948 <altera_avalon_jtag_uart_close>
}
     54c:	e037883a 	mov	sp,fp
     550:	dfc00117 	ldw	ra,4(sp)
     554:	df000017 	ldw	fp,0(sp)
     558:	dec00204 	addi	sp,sp,8
     55c:	f800283a 	ret

00000560 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     560:	defffa04 	addi	sp,sp,-24
     564:	dfc00515 	stw	ra,20(sp)
     568:	df000415 	stw	fp,16(sp)
     56c:	df000404 	addi	fp,sp,16
     570:	e13ffd15 	stw	r4,-12(fp)
     574:	e17ffe15 	stw	r5,-8(fp)
     578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     57c:	e0bffd17 	ldw	r2,-12(fp)
     580:	10800017 	ldw	r2,0(r2)
     584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     588:	e0bffc17 	ldw	r2,-16(fp)
     58c:	11000a04 	addi	r4,r2,40
     590:	e17ffe17 	ldw	r5,-8(fp)
     594:	e1bfff17 	ldw	r6,-4(fp)
     598:	00009bc0 	call	9bc <altera_avalon_jtag_uart_ioctl>
}
     59c:	e037883a 	mov	sp,fp
     5a0:	dfc00117 	ldw	ra,4(sp)
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00204 	addi	sp,sp,8
     5ac:	f800283a 	ret

000005b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     5b0:	defffa04 	addi	sp,sp,-24
     5b4:	dfc00515 	stw	ra,20(sp)
     5b8:	df000415 	stw	fp,16(sp)
     5bc:	df000404 	addi	fp,sp,16
     5c0:	e13ffd15 	stw	r4,-12(fp)
     5c4:	e17ffe15 	stw	r5,-8(fp)
     5c8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     5cc:	e0fffd17 	ldw	r3,-12(fp)
     5d0:	00800044 	movi	r2,1
     5d4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     5d8:	e0bffd17 	ldw	r2,-12(fp)
     5dc:	10800017 	ldw	r2,0(r2)
     5e0:	11000104 	addi	r4,r2,4
     5e4:	e0bffd17 	ldw	r2,-12(fp)
     5e8:	10800817 	ldw	r2,32(r2)
     5ec:	1007883a 	mov	r3,r2
     5f0:	2005883a 	mov	r2,r4
     5f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     5f8:	e13ffe17 	ldw	r4,-8(fp)
     5fc:	e17fff17 	ldw	r5,-4(fp)
     600:	d8000015 	stw	zero,0(sp)
     604:	01800034 	movhi	r6,0
     608:	31819c04 	addi	r6,r6,1648
     60c:	e1fffd17 	ldw	r7,-12(fp)
     610:	00015180 	call	1518 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     61c:	e0bffd17 	ldw	r2,-12(fp)
     620:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     624:	00800034 	movhi	r2,0
     628:	1094b504 	addi	r2,r2,21204
     62c:	10800017 	ldw	r2,0(r2)
     630:	100b883a 	mov	r5,r2
     634:	01800034 	movhi	r6,0
     638:	31822604 	addi	r6,r6,2200
     63c:	e1fffd17 	ldw	r7,-12(fp)
     640:	00010140 	call	1014 <alt_alarm_start>
     644:	1004403a 	cmpge	r2,r2,zero
     648:	1000041e 	bne	r2,zero,65c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     64c:	e0fffd17 	ldw	r3,-12(fp)
     650:	00a00034 	movhi	r2,32768
     654:	10bfffc4 	addi	r2,r2,-1
     658:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     65c:	e037883a 	mov	sp,fp
     660:	dfc00117 	ldw	ra,4(sp)
     664:	df000017 	ldw	fp,0(sp)
     668:	dec00204 	addi	sp,sp,8
     66c:	f800283a 	ret

00000670 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     670:	defff804 	addi	sp,sp,-32
     674:	df000715 	stw	fp,28(sp)
     678:	df000704 	addi	fp,sp,28
     67c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     680:	e0bfff17 	ldw	r2,-4(fp)
     684:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
     688:	e0bffe17 	ldw	r2,-8(fp)
     68c:	10800017 	ldw	r2,0(r2)
     690:	e0bffd15 	stw	r2,-12(fp)
     694:	00000006 	br	698 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     698:	e0bffd17 	ldw	r2,-12(fp)
     69c:	10800104 	addi	r2,r2,4
     6a0:	10800037 	ldwio	r2,0(r2)
     6a4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     6a8:	e0bffc17 	ldw	r2,-16(fp)
     6ac:	1080c00c 	andi	r2,r2,768
     6b0:	1005003a 	cmpeq	r2,r2,zero
     6b4:	1000741e 	bne	r2,zero,888 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     6b8:	e0bffc17 	ldw	r2,-16(fp)
     6bc:	1080400c 	andi	r2,r2,256
     6c0:	1005003a 	cmpeq	r2,r2,zero
     6c4:	1000351e 	bne	r2,zero,79c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     6c8:	00800074 	movhi	r2,1
     6cc:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     6d0:	e0bffe17 	ldw	r2,-8(fp)
     6d4:	10800a17 	ldw	r2,40(r2)
     6d8:	10800044 	addi	r2,r2,1
     6dc:	1081ffcc 	andi	r2,r2,2047
     6e0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10c00b17 	ldw	r3,44(r2)
     6ec:	e0bffa17 	ldw	r2,-24(fp)
     6f0:	18801626 	beq	r3,r2,74c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     6f4:	e0bffd17 	ldw	r2,-12(fp)
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     700:	e0bffb17 	ldw	r2,-20(fp)
     704:	10a0000c 	andi	r2,r2,32768
     708:	1005003a 	cmpeq	r2,r2,zero
     70c:	10000f1e 	bne	r2,zero,74c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     710:	e0bffe17 	ldw	r2,-8(fp)
     714:	10c00a17 	ldw	r3,40(r2)
     718:	e0bffb17 	ldw	r2,-20(fp)
     71c:	1009883a 	mov	r4,r2
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	1885883a 	add	r2,r3,r2
     728:	10800e04 	addi	r2,r2,56
     72c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     730:	e0bffe17 	ldw	r2,-8(fp)
     734:	10800a17 	ldw	r2,40(r2)
     738:	10800044 	addi	r2,r2,1
     73c:	10c1ffcc 	andi	r3,r2,2047
     740:	e0bffe17 	ldw	r2,-8(fp)
     744:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     748:	003fe106 	br	6d0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     74c:	e0bffb17 	ldw	r2,-20(fp)
     750:	10bfffec 	andhi	r2,r2,65535
     754:	1005003a 	cmpeq	r2,r2,zero
     758:	1000101e 	bne	r2,zero,79c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     75c:	e0bffe17 	ldw	r2,-8(fp)
     760:	10c00817 	ldw	r3,32(r2)
     764:	00bfff84 	movi	r2,-2
     768:	1886703a 	and	r3,r3,r2
     76c:	e0bffe17 	ldw	r2,-8(fp)
     770:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     774:	e0bffd17 	ldw	r2,-12(fp)
     778:	11000104 	addi	r4,r2,4
     77c:	e0bffe17 	ldw	r2,-8(fp)
     780:	10800817 	ldw	r2,32(r2)
     784:	1007883a 	mov	r3,r2
     788:	2005883a 	mov	r2,r4
     78c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     790:	e0bffd17 	ldw	r2,-12(fp)
     794:	10800104 	addi	r2,r2,4
     798:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     79c:	e0bffc17 	ldw	r2,-16(fp)
     7a0:	1080800c 	andi	r2,r2,512
     7a4:	1005003a 	cmpeq	r2,r2,zero
     7a8:	103fbb1e 	bne	r2,zero,698 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     7ac:	e0bffc17 	ldw	r2,-16(fp)
     7b0:	10bfffec 	andhi	r2,r2,65535
     7b4:	1004d43a 	srli	r2,r2,16
     7b8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     7bc:	00001506 	br	814 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     7c0:	e13ffd17 	ldw	r4,-12(fp)
     7c4:	e0bffe17 	ldw	r2,-8(fp)
     7c8:	10c00d17 	ldw	r3,52(r2)
     7cc:	e0bffe17 	ldw	r2,-8(fp)
     7d0:	1885883a 	add	r2,r3,r2
     7d4:	10820e04 	addi	r2,r2,2104
     7d8:	10800003 	ldbu	r2,0(r2)
     7dc:	10c03fcc 	andi	r3,r2,255
     7e0:	18c0201c 	xori	r3,r3,128
     7e4:	18ffe004 	addi	r3,r3,-128
     7e8:	2005883a 	mov	r2,r4
     7ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     7f0:	e0bffe17 	ldw	r2,-8(fp)
     7f4:	10800d17 	ldw	r2,52(r2)
     7f8:	10800044 	addi	r2,r2,1
     7fc:	10c1ffcc 	andi	r3,r2,2047
     800:	e0bffe17 	ldw	r2,-8(fp)
     804:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     808:	e0bff917 	ldw	r2,-28(fp)
     80c:	10bfffc4 	addi	r2,r2,-1
     810:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     814:	e0bff917 	ldw	r2,-28(fp)
     818:	1005003a 	cmpeq	r2,r2,zero
     81c:	1000051e 	bne	r2,zero,834 <altera_avalon_jtag_uart_irq+0x1c4>
     820:	e0bffe17 	ldw	r2,-8(fp)
     824:	10c00d17 	ldw	r3,52(r2)
     828:	e0bffe17 	ldw	r2,-8(fp)
     82c:	10800c17 	ldw	r2,48(r2)
     830:	18bfe31e 	bne	r3,r2,7c0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     834:	e0bff917 	ldw	r2,-28(fp)
     838:	1005003a 	cmpeq	r2,r2,zero
     83c:	103f961e 	bne	r2,zero,698 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	10c00817 	ldw	r3,32(r2)
     848:	00bfff44 	movi	r2,-3
     84c:	1886703a 	and	r3,r3,r2
     850:	e0bffe17 	ldw	r2,-8(fp)
     854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     858:	e0bffe17 	ldw	r2,-8(fp)
     85c:	10800017 	ldw	r2,0(r2)
     860:	11000104 	addi	r4,r2,4
     864:	e0bffe17 	ldw	r2,-8(fp)
     868:	10800817 	ldw	r2,32(r2)
     86c:	1007883a 	mov	r3,r2
     870:	2005883a 	mov	r2,r4
     874:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     878:	e0bffd17 	ldw	r2,-12(fp)
     87c:	10800104 	addi	r2,r2,4
     880:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     884:	003f8406 	br	698 <altera_avalon_jtag_uart_irq+0x28>
}
     888:	e037883a 	mov	sp,fp
     88c:	df000017 	ldw	fp,0(sp)
     890:	dec00104 	addi	sp,sp,4
     894:	f800283a 	ret

00000898 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     898:	defffc04 	addi	sp,sp,-16
     89c:	df000315 	stw	fp,12(sp)
     8a0:	df000304 	addi	fp,sp,12
     8a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     8a8:	e0bfff17 	ldw	r2,-4(fp)
     8ac:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     8b0:	e0bffe17 	ldw	r2,-8(fp)
     8b4:	10800017 	ldw	r2,0(r2)
     8b8:	10800104 	addi	r2,r2,4
     8bc:	10800037 	ldwio	r2,0(r2)
     8c0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     8c4:	e0bffd17 	ldw	r2,-12(fp)
     8c8:	1081000c 	andi	r2,r2,1024
     8cc:	1005003a 	cmpeq	r2,r2,zero
     8d0:	10000c1e 	bne	r2,zero,904 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     8d4:	e0bffe17 	ldw	r2,-8(fp)
     8d8:	10800017 	ldw	r2,0(r2)
     8dc:	11000104 	addi	r4,r2,4
     8e0:	e0bffe17 	ldw	r2,-8(fp)
     8e4:	10800817 	ldw	r2,32(r2)
     8e8:	10810014 	ori	r2,r2,1024
     8ec:	1007883a 	mov	r3,r2
     8f0:	2005883a 	mov	r2,r4
     8f4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
     8f8:	e0bffe17 	ldw	r2,-8(fp)
     8fc:	10000915 	stw	zero,36(r2)
     900:	00000a06 	br	92c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     904:	e0bffe17 	ldw	r2,-8(fp)
     908:	10c00917 	ldw	r3,36(r2)
     90c:	00a00034 	movhi	r2,32768
     910:	10bfff04 	addi	r2,r2,-4
     914:	10c00536 	bltu	r2,r3,92c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
     918:	e0bffe17 	ldw	r2,-8(fp)
     91c:	10800917 	ldw	r2,36(r2)
     920:	10c00044 	addi	r3,r2,1
     924:	e0bffe17 	ldw	r2,-8(fp)
     928:	10c00915 	stw	r3,36(r2)
     92c:	00800034 	movhi	r2,0
     930:	1094b504 	addi	r2,r2,21204
     934:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     938:	e037883a 	mov	sp,fp
     93c:	df000017 	ldw	fp,0(sp)
     940:	dec00104 	addi	sp,sp,4
     944:	f800283a 	ret

00000948 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     948:	defffc04 	addi	sp,sp,-16
     94c:	df000315 	stw	fp,12(sp)
     950:	df000304 	addi	fp,sp,12
     954:	e13ffd15 	stw	r4,-12(fp)
     958:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     95c:	00000706 	br	97c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
     960:	e0bffe17 	ldw	r2,-8(fp)
     964:	1090000c 	andi	r2,r2,16384
     968:	1005003a 	cmpeq	r2,r2,zero
     96c:	1000031e 	bne	r2,zero,97c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
     970:	00bffd44 	movi	r2,-11
     974:	e0bfff15 	stw	r2,-4(fp)
     978:	00000b06 	br	9a8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     97c:	e0bffd17 	ldw	r2,-12(fp)
     980:	10c00d17 	ldw	r3,52(r2)
     984:	e0bffd17 	ldw	r2,-12(fp)
     988:	10800c17 	ldw	r2,48(r2)
     98c:	18800526 	beq	r3,r2,9a4 <altera_avalon_jtag_uart_close+0x5c>
     990:	e0bffd17 	ldw	r2,-12(fp)
     994:	10c00917 	ldw	r3,36(r2)
     998:	e0bffd17 	ldw	r2,-12(fp)
     99c:	10800117 	ldw	r2,4(r2)
     9a0:	18bfef36 	bltu	r3,r2,960 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     9a4:	e03fff15 	stw	zero,-4(fp)
     9a8:	e0bfff17 	ldw	r2,-4(fp)
}
     9ac:	e037883a 	mov	sp,fp
     9b0:	df000017 	ldw	fp,0(sp)
     9b4:	dec00104 	addi	sp,sp,4
     9b8:	f800283a 	ret

000009bc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     9bc:	defff804 	addi	sp,sp,-32
     9c0:	df000715 	stw	fp,28(sp)
     9c4:	df000704 	addi	fp,sp,28
     9c8:	e13ffb15 	stw	r4,-20(fp)
     9cc:	e17ffc15 	stw	r5,-16(fp)
     9d0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
     9d4:	00bff9c4 	movi	r2,-25
     9d8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
     9dc:	e0bffc17 	ldw	r2,-16(fp)
     9e0:	e0bfff15 	stw	r2,-4(fp)
     9e4:	e0ffff17 	ldw	r3,-4(fp)
     9e8:	189a8060 	cmpeqi	r2,r3,27137
     9ec:	1000041e 	bne	r2,zero,a00 <altera_avalon_jtag_uart_ioctl+0x44>
     9f0:	e0ffff17 	ldw	r3,-4(fp)
     9f4:	189a80a0 	cmpeqi	r2,r3,27138
     9f8:	10001b1e 	bne	r2,zero,a68 <altera_avalon_jtag_uart_ioctl+0xac>
     9fc:	00002706 	br	a9c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     a00:	e0bffb17 	ldw	r2,-20(fp)
     a04:	10c00117 	ldw	r3,4(r2)
     a08:	00a00034 	movhi	r2,32768
     a0c:	10bfffc4 	addi	r2,r2,-1
     a10:	18802226 	beq	r3,r2,a9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
     a14:	e0bffd17 	ldw	r2,-12(fp)
     a18:	10800017 	ldw	r2,0(r2)
     a1c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     a20:	e0bff917 	ldw	r2,-28(fp)
     a24:	10800090 	cmplti	r2,r2,2
     a28:	1000071e 	bne	r2,zero,a48 <altera_avalon_jtag_uart_ioctl+0x8c>
     a2c:	e0fff917 	ldw	r3,-28(fp)
     a30:	00a00034 	movhi	r2,32768
     a34:	10bfffc4 	addi	r2,r2,-1
     a38:	18800326 	beq	r3,r2,a48 <altera_avalon_jtag_uart_ioctl+0x8c>
     a3c:	e0bff917 	ldw	r2,-28(fp)
     a40:	e0bffe15 	stw	r2,-8(fp)
     a44:	00000306 	br	a54 <altera_avalon_jtag_uart_ioctl+0x98>
     a48:	00e00034 	movhi	r3,32768
     a4c:	18ffff84 	addi	r3,r3,-2
     a50:	e0fffe15 	stw	r3,-8(fp)
     a54:	e0bffb17 	ldw	r2,-20(fp)
     a58:	e0fffe17 	ldw	r3,-8(fp)
     a5c:	10c00115 	stw	r3,4(r2)
      rc = 0;
     a60:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
     a64:	00000d06 	br	a9c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     a68:	e0bffb17 	ldw	r2,-20(fp)
     a6c:	10c00117 	ldw	r3,4(r2)
     a70:	00a00034 	movhi	r2,32768
     a74:	10bfffc4 	addi	r2,r2,-1
     a78:	18800826 	beq	r3,r2,a9c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     a7c:	e13ffd17 	ldw	r4,-12(fp)
     a80:	e0bffb17 	ldw	r2,-20(fp)
     a84:	10c00917 	ldw	r3,36(r2)
     a88:	e0bffb17 	ldw	r2,-20(fp)
     a8c:	10800117 	ldw	r2,4(r2)
     a90:	1885803a 	cmpltu	r2,r3,r2
     a94:	20800015 	stw	r2,0(r4)
      rc = 0;
     a98:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
     a9c:	e0bffa17 	ldw	r2,-24(fp)
}
     aa0:	e037883a 	mov	sp,fp
     aa4:	df000017 	ldw	fp,0(sp)
     aa8:	dec00104 	addi	sp,sp,4
     aac:	f800283a 	ret

00000ab0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     ab0:	defff204 	addi	sp,sp,-56
     ab4:	dfc00d15 	stw	ra,52(sp)
     ab8:	df000c15 	stw	fp,48(sp)
     abc:	df000c04 	addi	fp,sp,48
     ac0:	e13ffb15 	stw	r4,-20(fp)
     ac4:	e17ffc15 	stw	r5,-16(fp)
     ac8:	e1bffd15 	stw	r6,-12(fp)
     acc:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
     ad0:	e0bffc17 	ldw	r2,-16(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     ad8:	00004806 	br	bfc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     adc:	e0bffb17 	ldw	r2,-20(fp)
     ae0:	10800a17 	ldw	r2,40(r2)
     ae4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     ae8:	e0bffb17 	ldw	r2,-20(fp)
     aec:	10800b17 	ldw	r2,44(r2)
     af0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
     af4:	e0fff717 	ldw	r3,-36(fp)
     af8:	e0bff617 	ldw	r2,-40(fp)
     afc:	18800536 	bltu	r3,r2,b14 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     b00:	e0bff717 	ldw	r2,-36(fp)
     b04:	e0fff617 	ldw	r3,-40(fp)
     b08:	10c5c83a 	sub	r2,r2,r3
     b0c:	e0bff815 	stw	r2,-32(fp)
     b10:	00000406 	br	b24 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     b14:	00820004 	movi	r2,2048
     b18:	e0fff617 	ldw	r3,-40(fp)
     b1c:	10c5c83a 	sub	r2,r2,r3
     b20:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
     b24:	e0bff817 	ldw	r2,-32(fp)
     b28:	1005003a 	cmpeq	r2,r2,zero
     b2c:	10001f1e 	bne	r2,zero,bac <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
     b30:	e0fffd17 	ldw	r3,-12(fp)
     b34:	e0bff817 	ldw	r2,-32(fp)
     b38:	1880022e 	bgeu	r3,r2,b44 <altera_avalon_jtag_uart_read+0x94>
        n = space;
     b3c:	e0bffd17 	ldw	r2,-12(fp)
     b40:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     b44:	e0bffb17 	ldw	r2,-20(fp)
     b48:	10c00e04 	addi	r3,r2,56
     b4c:	e0bff617 	ldw	r2,-40(fp)
     b50:	1887883a 	add	r3,r3,r2
     b54:	e0bffa17 	ldw	r2,-24(fp)
     b58:	1009883a 	mov	r4,r2
     b5c:	180b883a 	mov	r5,r3
     b60:	e1bff817 	ldw	r6,-32(fp)
     b64:	00021c40 	call	21c4 <memcpy>
      ptr   += n;
     b68:	e0fff817 	ldw	r3,-32(fp)
     b6c:	e0bffa17 	ldw	r2,-24(fp)
     b70:	10c5883a 	add	r2,r2,r3
     b74:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
     b78:	e0fffd17 	ldw	r3,-12(fp)
     b7c:	e0bff817 	ldw	r2,-32(fp)
     b80:	1885c83a 	sub	r2,r3,r2
     b84:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b88:	e0fff617 	ldw	r3,-40(fp)
     b8c:	e0bff817 	ldw	r2,-32(fp)
     b90:	1885883a 	add	r2,r3,r2
     b94:	10c1ffcc 	andi	r3,r2,2047
     b98:	e0bffb17 	ldw	r2,-20(fp)
     b9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     ba0:	e0bffd17 	ldw	r2,-12(fp)
     ba4:	10800048 	cmpgei	r2,r2,1
     ba8:	103fcc1e 	bne	r2,zero,adc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
     bac:	e0fffa17 	ldw	r3,-24(fp)
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	1880141e 	bne	r3,r2,c08 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
     bb8:	e0bffe17 	ldw	r2,-8(fp)
     bbc:	1090000c 	andi	r2,r2,16384
     bc0:	1004c03a 	cmpne	r2,r2,zero
     bc4:	1000101e 	bne	r2,zero,c08 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
     bc8:	e0bffb17 	ldw	r2,-20(fp)
     bcc:	10c00a17 	ldw	r3,40(r2)
     bd0:	e0bff717 	ldw	r2,-36(fp)
     bd4:	1880051e 	bne	r3,r2,bec <altera_avalon_jtag_uart_read+0x13c>
     bd8:	e0bffb17 	ldw	r2,-20(fp)
     bdc:	10c00917 	ldw	r3,36(r2)
     be0:	e0bffb17 	ldw	r2,-20(fp)
     be4:	10800117 	ldw	r2,4(r2)
     be8:	18bff736 	bltu	r3,r2,bc8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
     bec:	e0bffb17 	ldw	r2,-20(fp)
     bf0:	10c00a17 	ldw	r3,40(r2)
     bf4:	e0bff717 	ldw	r2,-36(fp)
     bf8:	18800326 	beq	r3,r2,c08 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     bfc:	e0bffd17 	ldw	r2,-12(fp)
     c00:	10800048 	cmpgei	r2,r2,1
     c04:	103fb51e 	bne	r2,zero,adc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
     c08:	e0fffa17 	ldw	r3,-24(fp)
     c0c:	e0bffc17 	ldw	r2,-16(fp)
     c10:	18801926 	beq	r3,r2,c78 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     c14:	0005303a 	rdctl	r2,status
     c18:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     c1c:	e0fff517 	ldw	r3,-44(fp)
     c20:	00bfff84 	movi	r2,-2
     c24:	1884703a 	and	r2,r3,r2
     c28:	1001703a 	wrctl	status,r2
  
  return context;
     c2c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
     c30:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     c34:	e0bffb17 	ldw	r2,-20(fp)
     c38:	10800817 	ldw	r2,32(r2)
     c3c:	10c00054 	ori	r3,r2,1
     c40:	e0bffb17 	ldw	r2,-20(fp)
     c44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     c48:	e0bffb17 	ldw	r2,-20(fp)
     c4c:	10800017 	ldw	r2,0(r2)
     c50:	11000104 	addi	r4,r2,4
     c54:	e0bffb17 	ldw	r2,-20(fp)
     c58:	10800817 	ldw	r2,32(r2)
     c5c:	1007883a 	mov	r3,r2
     c60:	2005883a 	mov	r2,r4
     c64:	10c00035 	stwio	r3,0(r2)
     c68:	e0bff917 	ldw	r2,-28(fp)
     c6c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     c70:	e0bff417 	ldw	r2,-48(fp)
     c74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
     c78:	e0fffa17 	ldw	r3,-24(fp)
     c7c:	e0bffc17 	ldw	r2,-16(fp)
     c80:	18800526 	beq	r3,r2,c98 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
     c84:	e0fffa17 	ldw	r3,-24(fp)
     c88:	e0bffc17 	ldw	r2,-16(fp)
     c8c:	1887c83a 	sub	r3,r3,r2
     c90:	e0ffff15 	stw	r3,-4(fp)
     c94:	00000906 	br	cbc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
     c98:	e0bffe17 	ldw	r2,-8(fp)
     c9c:	1090000c 	andi	r2,r2,16384
     ca0:	1005003a 	cmpeq	r2,r2,zero
     ca4:	1000031e 	bne	r2,zero,cb4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
     ca8:	00bffd44 	movi	r2,-11
     cac:	e0bfff15 	stw	r2,-4(fp)
     cb0:	00000206 	br	cbc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
     cb4:	00bffec4 	movi	r2,-5
     cb8:	e0bfff15 	stw	r2,-4(fp)
     cbc:	e0bfff17 	ldw	r2,-4(fp)
}
     cc0:	e037883a 	mov	sp,fp
     cc4:	dfc00117 	ldw	ra,4(sp)
     cc8:	df000017 	ldw	fp,0(sp)
     ccc:	dec00204 	addi	sp,sp,8
     cd0:	f800283a 	ret

00000cd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
     cd4:	defff204 	addi	sp,sp,-56
     cd8:	dfc00d15 	stw	ra,52(sp)
     cdc:	df000c15 	stw	fp,48(sp)
     ce0:	df000c04 	addi	fp,sp,48
     ce4:	e13ffb15 	stw	r4,-20(fp)
     ce8:	e17ffc15 	stw	r5,-16(fp)
     cec:	e1bffd15 	stw	r6,-12(fp)
     cf0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
     cf4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
     cf8:	e0bffc17 	ldw	r2,-16(fp)
     cfc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     d00:	00003a06 	br	dec <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
     d04:	e0bffb17 	ldw	r2,-20(fp)
     d08:	10800c17 	ldw	r2,48(r2)
     d0c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
     d10:	e0bffb17 	ldw	r2,-20(fp)
     d14:	10800d17 	ldw	r2,52(r2)
     d18:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
     d1c:	e0fffa17 	ldw	r3,-24(fp)
     d20:	e0bff917 	ldw	r2,-28(fp)
     d24:	1880062e 	bgeu	r3,r2,d40 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
     d28:	e0fff917 	ldw	r3,-28(fp)
     d2c:	e0bffa17 	ldw	r2,-24(fp)
     d30:	1885c83a 	sub	r2,r3,r2
     d34:	10bfffc4 	addi	r2,r2,-1
     d38:	e0bff815 	stw	r2,-32(fp)
     d3c:	00000c06 	br	d70 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
     d40:	e0bff917 	ldw	r2,-28(fp)
     d44:	1005003a 	cmpeq	r2,r2,zero
     d48:	1000051e 	bne	r2,zero,d60 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
     d4c:	00820004 	movi	r2,2048
     d50:	e0fffa17 	ldw	r3,-24(fp)
     d54:	10c5c83a 	sub	r2,r2,r3
     d58:	e0bff815 	stw	r2,-32(fp)
     d5c:	00000406 	br	d70 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
     d60:	0081ffc4 	movi	r2,2047
     d64:	e0fffa17 	ldw	r3,-24(fp)
     d68:	10c5c83a 	sub	r2,r2,r3
     d6c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
     d70:	e0bff817 	ldw	r2,-32(fp)
     d74:	1005003a 	cmpeq	r2,r2,zero
     d78:	10001f1e 	bne	r2,zero,df8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
     d7c:	e0fffd17 	ldw	r3,-12(fp)
     d80:	e0bff817 	ldw	r2,-32(fp)
     d84:	1880022e 	bgeu	r3,r2,d90 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
     d88:	e0bffd17 	ldw	r2,-12(fp)
     d8c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
     d90:	e0bffb17 	ldw	r2,-20(fp)
     d94:	10c20e04 	addi	r3,r2,2104
     d98:	e0bffa17 	ldw	r2,-24(fp)
     d9c:	1885883a 	add	r2,r3,r2
     da0:	e0fffc17 	ldw	r3,-16(fp)
     da4:	1009883a 	mov	r4,r2
     da8:	180b883a 	mov	r5,r3
     dac:	e1bff817 	ldw	r6,-32(fp)
     db0:	00021c40 	call	21c4 <memcpy>
      ptr   += n;
     db4:	e0fff817 	ldw	r3,-32(fp)
     db8:	e0bffc17 	ldw	r2,-16(fp)
     dbc:	10c5883a 	add	r2,r2,r3
     dc0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
     dc4:	e0fffd17 	ldw	r3,-12(fp)
     dc8:	e0bff817 	ldw	r2,-32(fp)
     dcc:	1885c83a 	sub	r2,r3,r2
     dd0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     dd4:	e0fffa17 	ldw	r3,-24(fp)
     dd8:	e0bff817 	ldw	r2,-32(fp)
     ddc:	1885883a 	add	r2,r3,r2
     de0:	10c1ffcc 	andi	r3,r2,2047
     de4:	e0bffb17 	ldw	r2,-20(fp)
     de8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
     dec:	e0bffd17 	ldw	r2,-12(fp)
     df0:	10800048 	cmpgei	r2,r2,1
     df4:	103fc31e 	bne	r2,zero,d04 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     df8:	0005303a 	rdctl	r2,status
     dfc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e00:	e0fff517 	ldw	r3,-44(fp)
     e04:	00bfff84 	movi	r2,-2
     e08:	1884703a 	and	r2,r3,r2
     e0c:	1001703a 	wrctl	status,r2
  
  return context;
     e10:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
     e14:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     e18:	e0bffb17 	ldw	r2,-20(fp)
     e1c:	10800817 	ldw	r2,32(r2)
     e20:	10c00094 	ori	r3,r2,2
     e24:	e0bffb17 	ldw	r2,-20(fp)
     e28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     e2c:	e0bffb17 	ldw	r2,-20(fp)
     e30:	10800017 	ldw	r2,0(r2)
     e34:	11000104 	addi	r4,r2,4
     e38:	e0bffb17 	ldw	r2,-20(fp)
     e3c:	10800817 	ldw	r2,32(r2)
     e40:	1007883a 	mov	r3,r2
     e44:	2005883a 	mov	r2,r4
     e48:	10c00035 	stwio	r3,0(r2)
     e4c:	e0bff717 	ldw	r2,-36(fp)
     e50:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     e54:	e0bff417 	ldw	r2,-48(fp)
     e58:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
     e5c:	e0bffd17 	ldw	r2,-12(fp)
     e60:	10800050 	cmplti	r2,r2,1
     e64:	1000111e 	bne	r2,zero,eac <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
     e68:	e0bffe17 	ldw	r2,-8(fp)
     e6c:	1090000c 	andi	r2,r2,16384
     e70:	1004c03a 	cmpne	r2,r2,zero
     e74:	1000101e 	bne	r2,zero,eb8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
     e78:	e0bffb17 	ldw	r2,-20(fp)
     e7c:	10c00d17 	ldw	r3,52(r2)
     e80:	e0bff917 	ldw	r2,-28(fp)
     e84:	1880051e 	bne	r3,r2,e9c <altera_avalon_jtag_uart_write+0x1c8>
     e88:	e0bffb17 	ldw	r2,-20(fp)
     e8c:	10c00917 	ldw	r3,36(r2)
     e90:	e0bffb17 	ldw	r2,-20(fp)
     e94:	10800117 	ldw	r2,4(r2)
     e98:	18bff736 	bltu	r3,r2,e78 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
     e9c:	e0bffb17 	ldw	r2,-20(fp)
     ea0:	10c00d17 	ldw	r3,52(r2)
     ea4:	e0bff917 	ldw	r2,-28(fp)
     ea8:	18800326 	beq	r3,r2,eb8 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
     eac:	e0bffd17 	ldw	r2,-12(fp)
     eb0:	10800048 	cmpgei	r2,r2,1
     eb4:	103fcd1e 	bne	r2,zero,dec <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
     eb8:	e0fffc17 	ldw	r3,-16(fp)
     ebc:	e0bff617 	ldw	r2,-40(fp)
     ec0:	18800526 	beq	r3,r2,ed8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
     ec4:	e0fffc17 	ldw	r3,-16(fp)
     ec8:	e0bff617 	ldw	r2,-40(fp)
     ecc:	1887c83a 	sub	r3,r3,r2
     ed0:	e0ffff15 	stw	r3,-4(fp)
     ed4:	00000906 	br	efc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
     ed8:	e0bffe17 	ldw	r2,-8(fp)
     edc:	1090000c 	andi	r2,r2,16384
     ee0:	1005003a 	cmpeq	r2,r2,zero
     ee4:	1000031e 	bne	r2,zero,ef4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
     ee8:	00bffd44 	movi	r2,-11
     eec:	e0bfff15 	stw	r2,-4(fp)
     ef0:	00000206 	br	efc <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
     ef4:	00bffec4 	movi	r2,-5
     ef8:	e0bfff15 	stw	r2,-4(fp)
     efc:	e0bfff17 	ldw	r2,-4(fp)
}
     f00:	e037883a 	mov	sp,fp
     f04:	dfc00117 	ldw	ra,4(sp)
     f08:	df000017 	ldw	fp,0(sp)
     f0c:	dec00204 	addi	sp,sp,8
     f10:	f800283a 	ret

00000f14 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
     f14:	defffa04 	addi	sp,sp,-24
     f18:	dfc00515 	stw	ra,20(sp)
     f1c:	df000415 	stw	fp,16(sp)
     f20:	df000404 	addi	fp,sp,16
     f24:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
     f28:	e0bfff17 	ldw	r2,-4(fp)
     f2c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
     f30:	e0bfff17 	ldw	r2,-4(fp)
     f34:	10800104 	addi	r2,r2,4
     f38:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     f3c:	0005303a 	rdctl	r2,status
     f40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     f44:	e0fffd17 	ldw	r3,-12(fp)
     f48:	00bfff84 	movi	r2,-2
     f4c:	1884703a 	and	r2,r3,r2
     f50:	1001703a 	wrctl	status,r2
  
  return context;
     f54:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
     f58:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
     f5c:	0001cdc0 	call	1cdc <alt_tick>
     f60:	e0bffe17 	ldw	r2,-8(fp)
     f64:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     f68:	e0bffc17 	ldw	r2,-16(fp)
     f6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
     f70:	e037883a 	mov	sp,fp
     f74:	dfc00117 	ldw	ra,4(sp)
     f78:	df000017 	ldw	fp,0(sp)
     f7c:	dec00204 	addi	sp,sp,8
     f80:	f800283a 	ret

00000f84 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
     f84:	defff804 	addi	sp,sp,-32
     f88:	dfc00715 	stw	ra,28(sp)
     f8c:	df000615 	stw	fp,24(sp)
     f90:	df000604 	addi	fp,sp,24
     f94:	e13ffc15 	stw	r4,-16(fp)
     f98:	e17ffd15 	stw	r5,-12(fp)
     f9c:	e1bffe15 	stw	r6,-8(fp)
     fa0:	e1ffff15 	stw	r7,-4(fp)
     fa4:	e0bfff17 	ldw	r2,-4(fp)
     fa8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
     fac:	00800034 	movhi	r2,0
     fb0:	1094b504 	addi	r2,r2,21204
     fb4:	10800017 	ldw	r2,0(r2)
     fb8:	1004c03a 	cmpne	r2,r2,zero
     fbc:	1000041e 	bne	r2,zero,fd0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
     fc0:	00c00034 	movhi	r3,0
     fc4:	18d4b504 	addi	r3,r3,21204
     fc8:	e0bffb17 	ldw	r2,-20(fp)
     fcc:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	10800104 	addi	r2,r2,4
     fd8:	1007883a 	mov	r3,r2
     fdc:	008001c4 	movi	r2,7
     fe0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
     fe4:	d8000015 	stw	zero,0(sp)
     fe8:	e13ffd17 	ldw	r4,-12(fp)
     fec:	e17ffe17 	ldw	r5,-8(fp)
     ff0:	01800034 	movhi	r6,0
     ff4:	3183c504 	addi	r6,r6,3860
     ff8:	e1fffc17 	ldw	r7,-16(fp)
     ffc:	00015180 	call	1518 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1000:	e037883a 	mov	sp,fp
    1004:	dfc00117 	ldw	ra,4(sp)
    1008:	df000017 	ldw	fp,0(sp)
    100c:	dec00204 	addi	sp,sp,8
    1010:	f800283a 	ret

00001014 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1014:	defff404 	addi	sp,sp,-48
    1018:	df000b15 	stw	fp,44(sp)
    101c:	df000b04 	addi	fp,sp,44
    1020:	e13ffb15 	stw	r4,-20(fp)
    1024:	e17ffc15 	stw	r5,-16(fp)
    1028:	e1bffd15 	stw	r6,-12(fp)
    102c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1030:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1034:	00800034 	movhi	r2,0
    1038:	1094b504 	addi	r2,r2,21204
    103c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1040:	1005003a 	cmpeq	r2,r2,zero
    1044:	1000411e 	bne	r2,zero,114c <alt_alarm_start+0x138>
  {
    if (alarm)
    1048:	e0bffb17 	ldw	r2,-20(fp)
    104c:	1005003a 	cmpeq	r2,r2,zero
    1050:	10003b1e 	bne	r2,zero,1140 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    1054:	e0fffb17 	ldw	r3,-20(fp)
    1058:	e0bffd17 	ldw	r2,-12(fp)
    105c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    1060:	e0fffb17 	ldw	r3,-20(fp)
    1064:	e0bffe17 	ldw	r2,-8(fp)
    1068:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    106c:	0005303a 	rdctl	r2,status
    1070:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1074:	e0fff817 	ldw	r3,-32(fp)
    1078:	00bfff84 	movi	r2,-2
    107c:	1884703a 	and	r2,r3,r2
    1080:	1001703a 	wrctl	status,r2
  
  return context;
    1084:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1088:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    108c:	00800034 	movhi	r2,0
    1090:	1094b604 	addi	r2,r2,21208
    1094:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1098:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    109c:	e0fffc17 	ldw	r3,-16(fp)
    10a0:	e0bff917 	ldw	r2,-28(fp)
    10a4:	1885883a 	add	r2,r3,r2
    10a8:	10c00044 	addi	r3,r2,1
    10ac:	e0bffb17 	ldw	r2,-20(fp)
    10b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    10b4:	e0bffb17 	ldw	r2,-20(fp)
    10b8:	10c00217 	ldw	r3,8(r2)
    10bc:	e0bff917 	ldw	r2,-28(fp)
    10c0:	1880042e 	bgeu	r3,r2,10d4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    10c4:	e0fffb17 	ldw	r3,-20(fp)
    10c8:	00800044 	movi	r2,1
    10cc:	18800405 	stb	r2,16(r3)
    10d0:	00000206 	br	10dc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    10d4:	e0bffb17 	ldw	r2,-20(fp)
    10d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    10dc:	e0fffb17 	ldw	r3,-20(fp)
    10e0:	00800034 	movhi	r2,0
    10e4:	108f2004 	addi	r2,r2,15488
    10e8:	e0bff615 	stw	r2,-40(fp)
    10ec:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    10f0:	e0fff717 	ldw	r3,-36(fp)
    10f4:	e0bff617 	ldw	r2,-40(fp)
    10f8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    10fc:	e0bff617 	ldw	r2,-40(fp)
    1100:	10c00017 	ldw	r3,0(r2)
    1104:	e0bff717 	ldw	r2,-36(fp)
    1108:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    110c:	e0bff617 	ldw	r2,-40(fp)
    1110:	10c00017 	ldw	r3,0(r2)
    1114:	e0bff717 	ldw	r2,-36(fp)
    1118:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    111c:	e0fff617 	ldw	r3,-40(fp)
    1120:	e0bff717 	ldw	r2,-36(fp)
    1124:	18800015 	stw	r2,0(r3)
    1128:	e0bffa17 	ldw	r2,-24(fp)
    112c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1130:	e0bff517 	ldw	r2,-44(fp)
    1134:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1138:	e03fff15 	stw	zero,-4(fp)
    113c:	00000506 	br	1154 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    1140:	00bffa84 	movi	r2,-22
    1144:	e0bfff15 	stw	r2,-4(fp)
    1148:	00000206 	br	1154 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    114c:	00bfde84 	movi	r2,-134
    1150:	e0bfff15 	stw	r2,-4(fp)
    1154:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    1158:	e037883a 	mov	sp,fp
    115c:	df000017 	ldw	fp,0(sp)
    1160:	dec00104 	addi	sp,sp,4
    1164:	f800283a 	ret

00001168 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1168:	defff804 	addi	sp,sp,-32
    116c:	dfc00715 	stw	ra,28(sp)
    1170:	df000615 	stw	fp,24(sp)
    1174:	df000604 	addi	fp,sp,24
    1178:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    117c:	e0bffc17 	ldw	r2,-16(fp)
    1180:	1004803a 	cmplt	r2,r2,zero
    1184:	1000081e 	bne	r2,zero,11a8 <close+0x40>
    1188:	e0bffc17 	ldw	r2,-16(fp)
    118c:	10800324 	muli	r2,r2,12
    1190:	1007883a 	mov	r3,r2
    1194:	00800034 	movhi	r2,0
    1198:	108db904 	addi	r2,r2,14052
    119c:	1887883a 	add	r3,r3,r2
    11a0:	e0ffff15 	stw	r3,-4(fp)
    11a4:	00000106 	br	11ac <close+0x44>
    11a8:	e03fff15 	stw	zero,-4(fp)
    11ac:	e0bfff17 	ldw	r2,-4(fp)
    11b0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    11b4:	e0bffb17 	ldw	r2,-20(fp)
    11b8:	1005003a 	cmpeq	r2,r2,zero
    11bc:	10001d1e 	bne	r2,zero,1234 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    11c0:	e0bffb17 	ldw	r2,-20(fp)
    11c4:	10800017 	ldw	r2,0(r2)
    11c8:	10800417 	ldw	r2,16(r2)
    11cc:	1005003a 	cmpeq	r2,r2,zero
    11d0:	1000071e 	bne	r2,zero,11f0 <close+0x88>
    11d4:	e0bffb17 	ldw	r2,-20(fp)
    11d8:	10800017 	ldw	r2,0(r2)
    11dc:	10800417 	ldw	r2,16(r2)
    11e0:	e13ffb17 	ldw	r4,-20(fp)
    11e4:	103ee83a 	callr	r2
    11e8:	e0bffe15 	stw	r2,-8(fp)
    11ec:	00000106 	br	11f4 <close+0x8c>
    11f0:	e03ffe15 	stw	zero,-8(fp)
    11f4:	e0bffe17 	ldw	r2,-8(fp)
    11f8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    11fc:	e13ffc17 	ldw	r4,-16(fp)
    1200:	0001be40 	call	1be4 <alt_release_fd>
    if (rval < 0)
    1204:	e0bffa17 	ldw	r2,-24(fp)
    1208:	1004403a 	cmpge	r2,r2,zero
    120c:	1000071e 	bne	r2,zero,122c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    1210:	00012640 	call	1264 <alt_get_errno>
    1214:	e0fffa17 	ldw	r3,-24(fp)
    1218:	00c7c83a 	sub	r3,zero,r3
    121c:	10c00015 	stw	r3,0(r2)
      return -1;
    1220:	00bfffc4 	movi	r2,-1
    1224:	e0bffd15 	stw	r2,-12(fp)
    1228:	00000806 	br	124c <close+0xe4>
    }
    return 0;
    122c:	e03ffd15 	stw	zero,-12(fp)
    1230:	00000606 	br	124c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1234:	00012640 	call	1264 <alt_get_errno>
    1238:	1007883a 	mov	r3,r2
    123c:	00801444 	movi	r2,81
    1240:	18800015 	stw	r2,0(r3)
    return -1;
    1244:	00bfffc4 	movi	r2,-1
    1248:	e0bffd15 	stw	r2,-12(fp)
    124c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1250:	e037883a 	mov	sp,fp
    1254:	dfc00117 	ldw	ra,4(sp)
    1258:	df000017 	ldw	fp,0(sp)
    125c:	dec00204 	addi	sp,sp,8
    1260:	f800283a 	ret

00001264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1264:	defffd04 	addi	sp,sp,-12
    1268:	dfc00215 	stw	ra,8(sp)
    126c:	df000115 	stw	fp,4(sp)
    1270:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1274:	00800034 	movhi	r2,0
    1278:	108f1e04 	addi	r2,r2,15480
    127c:	10800017 	ldw	r2,0(r2)
    1280:	1005003a 	cmpeq	r2,r2,zero
    1284:	1000061e 	bne	r2,zero,12a0 <alt_get_errno+0x3c>
    1288:	00800034 	movhi	r2,0
    128c:	108f1e04 	addi	r2,r2,15480
    1290:	10800017 	ldw	r2,0(r2)
    1294:	103ee83a 	callr	r2
    1298:	e0bfff15 	stw	r2,-4(fp)
    129c:	00000306 	br	12ac <alt_get_errno+0x48>
    12a0:	00800034 	movhi	r2,0
    12a4:	1094b704 	addi	r2,r2,21212
    12a8:	e0bfff15 	stw	r2,-4(fp)
    12ac:	e0bfff17 	ldw	r2,-4(fp)
}
    12b0:	e037883a 	mov	sp,fp
    12b4:	dfc00117 	ldw	ra,4(sp)
    12b8:	df000017 	ldw	fp,0(sp)
    12bc:	dec00204 	addi	sp,sp,8
    12c0:	f800283a 	ret

000012c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    12c4:	deffff04 	addi	sp,sp,-4
    12c8:	df000015 	stw	fp,0(sp)
    12cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    12d0:	e037883a 	mov	sp,fp
    12d4:	df000017 	ldw	fp,0(sp)
    12d8:	dec00104 	addi	sp,sp,4
    12dc:	f800283a 	ret

000012e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    12e0:	defffc04 	addi	sp,sp,-16
    12e4:	df000315 	stw	fp,12(sp)
    12e8:	df000304 	addi	fp,sp,12
    12ec:	e13ffd15 	stw	r4,-12(fp)
    12f0:	e17ffe15 	stw	r5,-8(fp)
    12f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    12f8:	e0bfff17 	ldw	r2,-4(fp)
}
    12fc:	e037883a 	mov	sp,fp
    1300:	df000017 	ldw	fp,0(sp)
    1304:	dec00104 	addi	sp,sp,4
    1308:	f800283a 	ret

0000130c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    130c:	defff904 	addi	sp,sp,-28
    1310:	dfc00615 	stw	ra,24(sp)
    1314:	df000515 	stw	fp,20(sp)
    1318:	df000504 	addi	fp,sp,20
    131c:	e13ffd15 	stw	r4,-12(fp)
    1320:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1324:	e0bffd17 	ldw	r2,-12(fp)
    1328:	1005003a 	cmpeq	r2,r2,zero
    132c:	1000041e 	bne	r2,zero,1340 <alt_dev_llist_insert+0x34>
    1330:	e0bffd17 	ldw	r2,-12(fp)
    1334:	10800217 	ldw	r2,8(r2)
    1338:	1004c03a 	cmpne	r2,r2,zero
    133c:	1000071e 	bne	r2,zero,135c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    1340:	00013c00 	call	13c0 <alt_get_errno>
    1344:	1007883a 	mov	r3,r2
    1348:	00800584 	movi	r2,22
    134c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1350:	00bffa84 	movi	r2,-22
    1354:	e0bfff15 	stw	r2,-4(fp)
    1358:	00001306 	br	13a8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    135c:	e0fffd17 	ldw	r3,-12(fp)
    1360:	e0bffe17 	ldw	r2,-8(fp)
    1364:	e0bffb15 	stw	r2,-20(fp)
    1368:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    136c:	e0fffc17 	ldw	r3,-16(fp)
    1370:	e0bffb17 	ldw	r2,-20(fp)
    1374:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1378:	e0bffb17 	ldw	r2,-20(fp)
    137c:	10c00017 	ldw	r3,0(r2)
    1380:	e0bffc17 	ldw	r2,-16(fp)
    1384:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1388:	e0bffb17 	ldw	r2,-20(fp)
    138c:	10c00017 	ldw	r3,0(r2)
    1390:	e0bffc17 	ldw	r2,-16(fp)
    1394:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1398:	e0fffb17 	ldw	r3,-20(fp)
    139c:	e0bffc17 	ldw	r2,-16(fp)
    13a0:	18800015 	stw	r2,0(r3)

  return 0;  
    13a4:	e03fff15 	stw	zero,-4(fp)
    13a8:	e0bfff17 	ldw	r2,-4(fp)
}
    13ac:	e037883a 	mov	sp,fp
    13b0:	dfc00117 	ldw	ra,4(sp)
    13b4:	df000017 	ldw	fp,0(sp)
    13b8:	dec00204 	addi	sp,sp,8
    13bc:	f800283a 	ret

000013c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    13c0:	defffd04 	addi	sp,sp,-12
    13c4:	dfc00215 	stw	ra,8(sp)
    13c8:	df000115 	stw	fp,4(sp)
    13cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    13d0:	00800034 	movhi	r2,0
    13d4:	108f1e04 	addi	r2,r2,15480
    13d8:	10800017 	ldw	r2,0(r2)
    13dc:	1005003a 	cmpeq	r2,r2,zero
    13e0:	1000061e 	bne	r2,zero,13fc <alt_get_errno+0x3c>
    13e4:	00800034 	movhi	r2,0
    13e8:	108f1e04 	addi	r2,r2,15480
    13ec:	10800017 	ldw	r2,0(r2)
    13f0:	103ee83a 	callr	r2
    13f4:	e0bfff15 	stw	r2,-4(fp)
    13f8:	00000306 	br	1408 <alt_get_errno+0x48>
    13fc:	00800034 	movhi	r2,0
    1400:	1094b704 	addi	r2,r2,21212
    1404:	e0bfff15 	stw	r2,-4(fp)
    1408:	e0bfff17 	ldw	r2,-4(fp)
}
    140c:	e037883a 	mov	sp,fp
    1410:	dfc00117 	ldw	ra,4(sp)
    1414:	df000017 	ldw	fp,0(sp)
    1418:	dec00204 	addi	sp,sp,8
    141c:	f800283a 	ret

00001420 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1420:	defffd04 	addi	sp,sp,-12
    1424:	dfc00215 	stw	ra,8(sp)
    1428:	df000115 	stw	fp,4(sp)
    142c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1430:	00bfff04 	movi	r2,-4
    1434:	00c00034 	movhi	r3,0
    1438:	18c98904 	addi	r3,r3,9764
    143c:	1885883a 	add	r2,r3,r2
    1440:	e0bfff15 	stw	r2,-4(fp)
    1444:	00000606 	br	1460 <_do_ctors+0x40>
        (*ctor) (); 
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	10800017 	ldw	r2,0(r2)
    1450:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10bfff04 	addi	r2,r2,-4
    145c:	e0bfff15 	stw	r2,-4(fp)
    1460:	e0ffff17 	ldw	r3,-4(fp)
    1464:	00800034 	movhi	r2,0
    1468:	10898804 	addi	r2,r2,9760
    146c:	18bff62e 	bgeu	r3,r2,1448 <_do_ctors+0x28>
        (*ctor) (); 
}
    1470:	e037883a 	mov	sp,fp
    1474:	dfc00117 	ldw	ra,4(sp)
    1478:	df000017 	ldw	fp,0(sp)
    147c:	dec00204 	addi	sp,sp,8
    1480:	f800283a 	ret

00001484 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1484:	defffd04 	addi	sp,sp,-12
    1488:	dfc00215 	stw	ra,8(sp)
    148c:	df000115 	stw	fp,4(sp)
    1490:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1494:	00bfff04 	movi	r2,-4
    1498:	00c00034 	movhi	r3,0
    149c:	18c98904 	addi	r3,r3,9764
    14a0:	1885883a 	add	r2,r3,r2
    14a4:	e0bfff15 	stw	r2,-4(fp)
    14a8:	00000606 	br	14c4 <_do_dtors+0x40>
        (*dtor) (); 
    14ac:	e0bfff17 	ldw	r2,-4(fp)
    14b0:	10800017 	ldw	r2,0(r2)
    14b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    14b8:	e0bfff17 	ldw	r2,-4(fp)
    14bc:	10bfff04 	addi	r2,r2,-4
    14c0:	e0bfff15 	stw	r2,-4(fp)
    14c4:	e0ffff17 	ldw	r3,-4(fp)
    14c8:	00800034 	movhi	r2,0
    14cc:	10898904 	addi	r2,r2,9764
    14d0:	18bff62e 	bgeu	r3,r2,14ac <_do_dtors+0x28>
        (*dtor) (); 
}
    14d4:	e037883a 	mov	sp,fp
    14d8:	dfc00117 	ldw	ra,4(sp)
    14dc:	df000017 	ldw	fp,0(sp)
    14e0:	dec00204 	addi	sp,sp,8
    14e4:	f800283a 	ret

000014e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    14e8:	defffe04 	addi	sp,sp,-8
    14ec:	dfc00115 	stw	ra,4(sp)
    14f0:	df000015 	stw	fp,0(sp)
    14f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    14f8:	0009883a 	mov	r4,zero
    14fc:	01440004 	movi	r5,4096
    1500:	00020740 	call	2074 <alt_icache_flush>
#endif
}
    1504:	e037883a 	mov	sp,fp
    1508:	dfc00117 	ldw	ra,4(sp)
    150c:	df000017 	ldw	fp,0(sp)
    1510:	dec00204 	addi	sp,sp,8
    1514:	f800283a 	ret

00001518 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1518:	defff904 	addi	sp,sp,-28
    151c:	dfc00615 	stw	ra,24(sp)
    1520:	df000515 	stw	fp,20(sp)
    1524:	df000504 	addi	fp,sp,20
    1528:	e13ffc15 	stw	r4,-16(fp)
    152c:	e17ffd15 	stw	r5,-12(fp)
    1530:	e1bffe15 	stw	r6,-8(fp)
    1534:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1538:	e0800217 	ldw	r2,8(fp)
    153c:	d8800015 	stw	r2,0(sp)
    1540:	e13ffc17 	ldw	r4,-16(fp)
    1544:	e17ffd17 	ldw	r5,-12(fp)
    1548:	e1bffe17 	ldw	r6,-8(fp)
    154c:	e1ffff17 	ldw	r7,-4(fp)
    1550:	00016ec0 	call	16ec <alt_iic_isr_register>
}  
    1554:	e037883a 	mov	sp,fp
    1558:	dfc00117 	ldw	ra,4(sp)
    155c:	df000017 	ldw	fp,0(sp)
    1560:	dec00204 	addi	sp,sp,8
    1564:	f800283a 	ret

00001568 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1568:	defff904 	addi	sp,sp,-28
    156c:	df000615 	stw	fp,24(sp)
    1570:	df000604 	addi	fp,sp,24
    1574:	e13ffe15 	stw	r4,-8(fp)
    1578:	e17fff15 	stw	r5,-4(fp)
    157c:	e0bfff17 	ldw	r2,-4(fp)
    1580:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1584:	0005303a 	rdctl	r2,status
    1588:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    158c:	e0fffb17 	ldw	r3,-20(fp)
    1590:	00bfff84 	movi	r2,-2
    1594:	1884703a 	and	r2,r3,r2
    1598:	1001703a 	wrctl	status,r2
  
  return context;
    159c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    15a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    15a4:	e0fffc17 	ldw	r3,-16(fp)
    15a8:	00800044 	movi	r2,1
    15ac:	10c4983a 	sll	r2,r2,r3
    15b0:	1007883a 	mov	r3,r2
    15b4:	00800034 	movhi	r2,0
    15b8:	1094b404 	addi	r2,r2,21200
    15bc:	10800017 	ldw	r2,0(r2)
    15c0:	1886b03a 	or	r3,r3,r2
    15c4:	00800034 	movhi	r2,0
    15c8:	1094b404 	addi	r2,r2,21200
    15cc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    15d0:	00800034 	movhi	r2,0
    15d4:	1094b404 	addi	r2,r2,21200
    15d8:	10800017 	ldw	r2,0(r2)
    15dc:	100170fa 	wrctl	ienable,r2
    15e0:	e0bffd17 	ldw	r2,-12(fp)
    15e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15e8:	e0bffa17 	ldw	r2,-24(fp)
    15ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    15f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    15f4:	e037883a 	mov	sp,fp
    15f8:	df000017 	ldw	fp,0(sp)
    15fc:	dec00104 	addi	sp,sp,4
    1600:	f800283a 	ret

00001604 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1604:	defff904 	addi	sp,sp,-28
    1608:	df000615 	stw	fp,24(sp)
    160c:	df000604 	addi	fp,sp,24
    1610:	e13ffe15 	stw	r4,-8(fp)
    1614:	e17fff15 	stw	r5,-4(fp)
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1620:	0005303a 	rdctl	r2,status
    1624:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1628:	e0fffb17 	ldw	r3,-20(fp)
    162c:	00bfff84 	movi	r2,-2
    1630:	1884703a 	and	r2,r3,r2
    1634:	1001703a 	wrctl	status,r2
  
  return context;
    1638:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    163c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    1640:	e0fffc17 	ldw	r3,-16(fp)
    1644:	00800044 	movi	r2,1
    1648:	10c4983a 	sll	r2,r2,r3
    164c:	0084303a 	nor	r2,zero,r2
    1650:	1007883a 	mov	r3,r2
    1654:	00800034 	movhi	r2,0
    1658:	1094b404 	addi	r2,r2,21200
    165c:	10800017 	ldw	r2,0(r2)
    1660:	1886703a 	and	r3,r3,r2
    1664:	00800034 	movhi	r2,0
    1668:	1094b404 	addi	r2,r2,21200
    166c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1670:	00800034 	movhi	r2,0
    1674:	1094b404 	addi	r2,r2,21200
    1678:	10800017 	ldw	r2,0(r2)
    167c:	100170fa 	wrctl	ienable,r2
    1680:	e0bffd17 	ldw	r2,-12(fp)
    1684:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1688:	e0bffa17 	ldw	r2,-24(fp)
    168c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1690:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    1694:	e037883a 	mov	sp,fp
    1698:	df000017 	ldw	fp,0(sp)
    169c:	dec00104 	addi	sp,sp,4
    16a0:	f800283a 	ret

000016a4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    16a4:	defffc04 	addi	sp,sp,-16
    16a8:	df000315 	stw	fp,12(sp)
    16ac:	df000304 	addi	fp,sp,12
    16b0:	e13ffe15 	stw	r4,-8(fp)
    16b4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    16b8:	000530fa 	rdctl	r2,ienable
    16bc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    16c0:	e0ffff17 	ldw	r3,-4(fp)
    16c4:	00800044 	movi	r2,1
    16c8:	10c4983a 	sll	r2,r2,r3
    16cc:	1007883a 	mov	r3,r2
    16d0:	e0bffd17 	ldw	r2,-12(fp)
    16d4:	1884703a 	and	r2,r3,r2
    16d8:	1004c03a 	cmpne	r2,r2,zero
}
    16dc:	e037883a 	mov	sp,fp
    16e0:	df000017 	ldw	fp,0(sp)
    16e4:	dec00104 	addi	sp,sp,4
    16e8:	f800283a 	ret

000016ec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    16ec:	defff404 	addi	sp,sp,-48
    16f0:	dfc00b15 	stw	ra,44(sp)
    16f4:	df000a15 	stw	fp,40(sp)
    16f8:	df000a04 	addi	fp,sp,40
    16fc:	e13ffb15 	stw	r4,-20(fp)
    1700:	e17ffc15 	stw	r5,-16(fp)
    1704:	e1bffd15 	stw	r6,-12(fp)
    1708:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    170c:	00bffa84 	movi	r2,-22
    1710:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1714:	e0bffc17 	ldw	r2,-16(fp)
    1718:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    171c:	e0bff917 	ldw	r2,-28(fp)
    1720:	10800808 	cmpgei	r2,r2,32
    1724:	1000291e 	bne	r2,zero,17cc <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1728:	0005303a 	rdctl	r2,status
    172c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1730:	e0fff717 	ldw	r3,-36(fp)
    1734:	00bfff84 	movi	r2,-2
    1738:	1884703a 	and	r2,r3,r2
    173c:	1001703a 	wrctl	status,r2
  
  return context;
    1740:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1744:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    1748:	e0bff917 	ldw	r2,-28(fp)
    174c:	00c00034 	movhi	r3,0
    1750:	18d4b804 	addi	r3,r3,21216
    1754:	100490fa 	slli	r2,r2,3
    1758:	10c7883a 	add	r3,r2,r3
    175c:	e0bffd17 	ldw	r2,-12(fp)
    1760:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    1764:	e0bff917 	ldw	r2,-28(fp)
    1768:	00c00034 	movhi	r3,0
    176c:	18d4b804 	addi	r3,r3,21216
    1770:	100490fa 	slli	r2,r2,3
    1774:	10c5883a 	add	r2,r2,r3
    1778:	10c00104 	addi	r3,r2,4
    177c:	e0bffe17 	ldw	r2,-8(fp)
    1780:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1784:	e0bffd17 	ldw	r2,-12(fp)
    1788:	1005003a 	cmpeq	r2,r2,zero
    178c:	1000051e 	bne	r2,zero,17a4 <alt_iic_isr_register+0xb8>
    1790:	e17ff917 	ldw	r5,-28(fp)
    1794:	e13ffb17 	ldw	r4,-20(fp)
    1798:	00015680 	call	1568 <alt_ic_irq_enable>
    179c:	e0bfff15 	stw	r2,-4(fp)
    17a0:	00000406 	br	17b4 <alt_iic_isr_register+0xc8>
    17a4:	e17ff917 	ldw	r5,-28(fp)
    17a8:	e13ffb17 	ldw	r4,-20(fp)
    17ac:	00016040 	call	1604 <alt_ic_irq_disable>
    17b0:	e0bfff15 	stw	r2,-4(fp)
    17b4:	e0bfff17 	ldw	r2,-4(fp)
    17b8:	e0bffa15 	stw	r2,-24(fp)
    17bc:	e0bff817 	ldw	r2,-32(fp)
    17c0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17c4:	e0bff617 	ldw	r2,-40(fp)
    17c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    17cc:	e0bffa17 	ldw	r2,-24(fp)
}
    17d0:	e037883a 	mov	sp,fp
    17d4:	dfc00117 	ldw	ra,4(sp)
    17d8:	df000017 	ldw	fp,0(sp)
    17dc:	dec00204 	addi	sp,sp,8
    17e0:	f800283a 	ret

000017e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    17e4:	defff904 	addi	sp,sp,-28
    17e8:	dfc00615 	stw	ra,24(sp)
    17ec:	df000515 	stw	fp,20(sp)
    17f0:	df000504 	addi	fp,sp,20
    17f4:	e13ffc15 	stw	r4,-16(fp)
    17f8:	e17ffd15 	stw	r5,-12(fp)
    17fc:	e1bffe15 	stw	r6,-8(fp)
    1800:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1804:	e13ffd17 	ldw	r4,-12(fp)
    1808:	e17ffe17 	ldw	r5,-8(fp)
    180c:	e1bfff17 	ldw	r6,-4(fp)
    1810:	00019fc0 	call	19fc <open>
    1814:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1818:	e0bffb17 	ldw	r2,-20(fp)
    181c:	1004803a 	cmplt	r2,r2,zero
    1820:	10001c1e 	bne	r2,zero,1894 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    1824:	e0bffb17 	ldw	r2,-20(fp)
    1828:	00c00034 	movhi	r3,0
    182c:	18cdb904 	addi	r3,r3,14052
    1830:	10800324 	muli	r2,r2,12
    1834:	10c5883a 	add	r2,r2,r3
    1838:	10c00017 	ldw	r3,0(r2)
    183c:	e0bffc17 	ldw	r2,-16(fp)
    1840:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1844:	e0bffb17 	ldw	r2,-20(fp)
    1848:	00c00034 	movhi	r3,0
    184c:	18cdb904 	addi	r3,r3,14052
    1850:	10800324 	muli	r2,r2,12
    1854:	10c5883a 	add	r2,r2,r3
    1858:	10800104 	addi	r2,r2,4
    185c:	10c00017 	ldw	r3,0(r2)
    1860:	e0bffc17 	ldw	r2,-16(fp)
    1864:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1868:	e0bffb17 	ldw	r2,-20(fp)
    186c:	00c00034 	movhi	r3,0
    1870:	18cdb904 	addi	r3,r3,14052
    1874:	10800324 	muli	r2,r2,12
    1878:	10c5883a 	add	r2,r2,r3
    187c:	10800204 	addi	r2,r2,8
    1880:	10c00017 	ldw	r3,0(r2)
    1884:	e0bffc17 	ldw	r2,-16(fp)
    1888:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    188c:	e13ffb17 	ldw	r4,-20(fp)
    1890:	0001be40 	call	1be4 <alt_release_fd>
  }
} 
    1894:	e037883a 	mov	sp,fp
    1898:	dfc00117 	ldw	ra,4(sp)
    189c:	df000017 	ldw	fp,0(sp)
    18a0:	dec00204 	addi	sp,sp,8
    18a4:	f800283a 	ret

000018a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    18a8:	defffb04 	addi	sp,sp,-20
    18ac:	dfc00415 	stw	ra,16(sp)
    18b0:	df000315 	stw	fp,12(sp)
    18b4:	df000304 	addi	fp,sp,12
    18b8:	e13ffd15 	stw	r4,-12(fp)
    18bc:	e17ffe15 	stw	r5,-8(fp)
    18c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    18c4:	01000034 	movhi	r4,0
    18c8:	210dbc04 	addi	r4,r4,14064
    18cc:	e17ffd17 	ldw	r5,-12(fp)
    18d0:	01800044 	movi	r6,1
    18d4:	01c07fc4 	movi	r7,511
    18d8:	00017e40 	call	17e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    18dc:	01000034 	movhi	r4,0
    18e0:	210db904 	addi	r4,r4,14052
    18e4:	e17ffe17 	ldw	r5,-8(fp)
    18e8:	000d883a 	mov	r6,zero
    18ec:	01c07fc4 	movi	r7,511
    18f0:	00017e40 	call	17e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    18f4:	01000034 	movhi	r4,0
    18f8:	210dbf04 	addi	r4,r4,14076
    18fc:	e17fff17 	ldw	r5,-4(fp)
    1900:	01800044 	movi	r6,1
    1904:	01c07fc4 	movi	r7,511
    1908:	00017e40 	call	17e4 <alt_open_fd>
}  
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1920:	defffc04 	addi	sp,sp,-16
    1924:	df000315 	stw	fp,12(sp)
    1928:	df000304 	addi	fp,sp,12
    192c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1930:	e0bffe17 	ldw	r2,-8(fp)
    1934:	10800217 	ldw	r2,8(r2)
    1938:	10d00034 	orhi	r3,r2,16384
    193c:	e0bffe17 	ldw	r2,-8(fp)
    1940:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1944:	e03ffd15 	stw	zero,-12(fp)
    1948:	00002006 	br	19cc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    194c:	e0bffd17 	ldw	r2,-12(fp)
    1950:	00c00034 	movhi	r3,0
    1954:	18cdb904 	addi	r3,r3,14052
    1958:	10800324 	muli	r2,r2,12
    195c:	10c5883a 	add	r2,r2,r3
    1960:	10c00017 	ldw	r3,0(r2)
    1964:	e0bffe17 	ldw	r2,-8(fp)
    1968:	10800017 	ldw	r2,0(r2)
    196c:	1880141e 	bne	r3,r2,19c0 <alt_file_locked+0xa0>
    1970:	e0bffd17 	ldw	r2,-12(fp)
    1974:	00c00034 	movhi	r3,0
    1978:	18cdb904 	addi	r3,r3,14052
    197c:	10800324 	muli	r2,r2,12
    1980:	10c5883a 	add	r2,r2,r3
    1984:	10800204 	addi	r2,r2,8
    1988:	10800017 	ldw	r2,0(r2)
    198c:	1004403a 	cmpge	r2,r2,zero
    1990:	10000b1e 	bne	r2,zero,19c0 <alt_file_locked+0xa0>
    1994:	e0bffd17 	ldw	r2,-12(fp)
    1998:	10800324 	muli	r2,r2,12
    199c:	1007883a 	mov	r3,r2
    19a0:	00800034 	movhi	r2,0
    19a4:	108db904 	addi	r2,r2,14052
    19a8:	1887883a 	add	r3,r3,r2
    19ac:	e0bffe17 	ldw	r2,-8(fp)
    19b0:	18800326 	beq	r3,r2,19c0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    19b4:	00bffcc4 	movi	r2,-13
    19b8:	e0bfff15 	stw	r2,-4(fp)
    19bc:	00000a06 	br	19e8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    19c0:	e0bffd17 	ldw	r2,-12(fp)
    19c4:	10800044 	addi	r2,r2,1
    19c8:	e0bffd15 	stw	r2,-12(fp)
    19cc:	00800034 	movhi	r2,0
    19d0:	108f1d04 	addi	r2,r2,15476
    19d4:	10800017 	ldw	r2,0(r2)
    19d8:	1007883a 	mov	r3,r2
    19dc:	e0bffd17 	ldw	r2,-12(fp)
    19e0:	18bfda2e 	bgeu	r3,r2,194c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    19e4:	e03fff15 	stw	zero,-4(fp)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
}
    19ec:	e037883a 	mov	sp,fp
    19f0:	df000017 	ldw	fp,0(sp)
    19f4:	dec00104 	addi	sp,sp,4
    19f8:	f800283a 	ret

000019fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    19fc:	defff404 	addi	sp,sp,-48
    1a00:	dfc00b15 	stw	ra,44(sp)
    1a04:	df000a15 	stw	fp,40(sp)
    1a08:	df000a04 	addi	fp,sp,40
    1a0c:	e13ffb15 	stw	r4,-20(fp)
    1a10:	e17ffc15 	stw	r5,-16(fp)
    1a14:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1a18:	00bfffc4 	movi	r2,-1
    1a1c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    1a20:	00bffb44 	movi	r2,-19
    1a24:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    1a28:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1a2c:	e13ffb17 	ldw	r4,-20(fp)
    1a30:	01400034 	movhi	r5,0
    1a34:	294f1b04 	addi	r5,r5,15468
    1a38:	0001e080 	call	1e08 <alt_find_dev>
    1a3c:	e0bffa15 	stw	r2,-24(fp)
    1a40:	e0bffa17 	ldw	r2,-24(fp)
    1a44:	1004c03a 	cmpne	r2,r2,zero
    1a48:	1000051e 	bne	r2,zero,1a60 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1a4c:	e13ffb17 	ldw	r4,-20(fp)
    1a50:	0001e9c0 	call	1e9c <alt_find_file>
    1a54:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    1a58:	00800044 	movi	r2,1
    1a5c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1a60:	e0bffa17 	ldw	r2,-24(fp)
    1a64:	1005003a 	cmpeq	r2,r2,zero
    1a68:	1000301e 	bne	r2,zero,1b2c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1a6c:	e13ffa17 	ldw	r4,-24(fp)
    1a70:	0001fbc0 	call	1fbc <alt_get_fd>
    1a74:	e0bff815 	stw	r2,-32(fp)
    1a78:	e0bff817 	ldw	r2,-32(fp)
    1a7c:	1004403a 	cmpge	r2,r2,zero
    1a80:	1000031e 	bne	r2,zero,1a90 <open+0x94>
    {
      status = index;
    1a84:	e0bff817 	ldw	r2,-32(fp)
    1a88:	e0bff715 	stw	r2,-36(fp)
    1a8c:	00002906 	br	1b34 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    1a90:	e0bff817 	ldw	r2,-32(fp)
    1a94:	10800324 	muli	r2,r2,12
    1a98:	1007883a 	mov	r3,r2
    1a9c:	00800034 	movhi	r2,0
    1aa0:	108db904 	addi	r2,r2,14052
    1aa4:	1885883a 	add	r2,r3,r2
    1aa8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1aac:	e0fffc17 	ldw	r3,-16(fp)
    1ab0:	00900034 	movhi	r2,16384
    1ab4:	10bfffc4 	addi	r2,r2,-1
    1ab8:	1886703a 	and	r3,r3,r2
    1abc:	e0bff917 	ldw	r2,-28(fp)
    1ac0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1ac4:	e0bff617 	ldw	r2,-40(fp)
    1ac8:	1004c03a 	cmpne	r2,r2,zero
    1acc:	1000061e 	bne	r2,zero,1ae8 <open+0xec>
    1ad0:	e13ff917 	ldw	r4,-28(fp)
    1ad4:	00019200 	call	1920 <alt_file_locked>
    1ad8:	e0bff715 	stw	r2,-36(fp)
    1adc:	e0bff717 	ldw	r2,-36(fp)
    1ae0:	1004803a 	cmplt	r2,r2,zero
    1ae4:	1000131e 	bne	r2,zero,1b34 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1ae8:	e0bffa17 	ldw	r2,-24(fp)
    1aec:	10800317 	ldw	r2,12(r2)
    1af0:	1005003a 	cmpeq	r2,r2,zero
    1af4:	1000091e 	bne	r2,zero,1b1c <open+0x120>
    1af8:	e0bffa17 	ldw	r2,-24(fp)
    1afc:	10800317 	ldw	r2,12(r2)
    1b00:	e13ff917 	ldw	r4,-28(fp)
    1b04:	e17ffb17 	ldw	r5,-20(fp)
    1b08:	e1bffc17 	ldw	r6,-16(fp)
    1b0c:	e1fffd17 	ldw	r7,-12(fp)
    1b10:	103ee83a 	callr	r2
    1b14:	e0bfff15 	stw	r2,-4(fp)
    1b18:	00000106 	br	1b20 <open+0x124>
    1b1c:	e03fff15 	stw	zero,-4(fp)
    1b20:	e0bfff17 	ldw	r2,-4(fp)
    1b24:	e0bff715 	stw	r2,-36(fp)
    1b28:	00000206 	br	1b34 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1b2c:	00bffb44 	movi	r2,-19
    1b30:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1b34:	e0bff717 	ldw	r2,-36(fp)
    1b38:	1004403a 	cmpge	r2,r2,zero
    1b3c:	1000091e 	bne	r2,zero,1b64 <open+0x168>
  {
    alt_release_fd (index);  
    1b40:	e13ff817 	ldw	r4,-32(fp)
    1b44:	0001be40 	call	1be4 <alt_release_fd>
    ALT_ERRNO = -status;
    1b48:	0001b840 	call	1b84 <alt_get_errno>
    1b4c:	e0fff717 	ldw	r3,-36(fp)
    1b50:	00c7c83a 	sub	r3,zero,r3
    1b54:	10c00015 	stw	r3,0(r2)
    return -1;
    1b58:	00bfffc4 	movi	r2,-1
    1b5c:	e0bffe15 	stw	r2,-8(fp)
    1b60:	00000206 	br	1b6c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    1b64:	e0bff817 	ldw	r2,-32(fp)
    1b68:	e0bffe15 	stw	r2,-8(fp)
    1b6c:	e0bffe17 	ldw	r2,-8(fp)
}
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1b84:	defffd04 	addi	sp,sp,-12
    1b88:	dfc00215 	stw	ra,8(sp)
    1b8c:	df000115 	stw	fp,4(sp)
    1b90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1b94:	00800034 	movhi	r2,0
    1b98:	108f1e04 	addi	r2,r2,15480
    1b9c:	10800017 	ldw	r2,0(r2)
    1ba0:	1005003a 	cmpeq	r2,r2,zero
    1ba4:	1000061e 	bne	r2,zero,1bc0 <alt_get_errno+0x3c>
    1ba8:	00800034 	movhi	r2,0
    1bac:	108f1e04 	addi	r2,r2,15480
    1bb0:	10800017 	ldw	r2,0(r2)
    1bb4:	103ee83a 	callr	r2
    1bb8:	e0bfff15 	stw	r2,-4(fp)
    1bbc:	00000306 	br	1bcc <alt_get_errno+0x48>
    1bc0:	00800034 	movhi	r2,0
    1bc4:	1094b704 	addi	r2,r2,21212
    1bc8:	e0bfff15 	stw	r2,-4(fp)
    1bcc:	e0bfff17 	ldw	r2,-4(fp)
}
    1bd0:	e037883a 	mov	sp,fp
    1bd4:	dfc00117 	ldw	ra,4(sp)
    1bd8:	df000017 	ldw	fp,0(sp)
    1bdc:	dec00204 	addi	sp,sp,8
    1be0:	f800283a 	ret

00001be4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1be4:	defffe04 	addi	sp,sp,-8
    1be8:	df000115 	stw	fp,4(sp)
    1bec:	df000104 	addi	fp,sp,4
    1bf0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    1bf4:	e0bfff17 	ldw	r2,-4(fp)
    1bf8:	108000d0 	cmplti	r2,r2,3
    1bfc:	10000d1e 	bne	r2,zero,1c34 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    1c00:	e0bfff17 	ldw	r2,-4(fp)
    1c04:	00c00034 	movhi	r3,0
    1c08:	18cdb904 	addi	r3,r3,14052
    1c0c:	10800324 	muli	r2,r2,12
    1c10:	10c5883a 	add	r2,r2,r3
    1c14:	10800204 	addi	r2,r2,8
    1c18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    1c1c:	e0bfff17 	ldw	r2,-4(fp)
    1c20:	00c00034 	movhi	r3,0
    1c24:	18cdb904 	addi	r3,r3,14052
    1c28:	10800324 	muli	r2,r2,12
    1c2c:	10c5883a 	add	r2,r2,r3
    1c30:	10000015 	stw	zero,0(r2)
  }
}
    1c34:	e037883a 	mov	sp,fp
    1c38:	df000017 	ldw	fp,0(sp)
    1c3c:	dec00104 	addi	sp,sp,4
    1c40:	f800283a 	ret

00001c44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    1c44:	defffa04 	addi	sp,sp,-24
    1c48:	df000515 	stw	fp,20(sp)
    1c4c:	df000504 	addi	fp,sp,20
    1c50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c54:	0005303a 	rdctl	r2,status
    1c58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c5c:	e0fffd17 	ldw	r3,-12(fp)
    1c60:	00bfff84 	movi	r2,-2
    1c64:	1884703a 	and	r2,r3,r2
    1c68:	1001703a 	wrctl	status,r2
  
  return context;
    1c6c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    1c70:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    1c74:	e0bfff17 	ldw	r2,-4(fp)
    1c78:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    1c7c:	e0bffc17 	ldw	r2,-16(fp)
    1c80:	10c00017 	ldw	r3,0(r2)
    1c84:	e0bffc17 	ldw	r2,-16(fp)
    1c88:	10800117 	ldw	r2,4(r2)
    1c8c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    1c90:	e0bffc17 	ldw	r2,-16(fp)
    1c94:	10c00117 	ldw	r3,4(r2)
    1c98:	e0bffc17 	ldw	r2,-16(fp)
    1c9c:	10800017 	ldw	r2,0(r2)
    1ca0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    1ca4:	e0fffc17 	ldw	r3,-16(fp)
    1ca8:	e0bffc17 	ldw	r2,-16(fp)
    1cac:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    1cb0:	e0fffc17 	ldw	r3,-16(fp)
    1cb4:	e0bffc17 	ldw	r2,-16(fp)
    1cb8:	18800015 	stw	r2,0(r3)
    1cbc:	e0bffe17 	ldw	r2,-8(fp)
    1cc0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1cc4:	e0bffb17 	ldw	r2,-20(fp)
    1cc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    1ccc:	e037883a 	mov	sp,fp
    1cd0:	df000017 	ldw	fp,0(sp)
    1cd4:	dec00104 	addi	sp,sp,4
    1cd8:	f800283a 	ret

00001cdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    1cdc:	defffb04 	addi	sp,sp,-20
    1ce0:	dfc00415 	stw	ra,16(sp)
    1ce4:	df000315 	stw	fp,12(sp)
    1ce8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    1cec:	d0a00717 	ldw	r2,-32740(gp)
    1cf0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    1cf4:	d0a59d17 	ldw	r2,-27020(gp)
    1cf8:	10800044 	addi	r2,r2,1
    1cfc:	d0a59d15 	stw	r2,-27020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1d00:	00003106 	br	1dc8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    1d04:	e0bffe17 	ldw	r2,-8(fp)
    1d08:	10800017 	ldw	r2,0(r2)
    1d0c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    1d10:	e0bffe17 	ldw	r2,-8(fp)
    1d14:	10800403 	ldbu	r2,16(r2)
    1d18:	10803fcc 	andi	r2,r2,255
    1d1c:	1005003a 	cmpeq	r2,r2,zero
    1d20:	1000051e 	bne	r2,zero,1d38 <alt_tick+0x5c>
    1d24:	d0a59d17 	ldw	r2,-27020(gp)
    1d28:	1004c03a 	cmpne	r2,r2,zero
    1d2c:	1000021e 	bne	r2,zero,1d38 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    1d30:	e0bffe17 	ldw	r2,-8(fp)
    1d34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    1d38:	e0bffe17 	ldw	r2,-8(fp)
    1d3c:	10c00217 	ldw	r3,8(r2)
    1d40:	d0a59d17 	ldw	r2,-27020(gp)
    1d44:	10c01e36 	bltu	r2,r3,1dc0 <alt_tick+0xe4>
    1d48:	e0bffe17 	ldw	r2,-8(fp)
    1d4c:	10800403 	ldbu	r2,16(r2)
    1d50:	10803fcc 	andi	r2,r2,255
    1d54:	1004c03a 	cmpne	r2,r2,zero
    1d58:	1000191e 	bne	r2,zero,1dc0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    1d5c:	e0bffe17 	ldw	r2,-8(fp)
    1d60:	10c00317 	ldw	r3,12(r2)
    1d64:	e0bffe17 	ldw	r2,-8(fp)
    1d68:	11000517 	ldw	r4,20(r2)
    1d6c:	183ee83a 	callr	r3
    1d70:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    1d74:	e0bffd17 	ldw	r2,-12(fp)
    1d78:	1004c03a 	cmpne	r2,r2,zero
    1d7c:	1000031e 	bne	r2,zero,1d8c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    1d80:	e13ffe17 	ldw	r4,-8(fp)
    1d84:	0001c440 	call	1c44 <alt_alarm_stop>
    1d88:	00000d06 	br	1dc0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    1d8c:	e0bffe17 	ldw	r2,-8(fp)
    1d90:	10c00217 	ldw	r3,8(r2)
    1d94:	e0bffd17 	ldw	r2,-12(fp)
    1d98:	1887883a 	add	r3,r3,r2
    1d9c:	e0bffe17 	ldw	r2,-8(fp)
    1da0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    1da4:	e0bffe17 	ldw	r2,-8(fp)
    1da8:	10c00217 	ldw	r3,8(r2)
    1dac:	d0a59d17 	ldw	r2,-27020(gp)
    1db0:	1880032e 	bgeu	r3,r2,1dc0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    1db4:	e0fffe17 	ldw	r3,-8(fp)
    1db8:	00800044 	movi	r2,1
    1dbc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    1dc8:	d0e00704 	addi	r3,gp,-32740
    1dcc:	e0bffe17 	ldw	r2,-8(fp)
    1dd0:	10ffcc1e 	bne	r2,r3,1d04 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    1dd4:	e037883a 	mov	sp,fp
    1dd8:	dfc00117 	ldw	ra,4(sp)
    1ddc:	df000017 	ldw	fp,0(sp)
    1de0:	dec00204 	addi	sp,sp,8
    1de4:	f800283a 	ret

00001de8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    1de8:	deffff04 	addi	sp,sp,-4
    1dec:	df000015 	stw	fp,0(sp)
    1df0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    1df4:	000170fa 	wrctl	ienable,zero
}
    1df8:	e037883a 	mov	sp,fp
    1dfc:	df000017 	ldw	fp,0(sp)
    1e00:	dec00104 	addi	sp,sp,4
    1e04:	f800283a 	ret

00001e08 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1e08:	defff904 	addi	sp,sp,-28
    1e0c:	dfc00615 	stw	ra,24(sp)
    1e10:	df000515 	stw	fp,20(sp)
    1e14:	df000504 	addi	fp,sp,20
    1e18:	e13ffd15 	stw	r4,-12(fp)
    1e1c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1e20:	e0bffe17 	ldw	r2,-8(fp)
    1e24:	10800017 	ldw	r2,0(r2)
    1e28:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1e2c:	e13ffd17 	ldw	r4,-12(fp)
    1e30:	00022640 	call	2264 <strlen>
    1e34:	10800044 	addi	r2,r2,1
    1e38:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1e3c:	00000d06 	br	1e74 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1e40:	e0bffc17 	ldw	r2,-16(fp)
    1e44:	11000217 	ldw	r4,8(r2)
    1e48:	e1bffb17 	ldw	r6,-20(fp)
    1e4c:	e17ffd17 	ldw	r5,-12(fp)
    1e50:	00021500 	call	2150 <memcmp>
    1e54:	1004c03a 	cmpne	r2,r2,zero
    1e58:	1000031e 	bne	r2,zero,1e68 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1e5c:	e0bffc17 	ldw	r2,-16(fp)
    1e60:	e0bfff15 	stw	r2,-4(fp)
    1e64:	00000706 	br	1e84 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1e68:	e0bffc17 	ldw	r2,-16(fp)
    1e6c:	10800017 	ldw	r2,0(r2)
    1e70:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1e74:	e0fffe17 	ldw	r3,-8(fp)
    1e78:	e0bffc17 	ldw	r2,-16(fp)
    1e7c:	10fff01e 	bne	r2,r3,1e40 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1e80:	e03fff15 	stw	zero,-4(fp)
    1e84:	e0bfff17 	ldw	r2,-4(fp)
}
    1e88:	e037883a 	mov	sp,fp
    1e8c:	dfc00117 	ldw	ra,4(sp)
    1e90:	df000017 	ldw	fp,0(sp)
    1e94:	dec00204 	addi	sp,sp,8
    1e98:	f800283a 	ret

00001e9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    1e9c:	defffa04 	addi	sp,sp,-24
    1ea0:	dfc00515 	stw	ra,20(sp)
    1ea4:	df000415 	stw	fp,16(sp)
    1ea8:	df000404 	addi	fp,sp,16
    1eac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    1eb0:	00800034 	movhi	r2,0
    1eb4:	108f1904 	addi	r2,r2,15460
    1eb8:	10800017 	ldw	r2,0(r2)
    1ebc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1ec0:	00003306 	br	1f90 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    1ec4:	e0bffd17 	ldw	r2,-12(fp)
    1ec8:	11000217 	ldw	r4,8(r2)
    1ecc:	00022640 	call	2264 <strlen>
    1ed0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    1ed4:	e0bffd17 	ldw	r2,-12(fp)
    1ed8:	10c00217 	ldw	r3,8(r2)
    1edc:	e0bffc17 	ldw	r2,-16(fp)
    1ee0:	1885883a 	add	r2,r3,r2
    1ee4:	10bfffc4 	addi	r2,r2,-1
    1ee8:	10800003 	ldbu	r2,0(r2)
    1eec:	10803fcc 	andi	r2,r2,255
    1ef0:	1080201c 	xori	r2,r2,128
    1ef4:	10bfe004 	addi	r2,r2,-128
    1ef8:	10800bd8 	cmpnei	r2,r2,47
    1efc:	1000031e 	bne	r2,zero,1f0c <alt_find_file+0x70>
    {
      len -= 1;
    1f00:	e0bffc17 	ldw	r2,-16(fp)
    1f04:	10bfffc4 	addi	r2,r2,-1
    1f08:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    1f0c:	e0bffc17 	ldw	r2,-16(fp)
    1f10:	1007883a 	mov	r3,r2
    1f14:	e0bffe17 	ldw	r2,-8(fp)
    1f18:	1885883a 	add	r2,r3,r2
    1f1c:	10800003 	ldbu	r2,0(r2)
    1f20:	10803fcc 	andi	r2,r2,255
    1f24:	1080201c 	xori	r2,r2,128
    1f28:	10bfe004 	addi	r2,r2,-128
    1f2c:	10800be0 	cmpeqi	r2,r2,47
    1f30:	10000a1e 	bne	r2,zero,1f5c <alt_find_file+0xc0>
    1f34:	e0bffc17 	ldw	r2,-16(fp)
    1f38:	1007883a 	mov	r3,r2
    1f3c:	e0bffe17 	ldw	r2,-8(fp)
    1f40:	1885883a 	add	r2,r3,r2
    1f44:	10800003 	ldbu	r2,0(r2)
    1f48:	10803fcc 	andi	r2,r2,255
    1f4c:	1080201c 	xori	r2,r2,128
    1f50:	10bfe004 	addi	r2,r2,-128
    1f54:	1004c03a 	cmpne	r2,r2,zero
    1f58:	10000a1e 	bne	r2,zero,1f84 <alt_find_file+0xe8>
    1f5c:	e0bffd17 	ldw	r2,-12(fp)
    1f60:	11000217 	ldw	r4,8(r2)
    1f64:	e1bffc17 	ldw	r6,-16(fp)
    1f68:	e17ffe17 	ldw	r5,-8(fp)
    1f6c:	00021500 	call	2150 <memcmp>
    1f70:	1004c03a 	cmpne	r2,r2,zero
    1f74:	1000031e 	bne	r2,zero,1f84 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    1f78:	e0bffd17 	ldw	r2,-12(fp)
    1f7c:	e0bfff15 	stw	r2,-4(fp)
    1f80:	00000806 	br	1fa4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    1f84:	e0bffd17 	ldw	r2,-12(fp)
    1f88:	10800017 	ldw	r2,0(r2)
    1f8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    1f90:	00c00034 	movhi	r3,0
    1f94:	18cf1904 	addi	r3,r3,15460
    1f98:	e0bffd17 	ldw	r2,-12(fp)
    1f9c:	10ffc91e 	bne	r2,r3,1ec4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    1fa0:	e03fff15 	stw	zero,-4(fp)
    1fa4:	e0bfff17 	ldw	r2,-4(fp)
}
    1fa8:	e037883a 	mov	sp,fp
    1fac:	dfc00117 	ldw	ra,4(sp)
    1fb0:	df000017 	ldw	fp,0(sp)
    1fb4:	dec00204 	addi	sp,sp,8
    1fb8:	f800283a 	ret

00001fbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    1fbc:	defffc04 	addi	sp,sp,-16
    1fc0:	df000315 	stw	fp,12(sp)
    1fc4:	df000304 	addi	fp,sp,12
    1fc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    1fcc:	00bffa04 	movi	r2,-24
    1fd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    1fd4:	e03ffe15 	stw	zero,-8(fp)
    1fd8:	00001e06 	br	2054 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    1fdc:	e0bffe17 	ldw	r2,-8(fp)
    1fe0:	00c00034 	movhi	r3,0
    1fe4:	18cdb904 	addi	r3,r3,14052
    1fe8:	10800324 	muli	r2,r2,12
    1fec:	10c5883a 	add	r2,r2,r3
    1ff0:	10800017 	ldw	r2,0(r2)
    1ff4:	1004c03a 	cmpne	r2,r2,zero
    1ff8:	1000131e 	bne	r2,zero,2048 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    1ffc:	e0bffe17 	ldw	r2,-8(fp)
    2000:	00c00034 	movhi	r3,0
    2004:	18cdb904 	addi	r3,r3,14052
    2008:	10800324 	muli	r2,r2,12
    200c:	10c7883a 	add	r3,r2,r3
    2010:	e0bfff17 	ldw	r2,-4(fp)
    2014:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    2018:	00800034 	movhi	r2,0
    201c:	108f1d04 	addi	r2,r2,15476
    2020:	10c00017 	ldw	r3,0(r2)
    2024:	e0bffe17 	ldw	r2,-8(fp)
    2028:	1880040e 	bge	r3,r2,203c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    202c:	00c00034 	movhi	r3,0
    2030:	18cf1d04 	addi	r3,r3,15476
    2034:	e0bffe17 	ldw	r2,-8(fp)
    2038:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    203c:	e0bffe17 	ldw	r2,-8(fp)
    2040:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2044:	00000606 	br	2060 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2048:	e0bffe17 	ldw	r2,-8(fp)
    204c:	10800044 	addi	r2,r2,1
    2050:	e0bffe15 	stw	r2,-8(fp)
    2054:	e0bffe17 	ldw	r2,-8(fp)
    2058:	10800810 	cmplti	r2,r2,32
    205c:	103fdf1e 	bne	r2,zero,1fdc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2060:	e0bffd17 	ldw	r2,-12(fp)
}
    2064:	e037883a 	mov	sp,fp
    2068:	df000017 	ldw	fp,0(sp)
    206c:	dec00104 	addi	sp,sp,4
    2070:	f800283a 	ret

00002074 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    2074:	defffb04 	addi	sp,sp,-20
    2078:	df000415 	stw	fp,16(sp)
    207c:	df000404 	addi	fp,sp,16
    2080:	e13ffe15 	stw	r4,-8(fp)
    2084:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2088:	e0bfff17 	ldw	r2,-4(fp)
    208c:	10840070 	cmpltui	r2,r2,4097
    2090:	1000021e 	bne	r2,zero,209c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    2094:	00840004 	movi	r2,4096
    2098:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    209c:	e0fffe17 	ldw	r3,-8(fp)
    20a0:	e0bfff17 	ldw	r2,-4(fp)
    20a4:	1885883a 	add	r2,r3,r2
    20a8:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    20ac:	e0bffe17 	ldw	r2,-8(fp)
    20b0:	e0bffd15 	stw	r2,-12(fp)
    20b4:	00000506 	br	20cc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    20b8:	e0bffd17 	ldw	r2,-12(fp)
    20bc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    20c0:	e0bffd17 	ldw	r2,-12(fp)
    20c4:	10800804 	addi	r2,r2,32
    20c8:	e0bffd15 	stw	r2,-12(fp)
    20cc:	e0fffd17 	ldw	r3,-12(fp)
    20d0:	e0bffc17 	ldw	r2,-16(fp)
    20d4:	18bff836 	bltu	r3,r2,20b8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    20d8:	e0bffe17 	ldw	r2,-8(fp)
    20dc:	108007cc 	andi	r2,r2,31
    20e0:	1005003a 	cmpeq	r2,r2,zero
    20e4:	1000021e 	bne	r2,zero,20f0 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    20e8:	e0bffd17 	ldw	r2,-12(fp)
    20ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    20f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    20f4:	e037883a 	mov	sp,fp
    20f8:	df000017 	ldw	fp,0(sp)
    20fc:	dec00104 	addi	sp,sp,4
    2100:	f800283a 	ret

00002104 <atexit>:
    2104:	200b883a 	mov	r5,r4
    2108:	000d883a 	mov	r6,zero
    210c:	0009883a 	mov	r4,zero
    2110:	000f883a 	mov	r7,zero
    2114:	00022d81 	jmpi	22d8 <__register_exitproc>

00002118 <exit>:
    2118:	defffe04 	addi	sp,sp,-8
    211c:	000b883a 	mov	r5,zero
    2120:	dc000015 	stw	r16,0(sp)
    2124:	dfc00115 	stw	ra,4(sp)
    2128:	2021883a 	mov	r16,r4
    212c:	00024100 	call	2410 <__call_exitprocs>
    2130:	00800034 	movhi	r2,0
    2134:	108f2304 	addi	r2,r2,15500
    2138:	11000017 	ldw	r4,0(r2)
    213c:	20800f17 	ldw	r2,60(r4)
    2140:	10000126 	beq	r2,zero,2148 <exit+0x30>
    2144:	103ee83a 	callr	r2
    2148:	8009883a 	mov	r4,r16
    214c:	00026000 	call	2600 <_exit>

00002150 <memcmp>:
    2150:	00c000c4 	movi	r3,3
    2154:	1980032e 	bgeu	r3,r6,2164 <memcmp+0x14>
    2158:	2144b03a 	or	r2,r4,r5
    215c:	10c4703a 	and	r2,r2,r3
    2160:	10000f26 	beq	r2,zero,21a0 <memcmp+0x50>
    2164:	31ffffc4 	addi	r7,r6,-1
    2168:	3000061e 	bne	r6,zero,2184 <memcmp+0x34>
    216c:	00000a06 	br	2198 <memcmp+0x48>
    2170:	39ffffc4 	addi	r7,r7,-1
    2174:	00bfffc4 	movi	r2,-1
    2178:	21000044 	addi	r4,r4,1
    217c:	29400044 	addi	r5,r5,1
    2180:	38800526 	beq	r7,r2,2198 <memcmp+0x48>
    2184:	20c00003 	ldbu	r3,0(r4)
    2188:	28800003 	ldbu	r2,0(r5)
    218c:	18bff826 	beq	r3,r2,2170 <memcmp+0x20>
    2190:	1885c83a 	sub	r2,r3,r2
    2194:	f800283a 	ret
    2198:	0005883a 	mov	r2,zero
    219c:	f800283a 	ret
    21a0:	180f883a 	mov	r7,r3
    21a4:	20c00017 	ldw	r3,0(r4)
    21a8:	28800017 	ldw	r2,0(r5)
    21ac:	18bfed1e 	bne	r3,r2,2164 <memcmp+0x14>
    21b0:	31bfff04 	addi	r6,r6,-4
    21b4:	21000104 	addi	r4,r4,4
    21b8:	29400104 	addi	r5,r5,4
    21bc:	39bff936 	bltu	r7,r6,21a4 <memcmp+0x54>
    21c0:	003fe806 	br	2164 <memcmp+0x14>

000021c4 <memcpy>:
    21c4:	01c003c4 	movi	r7,15
    21c8:	2007883a 	mov	r3,r4
    21cc:	3980032e 	bgeu	r7,r6,21dc <memcpy+0x18>
    21d0:	2904b03a 	or	r2,r5,r4
    21d4:	108000cc 	andi	r2,r2,3
    21d8:	10000926 	beq	r2,zero,2200 <memcpy+0x3c>
    21dc:	30000626 	beq	r6,zero,21f8 <memcpy+0x34>
    21e0:	30cd883a 	add	r6,r6,r3
    21e4:	28800003 	ldbu	r2,0(r5)
    21e8:	29400044 	addi	r5,r5,1
    21ec:	18800005 	stb	r2,0(r3)
    21f0:	18c00044 	addi	r3,r3,1
    21f4:	30fffb1e 	bne	r6,r3,21e4 <memcpy+0x20>
    21f8:	2005883a 	mov	r2,r4
    21fc:	f800283a 	ret
    2200:	3811883a 	mov	r8,r7
    2204:	200f883a 	mov	r7,r4
    2208:	28c00017 	ldw	r3,0(r5)
    220c:	31bffc04 	addi	r6,r6,-16
    2210:	38c00015 	stw	r3,0(r7)
    2214:	28800117 	ldw	r2,4(r5)
    2218:	38800115 	stw	r2,4(r7)
    221c:	28c00217 	ldw	r3,8(r5)
    2220:	38c00215 	stw	r3,8(r7)
    2224:	28800317 	ldw	r2,12(r5)
    2228:	29400404 	addi	r5,r5,16
    222c:	38800315 	stw	r2,12(r7)
    2230:	39c00404 	addi	r7,r7,16
    2234:	41bff436 	bltu	r8,r6,2208 <memcpy+0x44>
    2238:	008000c4 	movi	r2,3
    223c:	1180072e 	bgeu	r2,r6,225c <memcpy+0x98>
    2240:	1007883a 	mov	r3,r2
    2244:	28800017 	ldw	r2,0(r5)
    2248:	31bfff04 	addi	r6,r6,-4
    224c:	29400104 	addi	r5,r5,4
    2250:	38800015 	stw	r2,0(r7)
    2254:	39c00104 	addi	r7,r7,4
    2258:	19bffa36 	bltu	r3,r6,2244 <memcpy+0x80>
    225c:	3807883a 	mov	r3,r7
    2260:	003fde06 	br	21dc <memcpy+0x18>

00002264 <strlen>:
    2264:	208000cc 	andi	r2,r4,3
    2268:	2011883a 	mov	r8,r4
    226c:	1000161e 	bne	r2,zero,22c8 <strlen+0x64>
    2270:	20c00017 	ldw	r3,0(r4)
    2274:	017fbff4 	movhi	r5,65279
    2278:	297fbfc4 	addi	r5,r5,-257
    227c:	01e02074 	movhi	r7,32897
    2280:	39e02004 	addi	r7,r7,-32640
    2284:	1945883a 	add	r2,r3,r5
    2288:	11c4703a 	and	r2,r2,r7
    228c:	00c6303a 	nor	r3,zero,r3
    2290:	1886703a 	and	r3,r3,r2
    2294:	18000c1e 	bne	r3,zero,22c8 <strlen+0x64>
    2298:	280d883a 	mov	r6,r5
    229c:	380b883a 	mov	r5,r7
    22a0:	21000104 	addi	r4,r4,4
    22a4:	20800017 	ldw	r2,0(r4)
    22a8:	1187883a 	add	r3,r2,r6
    22ac:	1946703a 	and	r3,r3,r5
    22b0:	0084303a 	nor	r2,zero,r2
    22b4:	10c4703a 	and	r2,r2,r3
    22b8:	103ff926 	beq	r2,zero,22a0 <strlen+0x3c>
    22bc:	20800007 	ldb	r2,0(r4)
    22c0:	10000326 	beq	r2,zero,22d0 <strlen+0x6c>
    22c4:	21000044 	addi	r4,r4,1
    22c8:	20800007 	ldb	r2,0(r4)
    22cc:	103ffd1e 	bne	r2,zero,22c4 <strlen+0x60>
    22d0:	2205c83a 	sub	r2,r4,r8
    22d4:	f800283a 	ret

000022d8 <__register_exitproc>:
    22d8:	defffa04 	addi	sp,sp,-24
    22dc:	00800034 	movhi	r2,0
    22e0:	108f2304 	addi	r2,r2,15500
    22e4:	dc000015 	stw	r16,0(sp)
    22e8:	14000017 	ldw	r16,0(r2)
    22ec:	dd000415 	stw	r20,16(sp)
    22f0:	2829883a 	mov	r20,r5
    22f4:	81405217 	ldw	r5,328(r16)
    22f8:	dcc00315 	stw	r19,12(sp)
    22fc:	dc800215 	stw	r18,8(sp)
    2300:	dc400115 	stw	r17,4(sp)
    2304:	dfc00515 	stw	ra,20(sp)
    2308:	2023883a 	mov	r17,r4
    230c:	3027883a 	mov	r19,r6
    2310:	3825883a 	mov	r18,r7
    2314:	28002526 	beq	r5,zero,23ac <__register_exitproc+0xd4>
    2318:	29000117 	ldw	r4,4(r5)
    231c:	008007c4 	movi	r2,31
    2320:	11002716 	blt	r2,r4,23c0 <__register_exitproc+0xe8>
    2324:	8800101e 	bne	r17,zero,2368 <__register_exitproc+0x90>
    2328:	2105883a 	add	r2,r4,r4
    232c:	1085883a 	add	r2,r2,r2
    2330:	20c00044 	addi	r3,r4,1
    2334:	1145883a 	add	r2,r2,r5
    2338:	0009883a 	mov	r4,zero
    233c:	15000215 	stw	r20,8(r2)
    2340:	28c00115 	stw	r3,4(r5)
    2344:	2005883a 	mov	r2,r4
    2348:	dfc00517 	ldw	ra,20(sp)
    234c:	dd000417 	ldw	r20,16(sp)
    2350:	dcc00317 	ldw	r19,12(sp)
    2354:	dc800217 	ldw	r18,8(sp)
    2358:	dc400117 	ldw	r17,4(sp)
    235c:	dc000017 	ldw	r16,0(sp)
    2360:	dec00604 	addi	sp,sp,24
    2364:	f800283a 	ret
    2368:	29802204 	addi	r6,r5,136
    236c:	00800044 	movi	r2,1
    2370:	110e983a 	sll	r7,r2,r4
    2374:	30c04017 	ldw	r3,256(r6)
    2378:	2105883a 	add	r2,r4,r4
    237c:	1085883a 	add	r2,r2,r2
    2380:	1185883a 	add	r2,r2,r6
    2384:	19c6b03a 	or	r3,r3,r7
    2388:	14802015 	stw	r18,128(r2)
    238c:	14c00015 	stw	r19,0(r2)
    2390:	00800084 	movi	r2,2
    2394:	30c04015 	stw	r3,256(r6)
    2398:	88bfe31e 	bne	r17,r2,2328 <__register_exitproc+0x50>
    239c:	30804117 	ldw	r2,260(r6)
    23a0:	11c4b03a 	or	r2,r2,r7
    23a4:	30804115 	stw	r2,260(r6)
    23a8:	003fdf06 	br	2328 <__register_exitproc+0x50>
    23ac:	00800034 	movhi	r2,0
    23b0:	1094f804 	addi	r2,r2,21472
    23b4:	100b883a 	mov	r5,r2
    23b8:	80805215 	stw	r2,328(r16)
    23bc:	003fd606 	br	2318 <__register_exitproc+0x40>
    23c0:	00800034 	movhi	r2,0
    23c4:	10800004 	addi	r2,r2,0
    23c8:	1000021e 	bne	r2,zero,23d4 <__register_exitproc+0xfc>
    23cc:	013fffc4 	movi	r4,-1
    23d0:	003fdc06 	br	2344 <__register_exitproc+0x6c>
    23d4:	01006404 	movi	r4,400
    23d8:	103ee83a 	callr	r2
    23dc:	1007883a 	mov	r3,r2
    23e0:	103ffa26 	beq	r2,zero,23cc <__register_exitproc+0xf4>
    23e4:	80805217 	ldw	r2,328(r16)
    23e8:	180b883a 	mov	r5,r3
    23ec:	18000115 	stw	zero,4(r3)
    23f0:	18800015 	stw	r2,0(r3)
    23f4:	80c05215 	stw	r3,328(r16)
    23f8:	18006215 	stw	zero,392(r3)
    23fc:	18006315 	stw	zero,396(r3)
    2400:	0009883a 	mov	r4,zero
    2404:	883fc826 	beq	r17,zero,2328 <__register_exitproc+0x50>
    2408:	003fd706 	br	2368 <__register_exitproc+0x90>

0000240c <register_fini>:
    240c:	f800283a 	ret

00002410 <__call_exitprocs>:
    2410:	00800034 	movhi	r2,0
    2414:	108f2304 	addi	r2,r2,15500
    2418:	10800017 	ldw	r2,0(r2)
    241c:	defff304 	addi	sp,sp,-52
    2420:	df000b15 	stw	fp,44(sp)
    2424:	d8800115 	stw	r2,4(sp)
    2428:	00800034 	movhi	r2,0
    242c:	10800004 	addi	r2,r2,0
    2430:	1005003a 	cmpeq	r2,r2,zero
    2434:	d8800215 	stw	r2,8(sp)
    2438:	d8800117 	ldw	r2,4(sp)
    243c:	dd400815 	stw	r21,32(sp)
    2440:	dd000715 	stw	r20,28(sp)
    2444:	10805204 	addi	r2,r2,328
    2448:	dfc00c15 	stw	ra,48(sp)
    244c:	ddc00a15 	stw	r23,40(sp)
    2450:	dd800915 	stw	r22,36(sp)
    2454:	dcc00615 	stw	r19,24(sp)
    2458:	dc800515 	stw	r18,20(sp)
    245c:	dc400415 	stw	r17,16(sp)
    2460:	dc000315 	stw	r16,12(sp)
    2464:	282b883a 	mov	r21,r5
    2468:	2039883a 	mov	fp,r4
    246c:	d8800015 	stw	r2,0(sp)
    2470:	2829003a 	cmpeq	r20,r5,zero
    2474:	d8800117 	ldw	r2,4(sp)
    2478:	14405217 	ldw	r17,328(r2)
    247c:	88001026 	beq	r17,zero,24c0 <__call_exitprocs+0xb0>
    2480:	ddc00017 	ldw	r23,0(sp)
    2484:	88800117 	ldw	r2,4(r17)
    2488:	8c802204 	addi	r18,r17,136
    248c:	143fffc4 	addi	r16,r2,-1
    2490:	80000916 	blt	r16,zero,24b8 <__call_exitprocs+0xa8>
    2494:	05bfffc4 	movi	r22,-1
    2498:	a000151e 	bne	r20,zero,24f0 <__call_exitprocs+0xe0>
    249c:	8409883a 	add	r4,r16,r16
    24a0:	2105883a 	add	r2,r4,r4
    24a4:	1485883a 	add	r2,r2,r18
    24a8:	10c02017 	ldw	r3,128(r2)
    24ac:	a8c01126 	beq	r21,r3,24f4 <__call_exitprocs+0xe4>
    24b0:	843fffc4 	addi	r16,r16,-1
    24b4:	85bff81e 	bne	r16,r22,2498 <__call_exitprocs+0x88>
    24b8:	d8800217 	ldw	r2,8(sp)
    24bc:	10003126 	beq	r2,zero,2584 <__call_exitprocs+0x174>
    24c0:	dfc00c17 	ldw	ra,48(sp)
    24c4:	df000b17 	ldw	fp,44(sp)
    24c8:	ddc00a17 	ldw	r23,40(sp)
    24cc:	dd800917 	ldw	r22,36(sp)
    24d0:	dd400817 	ldw	r21,32(sp)
    24d4:	dd000717 	ldw	r20,28(sp)
    24d8:	dcc00617 	ldw	r19,24(sp)
    24dc:	dc800517 	ldw	r18,20(sp)
    24e0:	dc400417 	ldw	r17,16(sp)
    24e4:	dc000317 	ldw	r16,12(sp)
    24e8:	dec00d04 	addi	sp,sp,52
    24ec:	f800283a 	ret
    24f0:	8409883a 	add	r4,r16,r16
    24f4:	88c00117 	ldw	r3,4(r17)
    24f8:	2105883a 	add	r2,r4,r4
    24fc:	1445883a 	add	r2,r2,r17
    2500:	18ffffc4 	addi	r3,r3,-1
    2504:	11800217 	ldw	r6,8(r2)
    2508:	1c001526 	beq	r3,r16,2560 <__call_exitprocs+0x150>
    250c:	10000215 	stw	zero,8(r2)
    2510:	303fe726 	beq	r6,zero,24b0 <__call_exitprocs+0xa0>
    2514:	00c00044 	movi	r3,1
    2518:	1c06983a 	sll	r3,r3,r16
    251c:	90804017 	ldw	r2,256(r18)
    2520:	8cc00117 	ldw	r19,4(r17)
    2524:	1884703a 	and	r2,r3,r2
    2528:	10001426 	beq	r2,zero,257c <__call_exitprocs+0x16c>
    252c:	90804117 	ldw	r2,260(r18)
    2530:	1884703a 	and	r2,r3,r2
    2534:	10000c1e 	bne	r2,zero,2568 <__call_exitprocs+0x158>
    2538:	2105883a 	add	r2,r4,r4
    253c:	1485883a 	add	r2,r2,r18
    2540:	11400017 	ldw	r5,0(r2)
    2544:	e009883a 	mov	r4,fp
    2548:	303ee83a 	callr	r6
    254c:	88800117 	ldw	r2,4(r17)
    2550:	98bfc81e 	bne	r19,r2,2474 <__call_exitprocs+0x64>
    2554:	b8800017 	ldw	r2,0(r23)
    2558:	147fd526 	beq	r2,r17,24b0 <__call_exitprocs+0xa0>
    255c:	003fc506 	br	2474 <__call_exitprocs+0x64>
    2560:	8c000115 	stw	r16,4(r17)
    2564:	003fea06 	br	2510 <__call_exitprocs+0x100>
    2568:	2105883a 	add	r2,r4,r4
    256c:	1485883a 	add	r2,r2,r18
    2570:	11000017 	ldw	r4,0(r2)
    2574:	303ee83a 	callr	r6
    2578:	003ff406 	br	254c <__call_exitprocs+0x13c>
    257c:	303ee83a 	callr	r6
    2580:	003ff206 	br	254c <__call_exitprocs+0x13c>
    2584:	88800117 	ldw	r2,4(r17)
    2588:	1000081e 	bne	r2,zero,25ac <__call_exitprocs+0x19c>
    258c:	89000017 	ldw	r4,0(r17)
    2590:	20000726 	beq	r4,zero,25b0 <__call_exitprocs+0x1a0>
    2594:	b9000015 	stw	r4,0(r23)
    2598:	8809883a 	mov	r4,r17
    259c:	00000000 	call	0 <__alt_mem_sdram>
    25a0:	bc400017 	ldw	r17,0(r23)
    25a4:	883fb71e 	bne	r17,zero,2484 <__call_exitprocs+0x74>
    25a8:	003fc506 	br	24c0 <__call_exitprocs+0xb0>
    25ac:	89000017 	ldw	r4,0(r17)
    25b0:	882f883a 	mov	r23,r17
    25b4:	2023883a 	mov	r17,r4
    25b8:	883fb21e 	bne	r17,zero,2484 <__call_exitprocs+0x74>
    25bc:	003fc006 	br	24c0 <__call_exitprocs+0xb0>

000025c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    25c0:	defffd04 	addi	sp,sp,-12
    25c4:	df000215 	stw	fp,8(sp)
    25c8:	df000204 	addi	fp,sp,8
    25cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    25d0:	e0bfff17 	ldw	r2,-4(fp)
    25d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    25d8:	e0bffe17 	ldw	r2,-8(fp)
    25dc:	1005003a 	cmpeq	r2,r2,zero
    25e0:	1000021e 	bne	r2,zero,25ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    25e4:	002af070 	cmpltui	zero,zero,43969
    25e8:	00000106 	br	25f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    25ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    25f0:	e037883a 	mov	sp,fp
    25f4:	df000017 	ldw	fp,0(sp)
    25f8:	dec00104 	addi	sp,sp,4
    25fc:	f800283a 	ret

00002600 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2600:	defffd04 	addi	sp,sp,-12
    2604:	dfc00215 	stw	ra,8(sp)
    2608:	df000115 	stw	fp,4(sp)
    260c:	df000104 	addi	fp,sp,4
    2610:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    2614:	e13fff17 	ldw	r4,-4(fp)
    2618:	00025c00 	call	25c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    261c:	003fff06 	br	261c <_exit+0x1c>
    2620:	0000240c 	andi	zero,zero,144
